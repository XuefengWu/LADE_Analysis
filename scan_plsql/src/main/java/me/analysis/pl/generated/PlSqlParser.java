package me.analysis.pl.generated;

// Generated from ./grammar/PlSql.g4 by ANTLR 4.5.3

import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.ATN;
import org.antlr.v4.runtime.atn.ATNDeserializer;
import org.antlr.v4.runtime.atn.ParserATNSimulator;
import org.antlr.v4.runtime.atn.PredictionContextCache;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.Utils;
import org.antlr.v4.runtime.tree.ParseTreeListener;
import org.antlr.v4.runtime.tree.ParseTreeVisitor;
import org.antlr.v4.runtime.tree.TerminalNode;

import java.util.List;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class PlSqlParser extends Parser {
    static { RuntimeMetaData.checkVersion("4.5.3", RuntimeMetaData.VERSION); }

    protected static final DFA[] _decisionToDFA;
    protected static final PredictionContextCache _sharedContextCache =
            new PredictionContextCache();
    public static final int
            T__0=1, PP_IF=2, PP_THEN=3, PP_ELSE=4, PP_ELSIF=5, PP_END=6, PP_ERROR=7,
            A_LETTER=8, ADD=9, AFTER=10, AGENT=11, AGGREGATE=12, ALL=13, ALTER=14,
            ANALYZE=15, AND=16, ANY=17, ARRAY=18, AS=19, ASC=20, ASSOCIATE=21, ASSOCIATION_OPERATOR=22,
            AT=23, ATTRIBUTE=24, AUDIT=25, AUTHID=26, AUTO=27, AUTOMATIC=28, AUTONOMOUS_TRANSACTION=29,
            BATCH=30, BEFORE=31, BEGIN=32, BETWEEN=33, BFILE=34, BINARY_DOUBLE=35,
            BINARY_FLOAT=36, BINARY_INTEGER=37, BLOB=38, BLOCK=39, BODY=40, BOOLEAN=41,
            BOTH=42, BREADTH=43, BULK=44, BY=45, BYTE=46, C_LETTER=47, CACHE=48, CALL=49,
            CANONICAL=50, CASCADE=51, CASE=52, CAST=53, CHAR=54, CHAR_CS=55, CHARACTER=56,
            CHECK=57, CHR=58, CLOB=59, CLOSE=60, CLUSTER=61, COLLECT=62, COLUMNS=63,
            COMMENT=64, COMMIT=65, COMMITTED=66, COMPATIBILITY=67, COMPILE=68, COMPOUND=69,
            CONNECT=70, CONNECT_BY_ROOT=71, CONSTANT=72, CONSTRAINT=73, CONSTRAINTS=74,
            CONSTRUCTOR=75, CONTENT=76, CONTEXT=77, CONTINUE=78, CONVERT=79, CORRUPT_XID=80,
            CORRUPT_XID_ALL=81, COST=82, COUNT=83, CREATE=84, CROSS=85, CUBE=86, CURRENT=87,
            CURRENT_USER=88, CURSOR=89, CUSTOMDATUM=90, CYCLE=91, DATA=92, DATABASE=93,
            DATE=94, DAY=95, DB_ROLE_CHANGE=96, DBTIMEZONE=97, DDL=98, DEBUG=99, DEC=100,
            DECIMAL=101, DECLARE=102, DECOMPOSE=103, DECREMENT=104, DEFAULT=105, DEFAULTS=106,
            DEFERRED=107, DEFINER=108, DELETE=109, DEPTH=110, DESC=111, DETERMINISTIC=112,
            DIMENSION=113, DISABLE=114, DISASSOCIATE=115, DISTINCT=116, DOCUMENT=117,
            DOUBLE=118, DROP=119, DSINTERVAL_UNCONSTRAINED=120, EACH=121, ELEMENT=122,
            ELSE=123, ELSIF=124, EMPTY=125, ENABLE=126, ENCODING=127, END=128, ENTITYESCAPING=129,
            ERRORS=130, ESCAPE=131, EXCEPT=132, EVALNAME=133, EXCEPTION=134, EXCEPTION_INIT=135,
            EXCEPTIONS=136, EXCLUDE=137, EXCLUSIVE=138, EXECUTE=139, EXISTS=140, EXIT=141,
            EXPLAIN=142, EXTERNAL=143, EXTEND=144, EXTRACT=145, FAILURE=146, FALSE=147,
            FETCH=148, FINAL=149, FIRST=150, FIRST_VALUE=151, FLOAT=152, FOLLOWING=153,
            FOLLOWS=154, FOR=155, FORALL=156, FORCE=157, FROM=158, FULL=159, FUNCTION=160,
            GOTO=161, GRANT=162, GROUP=163, GROUPING=164, HASH=165, HAVING=166, HIDE=167,
            HOUR=168, IF=169, IGNORE=170, IMMEDIATE=171, IN=172, INCLUDE=173, INCLUDING=174,
            INCREMENT=175, INDENT=176, INDEX=177, INDEXED=178, INDICATOR=179, INDICES=180,
            INFINITE=181, INLINE=182, INNER=183, INOUT=184, INSERT=185, INSTANTIABLE=186,
            INSTEAD=187, INT=188, INTEGER=189, INTERSECT=190, INTERVAL=191, INTO=192,
            INVALIDATE=193, IS=194, ISOLATION=195, ITERATE=196, JAVA=197, JOIN=198,
            KEEP=199, LANGUAGE=200, LAST=201, LAST_VALUE=202, LEADING=203, LEFT=204,
            LEVEL=205, LIBRARY=206, LIKE=207, LIKE2=208, LIKE4=209, LIKEC=210, LIMIT=211,
            LOCAL=212, LOCK=213, LOCKED=214, LOG=215, LOGOFF=216, LOGON=217, LONG=218,
            LOOP=219, MAIN=220, MAP=221, MATCHED=222, MAXVALUE=223, MEASURES=224,
            MEMBER=225, MERGE=226, MINUS=227, MINUTE=228, MINVALUE=229, MLSLABEL=230,
            MOD=231, MODE=232, MODEL=233, MODIFY=234, MONTH=235, MULTISET=236, NAME=237,
            NAN=238, NATURAL=239, NATURALN=240, NAV=241, NCHAR=242, NCHAR_CS=243,
            NCLOB=244, NESTED=245, NEW=246, NEXT=247, NO=248, NOAUDIT=249, NOCACHE=250,
            NOCOPY=251, NOCYCLE=252, NOENTITYESCAPING=253, NOMAXVALUE=254, NOMINVALUE=255,
            NONE=256, NOORDER=257, NOSCHEMACHECK=258, NOT=259, NOWAIT=260, NULL=261,
            NULLS=262, NUMBER=263, NUMERIC=264, NVARCHAR2=265, OBJECT=266, OF=267,
            OFF=268, OID=269, OLD=270, ON=271, ONLY=272, OPEN=273, OPTION=274, OR=275,
            ORADATA=276, ORDER=277, ORDINALITY=278, OSERROR=279, OUT=280, OUTER=281,
            OVER=282, OVERRIDING=283, PACKAGE=284, PARALLEL_ENABLE=285, PARAMETERS=286,
            PARENT=287, PARTITION=288, PASSING=289, PATH=290, PERCENT_ISOPEN=291,
            PERCENT_ROWTYPE=292, PERCENT_TYPE=293, PERCENT_FOUND=294, PERCENT_NOTFOUND=295,
            PERCENT_ROWCOUNT=296, PIPELINED=297, PIPE=298, PIVOT=299, PLAN=300, PLS_INTEGER=301,
            POSITIVE=302, POSITIVEN=303, PRAGMA=304, PRECEDING=305, PRECISION=306,
            PRESENT=307, PRIOR=308, PROCEDURE=309, RAISE=310, RANGE=311, RAW=312,
            READ=313, REAL=314, RECORD=315, REF=316, REFERENCE=317, REFERENCING=318,
            REJECT=319, RELIES_ON=320, RENAME=321, REPLACE=322, RESPECT=323, RESTRICT_REFERENCES=324,
            RESULT=325, RESULT_CACHE=326, RETURN=327, RETURNING=328, REUSE=329, REVERSE=330,
            REVOKE=331, RIGHT=332, ROLLBACK=333, ROLLUP=334, ROW=335, ROWID=336, ROWS=337,
            RULES=338, SAMPLE=339, SAVE=340, SAVEPOINT=341, SCHEMA=342, SCHEMACHECK=343,
            SCN=344, SEARCH=345, SECOND=346, SEED=347, SEGMENT=348, SELECT=349, SELF=350,
            SEQUENCE=351, SEQUENTIAL=352, SERIALIZABLE=353, SERIALLY_REUSABLE=354,
            SERVERERROR=355, SESSIONTIMEZONE=356, SET=357, SETS=358, SETTINGS=359,
            SHARE=360, SHOW=361, SHUTDOWN=362, SIBLINGS=363, SIGNTYPE=364, SIMPLE_INTEGER=365,
            SINGLE=366, SIZE=367, SKIP_=368, SMALLINT=369, SNAPSHOT=370, SOME=371,
            SPECIFICATION=372, SQLDATA=373, SQLERROR=374, SQL_PERCENT_ROWCOUNT=375,
            STANDALONE=376, START=377, STARTUP=378, STATEMENT=379, STATEMENT_ID=380,
            STATIC=381, STATISTICS=382, STRING=383, SUBMULTISET=384, SUBPARTITION=385,
            SUBSTITUTABLE=386, SUBTYPE=387, SUCCESS=388, SUSPEND=389, TABLE=390, THE=391,
            THEN=392, TIME=393, TIMESTAMP=394, TIMESTAMP_LTZ_UNCONSTRAINED=395, TIMESTAMP_TZ_UNCONSTRAINED=396,
            TIMESTAMP_UNCONSTRAINED=397, TIMEZONE_ABBR=398, TIMEZONE_HOUR=399, TIMEZONE_MINUTE=400,
            TIMEZONE_REGION=401, TO=402, TO_CHAR=403, TO_NUMBER=404, TRAILING=405,
            TRANSACTION=406, TRANSLATE=407, TREAT=408, TRIGGER=409, TRIM=410, TRUE=411,
            TRUNCATE=412, TYPE=413, UNBOUNDED=414, UNDER=415, UNION=416, UNIQUE=417,
            UNLIMITED=418, UNPIVOT=419, UNTIL=420, UPDATE=421, UPDATED=422, UPSERT=423,
            UROWID=424, USE=425, USING=426, VALIDATE=427, VALUE=428, VALUES=429, VARCHAR=430,
            VARCHAR2=431, VARIABLE=432, VARRAY=433, VARYING=434, VERSION=435, VERSIONS=436,
            WAIT=437, WARNING=438, WELLFORMED=439, WHEN=440, WHENEVER=441, WHERE=442,
            WHILE=443, WITH=444, WITHIN=445, WORK=446, WRITE=447, XML=448, XMLAGG=449,
            XMLATTRIBUTES=450, XMLCAST=451, XMLCOLATTVAL=452, XMLELEMENT=453, XMLEXISTS=454,
            XMLFOREST=455, XMLNAMESPACES=456, XMLPARSE=457, XMLPI=458, XMLQUERY=459,
            XMLROOT=460, XMLSERIALIZE=461, XMLTABLE=462, YEAR=463, YES=464, YMINTERVAL_UNCONSTRAINED=465,
            ZONE=466, PREDICTION=467, PREDICTION_BOUNDS=468, PREDICTION_COST=469,
            PREDICTION_DETAILS=470, PREDICTION_PROBABILITY=471, PREDICTION_SET=472,
            CUME_DIST=473, DENSE_RANK=474, LISTAGG=475, PERCENT_RANK=476, PERCENTILE_CONT=477,
            PERCENTILE_DISC=478, RANK=479, AVG=480, CORR=481, LAG=482, LEAD=483, MAX=484,
            MEDIAN=485, MIN=486, NTILE=487, RATIO_TO_REPORT=488, ROW_NUMBER=489, SUM=490,
            VARIANCE=491, REGR_=492, STDDEV=493, VAR_=494, COVAR_=495, PROMPT=496,
            NATIONAL_CHAR_STRING_LIT=497, BIT_STRING_LIT=498, HEX_STRING_LIT=499,
            DOUBLE_PERIOD=500, PERIOD=501, UNSIGNED_INTEGER=502, APPROXIMATE_NUM_LIT=503,
            CHAR_STRING=504, DELIMITED_ID=505, PERCENT=506, AMPERSAND=507, LEFT_PAREN=508,
            RIGHT_PAREN=509, DOUBLE_ASTERISK=510, ASTERISK=511, PLUS_SIGN=512, MINUS_SIGN=513,
            COMMA=514, SOLIDUS=515, AT_SIGN=516, ASSIGN_OP=517, BINDVAR=518, COLON=519,
            SEMICOLON=520, LESS_THAN_OR_EQUALS_OP=521, LESS_THAN_OP=522, GREATER_THAN_OR_EQUALS_OP=523,
            NOT_EQUAL_OP=524, CARRET_OPERATOR_PART=525, TILDE_OPERATOR_PART=526, EXCLAMATION_OPERATOR_PART=527,
            GREATER_THAN_OP=528, CONCATENATION_OP=529, VERTICAL_BAR=530, EQUALS_OP=531,
            LEFT_BRACKET=532, RIGHT_BRACKET=533, INTRODUCER=534, SPACES=535, SINGLE_LINE_COMMENT=536,
            MULTI_LINE_COMMENT=537, SQL92_RESERVED_ALL=538, SQL92_RESERVED_ALTER=539,
            SQL92_RESERVED_AND=540, SQL92_RESERVED_ANY=541, SQL92_RESERVED_AS=542,
            SQL92_RESERVED_ASC=543, SQL92_RESERVED_BEGIN=544, SQL92_RESERVED_BETWEEN=545,
            SQL92_RESERVED_BY=546, SQL92_RESERVED_CASE=547, SQL92_RESERVED_CHECK=548,
            PLSQL_RESERVED_CLUSTERS=549, PLSQL_RESERVED_COLAUTH=550, PLSQL_RESERVED_COMPRESS=551,
            SQL92_RESERVED_CONNECT=552, PLSQL_NON_RESERVED_CONNECT_BY_ROOT=553, PLSQL_RESERVED_CRASH=554,
            SQL92_RESERVED_CREATE=555, SQL92_RESERVED_CURRENT=556, SQL92_RESERVED_CURSOR=557,
            SQL92_RESERVED_DATE=558, SQL92_RESERVED_DECLARE=559, SQL92_RESERVED_DEFAULT=560,
            SQL92_RESERVED_DELETE=561, SQL92_RESERVED_DESC=562, SQL92_RESERVED_DISTINCT=563,
            SQL92_RESERVED_DROP=564, SQL92_RESERVED_ELSE=565, SQL92_RESERVED_END=566,
            SQL92_RESERVED_EXCEPTION=567, PLSQL_RESERVED_EXCLUSIVE=568, SQL92_RESERVED_EXISTS=569,
            SQL92_RESERVED_FALSE=570, SQL92_RESERVED_FETCH=571, SQL92_RESERVED_FOR=572,
            SQL92_RESERVED_FROM=573, SQL92_RESERVED_GOTO=574, SQL92_RESERVED_GRANT=575,
            SQL92_RESERVED_GROUP=576, SQL92_RESERVED_HAVING=577, PLSQL_RESERVED_IDENTIFIED=578,
            PLSQL_RESERVED_IF=579, SQL92_RESERVED_IN=580, PLSQL_RESERVED_INDEX=581,
            PLSQL_RESERVED_INDEXES=582, SQL92_RESERVED_INSERT=583, SQL92_RESERVED_INTERSECT=584,
            SQL92_RESERVED_INTO=585, SQL92_RESERVED_IS=586, SQL92_RESERVED_LIKE=587,
            PLSQL_RESERVED_LOCK=588, PLSQL_RESERVED_MINUS=589, PLSQL_RESERVED_MODE=590,
            PLSQL_RESERVED_NOCOMPRESS=591, SQL92_RESERVED_NOT=592, PLSQL_RESERVED_NOWAIT=593,
            SQL92_RESERVED_NULL=594, SQL92_RESERVED_OF=595, SQL92_RESERVED_ON=596,
            SQL92_RESERVED_OPTION=597, SQL92_RESERVED_OR=598, SQL92_RESERVED_ORDER=599,
            SQL92_RESERVED_OVERLAPS=600, SQL92_RESERVED_PRIOR=601, SQL92_RESERVED_PROCEDURE=602,
            SQL92_RESERVED_PUBLIC=603, PLSQL_RESERVED_RESOURCE=604, SQL92_RESERVED_REVOKE=605,
            SQL92_RESERVED_SELECT=606, PLSQL_RESERVED_SHARE=607, SQL92_RESERVED_SIZE=608,
            PLSQL_RESERVED_START=609, PLSQL_RESERVED_TABAUTH=610, SQL92_RESERVED_TABLE=611,
            SQL92_RESERVED_THE=612, SQL92_RESERVED_THEN=613, SQL92_RESERVED_TO=614,
            SQL92_RESERVED_TRUE=615, SQL92_RESERVED_UNION=616, SQL92_RESERVED_UNIQUE=617,
            SQL92_RESERVED_UPDATE=618, SQL92_RESERVED_VALUES=619, SQL92_RESERVED_VIEW=620,
            PLSQL_RESERVED_VIEWS=621, SQL92_RESERVED_WHEN=622, SQL92_RESERVED_WHERE=623,
            SQL92_RESERVED_WITH=624, PLSQL_NON_RESERVED_USING=625, PLSQL_NON_RESERVED_MODEL=626,
            PLSQL_NON_RESERVED_ELSIF=627, PLSQL_NON_RESERVED_PIVOT=628, PLSQL_NON_RESERVED_UNPIVOT=629,
            REGULAR_ID=630, ZV=631;
    public static final int
            RULE_swallow_to_semi = 0, RULE_compilation_unit = 1, RULE_sql_script = 2,
            RULE_unit_statement = 3, RULE_declare_wrapper = 4, RULE_is_or_as = 5,
            RULE_drop_function = 6, RULE_alter_function = 7, RULE_create_function_body = 8,
            RULE_function_spec = 9, RULE_parallel_enable_clause = 10, RULE_partition_by_clause = 11,
            RULE_result_cache_clause = 12, RULE_relies_on_part = 13, RULE_streaming_clause = 14,
            RULE_drop_package = 15, RULE_alter_package = 16, RULE_create_package = 17,
            RULE_package_body = 18, RULE_package_spec = 19, RULE_package_obj_spec = 20,
            RULE_package_obj_body = 21, RULE_drop_procedure = 22, RULE_alter_procedure = 23,
            RULE_create_procedure_body = 24, RULE_procedure_spec = 25, RULE_drop_trigger = 26,
            RULE_alter_trigger = 27, RULE_create_trigger = 28, RULE_trigger_follows_clause = 29,
            RULE_trigger_when_clause = 30, RULE_simple_dml_trigger = 31, RULE_for_each_row = 32,
            RULE_compound_dml_trigger = 33, RULE_non_dml_trigger = 34, RULE_trigger_body = 35,
            RULE_routine_clause = 36, RULE_compound_trigger_block = 37, RULE_timing_point_section = 38,
            RULE_non_dml_event = 39, RULE_dml_event_clause = 40, RULE_dml_event_element = 41,
            RULE_dml_event_nested_clause = 42, RULE_referencing_clause = 43, RULE_referencing_element = 44,
            RULE_drop_type = 45, RULE_alter_type = 46, RULE_compile_type_clause = 47,
            RULE_replace_type_clause = 48, RULE_alter_method_spec = 49, RULE_alter_method_element = 50,
            RULE_alter_attribute_definition = 51, RULE_attribute_definition = 52,
            RULE_alter_collection_clauses = 53, RULE_dependent_handling_clause = 54,
            RULE_dependent_exceptions_part = 55, RULE_create_type = 56, RULE_type_definition = 57,
            RULE_object_type_def = 58, RULE_object_as_part = 59, RULE_object_under_part = 60,
            RULE_nested_table_type_def = 61, RULE_sqlj_object_type = 62, RULE_type_body = 63,
            RULE_type_body_elements = 64, RULE_map_order_func_declaration = 65, RULE_subprog_decl_in_type = 66,
            RULE_proc_decl_in_type = 67, RULE_func_decl_in_type = 68, RULE_constructor_declaration = 69,
            RULE_modifier_clause = 70, RULE_object_member_spec = 71, RULE_sqlj_object_type_attr = 72,
            RULE_element_spec = 73, RULE_element_spec_options = 74, RULE_subprogram_spec = 75,
            RULE_type_procedure_spec = 76, RULE_type_function_spec = 77, RULE_constructor_spec = 78,
            RULE_map_order_function_spec = 79, RULE_pragma_clause = 80, RULE_pragma_elements = 81,
            RULE_type_elements_parameter = 82, RULE_drop_sequence = 83, RULE_alter_sequence = 84,
            RULE_create_sequence = 85, RULE_sequence_spec = 86, RULE_sequence_start_clause = 87,
            RULE_invoker_rights_clause = 88, RULE_compiler_parameters_clause = 89,
            RULE_call_spec = 90, RULE_java_spec = 91, RULE_c_spec = 92, RULE_c_agent_in_clause = 93,
            RULE_c_parameters_clause = 94, RULE_parameter = 95, RULE_default_value_part = 96,
            RULE_declare_spec = 97, RULE_variable_declaration = 98, RULE_subtype_declaration = 99,
            RULE_cursor_declaration = 100, RULE_parameter_spec = 101, RULE_exception_declaration = 102,
            RULE_pragma_declaration = 103, RULE_record_declaration = 104, RULE_record_type_dec = 105,
            RULE_field_spec = 106, RULE_record_var_dec = 107, RULE_table_declaration = 108,
            RULE_table_type_dec = 109, RULE_table_indexed_by_part = 110, RULE_varray_type_def = 111,
            RULE_table_var_dec = 112, RULE_seq_of_statements = 113, RULE_label_declaration = 114,
            RULE_statement = 115, RULE_assignment_statement = 116, RULE_continue_statement = 117,
            RULE_exit_statement = 118, RULE_goto_statement = 119, RULE_if_statement = 120,
            RULE_elsif_part = 121, RULE_else_part = 122, RULE_loop_statement = 123,
            RULE_cursor_loop_param = 124, RULE_forall_statement = 125, RULE_bounds_clause = 126,
            RULE_between_bound = 127, RULE_lower_bound = 128, RULE_upper_bound = 129,
            RULE_null_statement = 130, RULE_raise_statement = 131, RULE_return_statement = 132,
            RULE_function_call = 133, RULE_body = 134, RULE_collection_statement = 135,
            RULE_pipe_row = 136, RULE_exception_clause = 137, RULE_exception_handler = 138,
            RULE_trigger_block = 139, RULE_block = 140, RULE_sql_statement = 141,
            RULE_execute_immediate = 142, RULE_dynamic_returning_clause = 143, RULE_data_manipulation_language_statements = 144,
            RULE_cursor_manipulation_statements = 145, RULE_close_statement = 146,
            RULE_open_statement = 147, RULE_fetch_statement = 148, RULE_open_for_statement = 149,
            RULE_transaction_control_statements = 150, RULE_set_transaction_command = 151,
            RULE_set_constraint_command = 152, RULE_commit_statement = 153, RULE_write_clause = 154,
            RULE_rollback_statement = 155, RULE_savepoint_statement = 156, RULE_explain_statement = 157,
            RULE_select_statement = 158, RULE_subquery_factoring_clause = 159, RULE_factoring_element = 160,
            RULE_search_clause = 161, RULE_cycle_clause = 162, RULE_subquery = 163,
            RULE_subquery_operation_part = 164, RULE_subquery_basic_elements = 165,
            RULE_query_block = 166, RULE_selected_element = 167, RULE_from_clause = 168,
            RULE_select_list_elements = 169, RULE_table_ref_list = 170, RULE_table_ref = 171,
            RULE_table_ref_aux = 172, RULE_join_clause = 173, RULE_join_on_part = 174,
            RULE_join_using_part = 175, RULE_outer_join_type = 176, RULE_query_partition_clause = 177,
            RULE_flashback_query_clause = 178, RULE_pivot_clause = 179, RULE_pivot_element = 180,
            RULE_pivot_for_clause = 181, RULE_pivot_in_clause = 182, RULE_pivot_in_clause_element = 183,
            RULE_pivot_in_clause_elements = 184, RULE_unpivot_clause = 185, RULE_unpivot_in_clause = 186,
            RULE_unpivot_in_elements = 187, RULE_hierarchical_query_clause = 188,
            RULE_start_part = 189, RULE_group_by_clause = 190, RULE_group_by_elements = 191,
            RULE_rollup_cube_clause = 192, RULE_grouping_sets_clause = 193, RULE_grouping_sets_elements = 194,
            RULE_having_clause = 195, RULE_model_clause = 196, RULE_cell_reference_options = 197,
            RULE_return_rows_clause = 198, RULE_reference_model = 199, RULE_main_model = 200,
            RULE_model_column_clauses = 201, RULE_model_column_partition_part = 202,
            RULE_model_column_list = 203, RULE_model_column = 204, RULE_model_rules_clause = 205,
            RULE_model_rules_part = 206, RULE_model_rules_element = 207, RULE_cell_assignment = 208,
            RULE_model_iterate_clause = 209, RULE_until_part = 210, RULE_order_by_clause = 211,
            RULE_order_by_elements = 212, RULE_for_update_clause = 213, RULE_for_update_of_part = 214,
            RULE_for_update_options = 215, RULE_update_statement = 216, RULE_update_set_clause = 217,
            RULE_column_based_update_set_clause = 218, RULE_delete_statement = 219,
            RULE_insert_statement = 220, RULE_single_table_insert = 221, RULE_multi_table_insert = 222,
            RULE_multi_table_element = 223, RULE_conditional_insert_clause = 224,
            RULE_conditional_insert_when_part = 225, RULE_conditional_insert_else_part = 226,
            RULE_insert_into_clause = 227, RULE_values_clause = 228, RULE_merge_statement = 229,
            RULE_merge_update_clause = 230, RULE_merge_element = 231, RULE_merge_update_delete_part = 232,
            RULE_merge_insert_clause = 233, RULE_selected_tableview = 234, RULE_lock_table_statement = 235,
            RULE_wait_nowait_part = 236, RULE_lock_table_element = 237, RULE_lock_mode = 238,
            RULE_general_table_ref = 239, RULE_static_returning_clause = 240, RULE_error_logging_clause = 241,
            RULE_error_logging_into_part = 242, RULE_error_logging_reject_part = 243,
            RULE_dml_table_expression_clause = 244, RULE_table_collection_expression = 245,
            RULE_subquery_restriction_clause = 246, RULE_sample_clause = 247, RULE_seed_part = 248,
            RULE_cursor_expression = 249, RULE_sql_cursor_expression = 250, RULE_collection_assoc_expression = 251,
            RULE_collection_type_expression = 252, RULE_expression_list = 253, RULE_condition = 254,
            RULE_condition_wrapper = 255, RULE_expression = 256, RULE_expression_wrapper = 257,
            RULE_logical_and_expression = 258, RULE_negated_expression = 259, RULE_equality_expression = 260,
            RULE_multiset_part = 261, RULE_multiset_expression = 262, RULE_multiset_type = 263,
            RULE_relational_expression = 264, RULE_compound_expression = 265, RULE_like_type = 266,
            RULE_like_escape_part = 267, RULE_in_elements = 268, RULE_between_elements = 269,
            RULE_concatenation = 270, RULE_concatenation_wrapper = 271, RULE_additive_expression = 272,
            RULE_multiply_expression = 273, RULE_datetime_expression = 274, RULE_interval_expression = 275,
            RULE_model_expression = 276, RULE_model_expression_element = 277, RULE_single_column_for_loop = 278,
            RULE_for_like_part = 279, RULE_for_increment_decrement_type = 280, RULE_multi_column_for_loop = 281,
            RULE_unary_expression = 282, RULE_case_statement = 283, RULE_simple_case_statement = 284,
            RULE_simple_case_when_part = 285, RULE_searched_case_statement = 286,
            RULE_searched_case_when_part = 287, RULE_case_else_part = 288, RULE_atom = 289,
            RULE_expression_or_vector = 290, RULE_vector_expr = 291, RULE_quantified_expression = 292,
            RULE_plsql_type_conversion = 293, RULE_sql_type_conversion = 294, RULE_xml_table_columns = 295,
            RULE_xml_table = 296, RULE_standard_function = 297, RULE_over_clause_keyword = 298,
            RULE_within_or_over_clause_keyword = 299, RULE_standard_prediction_function_keyword = 300,
            RULE_over_clause = 301, RULE_windowing_clause = 302, RULE_windowing_type = 303,
            RULE_windowing_elements = 304, RULE_using_clause = 305, RULE_using_element = 306,
            RULE_collect_order_by_part = 307, RULE_within_or_over_part = 308, RULE_cost_matrix_clause = 309,
            RULE_xml_passing_clause = 310, RULE_xml_attributes_clause = 311, RULE_xml_namespaces_clause = 312,
            RULE_xml_table_column = 313, RULE_xml_general_default_part = 314, RULE_xml_multiuse_expression_element = 315,
            RULE_xmlroot_param_version_part = 316, RULE_xmlroot_param_standalone_part = 317,
            RULE_xmlserialize_param_enconding_part = 318, RULE_xmlserialize_param_version_part = 319,
            RULE_xmlserialize_param_ident_part = 320, RULE_boolean_static_expression = 321,
            RULE_preprocessor_internal_statement = 322, RULE_preprocessor_statement = 323,
            RULE_partition_extension_clause = 324, RULE_column_alias = 325, RULE_table_alias = 326,
            RULE_alias_quoted_string = 327, RULE_where_clause = 328, RULE_current_of_clause = 329,
            RULE_into_clause_variable = 330, RULE_into_clause = 331, RULE_xml_column_name = 332,
            RULE_cost_class_name = 333, RULE_attribute_name = 334, RULE_savepoint_name = 335,
            RULE_rollback_segment_name = 336, RULE_table_var_name = 337, RULE_schema_name = 338,
            RULE_routine_name = 339, RULE_package_name = 340, RULE_implementation_type_name = 341,
            RULE_parameter_name = 342, RULE_reference_model_name = 343, RULE_main_model_name = 344,
            RULE_aggregate_function_name = 345, RULE_query_name = 346, RULE_constraint_name = 347,
            RULE_label_name = 348, RULE_type_name = 349, RULE_sequence_name = 350,
            RULE_exception_name = 351, RULE_function_name = 352, RULE_procedure_name = 353,
            RULE_trigger_name = 354, RULE_variable_name = 355, RULE_index_name = 356,
            RULE_cursor_name = 357, RULE_record_name = 358, RULE_collection_name = 359,
            RULE_link_name = 360, RULE_column_name = 361, RULE_tableview_name = 362,
            RULE_char_set_name = 363, RULE_keep_clause = 364, RULE_function_argument = 365,
            RULE_function_argument_analytic = 366, RULE_function_argument_modeling = 367,
            RULE_respect_or_ignore_nulls = 368, RULE_argument = 369, RULE_type_spec = 370,
            RULE_datatype = 371, RULE_precision_part = 372, RULE_native_datatype_element = 373,
            RULE_bind_variable = 374, RULE_general_element = 375, RULE_general_element_part = 376,
            RULE_table_element = 377, RULE_constant = 378, RULE_numeric = 379, RULE_quoted_string = 380,
            RULE_id = 381, RULE_id_expression = 382, RULE_not_equal_op = 383, RULE_greater_than_or_equals_op = 384,
            RULE_less_than_or_equals_op = 385, RULE_concatenation_op = 386, RULE_outer_join_sign = 387,
            RULE_regular_id = 388;
    public static final String[] ruleNames = {
            "swallow_to_semi", "compilation_unit", "sql_script", "unit_statement",
            "declare_wrapper", "is_or_as", "drop_function", "alter_function", "create_function_body",
            "function_spec", "parallel_enable_clause", "partition_by_clause", "result_cache_clause",
            "relies_on_part", "streaming_clause", "drop_package", "alter_package",
            "create_package", "package_body", "package_spec", "package_obj_spec",
            "package_obj_body", "drop_procedure", "alter_procedure", "create_procedure_body",
            "procedure_spec", "drop_trigger", "alter_trigger", "create_trigger", "trigger_follows_clause",
            "trigger_when_clause", "simple_dml_trigger", "for_each_row", "compound_dml_trigger",
            "non_dml_trigger", "trigger_body", "routine_clause", "compound_trigger_block",
            "timing_point_section", "non_dml_event", "dml_event_clause", "dml_event_element",
            "dml_event_nested_clause", "referencing_clause", "referencing_element",
            "drop_type", "alter_type", "compile_type_clause", "replace_type_clause",
            "alter_method_spec", "alter_method_element", "alter_attribute_definition",
            "attribute_definition", "alter_collection_clauses", "dependent_handling_clause",
            "dependent_exceptions_part", "create_type", "type_definition", "object_type_def",
            "object_as_part", "object_under_part", "nested_table_type_def", "sqlj_object_type",
            "type_body", "type_body_elements", "map_order_func_declaration", "subprog_decl_in_type",
            "proc_decl_in_type", "func_decl_in_type", "constructor_declaration", "modifier_clause",
            "object_member_spec", "sqlj_object_type_attr", "element_spec", "element_spec_options",
            "subprogram_spec", "type_procedure_spec", "type_function_spec", "constructor_spec",
            "map_order_function_spec", "pragma_clause", "pragma_elements", "type_elements_parameter",
            "drop_sequence", "alter_sequence", "create_sequence", "sequence_spec",
            "sequence_start_clause", "invoker_rights_clause", "compiler_parameters_clause",
            "call_spec", "java_spec", "c_spec", "c_agent_in_clause", "c_parameters_clause",
            "parameter", "default_value_part", "declare_spec", "variable_declaration",
            "subtype_declaration", "cursor_declaration", "parameter_spec", "exception_declaration",
            "pragma_declaration", "record_declaration", "record_type_dec", "field_spec",
            "record_var_dec", "table_declaration", "table_type_dec", "table_indexed_by_part",
            "varray_type_def", "table_var_dec", "seq_of_statements", "label_declaration",
            "statement", "assignment_statement", "continue_statement", "exit_statement",
            "goto_statement", "if_statement", "elsif_part", "else_part", "loop_statement",
            "cursor_loop_param", "forall_statement", "bounds_clause", "between_bound",
            "lower_bound", "upper_bound", "null_statement", "raise_statement", "return_statement",
            "function_call", "body", "collection_statement", "pipe_row", "exception_clause",
            "exception_handler", "trigger_block", "block", "sql_statement", "execute_immediate",
            "dynamic_returning_clause", "data_manipulation_language_statements", "cursor_manipulation_statements",
            "close_statement", "open_statement", "fetch_statement", "open_for_statement",
            "transaction_control_statements", "set_transaction_command", "set_constraint_command",
            "commit_statement", "write_clause", "rollback_statement", "savepoint_statement",
            "explain_statement", "select_statement", "subquery_factoring_clause",
            "factoring_element", "search_clause", "cycle_clause", "subquery", "subquery_operation_part",
            "subquery_basic_elements", "query_block", "selected_element", "from_clause",
            "select_list_elements", "table_ref_list", "table_ref", "table_ref_aux",
            "join_clause", "join_on_part", "join_using_part", "outer_join_type", "query_partition_clause",
            "flashback_query_clause", "pivot_clause", "pivot_element", "pivot_for_clause",
            "pivot_in_clause", "pivot_in_clause_element", "pivot_in_clause_elements",
            "unpivot_clause", "unpivot_in_clause", "unpivot_in_elements", "hierarchical_query_clause",
            "start_part", "group_by_clause", "group_by_elements", "rollup_cube_clause",
            "grouping_sets_clause", "grouping_sets_elements", "having_clause", "model_clause",
            "cell_reference_options", "return_rows_clause", "reference_model", "main_model",
            "model_column_clauses", "model_column_partition_part", "model_column_list",
            "model_column", "model_rules_clause", "model_rules_part", "model_rules_element",
            "cell_assignment", "model_iterate_clause", "until_part", "order_by_clause",
            "order_by_elements", "for_update_clause", "for_update_of_part", "for_update_options",
            "update_statement", "update_set_clause", "column_based_update_set_clause",
            "delete_statement", "insert_statement", "single_table_insert", "multi_table_insert",
            "multi_table_element", "conditional_insert_clause", "conditional_insert_when_part",
            "conditional_insert_else_part", "insert_into_clause", "values_clause",
            "merge_statement", "merge_update_clause", "merge_element", "merge_update_delete_part",
            "merge_insert_clause", "selected_tableview", "lock_table_statement", "wait_nowait_part",
            "lock_table_element", "lock_mode", "general_table_ref", "static_returning_clause",
            "error_logging_clause", "error_logging_into_part", "error_logging_reject_part",
            "dml_table_expression_clause", "table_collection_expression", "subquery_restriction_clause",
            "sample_clause", "seed_part", "cursor_expression", "sql_cursor_expression",
            "collection_assoc_expression", "collection_type_expression", "expression_list",
            "condition", "condition_wrapper", "expression", "expression_wrapper",
            "logical_and_expression", "negated_expression", "equality_expression",
            "multiset_part", "multiset_expression", "multiset_type", "relational_expression",
            "compound_expression", "like_type", "like_escape_part", "in_elements",
            "between_elements", "concatenation", "concatenation_wrapper", "additive_expression",
            "multiply_expression", "datetime_expression", "interval_expression", "model_expression",
            "model_expression_element", "single_column_for_loop", "for_like_part",
            "for_increment_decrement_type", "multi_column_for_loop", "unary_expression",
            "case_statement", "simple_case_statement", "simple_case_when_part", "searched_case_statement",
            "searched_case_when_part", "case_else_part", "atom", "expression_or_vector",
            "vector_expr", "quantified_expression", "plsql_type_conversion", "sql_type_conversion",
            "xml_table_columns", "xml_table", "standard_function", "over_clause_keyword",
            "within_or_over_clause_keyword", "standard_prediction_function_keyword",
            "over_clause", "windowing_clause", "windowing_type", "windowing_elements",
            "using_clause", "using_element", "collect_order_by_part", "within_or_over_part",
            "cost_matrix_clause", "xml_passing_clause", "xml_attributes_clause", "xml_namespaces_clause",
            "xml_table_column", "xml_general_default_part", "xml_multiuse_expression_element",
            "xmlroot_param_version_part", "xmlroot_param_standalone_part", "xmlserialize_param_enconding_part",
            "xmlserialize_param_version_part", "xmlserialize_param_ident_part", "boolean_static_expression",
            "preprocessor_internal_statement", "preprocessor_statement", "partition_extension_clause",
            "column_alias", "table_alias", "alias_quoted_string", "where_clause",
            "current_of_clause", "into_clause_variable", "into_clause", "xml_column_name",
            "cost_class_name", "attribute_name", "savepoint_name", "rollback_segment_name",
            "table_var_name", "schema_name", "routine_name", "package_name", "implementation_type_name",
            "parameter_name", "reference_model_name", "main_model_name", "aggregate_function_name",
            "query_name", "constraint_name", "label_name", "type_name", "sequence_name",
            "exception_name", "function_name", "procedure_name", "trigger_name", "variable_name",
            "index_name", "cursor_name", "record_name", "collection_name", "link_name",
            "column_name", "tableview_name", "char_set_name", "keep_clause", "function_argument",
            "function_argument_analytic", "function_argument_modeling", "respect_or_ignore_nulls",
            "argument", "type_spec", "datatype", "precision_part", "native_datatype_element",
            "bind_variable", "general_element", "general_element_part", "table_element",
            "constant", "numeric", "quoted_string", "id", "id_expression", "not_equal_op",
            "greater_than_or_equals_op", "less_than_or_equals_op", "concatenation_op",
            "outer_join_sign", "regular_id"
    };

    private static final String[] _LITERAL_NAMES = {
            null, "'..'", null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, "'=>'", null,
            null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, "'.'", null, null,
            null, null, "'%'", "'&'", "'('", "')'", "'**'", "'*'", "'+'", "'-'", "','",
            "'/'", "'@'", "':='", null, "':'", "';'", "'<='", "'<'", "'>='", null,
            "'^'", "'~'", "'!'", "'>'", "'||'", "'|'", "'='", "'['", "']'", "'_'",
            null, null, null, "'all'", "'alter'", "'and'", "'any'", "'as'", "'asc'",
            "'begin'", "'between'", "'by'", "'case'", "'check'", "'clusters'", "'colauth'",
            "'compress'", "'connect'", "'connect_by_root'", "'crash'", "'create'",
            "'current'", "'cursor'", "'date'", "'declare'", "'default'", "'delete'",
            "'desc'", "'distinct'", "'drop'", "'else'", "'end'", "'exception'", "'exclusive'",
            "'exists'", "'false'", "'fetch'", "'for'", "'from'", "'goto'", "'grant'",
            "'group'", "'having'", "'identified'", "'if'", "'in'", "'index'", "'indexes'",
            "'insert'", "'intersect'", "'into'", "'is'", "'like'", "'lock'", "'minus'",
            "'mode'", "'nocompress'", "'not'", "'nowait'", "'null'", "'of'", "'on'",
            "'option'", "'or'", "'order'", "'overlaps'", "'prior'", "'procedure'",
            "'public'", "'resource'", "'revoke'", "'select'", "'share'", "'size'",
            "'start'", "'tabauth'", "'table'", "'the'", "'then'", "'to'", "'true'",
            "'union'", "'unique'", "'update'", "'values'", "'view'", "'views'", "'when'",
            "'where'", "'with'", "'using'", "'model'", "'elsif'", "'pivot'", "'unpivot'",
            null, "'@!'"
    };
    private static final String[] _SYMBOLIC_NAMES = {
            null, null, "PP_IF", "PP_THEN", "PP_ELSE", "PP_ELSIF", "PP_END", "PP_ERROR",
            "A_LETTER", "ADD", "AFTER", "AGENT", "AGGREGATE", "ALL", "ALTER", "ANALYZE",
            "AND", "ANY", "ARRAY", "AS", "ASC", "ASSOCIATE", "ASSOCIATION_OPERATOR",
            "AT", "ATTRIBUTE", "AUDIT", "AUTHID", "AUTO", "AUTOMATIC", "AUTONOMOUS_TRANSACTION",
            "BATCH", "BEFORE", "BEGIN", "BETWEEN", "BFILE", "BINARY_DOUBLE", "BINARY_FLOAT",
            "BINARY_INTEGER", "BLOB", "BLOCK", "BODY", "BOOLEAN", "BOTH", "BREADTH",
            "BULK", "BY", "BYTE", "C_LETTER", "CACHE", "CALL", "CANONICAL", "CASCADE",
            "CASE", "CAST", "CHAR", "CHAR_CS", "CHARACTER", "CHECK", "CHR", "CLOB",
            "CLOSE", "CLUSTER", "COLLECT", "COLUMNS", "COMMENT", "COMMIT", "COMMITTED",
            "COMPATIBILITY", "COMPILE", "COMPOUND", "CONNECT", "CONNECT_BY_ROOT",
            "CONSTANT", "CONSTRAINT", "CONSTRAINTS", "CONSTRUCTOR", "CONTENT", "CONTEXT",
            "CONTINUE", "CONVERT", "CORRUPT_XID", "CORRUPT_XID_ALL", "COST", "COUNT",
            "CREATE", "CROSS", "CUBE", "CURRENT", "CURRENT_USER", "CURSOR", "CUSTOMDATUM",
            "CYCLE", "DATA", "DATABASE", "DATE", "DAY", "DB_ROLE_CHANGE", "DBTIMEZONE",
            "DDL", "DEBUG", "DEC", "DECIMAL", "DECLARE", "DECOMPOSE", "DECREMENT",
            "DEFAULT", "DEFAULTS", "DEFERRED", "DEFINER", "DELETE", "DEPTH", "DESC",
            "DETERMINISTIC", "DIMENSION", "DISABLE", "DISASSOCIATE", "DISTINCT", "DOCUMENT",
            "DOUBLE", "DROP", "DSINTERVAL_UNCONSTRAINED", "EACH", "ELEMENT", "ELSE",
            "ELSIF", "EMPTY", "ENABLE", "ENCODING", "END", "ENTITYESCAPING", "ERRORS",
            "ESCAPE", "EXCEPT", "EVALNAME", "EXCEPTION", "EXCEPTION_INIT", "EXCEPTIONS",
            "EXCLUDE", "EXCLUSIVE", "EXECUTE", "EXISTS", "EXIT", "EXPLAIN", "EXTERNAL",
            "EXTEND", "EXTRACT", "FAILURE", "FALSE", "FETCH", "FINAL", "FIRST", "FIRST_VALUE",
            "FLOAT", "FOLLOWING", "FOLLOWS", "FOR", "FORALL", "FORCE", "FROM", "FULL",
            "FUNCTION", "GOTO", "GRANT", "GROUP", "GROUPING", "HASH", "HAVING", "HIDE",
            "HOUR", "IF", "IGNORE", "IMMEDIATE", "IN", "INCLUDE", "INCLUDING", "INCREMENT",
            "INDENT", "INDEX", "INDEXED", "INDICATOR", "INDICES", "INFINITE", "INLINE",
            "INNER", "INOUT", "INSERT", "INSTANTIABLE", "INSTEAD", "INT", "INTEGER",
            "INTERSECT", "INTERVAL", "INTO", "INVALIDATE", "IS", "ISOLATION", "ITERATE",
            "JAVA", "JOIN", "KEEP", "LANGUAGE", "LAST", "LAST_VALUE", "LEADING", "LEFT",
            "LEVEL", "LIBRARY", "LIKE", "LIKE2", "LIKE4", "LIKEC", "LIMIT", "LOCAL",
            "LOCK", "LOCKED", "LOG", "LOGOFF", "LOGON", "LONG", "LOOP", "MAIN", "MAP",
            "MATCHED", "MAXVALUE", "MEASURES", "MEMBER", "MERGE", "MINUS", "MINUTE",
            "MINVALUE", "MLSLABEL", "MOD", "MODE", "MODEL", "MODIFY", "MONTH", "MULTISET",
            "NAME", "NAN", "NATURAL", "NATURALN", "NAV", "NCHAR", "NCHAR_CS", "NCLOB",
            "NESTED", "NEW", "NEXT", "NO", "NOAUDIT", "NOCACHE", "NOCOPY", "NOCYCLE",
            "NOENTITYESCAPING", "NOMAXVALUE", "NOMINVALUE", "NONE", "NOORDER", "NOSCHEMACHECK",
            "NOT", "NOWAIT", "NULL", "NULLS", "NUMBER", "NUMERIC", "NVARCHAR2", "OBJECT",
            "OF", "OFF", "OID", "OLD", "ON", "ONLY", "OPEN", "OPTION", "OR", "ORADATA",
            "ORDER", "ORDINALITY", "OSERROR", "OUT", "OUTER", "OVER", "OVERRIDING",
            "PACKAGE", "PARALLEL_ENABLE", "PARAMETERS", "PARENT", "PARTITION", "PASSING",
            "PATH", "PERCENT_ISOPEN", "PERCENT_ROWTYPE", "PERCENT_TYPE", "PERCENT_FOUND",
            "PERCENT_NOTFOUND", "PERCENT_ROWCOUNT", "PIPELINED", "PIPE", "PIVOT",
            "PLAN", "PLS_INTEGER", "POSITIVE", "POSITIVEN", "PRAGMA", "PRECEDING",
            "PRECISION", "PRESENT", "PRIOR", "PROCEDURE", "RAISE", "RANGE", "RAW",
            "READ", "REAL", "RECORD", "REF", "REFERENCE", "REFERENCING", "REJECT",
            "RELIES_ON", "RENAME", "REPLACE", "RESPECT", "RESTRICT_REFERENCES", "RESULT",
            "RESULT_CACHE", "RETURN", "RETURNING", "REUSE", "REVERSE", "REVOKE", "RIGHT",
            "ROLLBACK", "ROLLUP", "ROW", "ROWID", "ROWS", "RULES", "SAMPLE", "SAVE",
            "SAVEPOINT", "SCHEMA", "SCHEMACHECK", "SCN", "SEARCH", "SECOND", "SEED",
            "SEGMENT", "SELECT", "SELF", "SEQUENCE", "SEQUENTIAL", "SERIALIZABLE",
            "SERIALLY_REUSABLE", "SERVERERROR", "SESSIONTIMEZONE", "SET", "SETS",
            "SETTINGS", "SHARE", "SHOW", "SHUTDOWN", "SIBLINGS", "SIGNTYPE", "SIMPLE_INTEGER",
            "SINGLE", "SIZE", "SKIP_", "SMALLINT", "SNAPSHOT", "SOME", "SPECIFICATION",
            "SQLDATA", "SQLERROR", "SQL_PERCENT_ROWCOUNT", "STANDALONE", "START",
            "STARTUP", "STATEMENT", "STATEMENT_ID", "STATIC", "STATISTICS", "STRING",
            "SUBMULTISET", "SUBPARTITION", "SUBSTITUTABLE", "SUBTYPE", "SUCCESS",
            "SUSPEND", "TABLE", "THE", "THEN", "TIME", "TIMESTAMP", "TIMESTAMP_LTZ_UNCONSTRAINED",
            "TIMESTAMP_TZ_UNCONSTRAINED", "TIMESTAMP_UNCONSTRAINED", "TIMEZONE_ABBR",
            "TIMEZONE_HOUR", "TIMEZONE_MINUTE", "TIMEZONE_REGION", "TO", "TO_CHAR",
            "TO_NUMBER", "TRAILING", "TRANSACTION", "TRANSLATE", "TREAT", "TRIGGER",
            "TRIM", "TRUE", "TRUNCATE", "TYPE", "UNBOUNDED", "UNDER", "UNION", "UNIQUE",
            "UNLIMITED", "UNPIVOT", "UNTIL", "UPDATE", "UPDATED", "UPSERT", "UROWID",
            "USE", "USING", "VALIDATE", "VALUE", "VALUES", "VARCHAR", "VARCHAR2",
            "VARIABLE", "VARRAY", "VARYING", "VERSION", "VERSIONS", "WAIT", "WARNING",
            "WELLFORMED", "WHEN", "WHENEVER", "WHERE", "WHILE", "WITH", "WITHIN",
            "WORK", "WRITE", "XML", "XMLAGG", "XMLATTRIBUTES", "XMLCAST", "XMLCOLATTVAL",
            "XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", "XMLPARSE", "XMLPI",
            "XMLQUERY", "XMLROOT", "XMLSERIALIZE", "XMLTABLE", "YEAR", "YES", "YMINTERVAL_UNCONSTRAINED",
            "ZONE", "PREDICTION", "PREDICTION_BOUNDS", "PREDICTION_COST", "PREDICTION_DETAILS",
            "PREDICTION_PROBABILITY", "PREDICTION_SET", "CUME_DIST", "DENSE_RANK",
            "LISTAGG", "PERCENT_RANK", "PERCENTILE_CONT", "PERCENTILE_DISC", "RANK",
            "AVG", "CORR", "LAG", "LEAD", "MAX", "MEDIAN", "MIN", "NTILE", "RATIO_TO_REPORT",
            "ROW_NUMBER", "SUM", "VARIANCE", "REGR_", "STDDEV", "VAR_", "COVAR_",
            "PROMPT", "NATIONAL_CHAR_STRING_LIT", "BIT_STRING_LIT", "HEX_STRING_LIT",
            "DOUBLE_PERIOD", "PERIOD", "UNSIGNED_INTEGER", "APPROXIMATE_NUM_LIT",
            "CHAR_STRING", "DELIMITED_ID", "PERCENT", "AMPERSAND", "LEFT_PAREN", "RIGHT_PAREN",
            "DOUBLE_ASTERISK", "ASTERISK", "PLUS_SIGN", "MINUS_SIGN", "COMMA", "SOLIDUS",
            "AT_SIGN", "ASSIGN_OP", "BINDVAR", "COLON", "SEMICOLON", "LESS_THAN_OR_EQUALS_OP",
            "LESS_THAN_OP", "GREATER_THAN_OR_EQUALS_OP", "NOT_EQUAL_OP", "CARRET_OPERATOR_PART",
            "TILDE_OPERATOR_PART", "EXCLAMATION_OPERATOR_PART", "GREATER_THAN_OP",
            "CONCATENATION_OP", "VERTICAL_BAR", "EQUALS_OP", "LEFT_BRACKET", "RIGHT_BRACKET",
            "INTRODUCER", "SPACES", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", "SQL92_RESERVED_ALL",
            "SQL92_RESERVED_ALTER", "SQL92_RESERVED_AND", "SQL92_RESERVED_ANY", "SQL92_RESERVED_AS",
            "SQL92_RESERVED_ASC", "SQL92_RESERVED_BEGIN", "SQL92_RESERVED_BETWEEN",
            "SQL92_RESERVED_BY", "SQL92_RESERVED_CASE", "SQL92_RESERVED_CHECK", "PLSQL_RESERVED_CLUSTERS",
            "PLSQL_RESERVED_COLAUTH", "PLSQL_RESERVED_COMPRESS", "SQL92_RESERVED_CONNECT",
            "PLSQL_NON_RESERVED_CONNECT_BY_ROOT", "PLSQL_RESERVED_CRASH", "SQL92_RESERVED_CREATE",
            "SQL92_RESERVED_CURRENT", "SQL92_RESERVED_CURSOR", "SQL92_RESERVED_DATE",
            "SQL92_RESERVED_DECLARE", "SQL92_RESERVED_DEFAULT", "SQL92_RESERVED_DELETE",
            "SQL92_RESERVED_DESC", "SQL92_RESERVED_DISTINCT", "SQL92_RESERVED_DROP",
            "SQL92_RESERVED_ELSE", "SQL92_RESERVED_END", "SQL92_RESERVED_EXCEPTION",
            "PLSQL_RESERVED_EXCLUSIVE", "SQL92_RESERVED_EXISTS", "SQL92_RESERVED_FALSE",
            "SQL92_RESERVED_FETCH", "SQL92_RESERVED_FOR", "SQL92_RESERVED_FROM", "SQL92_RESERVED_GOTO",
            "SQL92_RESERVED_GRANT", "SQL92_RESERVED_GROUP", "SQL92_RESERVED_HAVING",
            "PLSQL_RESERVED_IDENTIFIED", "PLSQL_RESERVED_IF", "SQL92_RESERVED_IN",
            "PLSQL_RESERVED_INDEX", "PLSQL_RESERVED_INDEXES", "SQL92_RESERVED_INSERT",
            "SQL92_RESERVED_INTERSECT", "SQL92_RESERVED_INTO", "SQL92_RESERVED_IS",
            "SQL92_RESERVED_LIKE", "PLSQL_RESERVED_LOCK", "PLSQL_RESERVED_MINUS",
            "PLSQL_RESERVED_MODE", "PLSQL_RESERVED_NOCOMPRESS", "SQL92_RESERVED_NOT",
            "PLSQL_RESERVED_NOWAIT", "SQL92_RESERVED_NULL", "SQL92_RESERVED_OF", "SQL92_RESERVED_ON",
            "SQL92_RESERVED_OPTION", "SQL92_RESERVED_OR", "SQL92_RESERVED_ORDER",
            "SQL92_RESERVED_OVERLAPS", "SQL92_RESERVED_PRIOR", "SQL92_RESERVED_PROCEDURE",
            "SQL92_RESERVED_PUBLIC", "PLSQL_RESERVED_RESOURCE", "SQL92_RESERVED_REVOKE",
            "SQL92_RESERVED_SELECT", "PLSQL_RESERVED_SHARE", "SQL92_RESERVED_SIZE",
            "PLSQL_RESERVED_START", "PLSQL_RESERVED_TABAUTH", "SQL92_RESERVED_TABLE",
            "SQL92_RESERVED_THE", "SQL92_RESERVED_THEN", "SQL92_RESERVED_TO", "SQL92_RESERVED_TRUE",
            "SQL92_RESERVED_UNION", "SQL92_RESERVED_UNIQUE", "SQL92_RESERVED_UPDATE",
            "SQL92_RESERVED_VALUES", "SQL92_RESERVED_VIEW", "PLSQL_RESERVED_VIEWS",
            "SQL92_RESERVED_WHEN", "SQL92_RESERVED_WHERE", "SQL92_RESERVED_WITH",
            "PLSQL_NON_RESERVED_USING", "PLSQL_NON_RESERVED_MODEL", "PLSQL_NON_RESERVED_ELSIF",
            "PLSQL_NON_RESERVED_PIVOT", "PLSQL_NON_RESERVED_UNPIVOT", "REGULAR_ID",
            "ZV"
    };
    public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

    /**
     * @deprecated Use {@link #VOCABULARY} instead.
     */
    @Deprecated
    public static final String[] tokenNames;
    static {
        tokenNames = new String[_SYMBOLIC_NAMES.length];
        for (int i = 0; i < tokenNames.length; i++) {
            tokenNames[i] = VOCABULARY.getLiteralName(i);
            if (tokenNames[i] == null) {
                tokenNames[i] = VOCABULARY.getSymbolicName(i);
            }

            if (tokenNames[i] == null) {
                tokenNames[i] = "<INVALID>";
            }
        }
    }

    @Override
    @Deprecated
    public String[] getTokenNames() {
        return tokenNames;
    }

    @Override

    public Vocabulary getVocabulary() {
        return VOCABULARY;
    }

    @Override
    public String getGrammarFileName() { return "PlSql.g4"; }

    @Override
    public String[] getRuleNames() { return ruleNames; }

    @Override
    public String getSerializedATN() { return _serializedATN; }

    @Override
    public ATN getATN() { return _ATN; }

    public PlSqlParser(TokenStream input) {
        super(input);
        _interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
    }
    public static class Swallow_to_semiContext extends ParserRuleContext {
        public Swallow_to_semiContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_swallow_to_semi; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSwallow_to_semi(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSwallow_to_semi(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSwallow_to_semi(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Swallow_to_semiContext swallow_to_semi() throws RecognitionException {
        Swallow_to_semiContext _localctx = new Swallow_to_semiContext(_ctx, getState());
        enterRule(_localctx, 0, RULE_swallow_to_semi);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(779);
                _errHandler.sync(this);
                _la = _input.LA(1);
                do {
                    {
                        {
                            setState(778);
                            _la = _input.LA(1);
                            if ( _la <= 0 || (_la==SEMICOLON) ) {
                                _errHandler.recoverInline(this);
                            } else {
                                consume();
                            }
                        }
                    }
                    setState(781);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                } while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << PP_IF) | (1L << PP_THEN) | (1L << PP_ELSE) | (1L << PP_ELSIF) | (1L << PP_END) | (1L << PP_ERROR) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ALTER) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << ASSOCIATE) | (1L << ASSOCIATION_OPERATOR) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREADTH) | (1L << BULK) | (1L << BY) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHECK) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DEPTH - 64)) | (1L << (DESC - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (ELSE - 64)) | (1L << (ELSIF - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (END - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EXCEPT - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXCLUSIVE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTEND - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FETCH - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FOR - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GOTO - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HAVING - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IN - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEX - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERSECT - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTO - 192)) | (1L << (INVALIDATE - 192)) | (1L << (IS - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCK - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUS - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MOD - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NEXT - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCACHE - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)) | (1L << (NOENTITYESCAPING - 192)) | (1L << (NOMAXVALUE - 192)) | (1L << (NOMINVALUE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NONE - 256)) | (1L << (NOORDER - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NOT - 256)) | (1L << (NOWAIT - 256)) | (1L << (NULL - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OF - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ON - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (OPTION - 256)) | (1L << (OR - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDER - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PERCENT_ISOPEN - 256)) | (1L << (PERCENT_ROWTYPE - 256)) | (1L << (PERCENT_TYPE - 256)) | (1L << (PERCENT_FOUND - 256)) | (1L << (PERCENT_NOTFOUND - 256)) | (1L << (PERCENT_ROWCOUNT - 256)) | (1L << (PIPELINED - 256)) | (1L << (PIPE - 256)) | (1L << (PIVOT - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (PRIOR - 256)) | (1L << (PROCEDURE - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (REVOKE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SEARCH - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELECT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENCE - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHARE - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (SQL_PERCENT_ROWCOUNT - 320)) | (1L << (STANDALONE - 320)) | (1L << (START - 320)) | (1L << (STARTUP - 320)) | (1L << (STATEMENT - 320)) | (1L << (STATEMENT_ID - 320)) | (1L << (STATIC - 320)) | (1L << (STATISTICS - 320)) | (1L << (STRING - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TABLE - 384)) | (1L << (THE - 384)) | (1L << (THEN - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TO - 384)) | (1L << (TO_CHAR - 384)) | (1L << (TO_NUMBER - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUE - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNION - 384)) | (1L << (UNIQUE - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNPIVOT - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATE - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (USING - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VALUES - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHEN - 384)) | (1L << (WHENEVER - 384)) | (1L << (WHERE - 384)) | (1L << (WHILE - 384)) | (1L << (WITH - 384)) | (1L << (WITHIN - 384)) | (1L << (WORK - 384)) | (1L << (WRITE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)) | (1L << (REGR_ - 448)) | (1L << (STDDEV - 448)) | (1L << (VAR_ - 448)) | (1L << (COVAR_ - 448)) | (1L << (PROMPT - 448)) | (1L << (NATIONAL_CHAR_STRING_LIT - 448)) | (1L << (BIT_STRING_LIT - 448)) | (1L << (HEX_STRING_LIT - 448)) | (1L << (DOUBLE_PERIOD - 448)) | (1L << (PERIOD - 448)) | (1L << (UNSIGNED_INTEGER - 448)) | (1L << (APPROXIMATE_NUM_LIT - 448)) | (1L << (CHAR_STRING - 448)) | (1L << (DELIMITED_ID - 448)) | (1L << (PERCENT - 448)) | (1L << (AMPERSAND - 448)) | (1L << (LEFT_PAREN - 448)) | (1L << (RIGHT_PAREN - 448)) | (1L << (DOUBLE_ASTERISK - 448)) | (1L << (ASTERISK - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PLUS_SIGN - 512)) | (1L << (MINUS_SIGN - 512)) | (1L << (COMMA - 512)) | (1L << (SOLIDUS - 512)) | (1L << (AT_SIGN - 512)) | (1L << (ASSIGN_OP - 512)) | (1L << (BINDVAR - 512)) | (1L << (COLON - 512)) | (1L << (LESS_THAN_OR_EQUALS_OP - 512)) | (1L << (LESS_THAN_OP - 512)) | (1L << (GREATER_THAN_OR_EQUALS_OP - 512)) | (1L << (NOT_EQUAL_OP - 512)) | (1L << (CARRET_OPERATOR_PART - 512)) | (1L << (TILDE_OPERATOR_PART - 512)) | (1L << (EXCLAMATION_OPERATOR_PART - 512)) | (1L << (GREATER_THAN_OP - 512)) | (1L << (CONCATENATION_OP - 512)) | (1L << (VERTICAL_BAR - 512)) | (1L << (EQUALS_OP - 512)) | (1L << (LEFT_BRACKET - 512)) | (1L << (RIGHT_BRACKET - 512)) | (1L << (INTRODUCER - 512)) | (1L << (SPACES - 512)) | (1L << (SINGLE_LINE_COMMENT - 512)) | (1L << (MULTI_LINE_COMMENT - 512)) | (1L << (SQL92_RESERVED_ALL - 512)) | (1L << (SQL92_RESERVED_ALTER - 512)) | (1L << (SQL92_RESERVED_AND - 512)) | (1L << (SQL92_RESERVED_ANY - 512)) | (1L << (SQL92_RESERVED_AS - 512)) | (1L << (SQL92_RESERVED_ASC - 512)) | (1L << (SQL92_RESERVED_BEGIN - 512)) | (1L << (SQL92_RESERVED_BETWEEN - 512)) | (1L << (SQL92_RESERVED_BY - 512)) | (1L << (SQL92_RESERVED_CASE - 512)) | (1L << (SQL92_RESERVED_CHECK - 512)) | (1L << (PLSQL_RESERVED_CLUSTERS - 512)) | (1L << (PLSQL_RESERVED_COLAUTH - 512)) | (1L << (PLSQL_RESERVED_COMPRESS - 512)) | (1L << (SQL92_RESERVED_CONNECT - 512)) | (1L << (PLSQL_NON_RESERVED_CONNECT_BY_ROOT - 512)) | (1L << (PLSQL_RESERVED_CRASH - 512)) | (1L << (SQL92_RESERVED_CREATE - 512)) | (1L << (SQL92_RESERVED_CURRENT - 512)) | (1L << (SQL92_RESERVED_CURSOR - 512)) | (1L << (SQL92_RESERVED_DATE - 512)) | (1L << (SQL92_RESERVED_DECLARE - 512)) | (1L << (SQL92_RESERVED_DEFAULT - 512)) | (1L << (SQL92_RESERVED_DELETE - 512)) | (1L << (SQL92_RESERVED_DESC - 512)) | (1L << (SQL92_RESERVED_DISTINCT - 512)) | (1L << (SQL92_RESERVED_DROP - 512)) | (1L << (SQL92_RESERVED_ELSE - 512)) | (1L << (SQL92_RESERVED_END - 512)) | (1L << (SQL92_RESERVED_EXCEPTION - 512)) | (1L << (PLSQL_RESERVED_EXCLUSIVE - 512)) | (1L << (SQL92_RESERVED_EXISTS - 512)) | (1L << (SQL92_RESERVED_FALSE - 512)) | (1L << (SQL92_RESERVED_FETCH - 512)) | (1L << (SQL92_RESERVED_FOR - 512)) | (1L << (SQL92_RESERVED_FROM - 512)) | (1L << (SQL92_RESERVED_GOTO - 512)) | (1L << (SQL92_RESERVED_GRANT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (SQL92_RESERVED_GROUP - 576)) | (1L << (SQL92_RESERVED_HAVING - 576)) | (1L << (PLSQL_RESERVED_IDENTIFIED - 576)) | (1L << (PLSQL_RESERVED_IF - 576)) | (1L << (SQL92_RESERVED_IN - 576)) | (1L << (PLSQL_RESERVED_INDEX - 576)) | (1L << (PLSQL_RESERVED_INDEXES - 576)) | (1L << (SQL92_RESERVED_INSERT - 576)) | (1L << (SQL92_RESERVED_INTERSECT - 576)) | (1L << (SQL92_RESERVED_INTO - 576)) | (1L << (SQL92_RESERVED_IS - 576)) | (1L << (SQL92_RESERVED_LIKE - 576)) | (1L << (PLSQL_RESERVED_LOCK - 576)) | (1L << (PLSQL_RESERVED_MINUS - 576)) | (1L << (PLSQL_RESERVED_MODE - 576)) | (1L << (PLSQL_RESERVED_NOCOMPRESS - 576)) | (1L << (SQL92_RESERVED_NOT - 576)) | (1L << (PLSQL_RESERVED_NOWAIT - 576)) | (1L << (SQL92_RESERVED_NULL - 576)) | (1L << (SQL92_RESERVED_OF - 576)) | (1L << (SQL92_RESERVED_ON - 576)) | (1L << (SQL92_RESERVED_OPTION - 576)) | (1L << (SQL92_RESERVED_OR - 576)) | (1L << (SQL92_RESERVED_ORDER - 576)) | (1L << (SQL92_RESERVED_OVERLAPS - 576)) | (1L << (SQL92_RESERVED_PRIOR - 576)) | (1L << (SQL92_RESERVED_PROCEDURE - 576)) | (1L << (SQL92_RESERVED_PUBLIC - 576)) | (1L << (PLSQL_RESERVED_RESOURCE - 576)) | (1L << (SQL92_RESERVED_REVOKE - 576)) | (1L << (SQL92_RESERVED_SELECT - 576)) | (1L << (PLSQL_RESERVED_SHARE - 576)) | (1L << (SQL92_RESERVED_SIZE - 576)) | (1L << (PLSQL_RESERVED_START - 576)) | (1L << (PLSQL_RESERVED_TABAUTH - 576)) | (1L << (SQL92_RESERVED_TABLE - 576)) | (1L << (SQL92_RESERVED_THE - 576)) | (1L << (SQL92_RESERVED_THEN - 576)) | (1L << (SQL92_RESERVED_TO - 576)) | (1L << (SQL92_RESERVED_TRUE - 576)) | (1L << (SQL92_RESERVED_UNION - 576)) | (1L << (SQL92_RESERVED_UNIQUE - 576)) | (1L << (SQL92_RESERVED_UPDATE - 576)) | (1L << (SQL92_RESERVED_VALUES - 576)) | (1L << (SQL92_RESERVED_VIEW - 576)) | (1L << (PLSQL_RESERVED_VIEWS - 576)) | (1L << (SQL92_RESERVED_WHEN - 576)) | (1L << (SQL92_RESERVED_WHERE - 576)) | (1L << (SQL92_RESERVED_WITH - 576)) | (1L << (PLSQL_NON_RESERVED_USING - 576)) | (1L << (PLSQL_NON_RESERVED_MODEL - 576)) | (1L << (PLSQL_NON_RESERVED_ELSIF - 576)) | (1L << (PLSQL_NON_RESERVED_PIVOT - 576)) | (1L << (PLSQL_NON_RESERVED_UNPIVOT - 576)) | (1L << (REGULAR_ID - 576)) | (1L << (ZV - 576)))) != 0) );
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Compilation_unitContext extends ParserRuleContext {
        public TerminalNode EOF() { return getToken(PlSqlParser.EOF, 0); }
        public List<Unit_statementContext> unit_statement() {
            return getRuleContexts(Unit_statementContext.class);
        }
        public Unit_statementContext unit_statement(int i) {
            return getRuleContext(Unit_statementContext.class,i);
        }
        public Compilation_unitContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_compilation_unit; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCompilation_unit(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCompilation_unit(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCompilation_unit(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Compilation_unitContext compilation_unit() throws RecognitionException {
        Compilation_unitContext _localctx = new Compilation_unitContext(_ctx, getState());
        enterRule(_localctx, 2, RULE_compilation_unit);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(786);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==ALTER || _la==BEGIN || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (CREATE - 84)) | (1L << (DECLARE - 84)) | (1L << (DELETE - 84)) | (1L << (DROP - 84)) | (1L << (EXPLAIN - 84)))) != 0) || ((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & ((1L << (FUNCTION - 160)) | (1L << (INSERT - 160)) | (1L << (LOCK - 160)))) != 0) || _la==MERGE || _la==PROCEDURE || _la==SELECT || _la==UPDATE || _la==WITH || _la==LEFT_PAREN) {
                    {
                        {
                            setState(783);
                            unit_statement();
                        }
                    }
                    setState(788);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(789);
                match(EOF);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Sql_scriptContext extends ParserRuleContext {
        public List<Preprocessor_statementContext> preprocessor_statement() {
            return getRuleContexts(Preprocessor_statementContext.class);
        }
        public Preprocessor_statementContext preprocessor_statement(int i) {
            return getRuleContext(Preprocessor_statementContext.class,i);
        }
        public TerminalNode SPACES() { return getToken(PlSqlParser.SPACES, 0); }
        public TerminalNode EOF() { return getToken(PlSqlParser.EOF, 0); }
        public List<Unit_statementContext> unit_statement() {
            return getRuleContexts(Unit_statementContext.class);
        }
        public Unit_statementContext unit_statement(int i) {
            return getRuleContext(Unit_statementContext.class,i);
        }
        public Sql_scriptContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_sql_script; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSql_script(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSql_script(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSql_script(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Sql_scriptContext sql_script() throws RecognitionException {
        Sql_scriptContext _localctx = new Sql_scriptContext(_ctx, getState());
        enterRule(_localctx, 4, RULE_sql_script);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(805);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PP_IF) | (1L << ALTER) | (1L << BEGIN))) != 0) || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (CREATE - 84)) | (1L << (DECLARE - 84)) | (1L << (DELETE - 84)) | (1L << (DROP - 84)) | (1L << (EXPLAIN - 84)))) != 0) || ((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & ((1L << (FUNCTION - 160)) | (1L << (INSERT - 160)) | (1L << (LOCK - 160)))) != 0) || _la==MERGE || _la==PROCEDURE || _la==SELECT || _la==UPDATE || _la==WITH || _la==LEFT_PAREN) {
                    {
                        setState(803);
                        switch (_input.LA(1)) {
                            case ALTER:
                            case BEGIN:
                            case CREATE:
                            case DECLARE:
                            case DELETE:
                            case DROP:
                            case EXPLAIN:
                            case FUNCTION:
                            case INSERT:
                            case LOCK:
                            case MERGE:
                            case PROCEDURE:
                            case SELECT:
                            case UPDATE:
                            case WITH:
                            case LEFT_PAREN:
                            {
                                {
                                    setState(791);
                                    unit_statement();
                                    setState(796);
                                    _errHandler.sync(this);
                                    _alt = getInterpreter().adaptivePredict(_input,2,_ctx);
                                    while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
                                        if ( _alt==1 ) {
                                            {
                                                {
                                                    setState(792);
                                                    match(SEMICOLON);
                                                    setState(793);
                                                    unit_statement();
                                                }
                                            }
                                        }
                                        setState(798);
                                        _errHandler.sync(this);
                                        _alt = getInterpreter().adaptivePredict(_input,2,_ctx);
                                    }
                                    setState(800);
                                    _errHandler.sync(this);
                                    switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
                                        case 1:
                                        {
                                            setState(799);
                                            match(SEMICOLON);
                                        }
                                        break;
                                    }
                                }
                            }
                            break;
                            case PP_IF:
                            {
                                setState(802);
                                preprocessor_statement();
                            }
                            break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    setState(807);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(809);
                _la = _input.LA(1);
                if (_la==EOF || _la==SEMICOLON || _la==SPACES) {
                    {
                        setState(808);
                        _la = _input.LA(1);
                        if ( !(_la==EOF || _la==SEMICOLON || _la==SPACES) ) {
                            _errHandler.recoverInline(this);
                        } else {
                            consume();
                        }
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Unit_statementContext extends ParserRuleContext {
        public Alter_functionContext alter_function() {
            return getRuleContext(Alter_functionContext.class,0);
        }
        public Alter_packageContext alter_package() {
            return getRuleContext(Alter_packageContext.class,0);
        }
        public Alter_procedureContext alter_procedure() {
            return getRuleContext(Alter_procedureContext.class,0);
        }
        public Alter_sequenceContext alter_sequence() {
            return getRuleContext(Alter_sequenceContext.class,0);
        }
        public Alter_triggerContext alter_trigger() {
            return getRuleContext(Alter_triggerContext.class,0);
        }
        public Alter_typeContext alter_type() {
            return getRuleContext(Alter_typeContext.class,0);
        }
        public Create_function_bodyContext create_function_body() {
            return getRuleContext(Create_function_bodyContext.class,0);
        }
        public Create_procedure_bodyContext create_procedure_body() {
            return getRuleContext(Create_procedure_bodyContext.class,0);
        }
        public Create_packageContext create_package() {
            return getRuleContext(Create_packageContext.class,0);
        }
        public Create_sequenceContext create_sequence() {
            return getRuleContext(Create_sequenceContext.class,0);
        }
        public Create_triggerContext create_trigger() {
            return getRuleContext(Create_triggerContext.class,0);
        }
        public Create_typeContext create_type() {
            return getRuleContext(Create_typeContext.class,0);
        }
        public Drop_functionContext drop_function() {
            return getRuleContext(Drop_functionContext.class,0);
        }
        public Drop_packageContext drop_package() {
            return getRuleContext(Drop_packageContext.class,0);
        }
        public Drop_procedureContext drop_procedure() {
            return getRuleContext(Drop_procedureContext.class,0);
        }
        public Drop_sequenceContext drop_sequence() {
            return getRuleContext(Drop_sequenceContext.class,0);
        }
        public Drop_triggerContext drop_trigger() {
            return getRuleContext(Drop_triggerContext.class,0);
        }
        public Drop_typeContext drop_type() {
            return getRuleContext(Drop_typeContext.class,0);
        }
        public Data_manipulation_language_statementsContext data_manipulation_language_statements() {
            return getRuleContext(Data_manipulation_language_statementsContext.class,0);
        }
        public BlockContext block() {
            return getRuleContext(BlockContext.class,0);
        }
        public Unit_statementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_unit_statement; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterUnit_statement(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitUnit_statement(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitUnit_statement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Unit_statementContext unit_statement() throws RecognitionException {
        Unit_statementContext _localctx = new Unit_statementContext(_ctx, getState());
        enterRule(_localctx, 6, RULE_unit_statement);
        try {
            setState(834);
            _errHandler.sync(this);
            switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(811);
                    alter_function();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(812);
                    alter_package();
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(813);
                    alter_procedure();
                }
                break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                {
                    setState(814);
                    alter_sequence();
                }
                break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                {
                    setState(815);
                    alter_trigger();
                }
                break;
                case 6:
                    enterOuterAlt(_localctx, 6);
                {
                    setState(816);
                    alter_type();
                }
                break;
                case 7:
                    enterOuterAlt(_localctx, 7);
                {
                    setState(817);
                    create_function_body();
                }
                break;
                case 8:
                    enterOuterAlt(_localctx, 8);
                {
                    setState(818);
                    create_procedure_body();
                }
                break;
                case 9:
                    enterOuterAlt(_localctx, 9);
                {
                    setState(819);
                    create_package();
                }
                break;
                case 10:
                    enterOuterAlt(_localctx, 10);
                {
                    setState(820);
                    create_sequence();
                }
                break;
                case 11:
                    enterOuterAlt(_localctx, 11);
                {
                    setState(821);
                    create_trigger();
                }
                break;
                case 12:
                    enterOuterAlt(_localctx, 12);
                {
                    setState(822);
                    create_type();
                }
                break;
                case 13:
                    enterOuterAlt(_localctx, 13);
                {
                    setState(823);
                    drop_function();
                }
                break;
                case 14:
                    enterOuterAlt(_localctx, 14);
                {
                    setState(824);
                    drop_package();
                }
                break;
                case 15:
                    enterOuterAlt(_localctx, 15);
                {
                    setState(825);
                    drop_procedure();
                }
                break;
                case 16:
                    enterOuterAlt(_localctx, 16);
                {
                    setState(826);
                    drop_sequence();
                }
                break;
                case 17:
                    enterOuterAlt(_localctx, 17);
                {
                    setState(827);
                    drop_trigger();
                }
                break;
                case 18:
                    enterOuterAlt(_localctx, 18);
                {
                    setState(828);
                    drop_type();
                }
                break;
                case 19:
                    enterOuterAlt(_localctx, 19);
                {
                    setState(829);
                    data_manipulation_language_statements();
                }
                break;
                case 20:
                    enterOuterAlt(_localctx, 20);
                {
                    setState(830);
                    block();
                    setState(831);
                    match(SEMICOLON);
                    setState(832);
                    match(SOLIDUS);
                }
                break;
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Declare_wrapperContext extends ParserRuleContext {
        public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
        public List<Declare_specContext> declare_spec() {
            return getRuleContexts(Declare_specContext.class);
        }
        public Declare_specContext declare_spec(int i) {
            return getRuleContext(Declare_specContext.class,i);
        }
        public Declare_wrapperContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_declare_wrapper; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDeclare_wrapper(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDeclare_wrapper(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDeclare_wrapper(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Declare_wrapperContext declare_wrapper() throws RecognitionException {
        Declare_wrapperContext _localctx = new Declare_wrapperContext(_ctx, getState());
        enterRule(_localctx, 8, RULE_declare_wrapper);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(836);
                match(DECLARE);
                setState(840);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input,8,_ctx);
                while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
                    if ( _alt==1 ) {
                        {
                            {
                                setState(837);
                                declare_spec();
                            }
                        }
                    }
                    setState(842);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input,8,_ctx);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Is_or_asContext extends ParserRuleContext {
        public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
        public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
        public Is_or_asContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_is_or_as; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterIs_or_as(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitIs_or_as(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitIs_or_as(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Is_or_asContext is_or_as() throws RecognitionException {
        Is_or_asContext _localctx = new Is_or_asContext(_ctx, getState());
        enterRule(_localctx, 10, RULE_is_or_as);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(843);
                _la = _input.LA(1);
                if ( !(_la==AS || _la==IS) ) {
                    _errHandler.recoverInline(this);
                } else {
                    consume();
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Drop_functionContext extends ParserRuleContext {
        public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
        public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
        public Function_nameContext function_name() {
            return getRuleContext(Function_nameContext.class,0);
        }
        public Drop_functionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_drop_function; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDrop_function(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDrop_function(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDrop_function(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Drop_functionContext drop_function() throws RecognitionException {
        Drop_functionContext _localctx = new Drop_functionContext(_ctx, getState());
        enterRule(_localctx, 12, RULE_drop_function);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(845);
                match(DROP);
                setState(846);
                match(FUNCTION);
                setState(847);
                function_name();
                setState(848);
                match(SEMICOLON);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Alter_functionContext extends ParserRuleContext {
        public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
        public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
        public Function_nameContext function_name() {
            return getRuleContext(Function_nameContext.class,0);
        }
        public TerminalNode COMPILE() { return getToken(PlSqlParser.COMPILE, 0); }
        public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
        public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
            return getRuleContexts(Compiler_parameters_clauseContext.class);
        }
        public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
            return getRuleContext(Compiler_parameters_clauseContext.class,i);
        }
        public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
        public TerminalNode SETTINGS() { return getToken(PlSqlParser.SETTINGS, 0); }
        public Alter_functionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_alter_function; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAlter_function(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAlter_function(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAlter_function(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Alter_functionContext alter_function() throws RecognitionException {
        Alter_functionContext _localctx = new Alter_functionContext(_ctx, getState());
        enterRule(_localctx, 14, RULE_alter_function);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(850);
                match(ALTER);
                setState(851);
                match(FUNCTION);
                setState(852);
                function_name();
                setState(853);
                match(COMPILE);
                setState(855);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
                    case 1:
                    {
                        setState(854);
                        match(DEBUG);
                    }
                    break;
                }
                setState(860);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input,10,_ctx);
                while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
                    if ( _alt==1 ) {
                        {
                            {
                                setState(857);
                                compiler_parameters_clause();
                            }
                        }
                    }
                    setState(862);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input,10,_ctx);
                }
                setState(865);
                _la = _input.LA(1);
                if (_la==REUSE) {
                    {
                        setState(863);
                        match(REUSE);
                        setState(864);
                        match(SETTINGS);
                    }
                }

                setState(867);
                match(SEMICOLON);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Create_function_bodyContext extends ParserRuleContext {
        public Function_specContext function_spec() {
            return getRuleContext(Function_specContext.class,0);
        }
        public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
        public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
        public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
        public Create_function_bodyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_create_function_body; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCreate_function_body(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCreate_function_body(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCreate_function_body(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Create_function_bodyContext create_function_body() throws RecognitionException {
        Create_function_bodyContext _localctx = new Create_function_bodyContext(_ctx, getState());
        enterRule(_localctx, 16, RULE_create_function_body);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(874);
                _la = _input.LA(1);
                if (_la==CREATE) {
                    {
                        setState(869);
                        match(CREATE);
                        setState(872);
                        _la = _input.LA(1);
                        if (_la==OR) {
                            {
                                setState(870);
                                match(OR);
                                setState(871);
                                match(REPLACE);
                            }
                        }

                    }
                }

                setState(876);
                function_spec();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Function_specContext extends ParserRuleContext {
        public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
        public Function_nameContext function_name() {
            return getRuleContext(Function_nameContext.class,0);
        }
        public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
        public Type_specContext type_spec() {
            return getRuleContext(Type_specContext.class,0);
        }
        public List<ParameterContext> parameter() {
            return getRuleContexts(ParameterContext.class);
        }
        public ParameterContext parameter(int i) {
            return getRuleContext(ParameterContext.class,i);
        }
        public List<Invoker_rights_clauseContext> invoker_rights_clause() {
            return getRuleContexts(Invoker_rights_clauseContext.class);
        }
        public Invoker_rights_clauseContext invoker_rights_clause(int i) {
            return getRuleContext(Invoker_rights_clauseContext.class,i);
        }
        public List<Parallel_enable_clauseContext> parallel_enable_clause() {
            return getRuleContexts(Parallel_enable_clauseContext.class);
        }
        public Parallel_enable_clauseContext parallel_enable_clause(int i) {
            return getRuleContext(Parallel_enable_clauseContext.class,i);
        }
        public List<Result_cache_clauseContext> result_cache_clause() {
            return getRuleContexts(Result_cache_clauseContext.class);
        }
        public Result_cache_clauseContext result_cache_clause(int i) {
            return getRuleContext(Result_cache_clauseContext.class,i);
        }
        public List<TerminalNode> DETERMINISTIC() { return getTokens(PlSqlParser.DETERMINISTIC); }
        public TerminalNode DETERMINISTIC(int i) {
            return getToken(PlSqlParser.DETERMINISTIC, i);
        }
        public List<TerminalNode> PIPELINED() { return getTokens(PlSqlParser.PIPELINED); }
        public TerminalNode PIPELINED(int i) {
            return getToken(PlSqlParser.PIPELINED, i);
        }
        public List<TerminalNode> AGGREGATE() { return getTokens(PlSqlParser.AGGREGATE); }
        public TerminalNode AGGREGATE(int i) {
            return getToken(PlSqlParser.AGGREGATE, i);
        }
        public List<TerminalNode> USING() { return getTokens(PlSqlParser.USING); }
        public TerminalNode USING(int i) {
            return getToken(PlSqlParser.USING, i);
        }
        public List<Implementation_type_nameContext> implementation_type_name() {
            return getRuleContexts(Implementation_type_nameContext.class);
        }
        public Implementation_type_nameContext implementation_type_name(int i) {
            return getRuleContext(Implementation_type_nameContext.class,i);
        }
        public Is_or_asContext is_or_as() {
            return getRuleContext(Is_or_asContext.class,0);
        }
        public BodyContext body() {
            return getRuleContext(BodyContext.class,0);
        }
        public Call_specContext call_spec() {
            return getRuleContext(Call_specContext.class,0);
        }
        public List<Declare_specContext> declare_spec() {
            return getRuleContexts(Declare_specContext.class);
        }
        public Declare_specContext declare_spec(int i) {
            return getRuleContext(Declare_specContext.class,i);
        }
        public Function_specContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_function_spec; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFunction_spec(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFunction_spec(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFunction_spec(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Function_specContext function_spec() throws RecognitionException {
        Function_specContext _localctx = new Function_specContext(_ctx, getState());
        enterRule(_localctx, 18, RULE_function_spec);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(878);
                match(FUNCTION);
                setState(879);
                function_name();
                setState(891);
                _la = _input.LA(1);
                if (_la==LEFT_PAREN) {
                    {
                        setState(880);
                        match(LEFT_PAREN);
                        setState(881);
                        parameter();
                        setState(886);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la==COMMA) {
                            {
                                {
                                    setState(882);
                                    match(COMMA);
                                    setState(883);
                                    parameter();
                                }
                            }
                            setState(888);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                        setState(889);
                        match(RIGHT_PAREN);
                    }
                }

                setState(893);
                match(RETURN);
                setState(894);
                type_spec();
                setState(905);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==AGGREGATE || _la==AUTHID || _la==DETERMINISTIC || ((((_la - 285)) & ~0x3f) == 0 && ((1L << (_la - 285)) & ((1L << (PARALLEL_ENABLE - 285)) | (1L << (PIPELINED - 285)) | (1L << (RESULT_CACHE - 285)))) != 0)) {
                    {
                        setState(903);
                        switch (_input.LA(1)) {
                            case AUTHID:
                            {
                                setState(895);
                                invoker_rights_clause();
                            }
                            break;
                            case PARALLEL_ENABLE:
                            {
                                setState(896);
                                parallel_enable_clause();
                            }
                            break;
                            case RESULT_CACHE:
                            {
                                setState(897);
                                result_cache_clause();
                            }
                            break;
                            case DETERMINISTIC:
                            {
                                setState(898);
                                match(DETERMINISTIC);
                            }
                            break;
                            case PIPELINED:
                            {
                                setState(899);
                                match(PIPELINED);
                            }
                            break;
                            case AGGREGATE:
                            {
                                setState(900);
                                match(AGGREGATE);
                                setState(901);
                                match(USING);
                                setState(902);
                                implementation_type_name();
                            }
                            break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    setState(907);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(919);
                _la = _input.LA(1);
                if (_la==AS || _la==IS) {
                    {
                        setState(908);
                        is_or_as();
                        setState(917);
                        _errHandler.sync(this);
                        switch ( getInterpreter().adaptivePredict(_input,19,_ctx) ) {
                            case 1:
                            {
                                setState(912);
                                _errHandler.sync(this);
                                _alt = getInterpreter().adaptivePredict(_input,18,_ctx);
                                while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
                                    if ( _alt==1 ) {
                                        {
                                            {
                                                setState(909);
                                                declare_spec();
                                            }
                                        }
                                    }
                                    setState(914);
                                    _errHandler.sync(this);
                                    _alt = getInterpreter().adaptivePredict(_input,18,_ctx);
                                }
                                setState(915);
                                body();
                            }
                            break;
                            case 2:
                            {
                                setState(916);
                                call_spec();
                            }
                            break;
                        }
                    }
                }

                setState(921);
                match(SEMICOLON);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Parallel_enable_clauseContext extends ParserRuleContext {
        public TerminalNode PARALLEL_ENABLE() { return getToken(PlSqlParser.PARALLEL_ENABLE, 0); }
        public Partition_by_clauseContext partition_by_clause() {
            return getRuleContext(Partition_by_clauseContext.class,0);
        }
        public Parallel_enable_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_parallel_enable_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterParallel_enable_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitParallel_enable_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitParallel_enable_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Parallel_enable_clauseContext parallel_enable_clause() throws RecognitionException {
        Parallel_enable_clauseContext _localctx = new Parallel_enable_clauseContext(_ctx, getState());
        enterRule(_localctx, 20, RULE_parallel_enable_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(923);
                match(PARALLEL_ENABLE);
                setState(925);
                _la = _input.LA(1);
                if (_la==LEFT_PAREN) {
                    {
                        setState(924);
                        partition_by_clause();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Partition_by_clauseContext extends ParserRuleContext {
        public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class,0);
        }
        public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
        public TerminalNode ANY() { return getToken(PlSqlParser.ANY, 0); }
        public List<Column_nameContext> column_name() {
            return getRuleContexts(Column_nameContext.class);
        }
        public Column_nameContext column_name(int i) {
            return getRuleContext(Column_nameContext.class,i);
        }
        public TerminalNode HASH() { return getToken(PlSqlParser.HASH, 0); }
        public TerminalNode RANGE() { return getToken(PlSqlParser.RANGE, 0); }
        public Streaming_clauseContext streaming_clause() {
            return getRuleContext(Streaming_clauseContext.class,0);
        }
        public Partition_by_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_partition_by_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPartition_by_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPartition_by_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPartition_by_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Partition_by_clauseContext partition_by_clause() throws RecognitionException {
        Partition_by_clauseContext _localctx = new Partition_by_clauseContext(_ctx, getState());
        enterRule(_localctx, 22, RULE_partition_by_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(927);
                match(LEFT_PAREN);
                setState(928);
                match(PARTITION);
                setState(929);
                expression();
                setState(930);
                match(BY);
                setState(944);
                switch (_input.LA(1)) {
                    case ANY:
                    {
                        setState(931);
                        match(ANY);
                    }
                    break;
                    case HASH:
                    case RANGE:
                    {
                        setState(932);
                        _la = _input.LA(1);
                        if ( !(_la==HASH || _la==RANGE) ) {
                            _errHandler.recoverInline(this);
                        } else {
                            consume();
                        }
                        setState(933);
                        match(LEFT_PAREN);
                        setState(934);
                        column_name();
                        setState(939);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la==COMMA) {
                            {
                                {
                                    setState(935);
                                    match(COMMA);
                                    setState(936);
                                    column_name();
                                }
                            }
                            setState(941);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                        setState(942);
                        match(RIGHT_PAREN);
                    }
                    break;
                    default:
                        throw new NoViableAltException(this);
                }
                setState(947);
                _la = _input.LA(1);
                if (_la==CLUSTER || _la==ORDER) {
                    {
                        setState(946);
                        streaming_clause();
                    }
                }

                setState(949);
                match(RIGHT_PAREN);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Result_cache_clauseContext extends ParserRuleContext {
        public TerminalNode RESULT_CACHE() { return getToken(PlSqlParser.RESULT_CACHE, 0); }
        public Relies_on_partContext relies_on_part() {
            return getRuleContext(Relies_on_partContext.class,0);
        }
        public Result_cache_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_result_cache_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterResult_cache_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitResult_cache_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitResult_cache_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Result_cache_clauseContext result_cache_clause() throws RecognitionException {
        Result_cache_clauseContext _localctx = new Result_cache_clauseContext(_ctx, getState());
        enterRule(_localctx, 24, RULE_result_cache_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(951);
                match(RESULT_CACHE);
                setState(953);
                _la = _input.LA(1);
                if (_la==RELIES_ON) {
                    {
                        setState(952);
                        relies_on_part();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Relies_on_partContext extends ParserRuleContext {
        public TerminalNode RELIES_ON() { return getToken(PlSqlParser.RELIES_ON, 0); }
        public List<Tableview_nameContext> tableview_name() {
            return getRuleContexts(Tableview_nameContext.class);
        }
        public Tableview_nameContext tableview_name(int i) {
            return getRuleContext(Tableview_nameContext.class,i);
        }
        public Relies_on_partContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_relies_on_part; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterRelies_on_part(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitRelies_on_part(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitRelies_on_part(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Relies_on_partContext relies_on_part() throws RecognitionException {
        Relies_on_partContext _localctx = new Relies_on_partContext(_ctx, getState());
        enterRule(_localctx, 26, RULE_relies_on_part);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(955);
                match(RELIES_ON);
                setState(956);
                match(LEFT_PAREN);
                setState(957);
                tableview_name();
                setState(962);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==COMMA) {
                    {
                        {
                            setState(958);
                            match(COMMA);
                            setState(959);
                            tableview_name();
                        }
                    }
                    setState(964);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(965);
                match(RIGHT_PAREN);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Streaming_clauseContext extends ParserRuleContext {
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class,0);
        }
        public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
        public List<Column_nameContext> column_name() {
            return getRuleContexts(Column_nameContext.class);
        }
        public Column_nameContext column_name(int i) {
            return getRuleContext(Column_nameContext.class,i);
        }
        public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
        public TerminalNode CLUSTER() { return getToken(PlSqlParser.CLUSTER, 0); }
        public Streaming_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_streaming_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterStreaming_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitStreaming_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitStreaming_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Streaming_clauseContext streaming_clause() throws RecognitionException {
        Streaming_clauseContext _localctx = new Streaming_clauseContext(_ctx, getState());
        enterRule(_localctx, 28, RULE_streaming_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(967);
                _la = _input.LA(1);
                if ( !(_la==CLUSTER || _la==ORDER) ) {
                    _errHandler.recoverInline(this);
                } else {
                    consume();
                }
                setState(968);
                expression();
                setState(969);
                match(BY);
                setState(970);
                match(LEFT_PAREN);
                setState(971);
                column_name();
                setState(976);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==COMMA) {
                    {
                        {
                            setState(972);
                            match(COMMA);
                            setState(973);
                            column_name();
                        }
                    }
                    setState(978);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(979);
                match(RIGHT_PAREN);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Drop_packageContext extends ParserRuleContext {
        public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
        public TerminalNode PACKAGE() { return getToken(PlSqlParser.PACKAGE, 0); }
        public Package_nameContext package_name() {
            return getRuleContext(Package_nameContext.class,0);
        }
        public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
        public Drop_packageContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_drop_package; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDrop_package(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDrop_package(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDrop_package(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Drop_packageContext drop_package() throws RecognitionException {
        Drop_packageContext _localctx = new Drop_packageContext(_ctx, getState());
        enterRule(_localctx, 30, RULE_drop_package);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(981);
                match(DROP);
                setState(982);
                match(PACKAGE);
                setState(984);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,28,_ctx) ) {
                    case 1:
                    {
                        setState(983);
                        match(BODY);
                    }
                    break;
                }
                setState(986);
                package_name();
                setState(987);
                match(SEMICOLON);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Alter_packageContext extends ParserRuleContext {
        public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
        public List<TerminalNode> PACKAGE() { return getTokens(PlSqlParser.PACKAGE); }
        public TerminalNode PACKAGE(int i) {
            return getToken(PlSqlParser.PACKAGE, i);
        }
        public Package_nameContext package_name() {
            return getRuleContext(Package_nameContext.class,0);
        }
        public TerminalNode COMPILE() { return getToken(PlSqlParser.COMPILE, 0); }
        public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
        public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
            return getRuleContexts(Compiler_parameters_clauseContext.class);
        }
        public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
            return getRuleContext(Compiler_parameters_clauseContext.class,i);
        }
        public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
        public TerminalNode SETTINGS() { return getToken(PlSqlParser.SETTINGS, 0); }
        public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
        public TerminalNode SPECIFICATION() { return getToken(PlSqlParser.SPECIFICATION, 0); }
        public Alter_packageContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_alter_package; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAlter_package(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAlter_package(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAlter_package(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Alter_packageContext alter_package() throws RecognitionException {
        Alter_packageContext _localctx = new Alter_packageContext(_ctx, getState());
        enterRule(_localctx, 32, RULE_alter_package);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(989);
                match(ALTER);
                setState(990);
                match(PACKAGE);
                setState(991);
                package_name();
                setState(992);
                match(COMPILE);
                setState(994);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,29,_ctx) ) {
                    case 1:
                    {
                        setState(993);
                        match(DEBUG);
                    }
                    break;
                }
                setState(997);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,30,_ctx) ) {
                    case 1:
                    {
                        setState(996);
                        _la = _input.LA(1);
                        if ( !(_la==BODY || _la==PACKAGE || _la==SPECIFICATION) ) {
                            _errHandler.recoverInline(this);
                        } else {
                            consume();
                        }
                    }
                    break;
                }
                setState(1002);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input,31,_ctx);
                while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
                    if ( _alt==1 ) {
                        {
                            {
                                setState(999);
                                compiler_parameters_clause();
                            }
                        }
                    }
                    setState(1004);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input,31,_ctx);
                }
                setState(1007);
                _la = _input.LA(1);
                if (_la==REUSE) {
                    {
                        setState(1005);
                        match(REUSE);
                        setState(1006);
                        match(SETTINGS);
                    }
                }

                setState(1009);
                match(SEMICOLON);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Create_packageContext extends ParserRuleContext {
        public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
        public TerminalNode PACKAGE() { return getToken(PlSqlParser.PACKAGE, 0); }
        public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
        public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
        public Package_specContext package_spec() {
            return getRuleContext(Package_specContext.class,0);
        }
        public Package_bodyContext package_body() {
            return getRuleContext(Package_bodyContext.class,0);
        }
        public Create_packageContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_create_package; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCreate_package(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCreate_package(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCreate_package(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Create_packageContext create_package() throws RecognitionException {
        Create_packageContext _localctx = new Create_packageContext(_ctx, getState());
        enterRule(_localctx, 34, RULE_create_package);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1011);
                match(CREATE);
                setState(1014);
                _la = _input.LA(1);
                if (_la==OR) {
                    {
                        setState(1012);
                        match(OR);
                        setState(1013);
                        match(REPLACE);
                    }
                }

                setState(1016);
                match(PACKAGE);
                setState(1019);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,34,_ctx) ) {
                    case 1:
                    {
                        setState(1017);
                        package_spec();
                    }
                    break;
                    case 2:
                    {
                        setState(1018);
                        package_body();
                    }
                    break;
                }
                setState(1021);
                match(SEMICOLON);
                setState(1022);
                match(SOLIDUS);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Package_bodyContext extends ParserRuleContext {
        public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
        public List<Package_nameContext> package_name() {
            return getRuleContexts(Package_nameContext.class);
        }
        public Package_nameContext package_name(int i) {
            return getRuleContext(Package_nameContext.class,i);
        }
        public Is_or_asContext is_or_as() {
            return getRuleContext(Is_or_asContext.class,0);
        }
        public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
        public List<Package_obj_bodyContext> package_obj_body() {
            return getRuleContexts(Package_obj_bodyContext.class);
        }
        public Package_obj_bodyContext package_obj_body(int i) {
            return getRuleContext(Package_obj_bodyContext.class,i);
        }
        public TerminalNode BEGIN() { return getToken(PlSqlParser.BEGIN, 0); }
        public Seq_of_statementsContext seq_of_statements() {
            return getRuleContext(Seq_of_statementsContext.class,0);
        }
        public Exception_clauseContext exception_clause() {
            return getRuleContext(Exception_clauseContext.class,0);
        }
        public Package_bodyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_package_body; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPackage_body(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPackage_body(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPackage_body(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Package_bodyContext package_body() throws RecognitionException {
        Package_bodyContext _localctx = new Package_bodyContext(_ctx, getState());
        enterRule(_localctx, 36, RULE_package_body);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(1024);
                match(BODY);
                setState(1025);
                package_name();
                setState(1026);
                is_or_as();
                setState(1030);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input,35,_ctx);
                while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
                    if ( _alt==1 ) {
                        {
                            {
                                setState(1027);
                                package_obj_body();
                            }
                        }
                    }
                    setState(1032);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input,35,_ctx);
                }
                setState(1035);
                _la = _input.LA(1);
                if (_la==BEGIN) {
                    {
                        setState(1033);
                        match(BEGIN);
                        setState(1034);
                        seq_of_statements();
                    }
                }

                setState(1038);
                _la = _input.LA(1);
                if (_la==EXCEPTION) {
                    {
                        setState(1037);
                        exception_clause();
                    }
                }

                setState(1040);
                match(END);
                setState(1042);
                _la = _input.LA(1);
                if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ALTER) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREADTH) | (1L << BULK) | (1L << BY) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHECK) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DEPTH - 64)) | (1L << (DESC - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (ELSE - 64)) | (1L << (ELSIF - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (END - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EXCEPT - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXCLUSIVE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FETCH - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FOR - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GOTO - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HAVING - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IN - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEX - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERSECT - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTO - 192)) | (1L << (INVALIDATE - 192)) | (1L << (IS - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCK - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUS - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCACHE - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)) | (1L << (NOENTITYESCAPING - 192)) | (1L << (NOMAXVALUE - 192)) | (1L << (NOMINVALUE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NONE - 256)) | (1L << (NOORDER - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NOT - 256)) | (1L << (NOWAIT - 256)) | (1L << (NULL - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OF - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ON - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (OPTION - 256)) | (1L << (OR - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDER - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PIVOT - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (PRIOR - 256)) | (1L << (PROCEDURE - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (REVOKE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SEARCH - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELECT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENCE - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHARE - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (SQL_PERCENT_ROWCOUNT - 320)) | (1L << (STANDALONE - 320)) | (1L << (START - 320)) | (1L << (STARTUP - 320)) | (1L << (STATEMENT - 320)) | (1L << (STATEMENT_ID - 320)) | (1L << (STATIC - 320)) | (1L << (STATISTICS - 320)) | (1L << (STRING - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TABLE - 384)) | (1L << (THE - 384)) | (1L << (THEN - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TO - 384)) | (1L << (TO_CHAR - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUE - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNION - 384)) | (1L << (UNIQUE - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNPIVOT - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATE - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (USING - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VALUES - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHEN - 384)) | (1L << (WHENEVER - 384)) | (1L << (WHERE - 384)) | (1L << (WHILE - 384)) | (1L << (WITH - 384)) | (1L << (WITHIN - 384)) | (1L << (WORK - 384)) | (1L << (WRITE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)) | (1L << (REGR_ - 448)) | (1L << (STDDEV - 448)) | (1L << (VAR_ - 448)) | (1L << (COVAR_ - 448)) | (1L << (DELIMITED_ID - 448)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
                    {
                        setState(1041);
                        package_name();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Package_specContext extends ParserRuleContext {
        public List<Package_nameContext> package_name() {
            return getRuleContexts(Package_nameContext.class);
        }
        public Package_nameContext package_name(int i) {
            return getRuleContext(Package_nameContext.class,i);
        }
        public Is_or_asContext is_or_as() {
            return getRuleContext(Is_or_asContext.class,0);
        }
        public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
        public Invoker_rights_clauseContext invoker_rights_clause() {
            return getRuleContext(Invoker_rights_clauseContext.class,0);
        }
        public List<Package_obj_specContext> package_obj_spec() {
            return getRuleContexts(Package_obj_specContext.class);
        }
        public Package_obj_specContext package_obj_spec(int i) {
            return getRuleContext(Package_obj_specContext.class,i);
        }
        public Package_specContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_package_spec; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPackage_spec(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPackage_spec(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPackage_spec(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Package_specContext package_spec() throws RecognitionException {
        Package_specContext _localctx = new Package_specContext(_ctx, getState());
        enterRule(_localctx, 38, RULE_package_spec);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(1044);
                package_name();
                setState(1046);
                _la = _input.LA(1);
                if (_la==AUTHID) {
                    {
                        setState(1045);
                        invoker_rights_clause();
                    }
                }

                setState(1048);
                is_or_as();
                setState(1052);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input,40,_ctx);
                while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
                    if ( _alt==1 ) {
                        {
                            {
                                setState(1049);
                                package_obj_spec();
                            }
                        }
                    }
                    setState(1054);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input,40,_ctx);
                }
                setState(1055);
                match(END);
                setState(1057);
                _la = _input.LA(1);
                if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ALTER) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREADTH) | (1L << BULK) | (1L << BY) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHECK) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DEPTH - 64)) | (1L << (DESC - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (ELSE - 64)) | (1L << (ELSIF - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (END - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EXCEPT - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXCLUSIVE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FETCH - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FOR - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GOTO - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HAVING - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IN - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEX - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERSECT - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTO - 192)) | (1L << (INVALIDATE - 192)) | (1L << (IS - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCK - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUS - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCACHE - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)) | (1L << (NOENTITYESCAPING - 192)) | (1L << (NOMAXVALUE - 192)) | (1L << (NOMINVALUE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NONE - 256)) | (1L << (NOORDER - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NOT - 256)) | (1L << (NOWAIT - 256)) | (1L << (NULL - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OF - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ON - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (OPTION - 256)) | (1L << (OR - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDER - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PIVOT - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (PRIOR - 256)) | (1L << (PROCEDURE - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (REVOKE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SEARCH - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELECT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENCE - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHARE - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (SQL_PERCENT_ROWCOUNT - 320)) | (1L << (STANDALONE - 320)) | (1L << (START - 320)) | (1L << (STARTUP - 320)) | (1L << (STATEMENT - 320)) | (1L << (STATEMENT_ID - 320)) | (1L << (STATIC - 320)) | (1L << (STATISTICS - 320)) | (1L << (STRING - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TABLE - 384)) | (1L << (THE - 384)) | (1L << (THEN - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TO - 384)) | (1L << (TO_CHAR - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUE - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNION - 384)) | (1L << (UNIQUE - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNPIVOT - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATE - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (USING - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VALUES - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHEN - 384)) | (1L << (WHENEVER - 384)) | (1L << (WHERE - 384)) | (1L << (WHILE - 384)) | (1L << (WITH - 384)) | (1L << (WITHIN - 384)) | (1L << (WORK - 384)) | (1L << (WRITE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)) | (1L << (REGR_ - 448)) | (1L << (STDDEV - 448)) | (1L << (VAR_ - 448)) | (1L << (COVAR_ - 448)) | (1L << (DELIMITED_ID - 448)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
                    {
                        setState(1056);
                        package_name();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Package_obj_specContext extends ParserRuleContext {
        public Variable_declarationContext variable_declaration() {
            return getRuleContext(Variable_declarationContext.class,0);
        }
        public Subtype_declarationContext subtype_declaration() {
            return getRuleContext(Subtype_declarationContext.class,0);
        }
        public Cursor_declarationContext cursor_declaration() {
            return getRuleContext(Cursor_declarationContext.class,0);
        }
        public Exception_declarationContext exception_declaration() {
            return getRuleContext(Exception_declarationContext.class,0);
        }
        public Pragma_declarationContext pragma_declaration() {
            return getRuleContext(Pragma_declarationContext.class,0);
        }
        public Record_declarationContext record_declaration() {
            return getRuleContext(Record_declarationContext.class,0);
        }
        public Table_declarationContext table_declaration() {
            return getRuleContext(Table_declarationContext.class,0);
        }
        public Procedure_specContext procedure_spec() {
            return getRuleContext(Procedure_specContext.class,0);
        }
        public Function_specContext function_spec() {
            return getRuleContext(Function_specContext.class,0);
        }
        public Preprocessor_statementContext preprocessor_statement() {
            return getRuleContext(Preprocessor_statementContext.class,0);
        }
        public Package_obj_specContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_package_obj_spec; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPackage_obj_spec(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPackage_obj_spec(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPackage_obj_spec(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Package_obj_specContext package_obj_spec() throws RecognitionException {
        Package_obj_specContext _localctx = new Package_obj_specContext(_ctx, getState());
        enterRule(_localctx, 40, RULE_package_obj_spec);
        try {
            setState(1069);
            _errHandler.sync(this);
            switch ( getInterpreter().adaptivePredict(_input,42,_ctx) ) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(1059);
                    variable_declaration();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(1060);
                    subtype_declaration();
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(1061);
                    cursor_declaration();
                }
                break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                {
                    setState(1062);
                    exception_declaration();
                }
                break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                {
                    setState(1063);
                    pragma_declaration();
                }
                break;
                case 6:
                    enterOuterAlt(_localctx, 6);
                {
                    setState(1064);
                    record_declaration();
                }
                break;
                case 7:
                    enterOuterAlt(_localctx, 7);
                {
                    setState(1065);
                    table_declaration();
                }
                break;
                case 8:
                    enterOuterAlt(_localctx, 8);
                {
                    setState(1066);
                    procedure_spec();
                }
                break;
                case 9:
                    enterOuterAlt(_localctx, 9);
                {
                    setState(1067);
                    function_spec();
                }
                break;
                case 10:
                    enterOuterAlt(_localctx, 10);
                {
                    setState(1068);
                    preprocessor_statement();
                }
                break;
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Package_obj_bodyContext extends ParserRuleContext {
        public Variable_declarationContext variable_declaration() {
            return getRuleContext(Variable_declarationContext.class,0);
        }
        public Subtype_declarationContext subtype_declaration() {
            return getRuleContext(Subtype_declarationContext.class,0);
        }
        public Cursor_declarationContext cursor_declaration() {
            return getRuleContext(Cursor_declarationContext.class,0);
        }
        public Exception_declarationContext exception_declaration() {
            return getRuleContext(Exception_declarationContext.class,0);
        }
        public Pragma_declarationContext pragma_declaration() {
            return getRuleContext(Pragma_declarationContext.class,0);
        }
        public Record_declarationContext record_declaration() {
            return getRuleContext(Record_declarationContext.class,0);
        }
        public Table_declarationContext table_declaration() {
            return getRuleContext(Table_declarationContext.class,0);
        }
        public Create_procedure_bodyContext create_procedure_body() {
            return getRuleContext(Create_procedure_bodyContext.class,0);
        }
        public Create_function_bodyContext create_function_body() {
            return getRuleContext(Create_function_bodyContext.class,0);
        }
        public Preprocessor_statementContext preprocessor_statement() {
            return getRuleContext(Preprocessor_statementContext.class,0);
        }
        public Package_obj_bodyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_package_obj_body; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPackage_obj_body(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPackage_obj_body(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPackage_obj_body(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Package_obj_bodyContext package_obj_body() throws RecognitionException {
        Package_obj_bodyContext _localctx = new Package_obj_bodyContext(_ctx, getState());
        enterRule(_localctx, 42, RULE_package_obj_body);
        try {
            setState(1081);
            _errHandler.sync(this);
            switch ( getInterpreter().adaptivePredict(_input,43,_ctx) ) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(1071);
                    variable_declaration();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(1072);
                    subtype_declaration();
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(1073);
                    cursor_declaration();
                }
                break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                {
                    setState(1074);
                    exception_declaration();
                }
                break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                {
                    setState(1075);
                    pragma_declaration();
                }
                break;
                case 6:
                    enterOuterAlt(_localctx, 6);
                {
                    setState(1076);
                    record_declaration();
                }
                break;
                case 7:
                    enterOuterAlt(_localctx, 7);
                {
                    setState(1077);
                    table_declaration();
                }
                break;
                case 8:
                    enterOuterAlt(_localctx, 8);
                {
                    setState(1078);
                    create_procedure_body();
                }
                break;
                case 9:
                    enterOuterAlt(_localctx, 9);
                {
                    setState(1079);
                    create_function_body();
                }
                break;
                case 10:
                    enterOuterAlt(_localctx, 10);
                {
                    setState(1080);
                    preprocessor_statement();
                }
                break;
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Drop_procedureContext extends ParserRuleContext {
        public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
        public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
        public Procedure_nameContext procedure_name() {
            return getRuleContext(Procedure_nameContext.class,0);
        }
        public Drop_procedureContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_drop_procedure; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDrop_procedure(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDrop_procedure(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDrop_procedure(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Drop_procedureContext drop_procedure() throws RecognitionException {
        Drop_procedureContext _localctx = new Drop_procedureContext(_ctx, getState());
        enterRule(_localctx, 44, RULE_drop_procedure);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1083);
                match(DROP);
                setState(1084);
                match(PROCEDURE);
                setState(1085);
                procedure_name();
                setState(1086);
                match(SEMICOLON);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Alter_procedureContext extends ParserRuleContext {
        public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
        public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
        public Procedure_nameContext procedure_name() {
            return getRuleContext(Procedure_nameContext.class,0);
        }
        public TerminalNode COMPILE() { return getToken(PlSqlParser.COMPILE, 0); }
        public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
        public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
            return getRuleContexts(Compiler_parameters_clauseContext.class);
        }
        public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
            return getRuleContext(Compiler_parameters_clauseContext.class,i);
        }
        public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
        public TerminalNode SETTINGS() { return getToken(PlSqlParser.SETTINGS, 0); }
        public Alter_procedureContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_alter_procedure; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAlter_procedure(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAlter_procedure(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAlter_procedure(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Alter_procedureContext alter_procedure() throws RecognitionException {
        Alter_procedureContext _localctx = new Alter_procedureContext(_ctx, getState());
        enterRule(_localctx, 46, RULE_alter_procedure);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(1088);
                match(ALTER);
                setState(1089);
                match(PROCEDURE);
                setState(1090);
                procedure_name();
                setState(1091);
                match(COMPILE);
                setState(1093);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,44,_ctx) ) {
                    case 1:
                    {
                        setState(1092);
                        match(DEBUG);
                    }
                    break;
                }
                setState(1098);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input,45,_ctx);
                while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
                    if ( _alt==1 ) {
                        {
                            {
                                setState(1095);
                                compiler_parameters_clause();
                            }
                        }
                    }
                    setState(1100);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input,45,_ctx);
                }
                setState(1103);
                _la = _input.LA(1);
                if (_la==REUSE) {
                    {
                        setState(1101);
                        match(REUSE);
                        setState(1102);
                        match(SETTINGS);
                    }
                }

                setState(1105);
                match(SEMICOLON);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Create_procedure_bodyContext extends ParserRuleContext {
        public Procedure_specContext procedure_spec() {
            return getRuleContext(Procedure_specContext.class,0);
        }
        public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
        public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
        public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
        public Create_procedure_bodyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_create_procedure_body; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCreate_procedure_body(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCreate_procedure_body(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCreate_procedure_body(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Create_procedure_bodyContext create_procedure_body() throws RecognitionException {
        Create_procedure_bodyContext _localctx = new Create_procedure_bodyContext(_ctx, getState());
        enterRule(_localctx, 48, RULE_create_procedure_body);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1112);
                _la = _input.LA(1);
                if (_la==CREATE) {
                    {
                        setState(1107);
                        match(CREATE);
                        setState(1110);
                        _la = _input.LA(1);
                        if (_la==OR) {
                            {
                                setState(1108);
                                match(OR);
                                setState(1109);
                                match(REPLACE);
                            }
                        }

                    }
                }

                setState(1114);
                procedure_spec();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Procedure_specContext extends ParserRuleContext {
        public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
        public Procedure_nameContext procedure_name() {
            return getRuleContext(Procedure_nameContext.class,0);
        }
        public List<ParameterContext> parameter() {
            return getRuleContexts(ParameterContext.class);
        }
        public ParameterContext parameter(int i) {
            return getRuleContext(ParameterContext.class,i);
        }
        public Is_or_asContext is_or_as() {
            return getRuleContext(Is_or_asContext.class,0);
        }
        public BodyContext body() {
            return getRuleContext(BodyContext.class,0);
        }
        public Call_specContext call_spec() {
            return getRuleContext(Call_specContext.class,0);
        }
        public TerminalNode EXTERNAL() { return getToken(PlSqlParser.EXTERNAL, 0); }
        public Invoker_rights_clauseContext invoker_rights_clause() {
            return getRuleContext(Invoker_rights_clauseContext.class,0);
        }
        public List<Declare_specContext> declare_spec() {
            return getRuleContexts(Declare_specContext.class);
        }
        public Declare_specContext declare_spec(int i) {
            return getRuleContext(Declare_specContext.class,i);
        }
        public Procedure_specContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_procedure_spec; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterProcedure_spec(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitProcedure_spec(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitProcedure_spec(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Procedure_specContext procedure_spec() throws RecognitionException {
        Procedure_specContext _localctx = new Procedure_specContext(_ctx, getState());
        enterRule(_localctx, 50, RULE_procedure_spec);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(1116);
                match(PROCEDURE);
                setState(1117);
                procedure_name();
                setState(1129);
                _la = _input.LA(1);
                if (_la==LEFT_PAREN) {
                    {
                        setState(1118);
                        match(LEFT_PAREN);
                        setState(1119);
                        parameter();
                        setState(1124);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la==COMMA) {
                            {
                                {
                                    setState(1120);
                                    match(COMMA);
                                    setState(1121);
                                    parameter();
                                }
                            }
                            setState(1126);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                        setState(1127);
                        match(RIGHT_PAREN);
                    }
                }

                setState(1146);
                _la = _input.LA(1);
                if (_la==AS || _la==AUTHID || _la==IS) {
                    {
                        setState(1132);
                        _la = _input.LA(1);
                        if (_la==AUTHID) {
                            {
                                setState(1131);
                                invoker_rights_clause();
                            }
                        }

                        setState(1134);
                        is_or_as();
                        setState(1144);
                        _errHandler.sync(this);
                        switch ( getInterpreter().adaptivePredict(_input,53,_ctx) ) {
                            case 1:
                            {
                                setState(1138);
                                _errHandler.sync(this);
                                _alt = getInterpreter().adaptivePredict(_input,52,_ctx);
                                while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
                                    if ( _alt==1 ) {
                                        {
                                            {
                                                setState(1135);
                                                declare_spec();
                                            }
                                        }
                                    }
                                    setState(1140);
                                    _errHandler.sync(this);
                                    _alt = getInterpreter().adaptivePredict(_input,52,_ctx);
                                }
                                setState(1141);
                                body();
                            }
                            break;
                            case 2:
                            {
                                setState(1142);
                                call_spec();
                            }
                            break;
                            case 3:
                            {
                                setState(1143);
                                match(EXTERNAL);
                            }
                            break;
                        }
                    }
                }

                setState(1148);
                match(SEMICOLON);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Drop_triggerContext extends ParserRuleContext {
        public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
        public TerminalNode TRIGGER() { return getToken(PlSqlParser.TRIGGER, 0); }
        public Trigger_nameContext trigger_name() {
            return getRuleContext(Trigger_nameContext.class,0);
        }
        public Drop_triggerContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_drop_trigger; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDrop_trigger(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDrop_trigger(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDrop_trigger(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Drop_triggerContext drop_trigger() throws RecognitionException {
        Drop_triggerContext _localctx = new Drop_triggerContext(_ctx, getState());
        enterRule(_localctx, 52, RULE_drop_trigger);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1150);
                match(DROP);
                setState(1151);
                match(TRIGGER);
                setState(1152);
                trigger_name();
                setState(1153);
                match(SEMICOLON);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Alter_triggerContext extends ParserRuleContext {
        public Trigger_nameContext tn1;
        public Trigger_nameContext tn2;
        public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
        public TerminalNode TRIGGER() { return getToken(PlSqlParser.TRIGGER, 0); }
        public List<Trigger_nameContext> trigger_name() {
            return getRuleContexts(Trigger_nameContext.class);
        }
        public Trigger_nameContext trigger_name(int i) {
            return getRuleContext(Trigger_nameContext.class,i);
        }
        public TerminalNode RENAME() { return getToken(PlSqlParser.RENAME, 0); }
        public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
        public TerminalNode COMPILE() { return getToken(PlSqlParser.COMPILE, 0); }
        public TerminalNode ENABLE() { return getToken(PlSqlParser.ENABLE, 0); }
        public TerminalNode DISABLE() { return getToken(PlSqlParser.DISABLE, 0); }
        public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
        public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
            return getRuleContexts(Compiler_parameters_clauseContext.class);
        }
        public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
            return getRuleContext(Compiler_parameters_clauseContext.class,i);
        }
        public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
        public TerminalNode SETTINGS() { return getToken(PlSqlParser.SETTINGS, 0); }
        public Alter_triggerContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_alter_trigger; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAlter_trigger(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAlter_trigger(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAlter_trigger(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Alter_triggerContext alter_trigger() throws RecognitionException {
        Alter_triggerContext _localctx = new Alter_triggerContext(_ctx, getState());
        enterRule(_localctx, 54, RULE_alter_trigger);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(1155);
                match(ALTER);
                setState(1156);
                match(TRIGGER);
                setState(1157);
                ((Alter_triggerContext)_localctx).tn1 = trigger_name();
                setState(1176);
                switch (_input.LA(1)) {
                    case DISABLE:
                    case ENABLE:
                    {
                        setState(1158);
                        _la = _input.LA(1);
                        if ( !(_la==DISABLE || _la==ENABLE) ) {
                            _errHandler.recoverInline(this);
                        } else {
                            consume();
                        }
                    }
                    break;
                    case RENAME:
                    {
                        setState(1159);
                        match(RENAME);
                        setState(1160);
                        match(TO);
                        setState(1161);
                        ((Alter_triggerContext)_localctx).tn2 = trigger_name();
                    }
                    break;
                    case COMPILE:
                    {
                        setState(1162);
                        match(COMPILE);
                        setState(1164);
                        _errHandler.sync(this);
                        switch ( getInterpreter().adaptivePredict(_input,55,_ctx) ) {
                            case 1:
                            {
                                setState(1163);
                                match(DEBUG);
                            }
                            break;
                        }
                        setState(1169);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input,56,_ctx);
                        while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
                            if ( _alt==1 ) {
                                {
                                    {
                                        setState(1166);
                                        compiler_parameters_clause();
                                    }
                                }
                            }
                            setState(1171);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input,56,_ctx);
                        }
                        setState(1174);
                        _la = _input.LA(1);
                        if (_la==REUSE) {
                            {
                                setState(1172);
                                match(REUSE);
                                setState(1173);
                                match(SETTINGS);
                            }
                        }

                    }
                    break;
                    default:
                        throw new NoViableAltException(this);
                }
                setState(1178);
                match(SEMICOLON);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Create_triggerContext extends ParserRuleContext {
        public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
        public TerminalNode TRIGGER() { return getToken(PlSqlParser.TRIGGER, 0); }
        public Trigger_nameContext trigger_name() {
            return getRuleContext(Trigger_nameContext.class,0);
        }
        public Trigger_bodyContext trigger_body() {
            return getRuleContext(Trigger_bodyContext.class,0);
        }
        public Simple_dml_triggerContext simple_dml_trigger() {
            return getRuleContext(Simple_dml_triggerContext.class,0);
        }
        public Compound_dml_triggerContext compound_dml_trigger() {
            return getRuleContext(Compound_dml_triggerContext.class,0);
        }
        public Non_dml_triggerContext non_dml_trigger() {
            return getRuleContext(Non_dml_triggerContext.class,0);
        }
        public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
        public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
        public Trigger_follows_clauseContext trigger_follows_clause() {
            return getRuleContext(Trigger_follows_clauseContext.class,0);
        }
        public Trigger_when_clauseContext trigger_when_clause() {
            return getRuleContext(Trigger_when_clauseContext.class,0);
        }
        public TerminalNode ENABLE() { return getToken(PlSqlParser.ENABLE, 0); }
        public TerminalNode DISABLE() { return getToken(PlSqlParser.DISABLE, 0); }
        public Create_triggerContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_create_trigger; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCreate_trigger(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCreate_trigger(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCreate_trigger(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Create_triggerContext create_trigger() throws RecognitionException {
        Create_triggerContext _localctx = new Create_triggerContext(_ctx, getState());
        enterRule(_localctx, 56, RULE_create_trigger);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1180);
                match(CREATE);
                setState(1183);
                _la = _input.LA(1);
                if (_la==OR) {
                    {
                        setState(1181);
                        match(OR);
                        setState(1182);
                        match(REPLACE);
                    }
                }

                setState(1185);
                match(TRIGGER);
                setState(1186);
                trigger_name();
                setState(1190);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,60,_ctx) ) {
                    case 1:
                    {
                        setState(1187);
                        simple_dml_trigger();
                    }
                    break;
                    case 2:
                    {
                        setState(1188);
                        compound_dml_trigger();
                    }
                    break;
                    case 3:
                    {
                        setState(1189);
                        non_dml_trigger();
                    }
                    break;
                }
                setState(1193);
                _la = _input.LA(1);
                if (_la==FOLLOWS) {
                    {
                        setState(1192);
                        trigger_follows_clause();
                    }
                }

                setState(1196);
                _la = _input.LA(1);
                if (_la==DISABLE || _la==ENABLE) {
                    {
                        setState(1195);
                        _la = _input.LA(1);
                        if ( !(_la==DISABLE || _la==ENABLE) ) {
                            _errHandler.recoverInline(this);
                        } else {
                            consume();
                        }
                    }
                }

                setState(1199);
                _la = _input.LA(1);
                if (_la==WHEN) {
                    {
                        setState(1198);
                        trigger_when_clause();
                    }
                }

                setState(1201);
                trigger_body();
                setState(1202);
                match(SEMICOLON);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Trigger_follows_clauseContext extends ParserRuleContext {
        public TerminalNode FOLLOWS() { return getToken(PlSqlParser.FOLLOWS, 0); }
        public List<Trigger_nameContext> trigger_name() {
            return getRuleContexts(Trigger_nameContext.class);
        }
        public Trigger_nameContext trigger_name(int i) {
            return getRuleContext(Trigger_nameContext.class,i);
        }
        public Trigger_follows_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_trigger_follows_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTrigger_follows_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTrigger_follows_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTrigger_follows_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Trigger_follows_clauseContext trigger_follows_clause() throws RecognitionException {
        Trigger_follows_clauseContext _localctx = new Trigger_follows_clauseContext(_ctx, getState());
        enterRule(_localctx, 58, RULE_trigger_follows_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1204);
                match(FOLLOWS);
                setState(1205);
                trigger_name();
                setState(1210);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==COMMA) {
                    {
                        {
                            setState(1206);
                            match(COMMA);
                            setState(1207);
                            trigger_name();
                        }
                    }
                    setState(1212);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Trigger_when_clauseContext extends ParserRuleContext {
        public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
        public ConditionContext condition() {
            return getRuleContext(ConditionContext.class,0);
        }
        public Trigger_when_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_trigger_when_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTrigger_when_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTrigger_when_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTrigger_when_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Trigger_when_clauseContext trigger_when_clause() throws RecognitionException {
        Trigger_when_clauseContext _localctx = new Trigger_when_clauseContext(_ctx, getState());
        enterRule(_localctx, 60, RULE_trigger_when_clause);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1213);
                match(WHEN);
                setState(1214);
                match(LEFT_PAREN);
                setState(1215);
                condition();
                setState(1216);
                match(RIGHT_PAREN);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Simple_dml_triggerContext extends ParserRuleContext {
        public Dml_event_clauseContext dml_event_clause() {
            return getRuleContext(Dml_event_clauseContext.class,0);
        }
        public TerminalNode BEFORE() { return getToken(PlSqlParser.BEFORE, 0); }
        public TerminalNode AFTER() { return getToken(PlSqlParser.AFTER, 0); }
        public TerminalNode INSTEAD() { return getToken(PlSqlParser.INSTEAD, 0); }
        public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
        public Referencing_clauseContext referencing_clause() {
            return getRuleContext(Referencing_clauseContext.class,0);
        }
        public For_each_rowContext for_each_row() {
            return getRuleContext(For_each_rowContext.class,0);
        }
        public Simple_dml_triggerContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_simple_dml_trigger; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSimple_dml_trigger(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSimple_dml_trigger(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSimple_dml_trigger(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Simple_dml_triggerContext simple_dml_trigger() throws RecognitionException {
        Simple_dml_triggerContext _localctx = new Simple_dml_triggerContext(_ctx, getState());
        enterRule(_localctx, 62, RULE_simple_dml_trigger);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1222);
                switch (_input.LA(1)) {
                    case BEFORE:
                    {
                        setState(1218);
                        match(BEFORE);
                    }
                    break;
                    case AFTER:
                    {
                        setState(1219);
                        match(AFTER);
                    }
                    break;
                    case INSTEAD:
                    {
                        setState(1220);
                        match(INSTEAD);
                        setState(1221);
                        match(OF);
                    }
                    break;
                    default:
                        throw new NoViableAltException(this);
                }
                setState(1224);
                dml_event_clause();
                setState(1226);
                _la = _input.LA(1);
                if (_la==REFERENCING) {
                    {
                        setState(1225);
                        referencing_clause();
                    }
                }

                setState(1229);
                _la = _input.LA(1);
                if (_la==FOR) {
                    {
                        setState(1228);
                        for_each_row();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class For_each_rowContext extends ParserRuleContext {
        public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
        public TerminalNode EACH() { return getToken(PlSqlParser.EACH, 0); }
        public TerminalNode ROW() { return getToken(PlSqlParser.ROW, 0); }
        public For_each_rowContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_for_each_row; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFor_each_row(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFor_each_row(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFor_each_row(this);
            else return visitor.visitChildren(this);
        }
    }

    public final For_each_rowContext for_each_row() throws RecognitionException {
        For_each_rowContext _localctx = new For_each_rowContext(_ctx, getState());
        enterRule(_localctx, 64, RULE_for_each_row);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1231);
                match(FOR);
                setState(1232);
                match(EACH);
                setState(1233);
                match(ROW);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Compound_dml_triggerContext extends ParserRuleContext {
        public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
        public Dml_event_clauseContext dml_event_clause() {
            return getRuleContext(Dml_event_clauseContext.class,0);
        }
        public Referencing_clauseContext referencing_clause() {
            return getRuleContext(Referencing_clauseContext.class,0);
        }
        public Compound_dml_triggerContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_compound_dml_trigger; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCompound_dml_trigger(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCompound_dml_trigger(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCompound_dml_trigger(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Compound_dml_triggerContext compound_dml_trigger() throws RecognitionException {
        Compound_dml_triggerContext _localctx = new Compound_dml_triggerContext(_ctx, getState());
        enterRule(_localctx, 66, RULE_compound_dml_trigger);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1235);
                match(FOR);
                setState(1236);
                dml_event_clause();
                setState(1238);
                _la = _input.LA(1);
                if (_la==REFERENCING) {
                    {
                        setState(1237);
                        referencing_clause();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Non_dml_triggerContext extends ParserRuleContext {
        public List<Non_dml_eventContext> non_dml_event() {
            return getRuleContexts(Non_dml_eventContext.class);
        }
        public Non_dml_eventContext non_dml_event(int i) {
            return getRuleContext(Non_dml_eventContext.class,i);
        }
        public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
        public TerminalNode BEFORE() { return getToken(PlSqlParser.BEFORE, 0); }
        public TerminalNode AFTER() { return getToken(PlSqlParser.AFTER, 0); }
        public TerminalNode DATABASE() { return getToken(PlSqlParser.DATABASE, 0); }
        public TerminalNode SCHEMA() { return getToken(PlSqlParser.SCHEMA, 0); }
        public List<TerminalNode> OR() { return getTokens(PlSqlParser.OR); }
        public TerminalNode OR(int i) {
            return getToken(PlSqlParser.OR, i);
        }
        public Schema_nameContext schema_name() {
            return getRuleContext(Schema_nameContext.class,0);
        }
        public Non_dml_triggerContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_non_dml_trigger; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterNon_dml_trigger(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitNon_dml_trigger(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitNon_dml_trigger(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Non_dml_triggerContext non_dml_trigger() throws RecognitionException {
        Non_dml_triggerContext _localctx = new Non_dml_triggerContext(_ctx, getState());
        enterRule(_localctx, 68, RULE_non_dml_trigger);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1240);
                _la = _input.LA(1);
                if ( !(_la==AFTER || _la==BEFORE) ) {
                    _errHandler.recoverInline(this);
                } else {
                    consume();
                }
                setState(1241);
                non_dml_event();
                setState(1246);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==OR) {
                    {
                        {
                            setState(1242);
                            match(OR);
                            setState(1243);
                            non_dml_event();
                        }
                    }
                    setState(1248);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(1249);
                match(ON);
                setState(1257);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,71,_ctx) ) {
                    case 1:
                    {
                        setState(1250);
                        match(DATABASE);
                    }
                    break;
                    case 2:
                    {
                        setState(1254);
                        _errHandler.sync(this);
                        switch ( getInterpreter().adaptivePredict(_input,70,_ctx) ) {
                            case 1:
                            {
                                setState(1251);
                                schema_name();
                                setState(1252);
                                match(PERIOD);
                            }
                            break;
                        }
                        setState(1256);
                        match(SCHEMA);
                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Trigger_bodyContext extends ParserRuleContext {
        public TerminalNode COMPOUND() { return getToken(PlSqlParser.COMPOUND, 0); }
        public TerminalNode TRIGGER() { return getToken(PlSqlParser.TRIGGER, 0); }
        public TerminalNode CALL() { return getToken(PlSqlParser.CALL, 0); }
        public IdContext id() {
            return getRuleContext(IdContext.class,0);
        }
        public Trigger_blockContext trigger_block() {
            return getRuleContext(Trigger_blockContext.class,0);
        }
        public Trigger_bodyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_trigger_body; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTrigger_body(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTrigger_body(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTrigger_body(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Trigger_bodyContext trigger_body() throws RecognitionException {
        Trigger_bodyContext _localctx = new Trigger_bodyContext(_ctx, getState());
        enterRule(_localctx, 70, RULE_trigger_body);
        try {
            setState(1264);
            switch (_input.LA(1)) {
                case COMPOUND:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(1259);
                    match(COMPOUND);
                    setState(1260);
                    match(TRIGGER);
                }
                break;
                case CALL:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(1261);
                    match(CALL);
                    setState(1262);
                    id();
                }
                break;
                case BEGIN:
                case DECLARE:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(1263);
                    trigger_block();
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Routine_clauseContext extends ParserRuleContext {
        public Routine_nameContext routine_name() {
            return getRuleContext(Routine_nameContext.class,0);
        }
        public Function_argumentContext function_argument() {
            return getRuleContext(Function_argumentContext.class,0);
        }
        public Routine_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_routine_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterRoutine_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitRoutine_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitRoutine_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Routine_clauseContext routine_clause() throws RecognitionException {
        Routine_clauseContext _localctx = new Routine_clauseContext(_ctx, getState());
        enterRule(_localctx, 72, RULE_routine_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1266);
                routine_name();
                setState(1268);
                _la = _input.LA(1);
                if (_la==LEFT_PAREN) {
                    {
                        setState(1267);
                        function_argument();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Compound_trigger_blockContext extends ParserRuleContext {
        public TerminalNode COMPOUND() { return getToken(PlSqlParser.COMPOUND, 0); }
        public TerminalNode TRIGGER() { return getToken(PlSqlParser.TRIGGER, 0); }
        public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
        public Trigger_nameContext trigger_name() {
            return getRuleContext(Trigger_nameContext.class,0);
        }
        public List<Declare_specContext> declare_spec() {
            return getRuleContexts(Declare_specContext.class);
        }
        public Declare_specContext declare_spec(int i) {
            return getRuleContext(Declare_specContext.class,i);
        }
        public List<Timing_point_sectionContext> timing_point_section() {
            return getRuleContexts(Timing_point_sectionContext.class);
        }
        public Timing_point_sectionContext timing_point_section(int i) {
            return getRuleContext(Timing_point_sectionContext.class,i);
        }
        public Compound_trigger_blockContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_compound_trigger_block; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCompound_trigger_block(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCompound_trigger_block(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCompound_trigger_block(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Compound_trigger_blockContext compound_trigger_block() throws RecognitionException {
        Compound_trigger_blockContext _localctx = new Compound_trigger_blockContext(_ctx, getState());
        enterRule(_localctx, 74, RULE_compound_trigger_block);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(1270);
                match(COMPOUND);
                setState(1271);
                match(TRIGGER);
                setState(1275);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input,74,_ctx);
                while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
                    if ( _alt==1 ) {
                        {
                            {
                                setState(1272);
                                declare_spec();
                            }
                        }
                    }
                    setState(1277);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input,74,_ctx);
                }
                setState(1279);
                _errHandler.sync(this);
                _la = _input.LA(1);
                do {
                    {
                        {
                            setState(1278);
                            timing_point_section();
                        }
                    }
                    setState(1281);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                } while ( _la==AFTER || _la==BEFORE );
                setState(1283);
                match(END);
                setState(1284);
                trigger_name();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Timing_point_sectionContext extends ParserRuleContext {
        public Token bk;
        public Token ak;
        public List<TerminalNode> STATEMENT() { return getTokens(PlSqlParser.STATEMENT); }
        public TerminalNode STATEMENT(int i) {
            return getToken(PlSqlParser.STATEMENT, i);
        }
        public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
        public Trigger_blockContext trigger_block() {
            return getRuleContext(Trigger_blockContext.class,0);
        }
        public List<TerminalNode> BEFORE() { return getTokens(PlSqlParser.BEFORE); }
        public TerminalNode BEFORE(int i) {
            return getToken(PlSqlParser.BEFORE, i);
        }
        public List<TerminalNode> EACH() { return getTokens(PlSqlParser.EACH); }
        public TerminalNode EACH(int i) {
            return getToken(PlSqlParser.EACH, i);
        }
        public List<TerminalNode> ROW() { return getTokens(PlSqlParser.ROW); }
        public TerminalNode ROW(int i) {
            return getToken(PlSqlParser.ROW, i);
        }
        public List<TerminalNode> AFTER() { return getTokens(PlSqlParser.AFTER); }
        public TerminalNode AFTER(int i) {
            return getToken(PlSqlParser.AFTER, i);
        }
        public Timing_point_sectionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_timing_point_section; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTiming_point_section(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTiming_point_section(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTiming_point_section(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Timing_point_sectionContext timing_point_section() throws RecognitionException {
        Timing_point_sectionContext _localctx = new Timing_point_sectionContext(_ctx, getState());
        enterRule(_localctx, 76, RULE_timing_point_section);
        try {
            setState(1322);
            _errHandler.sync(this);
            switch ( getInterpreter().adaptivePredict(_input,76,_ctx) ) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(1286);
                    ((Timing_point_sectionContext)_localctx).bk = match(BEFORE);
                    setState(1287);
                    match(STATEMENT);
                    setState(1288);
                    match(IS);
                    setState(1289);
                    trigger_block();
                    setState(1290);
                    match(BEFORE);
                    setState(1291);
                    match(STATEMENT);
                    setState(1292);
                    match(SEMICOLON);
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(1294);
                    ((Timing_point_sectionContext)_localctx).bk = match(BEFORE);
                    setState(1295);
                    match(EACH);
                    setState(1296);
                    match(ROW);
                    setState(1297);
                    match(IS);
                    setState(1298);
                    trigger_block();
                    setState(1299);
                    match(BEFORE);
                    setState(1300);
                    match(EACH);
                    setState(1301);
                    match(ROW);
                    setState(1302);
                    match(SEMICOLON);
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(1304);
                    ((Timing_point_sectionContext)_localctx).ak = match(AFTER);
                    setState(1305);
                    match(STATEMENT);
                    setState(1306);
                    match(IS);
                    setState(1307);
                    trigger_block();
                    setState(1308);
                    match(AFTER);
                    setState(1309);
                    match(STATEMENT);
                    setState(1310);
                    match(SEMICOLON);
                }
                break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                {
                    setState(1312);
                    ((Timing_point_sectionContext)_localctx).ak = match(AFTER);
                    setState(1313);
                    match(EACH);
                    setState(1314);
                    match(ROW);
                    setState(1315);
                    match(IS);
                    setState(1316);
                    trigger_block();
                    setState(1317);
                    match(AFTER);
                    setState(1318);
                    match(EACH);
                    setState(1319);
                    match(ROW);
                    setState(1320);
                    match(SEMICOLON);
                }
                break;
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Non_dml_eventContext extends ParserRuleContext {
        public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
        public TerminalNode ANALYZE() { return getToken(PlSqlParser.ANALYZE, 0); }
        public TerminalNode ASSOCIATE() { return getToken(PlSqlParser.ASSOCIATE, 0); }
        public TerminalNode STATISTICS() { return getToken(PlSqlParser.STATISTICS, 0); }
        public TerminalNode AUDIT() { return getToken(PlSqlParser.AUDIT, 0); }
        public TerminalNode COMMENT() { return getToken(PlSqlParser.COMMENT, 0); }
        public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
        public TerminalNode DISASSOCIATE() { return getToken(PlSqlParser.DISASSOCIATE, 0); }
        public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
        public TerminalNode GRANT() { return getToken(PlSqlParser.GRANT, 0); }
        public TerminalNode NOAUDIT() { return getToken(PlSqlParser.NOAUDIT, 0); }
        public TerminalNode RENAME() { return getToken(PlSqlParser.RENAME, 0); }
        public TerminalNode REVOKE() { return getToken(PlSqlParser.REVOKE, 0); }
        public TerminalNode TRUNCATE() { return getToken(PlSqlParser.TRUNCATE, 0); }
        public TerminalNode DDL() { return getToken(PlSqlParser.DDL, 0); }
        public TerminalNode STARTUP() { return getToken(PlSqlParser.STARTUP, 0); }
        public TerminalNode SHUTDOWN() { return getToken(PlSqlParser.SHUTDOWN, 0); }
        public TerminalNode DB_ROLE_CHANGE() { return getToken(PlSqlParser.DB_ROLE_CHANGE, 0); }
        public TerminalNode LOGON() { return getToken(PlSqlParser.LOGON, 0); }
        public TerminalNode LOGOFF() { return getToken(PlSqlParser.LOGOFF, 0); }
        public TerminalNode SERVERERROR() { return getToken(PlSqlParser.SERVERERROR, 0); }
        public TerminalNode SUSPEND() { return getToken(PlSqlParser.SUSPEND, 0); }
        public TerminalNode DATABASE() { return getToken(PlSqlParser.DATABASE, 0); }
        public TerminalNode SCHEMA() { return getToken(PlSqlParser.SCHEMA, 0); }
        public TerminalNode FOLLOWS() { return getToken(PlSqlParser.FOLLOWS, 0); }
        public Non_dml_eventContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_non_dml_event; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterNon_dml_event(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitNon_dml_event(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitNon_dml_event(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Non_dml_eventContext non_dml_event() throws RecognitionException {
        Non_dml_eventContext _localctx = new Non_dml_eventContext(_ctx, getState());
        enterRule(_localctx, 78, RULE_non_dml_event);
        try {
            setState(1350);
            switch (_input.LA(1)) {
                case ALTER:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(1324);
                    match(ALTER);
                }
                break;
                case ANALYZE:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(1325);
                    match(ANALYZE);
                }
                break;
                case ASSOCIATE:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(1326);
                    match(ASSOCIATE);
                    setState(1327);
                    match(STATISTICS);
                }
                break;
                case AUDIT:
                    enterOuterAlt(_localctx, 4);
                {
                    setState(1328);
                    match(AUDIT);
                }
                break;
                case COMMENT:
                    enterOuterAlt(_localctx, 5);
                {
                    setState(1329);
                    match(COMMENT);
                }
                break;
                case CREATE:
                    enterOuterAlt(_localctx, 6);
                {
                    setState(1330);
                    match(CREATE);
                }
                break;
                case DISASSOCIATE:
                    enterOuterAlt(_localctx, 7);
                {
                    setState(1331);
                    match(DISASSOCIATE);
                    setState(1332);
                    match(STATISTICS);
                }
                break;
                case DROP:
                    enterOuterAlt(_localctx, 8);
                {
                    setState(1333);
                    match(DROP);
                }
                break;
                case GRANT:
                    enterOuterAlt(_localctx, 9);
                {
                    setState(1334);
                    match(GRANT);
                }
                break;
                case NOAUDIT:
                    enterOuterAlt(_localctx, 10);
                {
                    setState(1335);
                    match(NOAUDIT);
                }
                break;
                case RENAME:
                    enterOuterAlt(_localctx, 11);
                {
                    setState(1336);
                    match(RENAME);
                }
                break;
                case REVOKE:
                    enterOuterAlt(_localctx, 12);
                {
                    setState(1337);
                    match(REVOKE);
                }
                break;
                case TRUNCATE:
                    enterOuterAlt(_localctx, 13);
                {
                    setState(1338);
                    match(TRUNCATE);
                }
                break;
                case DDL:
                    enterOuterAlt(_localctx, 14);
                {
                    setState(1339);
                    match(DDL);
                }
                break;
                case STARTUP:
                    enterOuterAlt(_localctx, 15);
                {
                    setState(1340);
                    match(STARTUP);
                }
                break;
                case SHUTDOWN:
                    enterOuterAlt(_localctx, 16);
                {
                    setState(1341);
                    match(SHUTDOWN);
                }
                break;
                case DB_ROLE_CHANGE:
                    enterOuterAlt(_localctx, 17);
                {
                    setState(1342);
                    match(DB_ROLE_CHANGE);
                }
                break;
                case LOGON:
                    enterOuterAlt(_localctx, 18);
                {
                    setState(1343);
                    match(LOGON);
                }
                break;
                case LOGOFF:
                    enterOuterAlt(_localctx, 19);
                {
                    setState(1344);
                    match(LOGOFF);
                }
                break;
                case SERVERERROR:
                    enterOuterAlt(_localctx, 20);
                {
                    setState(1345);
                    match(SERVERERROR);
                }
                break;
                case SUSPEND:
                    enterOuterAlt(_localctx, 21);
                {
                    setState(1346);
                    match(SUSPEND);
                }
                break;
                case DATABASE:
                    enterOuterAlt(_localctx, 22);
                {
                    setState(1347);
                    match(DATABASE);
                }
                break;
                case SCHEMA:
                    enterOuterAlt(_localctx, 23);
                {
                    setState(1348);
                    match(SCHEMA);
                }
                break;
                case FOLLOWS:
                    enterOuterAlt(_localctx, 24);
                {
                    setState(1349);
                    match(FOLLOWS);
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Dml_event_clauseContext extends ParserRuleContext {
        public List<Dml_event_elementContext> dml_event_element() {
            return getRuleContexts(Dml_event_elementContext.class);
        }
        public Dml_event_elementContext dml_event_element(int i) {
            return getRuleContext(Dml_event_elementContext.class,i);
        }
        public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
        public Tableview_nameContext tableview_name() {
            return getRuleContext(Tableview_nameContext.class,0);
        }
        public List<TerminalNode> OR() { return getTokens(PlSqlParser.OR); }
        public TerminalNode OR(int i) {
            return getToken(PlSqlParser.OR, i);
        }
        public Dml_event_nested_clauseContext dml_event_nested_clause() {
            return getRuleContext(Dml_event_nested_clauseContext.class,0);
        }
        public Dml_event_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_dml_event_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDml_event_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDml_event_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDml_event_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Dml_event_clauseContext dml_event_clause() throws RecognitionException {
        Dml_event_clauseContext _localctx = new Dml_event_clauseContext(_ctx, getState());
        enterRule(_localctx, 80, RULE_dml_event_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1352);
                dml_event_element();
                setState(1357);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==OR) {
                    {
                        {
                            setState(1353);
                            match(OR);
                            setState(1354);
                            dml_event_element();
                        }
                    }
                    setState(1359);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(1360);
                match(ON);
                setState(1362);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {
                    case 1:
                    {
                        setState(1361);
                        dml_event_nested_clause();
                    }
                    break;
                }
                setState(1364);
                tableview_name();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Dml_event_elementContext extends ParserRuleContext {
        public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
        public TerminalNode INSERT() { return getToken(PlSqlParser.INSERT, 0); }
        public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
        public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
        public List<Column_nameContext> column_name() {
            return getRuleContexts(Column_nameContext.class);
        }
        public Column_nameContext column_name(int i) {
            return getRuleContext(Column_nameContext.class,i);
        }
        public Dml_event_elementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_dml_event_element; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDml_event_element(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDml_event_element(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDml_event_element(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Dml_event_elementContext dml_event_element() throws RecognitionException {
        Dml_event_elementContext _localctx = new Dml_event_elementContext(_ctx, getState());
        enterRule(_localctx, 82, RULE_dml_event_element);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1366);
                _la = _input.LA(1);
                if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
                    _errHandler.recoverInline(this);
                } else {
                    consume();
                }
                setState(1376);
                _la = _input.LA(1);
                if (_la==OF) {
                    {
                        setState(1367);
                        match(OF);
                        setState(1368);
                        column_name();
                        setState(1373);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la==COMMA) {
                            {
                                {
                                    setState(1369);
                                    match(COMMA);
                                    setState(1370);
                                    column_name();
                                }
                            }
                            setState(1375);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Dml_event_nested_clauseContext extends ParserRuleContext {
        public TerminalNode NESTED() { return getToken(PlSqlParser.NESTED, 0); }
        public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
        public Tableview_nameContext tableview_name() {
            return getRuleContext(Tableview_nameContext.class,0);
        }
        public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
        public Dml_event_nested_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_dml_event_nested_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDml_event_nested_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDml_event_nested_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDml_event_nested_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Dml_event_nested_clauseContext dml_event_nested_clause() throws RecognitionException {
        Dml_event_nested_clauseContext _localctx = new Dml_event_nested_clauseContext(_ctx, getState());
        enterRule(_localctx, 84, RULE_dml_event_nested_clause);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1378);
                match(NESTED);
                setState(1379);
                match(TABLE);
                setState(1380);
                tableview_name();
                setState(1381);
                match(OF);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Referencing_clauseContext extends ParserRuleContext {
        public TerminalNode REFERENCING() { return getToken(PlSqlParser.REFERENCING, 0); }
        public List<Referencing_elementContext> referencing_element() {
            return getRuleContexts(Referencing_elementContext.class);
        }
        public Referencing_elementContext referencing_element(int i) {
            return getRuleContext(Referencing_elementContext.class,i);
        }
        public Referencing_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_referencing_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterReferencing_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitReferencing_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitReferencing_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Referencing_clauseContext referencing_clause() throws RecognitionException {
        Referencing_clauseContext _localctx = new Referencing_clauseContext(_ctx, getState());
        enterRule(_localctx, 86, RULE_referencing_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1383);
                match(REFERENCING);
                setState(1385);
                _errHandler.sync(this);
                _la = _input.LA(1);
                do {
                    {
                        {
                            setState(1384);
                            referencing_element();
                        }
                    }
                    setState(1387);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                } while ( ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (NEW - 246)) | (1L << (OLD - 246)) | (1L << (PARENT - 246)))) != 0) );
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Referencing_elementContext extends ParserRuleContext {
        public Column_aliasContext column_alias() {
            return getRuleContext(Column_aliasContext.class,0);
        }
        public TerminalNode NEW() { return getToken(PlSqlParser.NEW, 0); }
        public TerminalNode OLD() { return getToken(PlSqlParser.OLD, 0); }
        public TerminalNode PARENT() { return getToken(PlSqlParser.PARENT, 0); }
        public Referencing_elementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_referencing_element; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterReferencing_element(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitReferencing_element(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitReferencing_element(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Referencing_elementContext referencing_element() throws RecognitionException {
        Referencing_elementContext _localctx = new Referencing_elementContext(_ctx, getState());
        enterRule(_localctx, 88, RULE_referencing_element);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1389);
                _la = _input.LA(1);
                if ( !(((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (NEW - 246)) | (1L << (OLD - 246)) | (1L << (PARENT - 246)))) != 0)) ) {
                    _errHandler.recoverInline(this);
                } else {
                    consume();
                }
                setState(1390);
                column_alias();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Drop_typeContext extends ParserRuleContext {
        public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
        public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
        public Type_nameContext type_name() {
            return getRuleContext(Type_nameContext.class,0);
        }
        public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
        public TerminalNode FORCE() { return getToken(PlSqlParser.FORCE, 0); }
        public TerminalNode VALIDATE() { return getToken(PlSqlParser.VALIDATE, 0); }
        public Drop_typeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_drop_type; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDrop_type(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDrop_type(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDrop_type(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Drop_typeContext drop_type() throws RecognitionException {
        Drop_typeContext _localctx = new Drop_typeContext(_ctx, getState());
        enterRule(_localctx, 90, RULE_drop_type);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1392);
                match(DROP);
                setState(1393);
                match(TYPE);
                setState(1395);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,83,_ctx) ) {
                    case 1:
                    {
                        setState(1394);
                        match(BODY);
                    }
                    break;
                }
                setState(1397);
                type_name();
                setState(1399);
                _la = _input.LA(1);
                if (_la==FORCE || _la==VALIDATE) {
                    {
                        setState(1398);
                        _la = _input.LA(1);
                        if ( !(_la==FORCE || _la==VALIDATE) ) {
                            _errHandler.recoverInline(this);
                        } else {
                            consume();
                        }
                    }
                }

                setState(1401);
                match(SEMICOLON);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Alter_typeContext extends ParserRuleContext {
        public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
        public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
        public Type_nameContext type_name() {
            return getRuleContext(Type_nameContext.class,0);
        }
        public Compile_type_clauseContext compile_type_clause() {
            return getRuleContext(Compile_type_clauseContext.class,0);
        }
        public Replace_type_clauseContext replace_type_clause() {
            return getRuleContext(Replace_type_clauseContext.class,0);
        }
        public Alter_method_specContext alter_method_spec() {
            return getRuleContext(Alter_method_specContext.class,0);
        }
        public Alter_collection_clausesContext alter_collection_clauses() {
            return getRuleContext(Alter_collection_clausesContext.class,0);
        }
        public Modifier_clauseContext modifier_clause() {
            return getRuleContext(Modifier_clauseContext.class,0);
        }
        public Dependent_handling_clauseContext dependent_handling_clause() {
            return getRuleContext(Dependent_handling_clauseContext.class,0);
        }
        public Alter_typeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_alter_type; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAlter_type(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAlter_type(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAlter_type(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Alter_typeContext alter_type() throws RecognitionException {
        Alter_typeContext _localctx = new Alter_typeContext(_ctx, getState());
        enterRule(_localctx, 92, RULE_alter_type);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1403);
                match(ALTER);
                setState(1404);
                match(TYPE);
                setState(1405);
                type_name();
                setState(1411);
                switch (_input.LA(1)) {
                    case COMPILE:
                    {
                        setState(1406);
                        compile_type_clause();
                    }
                    break;
                    case REPLACE:
                    {
                        setState(1407);
                        replace_type_clause();
                    }
                    break;
                    case ADD:
                    case DROP:
                    {
                        setState(1408);
                        alter_method_spec();
                    }
                    break;
                    case MODIFY:
                    {
                        setState(1409);
                        alter_collection_clauses();
                    }
                    break;
                    case FINAL:
                    case INSTANTIABLE:
                    case NOT:
                    case OVERRIDING:
                    {
                        setState(1410);
                        modifier_clause();
                    }
                    break;
                    default:
                        throw new NoViableAltException(this);
                }
                setState(1414);
                _la = _input.LA(1);
                if (_la==CASCADE || _la==INVALIDATE) {
                    {
                        setState(1413);
                        dependent_handling_clause();
                    }
                }

                setState(1416);
                match(SEMICOLON);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Compile_type_clauseContext extends ParserRuleContext {
        public TerminalNode COMPILE() { return getToken(PlSqlParser.COMPILE, 0); }
        public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
        public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
            return getRuleContexts(Compiler_parameters_clauseContext.class);
        }
        public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
            return getRuleContext(Compiler_parameters_clauseContext.class,i);
        }
        public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
        public TerminalNode SETTINGS() { return getToken(PlSqlParser.SETTINGS, 0); }
        public TerminalNode SPECIFICATION() { return getToken(PlSqlParser.SPECIFICATION, 0); }
        public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
        public Compile_type_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_compile_type_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCompile_type_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCompile_type_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCompile_type_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Compile_type_clauseContext compile_type_clause() throws RecognitionException {
        Compile_type_clauseContext _localctx = new Compile_type_clauseContext(_ctx, getState());
        enterRule(_localctx, 94, RULE_compile_type_clause);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(1418);
                match(COMPILE);
                setState(1420);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,87,_ctx) ) {
                    case 1:
                    {
                        setState(1419);
                        match(DEBUG);
                    }
                    break;
                }
                setState(1423);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,88,_ctx) ) {
                    case 1:
                    {
                        setState(1422);
                        _la = _input.LA(1);
                        if ( !(_la==BODY || _la==SPECIFICATION) ) {
                            _errHandler.recoverInline(this);
                        } else {
                            consume();
                        }
                    }
                    break;
                }
                setState(1428);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input,89,_ctx);
                while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
                    if ( _alt==1 ) {
                        {
                            {
                                setState(1425);
                                compiler_parameters_clause();
                            }
                        }
                    }
                    setState(1430);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input,89,_ctx);
                }
                setState(1433);
                _la = _input.LA(1);
                if (_la==REUSE) {
                    {
                        setState(1431);
                        match(REUSE);
                        setState(1432);
                        match(SETTINGS);
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Replace_type_clauseContext extends ParserRuleContext {
        public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
        public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
        public TerminalNode OBJECT() { return getToken(PlSqlParser.OBJECT, 0); }
        public List<Object_member_specContext> object_member_spec() {
            return getRuleContexts(Object_member_specContext.class);
        }
        public Object_member_specContext object_member_spec(int i) {
            return getRuleContext(Object_member_specContext.class,i);
        }
        public Invoker_rights_clauseContext invoker_rights_clause() {
            return getRuleContext(Invoker_rights_clauseContext.class,0);
        }
        public Replace_type_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_replace_type_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterReplace_type_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitReplace_type_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitReplace_type_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Replace_type_clauseContext replace_type_clause() throws RecognitionException {
        Replace_type_clauseContext _localctx = new Replace_type_clauseContext(_ctx, getState());
        enterRule(_localctx, 96, RULE_replace_type_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1435);
                match(REPLACE);
                setState(1437);
                _la = _input.LA(1);
                if (_la==AUTHID) {
                    {
                        setState(1436);
                        invoker_rights_clause();
                    }
                }

                setState(1439);
                match(AS);
                setState(1440);
                match(OBJECT);
                setState(1441);
                match(LEFT_PAREN);
                setState(1442);
                object_member_spec();
                setState(1447);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==COMMA) {
                    {
                        {
                            setState(1443);
                            match(COMMA);
                            setState(1444);
                            object_member_spec();
                        }
                    }
                    setState(1449);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(1450);
                match(RIGHT_PAREN);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Alter_method_specContext extends ParserRuleContext {
        public List<Alter_method_elementContext> alter_method_element() {
            return getRuleContexts(Alter_method_elementContext.class);
        }
        public Alter_method_elementContext alter_method_element(int i) {
            return getRuleContext(Alter_method_elementContext.class,i);
        }
        public Alter_method_specContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_alter_method_spec; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAlter_method_spec(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAlter_method_spec(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAlter_method_spec(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Alter_method_specContext alter_method_spec() throws RecognitionException {
        Alter_method_specContext _localctx = new Alter_method_specContext(_ctx, getState());
        enterRule(_localctx, 98, RULE_alter_method_spec);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1452);
                alter_method_element();
                setState(1457);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==COMMA) {
                    {
                        {
                            setState(1453);
                            match(COMMA);
                            setState(1454);
                            alter_method_element();
                        }
                    }
                    setState(1459);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Alter_method_elementContext extends ParserRuleContext {
        public TerminalNode ADD() { return getToken(PlSqlParser.ADD, 0); }
        public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
        public Map_order_function_specContext map_order_function_spec() {
            return getRuleContext(Map_order_function_specContext.class,0);
        }
        public Subprogram_specContext subprogram_spec() {
            return getRuleContext(Subprogram_specContext.class,0);
        }
        public Alter_method_elementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_alter_method_element; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAlter_method_element(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAlter_method_element(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAlter_method_element(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Alter_method_elementContext alter_method_element() throws RecognitionException {
        Alter_method_elementContext _localctx = new Alter_method_elementContext(_ctx, getState());
        enterRule(_localctx, 100, RULE_alter_method_element);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1460);
                _la = _input.LA(1);
                if ( !(_la==ADD || _la==DROP) ) {
                    _errHandler.recoverInline(this);
                } else {
                    consume();
                }
                setState(1463);
                switch (_input.LA(1)) {
                    case MAP:
                    case ORDER:
                    {
                        setState(1461);
                        map_order_function_spec();
                    }
                    break;
                    case MEMBER:
                    case STATIC:
                    {
                        setState(1462);
                        subprogram_spec();
                    }
                    break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Alter_attribute_definitionContext extends ParserRuleContext {
        public TerminalNode ATTRIBUTE() { return getToken(PlSqlParser.ATTRIBUTE, 0); }
        public TerminalNode ADD() { return getToken(PlSqlParser.ADD, 0); }
        public TerminalNode MODIFY() { return getToken(PlSqlParser.MODIFY, 0); }
        public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
        public List<Attribute_definitionContext> attribute_definition() {
            return getRuleContexts(Attribute_definitionContext.class);
        }
        public Attribute_definitionContext attribute_definition(int i) {
            return getRuleContext(Attribute_definitionContext.class,i);
        }
        public Alter_attribute_definitionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_alter_attribute_definition; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAlter_attribute_definition(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAlter_attribute_definition(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAlter_attribute_definition(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Alter_attribute_definitionContext alter_attribute_definition() throws RecognitionException {
        Alter_attribute_definitionContext _localctx = new Alter_attribute_definitionContext(_ctx, getState());
        enterRule(_localctx, 102, RULE_alter_attribute_definition);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1465);
                _la = _input.LA(1);
                if ( !(_la==ADD || _la==DROP || _la==MODIFY) ) {
                    _errHandler.recoverInline(this);
                } else {
                    consume();
                }
                setState(1466);
                match(ATTRIBUTE);
                setState(1479);
                switch (_input.LA(1)) {
                    case A_LETTER:
                    case ADD:
                    case AFTER:
                    case AGENT:
                    case AGGREGATE:
                    case ALL:
                    case ALTER:
                    case ANALYZE:
                    case AND:
                    case ANY:
                    case ARRAY:
                    case AS:
                    case ASC:
                    case ASSOCIATE:
                    case AT:
                    case ATTRIBUTE:
                    case AUDIT:
                    case AUTHID:
                    case AUTO:
                    case AUTOMATIC:
                    case AUTONOMOUS_TRANSACTION:
                    case BATCH:
                    case BEFORE:
                    case BEGIN:
                    case BETWEEN:
                    case BFILE:
                    case BINARY_DOUBLE:
                    case BINARY_FLOAT:
                    case BINARY_INTEGER:
                    case BLOB:
                    case BLOCK:
                    case BODY:
                    case BOOLEAN:
                    case BOTH:
                    case BREADTH:
                    case BULK:
                    case BY:
                    case BYTE:
                    case C_LETTER:
                    case CACHE:
                    case CALL:
                    case CANONICAL:
                    case CASCADE:
                    case CASE:
                    case CAST:
                    case CHAR:
                    case CHAR_CS:
                    case CHARACTER:
                    case CHECK:
                    case CHR:
                    case CLOB:
                    case CLOSE:
                    case CLUSTER:
                    case COLLECT:
                    case COLUMNS:
                    case COMMENT:
                    case COMMIT:
                    case COMMITTED:
                    case COMPATIBILITY:
                    case COMPILE:
                    case COMPOUND:
                    case CONNECT:
                    case CONNECT_BY_ROOT:
                    case CONSTANT:
                    case CONSTRAINT:
                    case CONSTRAINTS:
                    case CONSTRUCTOR:
                    case CONTENT:
                    case CONTEXT:
                    case CONTINUE:
                    case CONVERT:
                    case CORRUPT_XID:
                    case CORRUPT_XID_ALL:
                    case COST:
                    case COUNT:
                    case CREATE:
                    case CROSS:
                    case CUBE:
                    case CURRENT:
                    case CURRENT_USER:
                    case CURSOR:
                    case CUSTOMDATUM:
                    case CYCLE:
                    case DATA:
                    case DATABASE:
                    case DATE:
                    case DAY:
                    case DB_ROLE_CHANGE:
                    case DBTIMEZONE:
                    case DDL:
                    case DEBUG:
                    case DEC:
                    case DECIMAL:
                    case DECLARE:
                    case DECOMPOSE:
                    case DECREMENT:
                    case DEFAULT:
                    case DEFAULTS:
                    case DEFERRED:
                    case DEFINER:
                    case DELETE:
                    case DEPTH:
                    case DESC:
                    case DETERMINISTIC:
                    case DIMENSION:
                    case DISABLE:
                    case DISASSOCIATE:
                    case DISTINCT:
                    case DOCUMENT:
                    case DOUBLE:
                    case DROP:
                    case DSINTERVAL_UNCONSTRAINED:
                    case EACH:
                    case ELEMENT:
                    case ELSE:
                    case ELSIF:
                    case EMPTY:
                    case ENABLE:
                    case ENCODING:
                    case END:
                    case ENTITYESCAPING:
                    case ERRORS:
                    case ESCAPE:
                    case EXCEPT:
                    case EVALNAME:
                    case EXCEPTION:
                    case EXCEPTION_INIT:
                    case EXCEPTIONS:
                    case EXCLUDE:
                    case EXCLUSIVE:
                    case EXECUTE:
                    case EXISTS:
                    case EXIT:
                    case EXPLAIN:
                    case EXTERNAL:
                    case EXTRACT:
                    case FAILURE:
                    case FALSE:
                    case FETCH:
                    case FINAL:
                    case FIRST:
                    case FIRST_VALUE:
                    case FLOAT:
                    case FOLLOWING:
                    case FOLLOWS:
                    case FOR:
                    case FORALL:
                    case FORCE:
                    case FROM:
                    case FULL:
                    case FUNCTION:
                    case GOTO:
                    case GRANT:
                    case GROUP:
                    case GROUPING:
                    case HASH:
                    case HAVING:
                    case HIDE:
                    case HOUR:
                    case IF:
                    case IGNORE:
                    case IMMEDIATE:
                    case IN:
                    case INCLUDE:
                    case INCLUDING:
                    case INCREMENT:
                    case INDENT:
                    case INDEX:
                    case INDEXED:
                    case INDICATOR:
                    case INDICES:
                    case INFINITE:
                    case INLINE:
                    case INNER:
                    case INOUT:
                    case INSERT:
                    case INSTANTIABLE:
                    case INSTEAD:
                    case INT:
                    case INTEGER:
                    case INTERSECT:
                    case INTERVAL:
                    case INTO:
                    case INVALIDATE:
                    case IS:
                    case ISOLATION:
                    case ITERATE:
                    case JAVA:
                    case JOIN:
                    case KEEP:
                    case LANGUAGE:
                    case LAST:
                    case LAST_VALUE:
                    case LEADING:
                    case LEFT:
                    case LEVEL:
                    case LIBRARY:
                    case LIKE:
                    case LIKE2:
                    case LIKE4:
                    case LIKEC:
                    case LIMIT:
                    case LOCAL:
                    case LOCK:
                    case LOCKED:
                    case LOG:
                    case LOGOFF:
                    case LOGON:
                    case LONG:
                    case LOOP:
                    case MAIN:
                    case MAP:
                    case MATCHED:
                    case MAXVALUE:
                    case MEASURES:
                    case MEMBER:
                    case MERGE:
                    case MINUS:
                    case MINUTE:
                    case MINVALUE:
                    case MLSLABEL:
                    case MODE:
                    case MODEL:
                    case MODIFY:
                    case MONTH:
                    case MULTISET:
                    case NAME:
                    case NAN:
                    case NATURAL:
                    case NATURALN:
                    case NAV:
                    case NCHAR:
                    case NCHAR_CS:
                    case NCLOB:
                    case NESTED:
                    case NEW:
                    case NO:
                    case NOAUDIT:
                    case NOCACHE:
                    case NOCOPY:
                    case NOCYCLE:
                    case NOENTITYESCAPING:
                    case NOMAXVALUE:
                    case NOMINVALUE:
                    case NONE:
                    case NOORDER:
                    case NOSCHEMACHECK:
                    case NOT:
                    case NOWAIT:
                    case NULL:
                    case NULLS:
                    case NUMBER:
                    case NUMERIC:
                    case NVARCHAR2:
                    case OBJECT:
                    case OF:
                    case OFF:
                    case OID:
                    case OLD:
                    case ON:
                    case ONLY:
                    case OPEN:
                    case OPTION:
                    case OR:
                    case ORADATA:
                    case ORDER:
                    case ORDINALITY:
                    case OSERROR:
                    case OUT:
                    case OUTER:
                    case OVER:
                    case OVERRIDING:
                    case PACKAGE:
                    case PARALLEL_ENABLE:
                    case PARAMETERS:
                    case PARENT:
                    case PARTITION:
                    case PASSING:
                    case PATH:
                    case PIPELINED:
                    case PIVOT:
                    case PLAN:
                    case PLS_INTEGER:
                    case POSITIVE:
                    case POSITIVEN:
                    case PRAGMA:
                    case PRECEDING:
                    case PRECISION:
                    case PRESENT:
                    case PRIOR:
                    case PROCEDURE:
                    case RAISE:
                    case RANGE:
                    case RAW:
                    case READ:
                    case REAL:
                    case RECORD:
                    case REF:
                    case REFERENCE:
                    case REFERENCING:
                    case REJECT:
                    case RELIES_ON:
                    case RENAME:
                    case REPLACE:
                    case RESPECT:
                    case RESTRICT_REFERENCES:
                    case RESULT:
                    case RESULT_CACHE:
                    case RETURN:
                    case RETURNING:
                    case REUSE:
                    case REVERSE:
                    case REVOKE:
                    case RIGHT:
                    case ROLLBACK:
                    case ROLLUP:
                    case ROW:
                    case ROWID:
                    case ROWS:
                    case RULES:
                    case SAMPLE:
                    case SAVE:
                    case SAVEPOINT:
                    case SCHEMA:
                    case SCHEMACHECK:
                    case SCN:
                    case SEARCH:
                    case SECOND:
                    case SEED:
                    case SEGMENT:
                    case SELECT:
                    case SELF:
                    case SEQUENCE:
                    case SEQUENTIAL:
                    case SERIALIZABLE:
                    case SERIALLY_REUSABLE:
                    case SERVERERROR:
                    case SESSIONTIMEZONE:
                    case SET:
                    case SETS:
                    case SETTINGS:
                    case SHARE:
                    case SHOW:
                    case SHUTDOWN:
                    case SIBLINGS:
                    case SIGNTYPE:
                    case SIMPLE_INTEGER:
                    case SINGLE:
                    case SIZE:
                    case SKIP_:
                    case SMALLINT:
                    case SNAPSHOT:
                    case SOME:
                    case SPECIFICATION:
                    case SQLDATA:
                    case SQLERROR:
                    case SQL_PERCENT_ROWCOUNT:
                    case STANDALONE:
                    case START:
                    case STARTUP:
                    case STATEMENT:
                    case STATEMENT_ID:
                    case STATIC:
                    case STATISTICS:
                    case STRING:
                    case SUBMULTISET:
                    case SUBPARTITION:
                    case SUBSTITUTABLE:
                    case SUBTYPE:
                    case SUCCESS:
                    case SUSPEND:
                    case TABLE:
                    case THE:
                    case THEN:
                    case TIME:
                    case TIMESTAMP:
                    case TIMESTAMP_LTZ_UNCONSTRAINED:
                    case TIMESTAMP_TZ_UNCONSTRAINED:
                    case TIMESTAMP_UNCONSTRAINED:
                    case TIMEZONE_ABBR:
                    case TIMEZONE_HOUR:
                    case TIMEZONE_MINUTE:
                    case TIMEZONE_REGION:
                    case TO:
                    case TO_CHAR:
                    case TRAILING:
                    case TRANSACTION:
                    case TRANSLATE:
                    case TREAT:
                    case TRIGGER:
                    case TRIM:
                    case TRUE:
                    case TRUNCATE:
                    case TYPE:
                    case UNBOUNDED:
                    case UNDER:
                    case UNION:
                    case UNIQUE:
                    case UNLIMITED:
                    case UNPIVOT:
                    case UNTIL:
                    case UPDATE:
                    case UPDATED:
                    case UPSERT:
                    case UROWID:
                    case USE:
                    case USING:
                    case VALIDATE:
                    case VALUE:
                    case VALUES:
                    case VARCHAR:
                    case VARCHAR2:
                    case VARIABLE:
                    case VARRAY:
                    case VARYING:
                    case VERSION:
                    case VERSIONS:
                    case WAIT:
                    case WARNING:
                    case WELLFORMED:
                    case WHEN:
                    case WHENEVER:
                    case WHERE:
                    case WHILE:
                    case WITH:
                    case WITHIN:
                    case WORK:
                    case WRITE:
                    case XML:
                    case XMLAGG:
                    case XMLATTRIBUTES:
                    case XMLCAST:
                    case XMLCOLATTVAL:
                    case XMLELEMENT:
                    case XMLEXISTS:
                    case XMLFOREST:
                    case XMLNAMESPACES:
                    case XMLPARSE:
                    case XMLPI:
                    case XMLQUERY:
                    case XMLROOT:
                    case XMLSERIALIZE:
                    case XMLTABLE:
                    case YEAR:
                    case YES:
                    case YMINTERVAL_UNCONSTRAINED:
                    case ZONE:
                    case PREDICTION:
                    case PREDICTION_BOUNDS:
                    case PREDICTION_COST:
                    case PREDICTION_DETAILS:
                    case PREDICTION_PROBABILITY:
                    case PREDICTION_SET:
                    case CUME_DIST:
                    case DENSE_RANK:
                    case LISTAGG:
                    case PERCENT_RANK:
                    case PERCENTILE_CONT:
                    case PERCENTILE_DISC:
                    case RANK:
                    case AVG:
                    case CORR:
                    case LAG:
                    case LEAD:
                    case MAX:
                    case MEDIAN:
                    case MIN:
                    case NTILE:
                    case RATIO_TO_REPORT:
                    case ROW_NUMBER:
                    case SUM:
                    case VARIANCE:
                    case REGR_:
                    case STDDEV:
                    case VAR_:
                    case COVAR_:
                    case DELIMITED_ID:
                    case INTRODUCER:
                    case REGULAR_ID:
                    {
                        setState(1467);
                        attribute_definition();
                    }
                    break;
                    case LEFT_PAREN:
                    {
                        setState(1468);
                        match(LEFT_PAREN);
                        setState(1469);
                        attribute_definition();
                        setState(1474);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la==COMMA) {
                            {
                                {
                                    setState(1470);
                                    match(COMMA);
                                    setState(1471);
                                    attribute_definition();
                                }
                            }
                            setState(1476);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                        setState(1477);
                        match(RIGHT_PAREN);
                    }
                    break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Attribute_definitionContext extends ParserRuleContext {
        public Attribute_nameContext attribute_name() {
            return getRuleContext(Attribute_nameContext.class,0);
        }
        public Type_specContext type_spec() {
            return getRuleContext(Type_specContext.class,0);
        }
        public Attribute_definitionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_attribute_definition; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAttribute_definition(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAttribute_definition(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAttribute_definition(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Attribute_definitionContext attribute_definition() throws RecognitionException {
        Attribute_definitionContext _localctx = new Attribute_definitionContext(_ctx, getState());
        enterRule(_localctx, 104, RULE_attribute_definition);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1481);
                attribute_name();
                setState(1483);
                _la = _input.LA(1);
                if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ALTER) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREADTH) | (1L << BULK) | (1L << BY) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHECK) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DEPTH - 64)) | (1L << (DESC - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (ELSE - 64)) | (1L << (ELSIF - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (END - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EXCEPT - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXCLUSIVE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FETCH - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FOR - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GOTO - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HAVING - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IN - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEX - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERSECT - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTO - 192)) | (1L << (INVALIDATE - 192)) | (1L << (IS - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCK - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUS - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCACHE - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)) | (1L << (NOENTITYESCAPING - 192)) | (1L << (NOMAXVALUE - 192)) | (1L << (NOMINVALUE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NONE - 256)) | (1L << (NOORDER - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NOT - 256)) | (1L << (NOWAIT - 256)) | (1L << (NULL - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OF - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ON - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (OPTION - 256)) | (1L << (OR - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDER - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PIVOT - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (PRIOR - 256)) | (1L << (PROCEDURE - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (REVOKE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SEARCH - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELECT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENCE - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHARE - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (SQL_PERCENT_ROWCOUNT - 320)) | (1L << (STANDALONE - 320)) | (1L << (START - 320)) | (1L << (STARTUP - 320)) | (1L << (STATEMENT - 320)) | (1L << (STATEMENT_ID - 320)) | (1L << (STATIC - 320)) | (1L << (STATISTICS - 320)) | (1L << (STRING - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TABLE - 384)) | (1L << (THE - 384)) | (1L << (THEN - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TO - 384)) | (1L << (TO_CHAR - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUE - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNION - 384)) | (1L << (UNIQUE - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNPIVOT - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATE - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (USING - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VALUES - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHEN - 384)) | (1L << (WHENEVER - 384)) | (1L << (WHERE - 384)) | (1L << (WHILE - 384)) | (1L << (WITH - 384)) | (1L << (WITHIN - 384)) | (1L << (WORK - 384)) | (1L << (WRITE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)) | (1L << (REGR_ - 448)) | (1L << (STDDEV - 448)) | (1L << (VAR_ - 448)) | (1L << (COVAR_ - 448)) | (1L << (DELIMITED_ID - 448)))) != 0) || _la==REGULAR_ID) {
                    {
                        setState(1482);
                        type_spec();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Alter_collection_clausesContext extends ParserRuleContext {
        public TerminalNode MODIFY() { return getToken(PlSqlParser.MODIFY, 0); }
        public TerminalNode LIMIT() { return getToken(PlSqlParser.LIMIT, 0); }
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class,0);
        }
        public TerminalNode ELEMENT() { return getToken(PlSqlParser.ELEMENT, 0); }
        public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
        public Type_specContext type_spec() {
            return getRuleContext(Type_specContext.class,0);
        }
        public Alter_collection_clausesContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_alter_collection_clauses; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAlter_collection_clauses(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAlter_collection_clauses(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAlter_collection_clauses(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Alter_collection_clausesContext alter_collection_clauses() throws RecognitionException {
        Alter_collection_clausesContext _localctx = new Alter_collection_clausesContext(_ctx, getState());
        enterRule(_localctx, 106, RULE_alter_collection_clauses);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1485);
                match(MODIFY);
                setState(1491);
                switch (_input.LA(1)) {
                    case LIMIT:
                    {
                        setState(1486);
                        match(LIMIT);
                        setState(1487);
                        expression();
                    }
                    break;
                    case ELEMENT:
                    {
                        setState(1488);
                        match(ELEMENT);
                        setState(1489);
                        match(TYPE);
                        setState(1490);
                        type_spec();
                    }
                    break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Dependent_handling_clauseContext extends ParserRuleContext {
        public TerminalNode INVALIDATE() { return getToken(PlSqlParser.INVALIDATE, 0); }
        public TerminalNode CASCADE() { return getToken(PlSqlParser.CASCADE, 0); }
        public TerminalNode CONVERT() { return getToken(PlSqlParser.CONVERT, 0); }
        public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
        public TerminalNode SUBSTITUTABLE() { return getToken(PlSqlParser.SUBSTITUTABLE, 0); }
        public TerminalNode INCLUDING() { return getToken(PlSqlParser.INCLUDING, 0); }
        public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
        public TerminalNode DATA() { return getToken(PlSqlParser.DATA, 0); }
        public Dependent_exceptions_partContext dependent_exceptions_part() {
            return getRuleContext(Dependent_exceptions_partContext.class,0);
        }
        public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
        public Dependent_handling_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_dependent_handling_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDependent_handling_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDependent_handling_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDependent_handling_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Dependent_handling_clauseContext dependent_handling_clause() throws RecognitionException {
        Dependent_handling_clauseContext _localctx = new Dependent_handling_clauseContext(_ctx, getState());
        enterRule(_localctx, 108, RULE_dependent_handling_clause);
        int _la;
        try {
            setState(1509);
            switch (_input.LA(1)) {
                case INVALIDATE:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(1493);
                    match(INVALIDATE);
                }
                break;
                case CASCADE:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(1494);
                    match(CASCADE);
                    setState(1504);
                    switch (_input.LA(1)) {
                        case CONVERT:
                        {
                            setState(1495);
                            match(CONVERT);
                            setState(1496);
                            match(TO);
                            setState(1497);
                            match(SUBSTITUTABLE);
                        }
                        break;
                        case INCLUDING:
                        case NOT:
                        {
                            setState(1499);
                            _la = _input.LA(1);
                            if (_la==NOT) {
                                {
                                    setState(1498);
                                    match(NOT);
                                }
                            }

                            setState(1501);
                            match(INCLUDING);
                            setState(1502);
                            match(TABLE);
                            setState(1503);
                            match(DATA);
                        }
                        break;
                        case EXCEPTIONS:
                        case FORCE:
                        case SEMICOLON:
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    setState(1507);
                    _la = _input.LA(1);
                    if (_la==EXCEPTIONS || _la==FORCE) {
                        {
                            setState(1506);
                            dependent_exceptions_part();
                        }
                    }

                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Dependent_exceptions_partContext extends ParserRuleContext {
        public TerminalNode EXCEPTIONS() { return getToken(PlSqlParser.EXCEPTIONS, 0); }
        public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
        public Tableview_nameContext tableview_name() {
            return getRuleContext(Tableview_nameContext.class,0);
        }
        public TerminalNode FORCE() { return getToken(PlSqlParser.FORCE, 0); }
        public Dependent_exceptions_partContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_dependent_exceptions_part; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDependent_exceptions_part(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDependent_exceptions_part(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDependent_exceptions_part(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Dependent_exceptions_partContext dependent_exceptions_part() throws RecognitionException {
        Dependent_exceptions_partContext _localctx = new Dependent_exceptions_partContext(_ctx, getState());
        enterRule(_localctx, 110, RULE_dependent_exceptions_part);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1512);
                _la = _input.LA(1);
                if (_la==FORCE) {
                    {
                        setState(1511);
                        match(FORCE);
                    }
                }

                setState(1514);
                match(EXCEPTIONS);
                setState(1515);
                match(INTO);
                setState(1516);
                tableview_name();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Create_typeContext extends ParserRuleContext {
        public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
        public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
        public Type_definitionContext type_definition() {
            return getRuleContext(Type_definitionContext.class,0);
        }
        public Type_bodyContext type_body() {
            return getRuleContext(Type_bodyContext.class,0);
        }
        public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
        public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
        public Create_typeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_create_type; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCreate_type(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCreate_type(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCreate_type(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Create_typeContext create_type() throws RecognitionException {
        Create_typeContext _localctx = new Create_typeContext(_ctx, getState());
        enterRule(_localctx, 112, RULE_create_type);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1518);
                match(CREATE);
                setState(1521);
                _la = _input.LA(1);
                if (_la==OR) {
                    {
                        setState(1519);
                        match(OR);
                        setState(1520);
                        match(REPLACE);
                    }
                }

                setState(1523);
                match(TYPE);
                setState(1526);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,105,_ctx) ) {
                    case 1:
                    {
                        setState(1524);
                        type_definition();
                    }
                    break;
                    case 2:
                    {
                        setState(1525);
                        type_body();
                    }
                    break;
                }
                setState(1528);
                match(SEMICOLON);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Type_definitionContext extends ParserRuleContext {
        public Type_nameContext type_name() {
            return getRuleContext(Type_nameContext.class,0);
        }
        public TerminalNode OID() { return getToken(PlSqlParser.OID, 0); }
        public TerminalNode CHAR_STRING() { return getToken(PlSqlParser.CHAR_STRING, 0); }
        public Object_type_defContext object_type_def() {
            return getRuleContext(Object_type_defContext.class,0);
        }
        public Type_definitionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_type_definition; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterType_definition(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitType_definition(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitType_definition(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Type_definitionContext type_definition() throws RecognitionException {
        Type_definitionContext _localctx = new Type_definitionContext(_ctx, getState());
        enterRule(_localctx, 114, RULE_type_definition);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1530);
                type_name();
                setState(1533);
                _la = _input.LA(1);
                if (_la==OID) {
                    {
                        setState(1531);
                        match(OID);
                        setState(1532);
                        match(CHAR_STRING);
                    }
                }

                setState(1536);
                _la = _input.LA(1);
                if (_la==AS || _la==AUTHID || _la==IS || _la==UNDER) {
                    {
                        setState(1535);
                        object_type_def();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Object_type_defContext extends ParserRuleContext {
        public Object_as_partContext object_as_part() {
            return getRuleContext(Object_as_partContext.class,0);
        }
        public Object_under_partContext object_under_part() {
            return getRuleContext(Object_under_partContext.class,0);
        }
        public Invoker_rights_clauseContext invoker_rights_clause() {
            return getRuleContext(Invoker_rights_clauseContext.class,0);
        }
        public Sqlj_object_typeContext sqlj_object_type() {
            return getRuleContext(Sqlj_object_typeContext.class,0);
        }
        public List<Object_member_specContext> object_member_spec() {
            return getRuleContexts(Object_member_specContext.class);
        }
        public Object_member_specContext object_member_spec(int i) {
            return getRuleContext(Object_member_specContext.class,i);
        }
        public List<Modifier_clauseContext> modifier_clause() {
            return getRuleContexts(Modifier_clauseContext.class);
        }
        public Modifier_clauseContext modifier_clause(int i) {
            return getRuleContext(Modifier_clauseContext.class,i);
        }
        public Object_type_defContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_object_type_def; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterObject_type_def(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitObject_type_def(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitObject_type_def(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Object_type_defContext object_type_def() throws RecognitionException {
        Object_type_defContext _localctx = new Object_type_defContext(_ctx, getState());
        enterRule(_localctx, 116, RULE_object_type_def);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1539);
                _la = _input.LA(1);
                if (_la==AUTHID) {
                    {
                        setState(1538);
                        invoker_rights_clause();
                    }
                }

                setState(1543);
                switch (_input.LA(1)) {
                    case AS:
                    case IS:
                    {
                        setState(1541);
                        object_as_part();
                    }
                    break;
                    case UNDER:
                    {
                        setState(1542);
                        object_under_part();
                    }
                    break;
                    default:
                        throw new NoViableAltException(this);
                }
                setState(1546);
                _la = _input.LA(1);
                if (_la==EXTERNAL) {
                    {
                        setState(1545);
                        sqlj_object_type();
                    }
                }

                setState(1559);
                _la = _input.LA(1);
                if (_la==LEFT_PAREN) {
                    {
                        setState(1548);
                        match(LEFT_PAREN);
                        setState(1549);
                        object_member_spec();
                        setState(1554);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la==COMMA) {
                            {
                                {
                                    setState(1550);
                                    match(COMMA);
                                    setState(1551);
                                    object_member_spec();
                                }
                            }
                            setState(1556);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                        setState(1557);
                        match(RIGHT_PAREN);
                    }
                }

                setState(1564);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==FINAL || _la==INSTANTIABLE || _la==NOT || _la==OVERRIDING) {
                    {
                        {
                            setState(1561);
                            modifier_clause();
                        }
                    }
                    setState(1566);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Object_as_partContext extends ParserRuleContext {
        public Is_or_asContext is_or_as() {
            return getRuleContext(Is_or_asContext.class,0);
        }
        public TerminalNode OBJECT() { return getToken(PlSqlParser.OBJECT, 0); }
        public Varray_type_defContext varray_type_def() {
            return getRuleContext(Varray_type_defContext.class,0);
        }
        public Nested_table_type_defContext nested_table_type_def() {
            return getRuleContext(Nested_table_type_defContext.class,0);
        }
        public Object_as_partContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_object_as_part; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterObject_as_part(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitObject_as_part(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitObject_as_part(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Object_as_partContext object_as_part() throws RecognitionException {
        Object_as_partContext _localctx = new Object_as_partContext(_ctx, getState());
        enterRule(_localctx, 118, RULE_object_as_part);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1567);
                is_or_as();
                setState(1571);
                switch (_input.LA(1)) {
                    case OBJECT:
                    {
                        setState(1568);
                        match(OBJECT);
                    }
                    break;
                    case VARRAY:
                    case VARYING:
                    {
                        setState(1569);
                        varray_type_def();
                    }
                    break;
                    case TABLE:
                    {
                        setState(1570);
                        nested_table_type_def();
                    }
                    break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Object_under_partContext extends ParserRuleContext {
        public TerminalNode UNDER() { return getToken(PlSqlParser.UNDER, 0); }
        public Type_specContext type_spec() {
            return getRuleContext(Type_specContext.class,0);
        }
        public Object_under_partContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_object_under_part; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterObject_under_part(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitObject_under_part(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitObject_under_part(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Object_under_partContext object_under_part() throws RecognitionException {
        Object_under_partContext _localctx = new Object_under_partContext(_ctx, getState());
        enterRule(_localctx, 120, RULE_object_under_part);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1573);
                match(UNDER);
                setState(1574);
                type_spec();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Nested_table_type_defContext extends ParserRuleContext {
        public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
        public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
        public Type_specContext type_spec() {
            return getRuleContext(Type_specContext.class,0);
        }
        public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
        public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
        public Nested_table_type_defContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_nested_table_type_def; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterNested_table_type_def(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitNested_table_type_def(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitNested_table_type_def(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Nested_table_type_defContext nested_table_type_def() throws RecognitionException {
        Nested_table_type_defContext _localctx = new Nested_table_type_defContext(_ctx, getState());
        enterRule(_localctx, 122, RULE_nested_table_type_def);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1576);
                match(TABLE);
                setState(1577);
                match(OF);
                setState(1578);
                type_spec();
                setState(1581);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,115,_ctx) ) {
                    case 1:
                    {
                        setState(1579);
                        match(NOT);
                        setState(1580);
                        match(NULL);
                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Sqlj_object_typeContext extends ParserRuleContext {
        public TerminalNode EXTERNAL() { return getToken(PlSqlParser.EXTERNAL, 0); }
        public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class,0);
        }
        public TerminalNode LANGUAGE() { return getToken(PlSqlParser.LANGUAGE, 0); }
        public TerminalNode JAVA() { return getToken(PlSqlParser.JAVA, 0); }
        public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
        public TerminalNode SQLDATA() { return getToken(PlSqlParser.SQLDATA, 0); }
        public TerminalNode CUSTOMDATUM() { return getToken(PlSqlParser.CUSTOMDATUM, 0); }
        public TerminalNode ORADATA() { return getToken(PlSqlParser.ORADATA, 0); }
        public Sqlj_object_typeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_sqlj_object_type; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSqlj_object_type(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSqlj_object_type(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSqlj_object_type(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Sqlj_object_typeContext sqlj_object_type() throws RecognitionException {
        Sqlj_object_typeContext _localctx = new Sqlj_object_typeContext(_ctx, getState());
        enterRule(_localctx, 124, RULE_sqlj_object_type);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1583);
                match(EXTERNAL);
                setState(1584);
                match(NAME);
                setState(1585);
                expression();
                setState(1586);
                match(LANGUAGE);
                setState(1587);
                match(JAVA);
                setState(1588);
                match(USING);
                setState(1589);
                _la = _input.LA(1);
                if ( !(_la==CUSTOMDATUM || _la==ORADATA || _la==SQLDATA) ) {
                    _errHandler.recoverInline(this);
                } else {
                    consume();
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Type_bodyContext extends ParserRuleContext {
        public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
        public Type_nameContext type_name() {
            return getRuleContext(Type_nameContext.class,0);
        }
        public Is_or_asContext is_or_as() {
            return getRuleContext(Is_or_asContext.class,0);
        }
        public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
        public List<Type_body_elementsContext> type_body_elements() {
            return getRuleContexts(Type_body_elementsContext.class);
        }
        public Type_body_elementsContext type_body_elements(int i) {
            return getRuleContext(Type_body_elementsContext.class,i);
        }
        public Type_bodyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_type_body; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterType_body(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitType_body(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitType_body(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Type_bodyContext type_body() throws RecognitionException {
        Type_bodyContext _localctx = new Type_bodyContext(_ctx, getState());
        enterRule(_localctx, 126, RULE_type_body);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1591);
                match(BODY);
                setState(1592);
                type_name();
                setState(1593);
                is_or_as();
                setState(1595);
                _errHandler.sync(this);
                _la = _input.LA(1);
                do {
                    {
                        {
                            setState(1594);
                            type_body_elements();
                        }
                    }
                    setState(1597);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                } while ( ((((_la - 221)) & ~0x3f) == 0 && ((1L << (_la - 221)) & ((1L << (MAP - 221)) | (1L << (MEMBER - 221)) | (1L << (ORDER - 221)))) != 0) || _la==STATIC );
                setState(1599);
                match(END);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Type_body_elementsContext extends ParserRuleContext {
        public Map_order_func_declarationContext map_order_func_declaration() {
            return getRuleContext(Map_order_func_declarationContext.class,0);
        }
        public Subprog_decl_in_typeContext subprog_decl_in_type() {
            return getRuleContext(Subprog_decl_in_typeContext.class,0);
        }
        public Type_body_elementsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_type_body_elements; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterType_body_elements(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitType_body_elements(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitType_body_elements(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Type_body_elementsContext type_body_elements() throws RecognitionException {
        Type_body_elementsContext _localctx = new Type_body_elementsContext(_ctx, getState());
        enterRule(_localctx, 128, RULE_type_body_elements);
        try {
            setState(1603);
            switch (_input.LA(1)) {
                case MAP:
                case ORDER:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(1601);
                    map_order_func_declaration();
                }
                break;
                case MEMBER:
                case STATIC:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(1602);
                    subprog_decl_in_type();
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Map_order_func_declarationContext extends ParserRuleContext {
        public TerminalNode MEMBER() { return getToken(PlSqlParser.MEMBER, 0); }
        public Func_decl_in_typeContext func_decl_in_type() {
            return getRuleContext(Func_decl_in_typeContext.class,0);
        }
        public TerminalNode MAP() { return getToken(PlSqlParser.MAP, 0); }
        public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
        public Map_order_func_declarationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_map_order_func_declaration; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMap_order_func_declaration(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMap_order_func_declaration(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMap_order_func_declaration(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Map_order_func_declarationContext map_order_func_declaration() throws RecognitionException {
        Map_order_func_declarationContext _localctx = new Map_order_func_declarationContext(_ctx, getState());
        enterRule(_localctx, 130, RULE_map_order_func_declaration);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1605);
                _la = _input.LA(1);
                if ( !(_la==MAP || _la==ORDER) ) {
                    _errHandler.recoverInline(this);
                } else {
                    consume();
                }
                setState(1606);
                match(MEMBER);
                setState(1607);
                func_decl_in_type();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Subprog_decl_in_typeContext extends ParserRuleContext {
        public TerminalNode MEMBER() { return getToken(PlSqlParser.MEMBER, 0); }
        public TerminalNode STATIC() { return getToken(PlSqlParser.STATIC, 0); }
        public Proc_decl_in_typeContext proc_decl_in_type() {
            return getRuleContext(Proc_decl_in_typeContext.class,0);
        }
        public Func_decl_in_typeContext func_decl_in_type() {
            return getRuleContext(Func_decl_in_typeContext.class,0);
        }
        public Constructor_declarationContext constructor_declaration() {
            return getRuleContext(Constructor_declarationContext.class,0);
        }
        public Subprog_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_subprog_decl_in_type; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSubprog_decl_in_type(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSubprog_decl_in_type(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSubprog_decl_in_type(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Subprog_decl_in_typeContext subprog_decl_in_type() throws RecognitionException {
        Subprog_decl_in_typeContext _localctx = new Subprog_decl_in_typeContext(_ctx, getState());
        enterRule(_localctx, 132, RULE_subprog_decl_in_type);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1609);
                _la = _input.LA(1);
                if ( !(_la==MEMBER || _la==STATIC) ) {
                    _errHandler.recoverInline(this);
                } else {
                    consume();
                }
                setState(1613);
                switch (_input.LA(1)) {
                    case PROCEDURE:
                    {
                        setState(1610);
                        proc_decl_in_type();
                    }
                    break;
                    case FUNCTION:
                    {
                        setState(1611);
                        func_decl_in_type();
                    }
                    break;
                    case CONSTRUCTOR:
                    case FINAL:
                    case INSTANTIABLE:
                    {
                        setState(1612);
                        constructor_declaration();
                    }
                    break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Proc_decl_in_typeContext extends ParserRuleContext {
        public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
        public Procedure_nameContext procedure_name() {
            return getRuleContext(Procedure_nameContext.class,0);
        }
        public List<Type_elements_parameterContext> type_elements_parameter() {
            return getRuleContexts(Type_elements_parameterContext.class);
        }
        public Type_elements_parameterContext type_elements_parameter(int i) {
            return getRuleContext(Type_elements_parameterContext.class,i);
        }
        public Is_or_asContext is_or_as() {
            return getRuleContext(Is_or_asContext.class,0);
        }
        public Call_specContext call_spec() {
            return getRuleContext(Call_specContext.class,0);
        }
        public BodyContext body() {
            return getRuleContext(BodyContext.class,0);
        }
        public List<Declare_specContext> declare_spec() {
            return getRuleContexts(Declare_specContext.class);
        }
        public Declare_specContext declare_spec(int i) {
            return getRuleContext(Declare_specContext.class,i);
        }
        public Proc_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_proc_decl_in_type; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterProc_decl_in_type(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitProc_decl_in_type(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitProc_decl_in_type(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Proc_decl_in_typeContext proc_decl_in_type() throws RecognitionException {
        Proc_decl_in_typeContext _localctx = new Proc_decl_in_typeContext(_ctx, getState());
        enterRule(_localctx, 134, RULE_proc_decl_in_type);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(1615);
                match(PROCEDURE);
                setState(1616);
                procedure_name();
                setState(1617);
                match(LEFT_PAREN);
                setState(1618);
                type_elements_parameter();
                setState(1623);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==COMMA) {
                    {
                        {
                            setState(1619);
                            match(COMMA);
                            setState(1620);
                            type_elements_parameter();
                        }
                    }
                    setState(1625);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(1626);
                match(RIGHT_PAREN);
                setState(1627);
                is_or_as();
                setState(1638);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,121,_ctx) ) {
                    case 1:
                    {
                        setState(1628);
                        call_spec();
                    }
                    break;
                    case 2:
                    {
                        setState(1632);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input,120,_ctx);
                        while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
                            if ( _alt==1 ) {
                                {
                                    {
                                        setState(1629);
                                        declare_spec();
                                    }
                                }
                            }
                            setState(1634);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input,120,_ctx);
                        }
                        setState(1635);
                        body();
                        setState(1636);
                        match(SEMICOLON);
                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Func_decl_in_typeContext extends ParserRuleContext {
        public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
        public Function_nameContext function_name() {
            return getRuleContext(Function_nameContext.class,0);
        }
        public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
        public Type_specContext type_spec() {
            return getRuleContext(Type_specContext.class,0);
        }
        public Is_or_asContext is_or_as() {
            return getRuleContext(Is_or_asContext.class,0);
        }
        public Call_specContext call_spec() {
            return getRuleContext(Call_specContext.class,0);
        }
        public BodyContext body() {
            return getRuleContext(BodyContext.class,0);
        }
        public List<Type_elements_parameterContext> type_elements_parameter() {
            return getRuleContexts(Type_elements_parameterContext.class);
        }
        public Type_elements_parameterContext type_elements_parameter(int i) {
            return getRuleContext(Type_elements_parameterContext.class,i);
        }
        public List<Declare_specContext> declare_spec() {
            return getRuleContexts(Declare_specContext.class);
        }
        public Declare_specContext declare_spec(int i) {
            return getRuleContext(Declare_specContext.class,i);
        }
        public Func_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_func_decl_in_type; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFunc_decl_in_type(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFunc_decl_in_type(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFunc_decl_in_type(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Func_decl_in_typeContext func_decl_in_type() throws RecognitionException {
        Func_decl_in_typeContext _localctx = new Func_decl_in_typeContext(_ctx, getState());
        enterRule(_localctx, 136, RULE_func_decl_in_type);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(1640);
                match(FUNCTION);
                setState(1641);
                function_name();
                setState(1653);
                _la = _input.LA(1);
                if (_la==LEFT_PAREN) {
                    {
                        setState(1642);
                        match(LEFT_PAREN);
                        setState(1643);
                        type_elements_parameter();
                        setState(1648);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la==COMMA) {
                            {
                                {
                                    setState(1644);
                                    match(COMMA);
                                    setState(1645);
                                    type_elements_parameter();
                                }
                            }
                            setState(1650);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                        setState(1651);
                        match(RIGHT_PAREN);
                    }
                }

                setState(1655);
                match(RETURN);
                setState(1656);
                type_spec();
                setState(1657);
                is_or_as();
                setState(1668);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,125,_ctx) ) {
                    case 1:
                    {
                        setState(1658);
                        call_spec();
                    }
                    break;
                    case 2:
                    {
                        setState(1662);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input,124,_ctx);
                        while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
                            if ( _alt==1 ) {
                                {
                                    {
                                        setState(1659);
                                        declare_spec();
                                    }
                                }
                            }
                            setState(1664);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input,124,_ctx);
                        }
                        setState(1665);
                        body();
                        setState(1666);
                        match(SEMICOLON);
                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Constructor_declarationContext extends ParserRuleContext {
        public TerminalNode CONSTRUCTOR() { return getToken(PlSqlParser.CONSTRUCTOR, 0); }
        public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
        public List<Type_specContext> type_spec() {
            return getRuleContexts(Type_specContext.class);
        }
        public Type_specContext type_spec(int i) {
            return getRuleContext(Type_specContext.class,i);
        }
        public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
        public List<TerminalNode> SELF() { return getTokens(PlSqlParser.SELF); }
        public TerminalNode SELF(int i) {
            return getToken(PlSqlParser.SELF, i);
        }
        public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
        public TerminalNode RESULT() { return getToken(PlSqlParser.RESULT, 0); }
        public Is_or_asContext is_or_as() {
            return getRuleContext(Is_or_asContext.class,0);
        }
        public Call_specContext call_spec() {
            return getRuleContext(Call_specContext.class,0);
        }
        public BodyContext body() {
            return getRuleContext(BodyContext.class,0);
        }
        public TerminalNode FINAL() { return getToken(PlSqlParser.FINAL, 0); }
        public TerminalNode INSTANTIABLE() { return getToken(PlSqlParser.INSTANTIABLE, 0); }
        public List<Type_elements_parameterContext> type_elements_parameter() {
            return getRuleContexts(Type_elements_parameterContext.class);
        }
        public Type_elements_parameterContext type_elements_parameter(int i) {
            return getRuleContext(Type_elements_parameterContext.class,i);
        }
        public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
        public TerminalNode OUT() { return getToken(PlSqlParser.OUT, 0); }
        public List<Declare_specContext> declare_spec() {
            return getRuleContexts(Declare_specContext.class);
        }
        public Declare_specContext declare_spec(int i) {
            return getRuleContext(Declare_specContext.class,i);
        }
        public Constructor_declarationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_constructor_declaration; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterConstructor_declaration(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitConstructor_declaration(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitConstructor_declaration(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Constructor_declarationContext constructor_declaration() throws RecognitionException {
        Constructor_declarationContext _localctx = new Constructor_declarationContext(_ctx, getState());
        enterRule(_localctx, 138, RULE_constructor_declaration);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(1671);
                _la = _input.LA(1);
                if (_la==FINAL) {
                    {
                        setState(1670);
                        match(FINAL);
                    }
                }

                setState(1674);
                _la = _input.LA(1);
                if (_la==INSTANTIABLE) {
                    {
                        setState(1673);
                        match(INSTANTIABLE);
                    }
                }

                setState(1676);
                match(CONSTRUCTOR);
                setState(1677);
                match(FUNCTION);
                setState(1678);
                type_spec();
                setState(1696);
                _la = _input.LA(1);
                if (_la==LEFT_PAREN) {
                    {
                        setState(1679);
                        match(LEFT_PAREN);
                        {
                            setState(1680);
                            match(SELF);
                            setState(1681);
                            match(IN);
                            setState(1682);
                            match(OUT);
                            setState(1683);
                            type_spec();
                            setState(1684);
                            match(COMMA);
                        }
                        setState(1686);
                        type_elements_parameter();
                        setState(1691);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la==COMMA) {
                            {
                                {
                                    setState(1687);
                                    match(COMMA);
                                    setState(1688);
                                    type_elements_parameter();
                                }
                            }
                            setState(1693);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                        setState(1694);
                        match(RIGHT_PAREN);
                    }
                }

                setState(1698);
                match(RETURN);
                setState(1699);
                match(SELF);
                setState(1700);
                match(AS);
                setState(1701);
                match(RESULT);
                setState(1702);
                is_or_as();
                setState(1713);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,131,_ctx) ) {
                    case 1:
                    {
                        setState(1703);
                        call_spec();
                    }
                    break;
                    case 2:
                    {
                        setState(1707);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input,130,_ctx);
                        while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
                            if ( _alt==1 ) {
                                {
                                    {
                                        setState(1704);
                                        declare_spec();
                                    }
                                }
                            }
                            setState(1709);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input,130,_ctx);
                        }
                        setState(1710);
                        body();
                        setState(1711);
                        match(SEMICOLON);
                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Modifier_clauseContext extends ParserRuleContext {
        public TerminalNode INSTANTIABLE() { return getToken(PlSqlParser.INSTANTIABLE, 0); }
        public TerminalNode FINAL() { return getToken(PlSqlParser.FINAL, 0); }
        public TerminalNode OVERRIDING() { return getToken(PlSqlParser.OVERRIDING, 0); }
        public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
        public Modifier_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_modifier_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterModifier_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitModifier_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitModifier_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Modifier_clauseContext modifier_clause() throws RecognitionException {
        Modifier_clauseContext _localctx = new Modifier_clauseContext(_ctx, getState());
        enterRule(_localctx, 140, RULE_modifier_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1716);
                _la = _input.LA(1);
                if (_la==NOT) {
                    {
                        setState(1715);
                        match(NOT);
                    }
                }

                setState(1718);
                _la = _input.LA(1);
                if ( !(_la==FINAL || _la==INSTANTIABLE || _la==OVERRIDING) ) {
                    _errHandler.recoverInline(this);
                } else {
                    consume();
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Object_member_specContext extends ParserRuleContext {
        public IdContext id() {
            return getRuleContext(IdContext.class,0);
        }
        public Type_specContext type_spec() {
            return getRuleContext(Type_specContext.class,0);
        }
        public Sqlj_object_type_attrContext sqlj_object_type_attr() {
            return getRuleContext(Sqlj_object_type_attrContext.class,0);
        }
        public Element_specContext element_spec() {
            return getRuleContext(Element_specContext.class,0);
        }
        public Object_member_specContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_object_member_spec; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterObject_member_spec(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitObject_member_spec(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitObject_member_spec(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Object_member_specContext object_member_spec() throws RecognitionException {
        Object_member_specContext _localctx = new Object_member_specContext(_ctx, getState());
        enterRule(_localctx, 142, RULE_object_member_spec);
        int _la;
        try {
            setState(1726);
            _errHandler.sync(this);
            switch ( getInterpreter().adaptivePredict(_input,134,_ctx) ) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(1720);
                    id();
                    setState(1721);
                    type_spec();
                    setState(1723);
                    _la = _input.LA(1);
                    if (_la==EXTERNAL) {
                        {
                            setState(1722);
                            sqlj_object_type_attr();
                        }
                    }

                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(1725);
                    element_spec();
                }
                break;
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Sqlj_object_type_attrContext extends ParserRuleContext {
        public TerminalNode EXTERNAL() { return getToken(PlSqlParser.EXTERNAL, 0); }
        public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class,0);
        }
        public Sqlj_object_type_attrContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_sqlj_object_type_attr; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSqlj_object_type_attr(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSqlj_object_type_attr(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSqlj_object_type_attr(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Sqlj_object_type_attrContext sqlj_object_type_attr() throws RecognitionException {
        Sqlj_object_type_attrContext _localctx = new Sqlj_object_type_attrContext(_ctx, getState());
        enterRule(_localctx, 144, RULE_sqlj_object_type_attr);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1728);
                match(EXTERNAL);
                setState(1729);
                match(NAME);
                setState(1730);
                expression();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Element_specContext extends ParserRuleContext {
        public Modifier_clauseContext modifier_clause() {
            return getRuleContext(Modifier_clauseContext.class,0);
        }
        public List<Element_spec_optionsContext> element_spec_options() {
            return getRuleContexts(Element_spec_optionsContext.class);
        }
        public Element_spec_optionsContext element_spec_options(int i) {
            return getRuleContext(Element_spec_optionsContext.class,i);
        }
        public Pragma_clauseContext pragma_clause() {
            return getRuleContext(Pragma_clauseContext.class,0);
        }
        public Element_specContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_element_spec; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterElement_spec(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitElement_spec(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitElement_spec(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Element_specContext element_spec() throws RecognitionException {
        Element_specContext _localctx = new Element_specContext(_ctx, getState());
        enterRule(_localctx, 146, RULE_element_spec);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1733);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,135,_ctx) ) {
                    case 1:
                    {
                        setState(1732);
                        modifier_clause();
                    }
                    break;
                }
                setState(1736);
                _errHandler.sync(this);
                _la = _input.LA(1);
                do {
                    {
                        {
                            setState(1735);
                            element_spec_options();
                        }
                    }
                    setState(1738);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                } while ( _la==CONSTRUCTOR || _la==FINAL || _la==INSTANTIABLE || ((((_la - 221)) & ~0x3f) == 0 && ((1L << (_la - 221)) & ((1L << (MAP - 221)) | (1L << (MEMBER - 221)) | (1L << (ORDER - 221)))) != 0) || _la==STATIC );
                setState(1742);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,137,_ctx) ) {
                    case 1:
                    {
                        setState(1740);
                        match(COMMA);
                        setState(1741);
                        pragma_clause();
                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Element_spec_optionsContext extends ParserRuleContext {
        public Subprogram_specContext subprogram_spec() {
            return getRuleContext(Subprogram_specContext.class,0);
        }
        public Constructor_specContext constructor_spec() {
            return getRuleContext(Constructor_specContext.class,0);
        }
        public Map_order_function_specContext map_order_function_spec() {
            return getRuleContext(Map_order_function_specContext.class,0);
        }
        public Element_spec_optionsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_element_spec_options; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterElement_spec_options(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitElement_spec_options(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitElement_spec_options(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Element_spec_optionsContext element_spec_options() throws RecognitionException {
        Element_spec_optionsContext _localctx = new Element_spec_optionsContext(_ctx, getState());
        enterRule(_localctx, 148, RULE_element_spec_options);
        try {
            setState(1747);
            switch (_input.LA(1)) {
                case MEMBER:
                case STATIC:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(1744);
                    subprogram_spec();
                }
                break;
                case CONSTRUCTOR:
                case FINAL:
                case INSTANTIABLE:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(1745);
                    constructor_spec();
                }
                break;
                case MAP:
                case ORDER:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(1746);
                    map_order_function_spec();
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Subprogram_specContext extends ParserRuleContext {
        public TerminalNode MEMBER() { return getToken(PlSqlParser.MEMBER, 0); }
        public TerminalNode STATIC() { return getToken(PlSqlParser.STATIC, 0); }
        public Type_procedure_specContext type_procedure_spec() {
            return getRuleContext(Type_procedure_specContext.class,0);
        }
        public Type_function_specContext type_function_spec() {
            return getRuleContext(Type_function_specContext.class,0);
        }
        public Subprogram_specContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_subprogram_spec; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSubprogram_spec(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSubprogram_spec(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSubprogram_spec(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Subprogram_specContext subprogram_spec() throws RecognitionException {
        Subprogram_specContext _localctx = new Subprogram_specContext(_ctx, getState());
        enterRule(_localctx, 150, RULE_subprogram_spec);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1749);
                _la = _input.LA(1);
                if ( !(_la==MEMBER || _la==STATIC) ) {
                    _errHandler.recoverInline(this);
                } else {
                    consume();
                }
                setState(1752);
                switch (_input.LA(1)) {
                    case PROCEDURE:
                    {
                        setState(1750);
                        type_procedure_spec();
                    }
                    break;
                    case FUNCTION:
                    {
                        setState(1751);
                        type_function_spec();
                    }
                    break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Type_procedure_specContext extends ParserRuleContext {
        public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
        public Procedure_nameContext procedure_name() {
            return getRuleContext(Procedure_nameContext.class,0);
        }
        public List<Type_elements_parameterContext> type_elements_parameter() {
            return getRuleContexts(Type_elements_parameterContext.class);
        }
        public Type_elements_parameterContext type_elements_parameter(int i) {
            return getRuleContext(Type_elements_parameterContext.class,i);
        }
        public Is_or_asContext is_or_as() {
            return getRuleContext(Is_or_asContext.class,0);
        }
        public Call_specContext call_spec() {
            return getRuleContext(Call_specContext.class,0);
        }
        public Type_procedure_specContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_type_procedure_spec; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterType_procedure_spec(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitType_procedure_spec(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitType_procedure_spec(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Type_procedure_specContext type_procedure_spec() throws RecognitionException {
        Type_procedure_specContext _localctx = new Type_procedure_specContext(_ctx, getState());
        enterRule(_localctx, 152, RULE_type_procedure_spec);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1754);
                match(PROCEDURE);
                setState(1755);
                procedure_name();
                setState(1756);
                match(LEFT_PAREN);
                setState(1757);
                type_elements_parameter();
                setState(1762);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==COMMA) {
                    {
                        {
                            setState(1758);
                            match(COMMA);
                            setState(1759);
                            type_elements_parameter();
                        }
                    }
                    setState(1764);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(1765);
                match(RIGHT_PAREN);
                setState(1769);
                _la = _input.LA(1);
                if (_la==AS || _la==IS) {
                    {
                        setState(1766);
                        is_or_as();
                        setState(1767);
                        call_spec();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Type_function_specContext extends ParserRuleContext {
        public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
        public Function_nameContext function_name() {
            return getRuleContext(Function_nameContext.class,0);
        }
        public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
        public Type_specContext type_spec() {
            return getRuleContext(Type_specContext.class,0);
        }
        public TerminalNode SELF() { return getToken(PlSqlParser.SELF, 0); }
        public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
        public TerminalNode RESULT() { return getToken(PlSqlParser.RESULT, 0); }
        public List<Type_elements_parameterContext> type_elements_parameter() {
            return getRuleContexts(Type_elements_parameterContext.class);
        }
        public Type_elements_parameterContext type_elements_parameter(int i) {
            return getRuleContext(Type_elements_parameterContext.class,i);
        }
        public Is_or_asContext is_or_as() {
            return getRuleContext(Is_or_asContext.class,0);
        }
        public Call_specContext call_spec() {
            return getRuleContext(Call_specContext.class,0);
        }
        public TerminalNode EXTERNAL() { return getToken(PlSqlParser.EXTERNAL, 0); }
        public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class,0);
        }
        public TerminalNode VARIABLE() { return getToken(PlSqlParser.VARIABLE, 0); }
        public Type_function_specContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_type_function_spec; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterType_function_spec(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitType_function_spec(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitType_function_spec(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Type_function_specContext type_function_spec() throws RecognitionException {
        Type_function_specContext _localctx = new Type_function_specContext(_ctx, getState());
        enterRule(_localctx, 154, RULE_type_function_spec);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1771);
                match(FUNCTION);
                setState(1772);
                function_name();
                setState(1784);
                _la = _input.LA(1);
                if (_la==LEFT_PAREN) {
                    {
                        setState(1773);
                        match(LEFT_PAREN);
                        setState(1774);
                        type_elements_parameter();
                        setState(1779);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la==COMMA) {
                            {
                                {
                                    setState(1775);
                                    match(COMMA);
                                    setState(1776);
                                    type_elements_parameter();
                                }
                            }
                            setState(1781);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                        setState(1782);
                        match(RIGHT_PAREN);
                    }
                }

                setState(1786);
                match(RETURN);
                setState(1791);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,144,_ctx) ) {
                    case 1:
                    {
                        setState(1787);
                        type_spec();
                    }
                    break;
                    case 2:
                    {
                        setState(1788);
                        match(SELF);
                        setState(1789);
                        match(AS);
                        setState(1790);
                        match(RESULT);
                    }
                    break;
                }
                setState(1802);
                switch (_input.LA(1)) {
                    case AS:
                    case IS:
                    {
                        setState(1793);
                        is_or_as();
                        setState(1794);
                        call_spec();
                    }
                    break;
                    case EXTERNAL:
                    {
                        setState(1796);
                        match(EXTERNAL);
                        setState(1798);
                        _la = _input.LA(1);
                        if (_la==VARIABLE) {
                            {
                                setState(1797);
                                match(VARIABLE);
                            }
                        }

                        setState(1800);
                        match(NAME);
                        setState(1801);
                        expression();
                    }
                    break;
                    case CASCADE:
                    case CONSTRUCTOR:
                    case FINAL:
                    case INSTANTIABLE:
                    case INVALIDATE:
                    case MAP:
                    case MEMBER:
                    case ORDER:
                    case STATIC:
                    case RIGHT_PAREN:
                    case COMMA:
                    case SEMICOLON:
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Constructor_specContext extends ParserRuleContext {
        public TerminalNode CONSTRUCTOR() { return getToken(PlSqlParser.CONSTRUCTOR, 0); }
        public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
        public List<Type_specContext> type_spec() {
            return getRuleContexts(Type_specContext.class);
        }
        public Type_specContext type_spec(int i) {
            return getRuleContext(Type_specContext.class,i);
        }
        public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
        public List<TerminalNode> SELF() { return getTokens(PlSqlParser.SELF); }
        public TerminalNode SELF(int i) {
            return getToken(PlSqlParser.SELF, i);
        }
        public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
        public TerminalNode RESULT() { return getToken(PlSqlParser.RESULT, 0); }
        public TerminalNode FINAL() { return getToken(PlSqlParser.FINAL, 0); }
        public TerminalNode INSTANTIABLE() { return getToken(PlSqlParser.INSTANTIABLE, 0); }
        public List<Type_elements_parameterContext> type_elements_parameter() {
            return getRuleContexts(Type_elements_parameterContext.class);
        }
        public Type_elements_parameterContext type_elements_parameter(int i) {
            return getRuleContext(Type_elements_parameterContext.class,i);
        }
        public Is_or_asContext is_or_as() {
            return getRuleContext(Is_or_asContext.class,0);
        }
        public Call_specContext call_spec() {
            return getRuleContext(Call_specContext.class,0);
        }
        public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
        public TerminalNode OUT() { return getToken(PlSqlParser.OUT, 0); }
        public Constructor_specContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_constructor_spec; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterConstructor_spec(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitConstructor_spec(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitConstructor_spec(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Constructor_specContext constructor_spec() throws RecognitionException {
        Constructor_specContext _localctx = new Constructor_specContext(_ctx, getState());
        enterRule(_localctx, 156, RULE_constructor_spec);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1805);
                _la = _input.LA(1);
                if (_la==FINAL) {
                    {
                        setState(1804);
                        match(FINAL);
                    }
                }

                setState(1808);
                _la = _input.LA(1);
                if (_la==INSTANTIABLE) {
                    {
                        setState(1807);
                        match(INSTANTIABLE);
                    }
                }

                setState(1810);
                match(CONSTRUCTOR);
                setState(1811);
                match(FUNCTION);
                setState(1812);
                type_spec();
                setState(1830);
                _la = _input.LA(1);
                if (_la==LEFT_PAREN) {
                    {
                        setState(1813);
                        match(LEFT_PAREN);
                        {
                            setState(1814);
                            match(SELF);
                            setState(1815);
                            match(IN);
                            setState(1816);
                            match(OUT);
                            setState(1817);
                            type_spec();
                            setState(1818);
                            match(COMMA);
                        }
                        setState(1820);
                        type_elements_parameter();
                        setState(1825);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la==COMMA) {
                            {
                                {
                                    setState(1821);
                                    match(COMMA);
                                    setState(1822);
                                    type_elements_parameter();
                                }
                            }
                            setState(1827);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                        setState(1828);
                        match(RIGHT_PAREN);
                    }
                }

                setState(1832);
                match(RETURN);
                setState(1833);
                match(SELF);
                setState(1834);
                match(AS);
                setState(1835);
                match(RESULT);
                setState(1839);
                _la = _input.LA(1);
                if (_la==AS || _la==IS) {
                    {
                        setState(1836);
                        is_or_as();
                        setState(1837);
                        call_spec();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Map_order_function_specContext extends ParserRuleContext {
        public TerminalNode MEMBER() { return getToken(PlSqlParser.MEMBER, 0); }
        public Type_function_specContext type_function_spec() {
            return getRuleContext(Type_function_specContext.class,0);
        }
        public TerminalNode MAP() { return getToken(PlSqlParser.MAP, 0); }
        public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
        public Map_order_function_specContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_map_order_function_spec; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMap_order_function_spec(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMap_order_function_spec(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMap_order_function_spec(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Map_order_function_specContext map_order_function_spec() throws RecognitionException {
        Map_order_function_specContext _localctx = new Map_order_function_specContext(_ctx, getState());
        enterRule(_localctx, 158, RULE_map_order_function_spec);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1841);
                _la = _input.LA(1);
                if ( !(_la==MAP || _la==ORDER) ) {
                    _errHandler.recoverInline(this);
                } else {
                    consume();
                }
                setState(1842);
                match(MEMBER);
                setState(1843);
                type_function_spec();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Pragma_clauseContext extends ParserRuleContext {
        public TerminalNode PRAGMA() { return getToken(PlSqlParser.PRAGMA, 0); }
        public TerminalNode RESTRICT_REFERENCES() { return getToken(PlSqlParser.RESTRICT_REFERENCES, 0); }
        public List<Pragma_elementsContext> pragma_elements() {
            return getRuleContexts(Pragma_elementsContext.class);
        }
        public Pragma_elementsContext pragma_elements(int i) {
            return getRuleContext(Pragma_elementsContext.class,i);
        }
        public Pragma_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_pragma_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPragma_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPragma_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPragma_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Pragma_clauseContext pragma_clause() throws RecognitionException {
        Pragma_clauseContext _localctx = new Pragma_clauseContext(_ctx, getState());
        enterRule(_localctx, 160, RULE_pragma_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1845);
                match(PRAGMA);
                setState(1846);
                match(RESTRICT_REFERENCES);
                setState(1847);
                match(LEFT_PAREN);
                setState(1848);
                pragma_elements();
                setState(1853);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==COMMA) {
                    {
                        {
                            setState(1849);
                            match(COMMA);
                            setState(1850);
                            pragma_elements();
                        }
                    }
                    setState(1855);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(1856);
                match(RIGHT_PAREN);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Pragma_elementsContext extends ParserRuleContext {
        public IdContext id() {
            return getRuleContext(IdContext.class,0);
        }
        public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
        public Pragma_elementsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_pragma_elements; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPragma_elements(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPragma_elements(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPragma_elements(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Pragma_elementsContext pragma_elements() throws RecognitionException {
        Pragma_elementsContext _localctx = new Pragma_elementsContext(_ctx, getState());
        enterRule(_localctx, 162, RULE_pragma_elements);
        try {
            setState(1860);
            _errHandler.sync(this);
            switch ( getInterpreter().adaptivePredict(_input,153,_ctx) ) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(1858);
                    id();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(1859);
                    match(DEFAULT);
                }
                break;
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Type_elements_parameterContext extends ParserRuleContext {
        public Parameter_nameContext parameter_name() {
            return getRuleContext(Parameter_nameContext.class,0);
        }
        public Type_specContext type_spec() {
            return getRuleContext(Type_specContext.class,0);
        }
        public Type_elements_parameterContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_type_elements_parameter; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterType_elements_parameter(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitType_elements_parameter(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitType_elements_parameter(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Type_elements_parameterContext type_elements_parameter() throws RecognitionException {
        Type_elements_parameterContext _localctx = new Type_elements_parameterContext(_ctx, getState());
        enterRule(_localctx, 164, RULE_type_elements_parameter);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1862);
                parameter_name();
                setState(1863);
                type_spec();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Drop_sequenceContext extends ParserRuleContext {
        public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
        public TerminalNode SEQUENCE() { return getToken(PlSqlParser.SEQUENCE, 0); }
        public Sequence_nameContext sequence_name() {
            return getRuleContext(Sequence_nameContext.class,0);
        }
        public Drop_sequenceContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_drop_sequence; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDrop_sequence(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDrop_sequence(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDrop_sequence(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Drop_sequenceContext drop_sequence() throws RecognitionException {
        Drop_sequenceContext _localctx = new Drop_sequenceContext(_ctx, getState());
        enterRule(_localctx, 166, RULE_drop_sequence);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1865);
                match(DROP);
                setState(1866);
                match(SEQUENCE);
                setState(1867);
                sequence_name();
                setState(1868);
                match(SEMICOLON);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Alter_sequenceContext extends ParserRuleContext {
        public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
        public TerminalNode SEQUENCE() { return getToken(PlSqlParser.SEQUENCE, 0); }
        public Sequence_nameContext sequence_name() {
            return getRuleContext(Sequence_nameContext.class,0);
        }
        public List<Sequence_specContext> sequence_spec() {
            return getRuleContexts(Sequence_specContext.class);
        }
        public Sequence_specContext sequence_spec(int i) {
            return getRuleContext(Sequence_specContext.class,i);
        }
        public Alter_sequenceContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_alter_sequence; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAlter_sequence(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAlter_sequence(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAlter_sequence(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Alter_sequenceContext alter_sequence() throws RecognitionException {
        Alter_sequenceContext _localctx = new Alter_sequenceContext(_ctx, getState());
        enterRule(_localctx, 168, RULE_alter_sequence);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1870);
                match(ALTER);
                setState(1871);
                match(SEQUENCE);
                setState(1872);
                sequence_name();
                setState(1874);
                _errHandler.sync(this);
                _la = _input.LA(1);
                do {
                    {
                        {
                            setState(1873);
                            sequence_spec();
                        }
                    }
                    setState(1876);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                } while ( _la==CACHE || _la==CYCLE || ((((_la - 175)) & ~0x3f) == 0 && ((1L << (_la - 175)) & ((1L << (INCREMENT - 175)) | (1L << (MAXVALUE - 175)) | (1L << (MINVALUE - 175)))) != 0) || ((((_la - 250)) & ~0x3f) == 0 && ((1L << (_la - 250)) & ((1L << (NOCACHE - 250)) | (1L << (NOCYCLE - 250)) | (1L << (NOMAXVALUE - 250)) | (1L << (NOMINVALUE - 250)) | (1L << (NOORDER - 250)) | (1L << (ORDER - 250)))) != 0) );
                setState(1878);
                match(SEMICOLON);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Create_sequenceContext extends ParserRuleContext {
        public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
        public TerminalNode SEQUENCE() { return getToken(PlSqlParser.SEQUENCE, 0); }
        public Sequence_nameContext sequence_name() {
            return getRuleContext(Sequence_nameContext.class,0);
        }
        public List<Sequence_start_clauseContext> sequence_start_clause() {
            return getRuleContexts(Sequence_start_clauseContext.class);
        }
        public Sequence_start_clauseContext sequence_start_clause(int i) {
            return getRuleContext(Sequence_start_clauseContext.class,i);
        }
        public List<Sequence_specContext> sequence_spec() {
            return getRuleContexts(Sequence_specContext.class);
        }
        public Sequence_specContext sequence_spec(int i) {
            return getRuleContext(Sequence_specContext.class,i);
        }
        public Create_sequenceContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_create_sequence; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCreate_sequence(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCreate_sequence(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCreate_sequence(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Create_sequenceContext create_sequence() throws RecognitionException {
        Create_sequenceContext _localctx = new Create_sequenceContext(_ctx, getState());
        enterRule(_localctx, 170, RULE_create_sequence);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1880);
                match(CREATE);
                setState(1881);
                match(SEQUENCE);
                setState(1882);
                sequence_name();
                setState(1887);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==CACHE || _la==CYCLE || ((((_la - 175)) & ~0x3f) == 0 && ((1L << (_la - 175)) & ((1L << (INCREMENT - 175)) | (1L << (MAXVALUE - 175)) | (1L << (MINVALUE - 175)))) != 0) || ((((_la - 250)) & ~0x3f) == 0 && ((1L << (_la - 250)) & ((1L << (NOCACHE - 250)) | (1L << (NOCYCLE - 250)) | (1L << (NOMAXVALUE - 250)) | (1L << (NOMINVALUE - 250)) | (1L << (NOORDER - 250)) | (1L << (ORDER - 250)))) != 0) || _la==START) {
                    {
                        setState(1885);
                        switch (_input.LA(1)) {
                            case START:
                            {
                                setState(1883);
                                sequence_start_clause();
                            }
                            break;
                            case CACHE:
                            case CYCLE:
                            case INCREMENT:
                            case MAXVALUE:
                            case MINVALUE:
                            case NOCACHE:
                            case NOCYCLE:
                            case NOMAXVALUE:
                            case NOMINVALUE:
                            case NOORDER:
                            case ORDER:
                            {
                                setState(1884);
                                sequence_spec();
                            }
                            break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    setState(1889);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(1890);
                match(SEMICOLON);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Sequence_specContext extends ParserRuleContext {
        public TerminalNode INCREMENT() { return getToken(PlSqlParser.INCREMENT, 0); }
        public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
        public TerminalNode UNSIGNED_INTEGER() { return getToken(PlSqlParser.UNSIGNED_INTEGER, 0); }
        public TerminalNode MAXVALUE() { return getToken(PlSqlParser.MAXVALUE, 0); }
        public TerminalNode NOMAXVALUE() { return getToken(PlSqlParser.NOMAXVALUE, 0); }
        public TerminalNode MINVALUE() { return getToken(PlSqlParser.MINVALUE, 0); }
        public TerminalNode NOMINVALUE() { return getToken(PlSqlParser.NOMINVALUE, 0); }
        public TerminalNode CYCLE() { return getToken(PlSqlParser.CYCLE, 0); }
        public TerminalNode NOCYCLE() { return getToken(PlSqlParser.NOCYCLE, 0); }
        public TerminalNode CACHE() { return getToken(PlSqlParser.CACHE, 0); }
        public TerminalNode NOCACHE() { return getToken(PlSqlParser.NOCACHE, 0); }
        public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
        public TerminalNode NOORDER() { return getToken(PlSqlParser.NOORDER, 0); }
        public Sequence_specContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_sequence_spec; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSequence_spec(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSequence_spec(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSequence_spec(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Sequence_specContext sequence_spec() throws RecognitionException {
        Sequence_specContext _localctx = new Sequence_specContext(_ctx, getState());
        enterRule(_localctx, 172, RULE_sequence_spec);
        try {
            setState(1908);
            switch (_input.LA(1)) {
                case INCREMENT:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(1892);
                    match(INCREMENT);
                    setState(1893);
                    match(BY);
                    setState(1894);
                    match(UNSIGNED_INTEGER);
                }
                break;
                case MAXVALUE:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(1895);
                    match(MAXVALUE);
                    setState(1896);
                    match(UNSIGNED_INTEGER);
                }
                break;
                case NOMAXVALUE:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(1897);
                    match(NOMAXVALUE);
                }
                break;
                case MINVALUE:
                    enterOuterAlt(_localctx, 4);
                {
                    setState(1898);
                    match(MINVALUE);
                    setState(1899);
                    match(UNSIGNED_INTEGER);
                }
                break;
                case NOMINVALUE:
                    enterOuterAlt(_localctx, 5);
                {
                    setState(1900);
                    match(NOMINVALUE);
                }
                break;
                case CYCLE:
                    enterOuterAlt(_localctx, 6);
                {
                    setState(1901);
                    match(CYCLE);
                }
                break;
                case NOCYCLE:
                    enterOuterAlt(_localctx, 7);
                {
                    setState(1902);
                    match(NOCYCLE);
                }
                break;
                case CACHE:
                    enterOuterAlt(_localctx, 8);
                {
                    setState(1903);
                    match(CACHE);
                    setState(1904);
                    match(UNSIGNED_INTEGER);
                }
                break;
                case NOCACHE:
                    enterOuterAlt(_localctx, 9);
                {
                    setState(1905);
                    match(NOCACHE);
                }
                break;
                case ORDER:
                    enterOuterAlt(_localctx, 10);
                {
                    setState(1906);
                    match(ORDER);
                }
                break;
                case NOORDER:
                    enterOuterAlt(_localctx, 11);
                {
                    setState(1907);
                    match(NOORDER);
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Sequence_start_clauseContext extends ParserRuleContext {
        public TerminalNode START() { return getToken(PlSqlParser.START, 0); }
        public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
        public TerminalNode UNSIGNED_INTEGER() { return getToken(PlSqlParser.UNSIGNED_INTEGER, 0); }
        public Sequence_start_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_sequence_start_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSequence_start_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSequence_start_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSequence_start_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Sequence_start_clauseContext sequence_start_clause() throws RecognitionException {
        Sequence_start_clauseContext _localctx = new Sequence_start_clauseContext(_ctx, getState());
        enterRule(_localctx, 174, RULE_sequence_start_clause);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1910);
                match(START);
                setState(1911);
                match(WITH);
                setState(1912);
                match(UNSIGNED_INTEGER);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Invoker_rights_clauseContext extends ParserRuleContext {
        public TerminalNode AUTHID() { return getToken(PlSqlParser.AUTHID, 0); }
        public TerminalNode CURRENT_USER() { return getToken(PlSqlParser.CURRENT_USER, 0); }
        public TerminalNode DEFINER() { return getToken(PlSqlParser.DEFINER, 0); }
        public Invoker_rights_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_invoker_rights_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterInvoker_rights_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitInvoker_rights_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitInvoker_rights_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Invoker_rights_clauseContext invoker_rights_clause() throws RecognitionException {
        Invoker_rights_clauseContext _localctx = new Invoker_rights_clauseContext(_ctx, getState());
        enterRule(_localctx, 176, RULE_invoker_rights_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1914);
                match(AUTHID);
                setState(1915);
                _la = _input.LA(1);
                if ( !(_la==CURRENT_USER || _la==DEFINER) ) {
                    _errHandler.recoverInline(this);
                } else {
                    consume();
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Compiler_parameters_clauseContext extends ParserRuleContext {
        public IdContext id() {
            return getRuleContext(IdContext.class,0);
        }
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class,0);
        }
        public Compiler_parameters_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_compiler_parameters_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCompiler_parameters_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCompiler_parameters_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCompiler_parameters_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Compiler_parameters_clauseContext compiler_parameters_clause() throws RecognitionException {
        Compiler_parameters_clauseContext _localctx = new Compiler_parameters_clauseContext(_ctx, getState());
        enterRule(_localctx, 178, RULE_compiler_parameters_clause);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1917);
                id();
                setState(1918);
                match(EQUALS_OP);
                setState(1919);
                expression();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Call_specContext extends ParserRuleContext {
        public TerminalNode LANGUAGE() { return getToken(PlSqlParser.LANGUAGE, 0); }
        public Java_specContext java_spec() {
            return getRuleContext(Java_specContext.class,0);
        }
        public C_specContext c_spec() {
            return getRuleContext(C_specContext.class,0);
        }
        public Call_specContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_call_spec; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCall_spec(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCall_spec(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCall_spec(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Call_specContext call_spec() throws RecognitionException {
        Call_specContext _localctx = new Call_specContext(_ctx, getState());
        enterRule(_localctx, 180, RULE_call_spec);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1921);
                match(LANGUAGE);
                setState(1924);
                switch (_input.LA(1)) {
                    case JAVA:
                    {
                        setState(1922);
                        java_spec();
                    }
                    break;
                    case C_LETTER:
                    {
                        setState(1923);
                        c_spec();
                    }
                    break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Java_specContext extends ParserRuleContext {
        public TerminalNode JAVA() { return getToken(PlSqlParser.JAVA, 0); }
        public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
        public TerminalNode CHAR_STRING() { return getToken(PlSqlParser.CHAR_STRING, 0); }
        public Java_specContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_java_spec; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterJava_spec(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitJava_spec(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitJava_spec(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Java_specContext java_spec() throws RecognitionException {
        Java_specContext _localctx = new Java_specContext(_ctx, getState());
        enterRule(_localctx, 182, RULE_java_spec);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1926);
                match(JAVA);
                setState(1927);
                match(NAME);
                setState(1928);
                match(CHAR_STRING);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class C_specContext extends ParserRuleContext {
        public TerminalNode C_LETTER() { return getToken(PlSqlParser.C_LETTER, 0); }
        public TerminalNode LIBRARY() { return getToken(PlSqlParser.LIBRARY, 0); }
        public IdContext id() {
            return getRuleContext(IdContext.class,0);
        }
        public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
        public TerminalNode CHAR_STRING() { return getToken(PlSqlParser.CHAR_STRING, 0); }
        public C_agent_in_clauseContext c_agent_in_clause() {
            return getRuleContext(C_agent_in_clauseContext.class,0);
        }
        public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
        public TerminalNode CONTEXT() { return getToken(PlSqlParser.CONTEXT, 0); }
        public C_parameters_clauseContext c_parameters_clause() {
            return getRuleContext(C_parameters_clauseContext.class,0);
        }
        public C_specContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_c_spec; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterC_spec(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitC_spec(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitC_spec(this);
            else return visitor.visitChildren(this);
        }
    }

    public final C_specContext c_spec() throws RecognitionException {
        C_specContext _localctx = new C_specContext(_ctx, getState());
        enterRule(_localctx, 184, RULE_c_spec);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1930);
                match(C_LETTER);
                setState(1933);
                _la = _input.LA(1);
                if (_la==NAME) {
                    {
                        setState(1931);
                        match(NAME);
                        setState(1932);
                        match(CHAR_STRING);
                    }
                }

                setState(1935);
                match(LIBRARY);
                setState(1936);
                id();
                setState(1938);
                _la = _input.LA(1);
                if (_la==AGENT) {
                    {
                        setState(1937);
                        c_agent_in_clause();
                    }
                }

                setState(1942);
                _la = _input.LA(1);
                if (_la==WITH) {
                    {
                        setState(1940);
                        match(WITH);
                        setState(1941);
                        match(CONTEXT);
                    }
                }

                setState(1945);
                _la = _input.LA(1);
                if (_la==PARAMETERS) {
                    {
                        setState(1944);
                        c_parameters_clause();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class C_agent_in_clauseContext extends ParserRuleContext {
        public TerminalNode AGENT() { return getToken(PlSqlParser.AGENT, 0); }
        public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }
        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class,i);
        }
        public C_agent_in_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_c_agent_in_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterC_agent_in_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitC_agent_in_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitC_agent_in_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final C_agent_in_clauseContext c_agent_in_clause() throws RecognitionException {
        C_agent_in_clauseContext _localctx = new C_agent_in_clauseContext(_ctx, getState());
        enterRule(_localctx, 186, RULE_c_agent_in_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1947);
                match(AGENT);
                setState(1948);
                match(IN);
                setState(1949);
                match(LEFT_PAREN);
                setState(1950);
                expression();
                setState(1955);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==COMMA) {
                    {
                        {
                            setState(1951);
                            match(COMMA);
                            setState(1952);
                            expression();
                        }
                    }
                    setState(1957);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(1958);
                match(RIGHT_PAREN);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class C_parameters_clauseContext extends ParserRuleContext {
        public TerminalNode PARAMETERS() { return getToken(PlSqlParser.PARAMETERS, 0); }
        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }
        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class,i);
        }
        public C_parameters_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_c_parameters_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterC_parameters_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitC_parameters_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitC_parameters_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final C_parameters_clauseContext c_parameters_clause() throws RecognitionException {
        C_parameters_clauseContext _localctx = new C_parameters_clauseContext(_ctx, getState());
        enterRule(_localctx, 188, RULE_c_parameters_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1960);
                match(PARAMETERS);
                setState(1961);
                match(LEFT_PAREN);
                setState(1973);
                switch (_input.LA(1)) {
                    case A_LETTER:
                    case ADD:
                    case AFTER:
                    case AGENT:
                    case AGGREGATE:
                    case ALL:
                    case ALTER:
                    case ANALYZE:
                    case AND:
                    case ANY:
                    case ARRAY:
                    case AS:
                    case ASC:
                    case ASSOCIATE:
                    case AT:
                    case ATTRIBUTE:
                    case AUDIT:
                    case AUTHID:
                    case AUTO:
                    case AUTOMATIC:
                    case AUTONOMOUS_TRANSACTION:
                    case BATCH:
                    case BEFORE:
                    case BEGIN:
                    case BETWEEN:
                    case BFILE:
                    case BINARY_DOUBLE:
                    case BINARY_FLOAT:
                    case BINARY_INTEGER:
                    case BLOB:
                    case BLOCK:
                    case BODY:
                    case BOOLEAN:
                    case BOTH:
                    case BREADTH:
                    case BULK:
                    case BY:
                    case BYTE:
                    case C_LETTER:
                    case CACHE:
                    case CALL:
                    case CANONICAL:
                    case CASCADE:
                    case CASE:
                    case CAST:
                    case CHAR:
                    case CHAR_CS:
                    case CHARACTER:
                    case CHECK:
                    case CHR:
                    case CLOB:
                    case CLOSE:
                    case CLUSTER:
                    case COLLECT:
                    case COLUMNS:
                    case COMMENT:
                    case COMMIT:
                    case COMMITTED:
                    case COMPATIBILITY:
                    case COMPILE:
                    case COMPOUND:
                    case CONNECT:
                    case CONNECT_BY_ROOT:
                    case CONSTANT:
                    case CONSTRAINT:
                    case CONSTRAINTS:
                    case CONSTRUCTOR:
                    case CONTENT:
                    case CONTEXT:
                    case CONTINUE:
                    case CONVERT:
                    case CORRUPT_XID:
                    case CORRUPT_XID_ALL:
                    case COST:
                    case COUNT:
                    case CREATE:
                    case CROSS:
                    case CUBE:
                    case CURRENT:
                    case CURRENT_USER:
                    case CURSOR:
                    case CUSTOMDATUM:
                    case CYCLE:
                    case DATA:
                    case DATABASE:
                    case DATE:
                    case DAY:
                    case DB_ROLE_CHANGE:
                    case DBTIMEZONE:
                    case DDL:
                    case DEBUG:
                    case DEC:
                    case DECIMAL:
                    case DECLARE:
                    case DECOMPOSE:
                    case DECREMENT:
                    case DEFAULT:
                    case DEFAULTS:
                    case DEFERRED:
                    case DEFINER:
                    case DELETE:
                    case DEPTH:
                    case DESC:
                    case DETERMINISTIC:
                    case DIMENSION:
                    case DISABLE:
                    case DISASSOCIATE:
                    case DISTINCT:
                    case DOCUMENT:
                    case DOUBLE:
                    case DROP:
                    case DSINTERVAL_UNCONSTRAINED:
                    case EACH:
                    case ELEMENT:
                    case ELSE:
                    case ELSIF:
                    case EMPTY:
                    case ENABLE:
                    case ENCODING:
                    case END:
                    case ENTITYESCAPING:
                    case ERRORS:
                    case ESCAPE:
                    case EXCEPT:
                    case EVALNAME:
                    case EXCEPTION:
                    case EXCEPTION_INIT:
                    case EXCEPTIONS:
                    case EXCLUDE:
                    case EXCLUSIVE:
                    case EXECUTE:
                    case EXISTS:
                    case EXIT:
                    case EXPLAIN:
                    case EXTERNAL:
                    case EXTRACT:
                    case FAILURE:
                    case FALSE:
                    case FETCH:
                    case FINAL:
                    case FIRST:
                    case FIRST_VALUE:
                    case FLOAT:
                    case FOLLOWING:
                    case FOLLOWS:
                    case FOR:
                    case FORALL:
                    case FORCE:
                    case FROM:
                    case FULL:
                    case FUNCTION:
                    case GOTO:
                    case GRANT:
                    case GROUP:
                    case GROUPING:
                    case HASH:
                    case HAVING:
                    case HIDE:
                    case HOUR:
                    case IF:
                    case IGNORE:
                    case IMMEDIATE:
                    case IN:
                    case INCLUDE:
                    case INCLUDING:
                    case INCREMENT:
                    case INDENT:
                    case INDEX:
                    case INDEXED:
                    case INDICATOR:
                    case INDICES:
                    case INFINITE:
                    case INLINE:
                    case INNER:
                    case INOUT:
                    case INSERT:
                    case INSTANTIABLE:
                    case INSTEAD:
                    case INT:
                    case INTEGER:
                    case INTERSECT:
                    case INTERVAL:
                    case INTO:
                    case INVALIDATE:
                    case IS:
                    case ISOLATION:
                    case ITERATE:
                    case JAVA:
                    case JOIN:
                    case KEEP:
                    case LANGUAGE:
                    case LAST:
                    case LAST_VALUE:
                    case LEADING:
                    case LEFT:
                    case LEVEL:
                    case LIBRARY:
                    case LIKE:
                    case LIKE2:
                    case LIKE4:
                    case LIKEC:
                    case LIMIT:
                    case LOCAL:
                    case LOCK:
                    case LOCKED:
                    case LOG:
                    case LOGOFF:
                    case LOGON:
                    case LONG:
                    case LOOP:
                    case MAIN:
                    case MAP:
                    case MATCHED:
                    case MAXVALUE:
                    case MEASURES:
                    case MEMBER:
                    case MERGE:
                    case MINUS:
                    case MINUTE:
                    case MINVALUE:
                    case MLSLABEL:
                    case MOD:
                    case MODE:
                    case MODEL:
                    case MODIFY:
                    case MONTH:
                    case MULTISET:
                    case NAME:
                    case NAN:
                    case NATURAL:
                    case NATURALN:
                    case NAV:
                    case NCHAR:
                    case NCHAR_CS:
                    case NCLOB:
                    case NESTED:
                    case NEW:
                    case NO:
                    case NOAUDIT:
                    case NOCACHE:
                    case NOCOPY:
                    case NOCYCLE:
                    case NOENTITYESCAPING:
                    case NOMAXVALUE:
                    case NOMINVALUE:
                    case NONE:
                    case NOORDER:
                    case NOSCHEMACHECK:
                    case NOT:
                    case NOWAIT:
                    case NULL:
                    case NULLS:
                    case NUMBER:
                    case NUMERIC:
                    case NVARCHAR2:
                    case OBJECT:
                    case OF:
                    case OFF:
                    case OID:
                    case OLD:
                    case ON:
                    case ONLY:
                    case OPEN:
                    case OPTION:
                    case OR:
                    case ORADATA:
                    case ORDER:
                    case ORDINALITY:
                    case OSERROR:
                    case OUT:
                    case OUTER:
                    case OVER:
                    case OVERRIDING:
                    case PACKAGE:
                    case PARALLEL_ENABLE:
                    case PARAMETERS:
                    case PARENT:
                    case PARTITION:
                    case PASSING:
                    case PATH:
                    case PIPELINED:
                    case PIVOT:
                    case PLAN:
                    case PLS_INTEGER:
                    case POSITIVE:
                    case POSITIVEN:
                    case PRAGMA:
                    case PRECEDING:
                    case PRECISION:
                    case PRESENT:
                    case PRIOR:
                    case PROCEDURE:
                    case RAISE:
                    case RANGE:
                    case RAW:
                    case READ:
                    case REAL:
                    case RECORD:
                    case REF:
                    case REFERENCE:
                    case REFERENCING:
                    case REJECT:
                    case RELIES_ON:
                    case RENAME:
                    case REPLACE:
                    case RESPECT:
                    case RESTRICT_REFERENCES:
                    case RESULT:
                    case RESULT_CACHE:
                    case RETURN:
                    case RETURNING:
                    case REUSE:
                    case REVERSE:
                    case REVOKE:
                    case RIGHT:
                    case ROLLBACK:
                    case ROLLUP:
                    case ROW:
                    case ROWID:
                    case ROWS:
                    case RULES:
                    case SAMPLE:
                    case SAVE:
                    case SAVEPOINT:
                    case SCHEMA:
                    case SCHEMACHECK:
                    case SCN:
                    case SEARCH:
                    case SECOND:
                    case SEED:
                    case SEGMENT:
                    case SELECT:
                    case SELF:
                    case SEQUENCE:
                    case SEQUENTIAL:
                    case SERIALIZABLE:
                    case SERIALLY_REUSABLE:
                    case SERVERERROR:
                    case SESSIONTIMEZONE:
                    case SET:
                    case SETS:
                    case SETTINGS:
                    case SHARE:
                    case SHOW:
                    case SHUTDOWN:
                    case SIBLINGS:
                    case SIGNTYPE:
                    case SIMPLE_INTEGER:
                    case SINGLE:
                    case SIZE:
                    case SKIP_:
                    case SMALLINT:
                    case SNAPSHOT:
                    case SOME:
                    case SPECIFICATION:
                    case SQLDATA:
                    case SQLERROR:
                    case SQL_PERCENT_ROWCOUNT:
                    case STANDALONE:
                    case START:
                    case STARTUP:
                    case STATEMENT:
                    case STATEMENT_ID:
                    case STATIC:
                    case STATISTICS:
                    case STRING:
                    case SUBMULTISET:
                    case SUBPARTITION:
                    case SUBSTITUTABLE:
                    case SUBTYPE:
                    case SUCCESS:
                    case SUSPEND:
                    case TABLE:
                    case THE:
                    case THEN:
                    case TIME:
                    case TIMESTAMP:
                    case TIMESTAMP_LTZ_UNCONSTRAINED:
                    case TIMESTAMP_TZ_UNCONSTRAINED:
                    case TIMESTAMP_UNCONSTRAINED:
                    case TIMEZONE_ABBR:
                    case TIMEZONE_HOUR:
                    case TIMEZONE_MINUTE:
                    case TIMEZONE_REGION:
                    case TO:
                    case TO_CHAR:
                    case TO_NUMBER:
                    case TRAILING:
                    case TRANSACTION:
                    case TRANSLATE:
                    case TREAT:
                    case TRIGGER:
                    case TRIM:
                    case TRUE:
                    case TRUNCATE:
                    case TYPE:
                    case UNBOUNDED:
                    case UNDER:
                    case UNION:
                    case UNIQUE:
                    case UNLIMITED:
                    case UNPIVOT:
                    case UNTIL:
                    case UPDATE:
                    case UPDATED:
                    case UPSERT:
                    case UROWID:
                    case USE:
                    case USING:
                    case VALIDATE:
                    case VALUE:
                    case VALUES:
                    case VARCHAR:
                    case VARCHAR2:
                    case VARIABLE:
                    case VARRAY:
                    case VARYING:
                    case VERSION:
                    case VERSIONS:
                    case WAIT:
                    case WARNING:
                    case WELLFORMED:
                    case WHEN:
                    case WHENEVER:
                    case WHERE:
                    case WHILE:
                    case WITH:
                    case WITHIN:
                    case WORK:
                    case WRITE:
                    case XML:
                    case XMLAGG:
                    case XMLATTRIBUTES:
                    case XMLCAST:
                    case XMLCOLATTVAL:
                    case XMLELEMENT:
                    case XMLEXISTS:
                    case XMLFOREST:
                    case XMLNAMESPACES:
                    case XMLPARSE:
                    case XMLPI:
                    case XMLQUERY:
                    case XMLROOT:
                    case XMLSERIALIZE:
                    case XMLTABLE:
                    case YEAR:
                    case YES:
                    case YMINTERVAL_UNCONSTRAINED:
                    case ZONE:
                    case PREDICTION:
                    case PREDICTION_BOUNDS:
                    case PREDICTION_COST:
                    case PREDICTION_DETAILS:
                    case PREDICTION_PROBABILITY:
                    case PREDICTION_SET:
                    case CUME_DIST:
                    case DENSE_RANK:
                    case LISTAGG:
                    case PERCENT_RANK:
                    case PERCENTILE_CONT:
                    case PERCENTILE_DISC:
                    case RANK:
                    case AVG:
                    case CORR:
                    case LAG:
                    case LEAD:
                    case MAX:
                    case MEDIAN:
                    case MIN:
                    case NTILE:
                    case RATIO_TO_REPORT:
                    case ROW_NUMBER:
                    case SUM:
                    case VARIANCE:
                    case REGR_:
                    case STDDEV:
                    case VAR_:
                    case COVAR_:
                    case NATIONAL_CHAR_STRING_LIT:
                    case UNSIGNED_INTEGER:
                    case APPROXIMATE_NUM_LIT:
                    case CHAR_STRING:
                    case DELIMITED_ID:
                    case LEFT_PAREN:
                    case PLUS_SIGN:
                    case MINUS_SIGN:
                    case BINDVAR:
                    case COLON:
                    case INTRODUCER:
                    case REGULAR_ID:
                    {
                        setState(1962);
                        expression();
                        setState(1967);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la==COMMA) {
                            {
                                {
                                    setState(1963);
                                    match(COMMA);
                                    setState(1964);
                                    expression();
                                }
                            }
                            setState(1969);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                    }
                    break;
                    case PERIOD:
                    {
                        setState(1970);
                        match(PERIOD);
                        setState(1971);
                        match(PERIOD);
                        setState(1972);
                        match(PERIOD);
                    }
                    break;
                    default:
                        throw new NoViableAltException(this);
                }
                setState(1975);
                match(RIGHT_PAREN);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class ParameterContext extends ParserRuleContext {
        public Parameter_nameContext parameter_name() {
            return getRuleContext(Parameter_nameContext.class,0);
        }
        public Type_specContext type_spec() {
            return getRuleContext(Type_specContext.class,0);
        }
        public Default_value_partContext default_value_part() {
            return getRuleContext(Default_value_partContext.class,0);
        }
        public List<TerminalNode> IN() { return getTokens(PlSqlParser.IN); }
        public TerminalNode IN(int i) {
            return getToken(PlSqlParser.IN, i);
        }
        public List<TerminalNode> OUT() { return getTokens(PlSqlParser.OUT); }
        public TerminalNode OUT(int i) {
            return getToken(PlSqlParser.OUT, i);
        }
        public List<TerminalNode> INOUT() { return getTokens(PlSqlParser.INOUT); }
        public TerminalNode INOUT(int i) {
            return getToken(PlSqlParser.INOUT, i);
        }
        public List<TerminalNode> NOCOPY() { return getTokens(PlSqlParser.NOCOPY); }
        public TerminalNode NOCOPY(int i) {
            return getToken(PlSqlParser.NOCOPY, i);
        }
        public ParameterContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_parameter; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterParameter(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitParameter(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitParameter(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ParameterContext parameter() throws RecognitionException {
        ParameterContext _localctx = new ParameterContext(_ctx, getState());
        enterRule(_localctx, 190, RULE_parameter);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(1977);
                parameter_name();
                setState(1981);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input,166,_ctx);
                while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
                    if ( _alt==1 ) {
                        {
                            {
                                setState(1978);
                                _la = _input.LA(1);
                                if ( !(_la==IN || _la==INOUT || _la==NOCOPY || _la==OUT) ) {
                                    _errHandler.recoverInline(this);
                                } else {
                                    consume();
                                }
                            }
                        }
                    }
                    setState(1983);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input,166,_ctx);
                }
                setState(1985);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,167,_ctx) ) {
                    case 1:
                    {
                        setState(1984);
                        type_spec();
                    }
                    break;
                }
                setState(1988);
                _la = _input.LA(1);
                if (_la==DEFAULT || _la==ASSIGN_OP) {
                    {
                        setState(1987);
                        default_value_part();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Default_value_partContext extends ParserRuleContext {
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class,0);
        }
        public TerminalNode ASSIGN_OP() { return getToken(PlSqlParser.ASSIGN_OP, 0); }
        public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
        public Default_value_partContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_default_value_part; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDefault_value_part(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDefault_value_part(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDefault_value_part(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Default_value_partContext default_value_part() throws RecognitionException {
        Default_value_partContext _localctx = new Default_value_partContext(_ctx, getState());
        enterRule(_localctx, 192, RULE_default_value_part);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1990);
                _la = _input.LA(1);
                if ( !(_la==DEFAULT || _la==ASSIGN_OP) ) {
                    _errHandler.recoverInline(this);
                } else {
                    consume();
                }
                setState(1991);
                expression();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Declare_specContext extends ParserRuleContext {
        public Variable_declarationContext variable_declaration() {
            return getRuleContext(Variable_declarationContext.class,0);
        }
        public Subtype_declarationContext subtype_declaration() {
            return getRuleContext(Subtype_declarationContext.class,0);
        }
        public Cursor_declarationContext cursor_declaration() {
            return getRuleContext(Cursor_declarationContext.class,0);
        }
        public Exception_declarationContext exception_declaration() {
            return getRuleContext(Exception_declarationContext.class,0);
        }
        public Pragma_declarationContext pragma_declaration() {
            return getRuleContext(Pragma_declarationContext.class,0);
        }
        public Record_declarationContext record_declaration() {
            return getRuleContext(Record_declarationContext.class,0);
        }
        public Table_declarationContext table_declaration() {
            return getRuleContext(Table_declarationContext.class,0);
        }
        public Create_procedure_bodyContext create_procedure_body() {
            return getRuleContext(Create_procedure_bodyContext.class,0);
        }
        public Create_function_bodyContext create_function_body() {
            return getRuleContext(Create_function_bodyContext.class,0);
        }
        public Preprocessor_statementContext preprocessor_statement() {
            return getRuleContext(Preprocessor_statementContext.class,0);
        }
        public Declare_specContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_declare_spec; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDeclare_spec(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDeclare_spec(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDeclare_spec(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Declare_specContext declare_spec() throws RecognitionException {
        Declare_specContext _localctx = new Declare_specContext(_ctx, getState());
        enterRule(_localctx, 194, RULE_declare_spec);
        try {
            setState(2003);
            _errHandler.sync(this);
            switch ( getInterpreter().adaptivePredict(_input,169,_ctx) ) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(1993);
                    variable_declaration();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(1994);
                    subtype_declaration();
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(1995);
                    cursor_declaration();
                }
                break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                {
                    setState(1996);
                    exception_declaration();
                }
                break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                {
                    setState(1997);
                    pragma_declaration();
                }
                break;
                case 6:
                    enterOuterAlt(_localctx, 6);
                {
                    setState(1998);
                    record_declaration();
                }
                break;
                case 7:
                    enterOuterAlt(_localctx, 7);
                {
                    setState(1999);
                    table_declaration();
                }
                break;
                case 8:
                    enterOuterAlt(_localctx, 8);
                {
                    setState(2000);
                    create_procedure_body();
                }
                break;
                case 9:
                    enterOuterAlt(_localctx, 9);
                {
                    setState(2001);
                    create_function_body();
                }
                break;
                case 10:
                    enterOuterAlt(_localctx, 10);
                {
                    setState(2002);
                    preprocessor_statement();
                }
                break;
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Variable_declarationContext extends ParserRuleContext {
        public Variable_nameContext variable_name() {
            return getRuleContext(Variable_nameContext.class,0);
        }
        public Type_specContext type_spec() {
            return getRuleContext(Type_specContext.class,0);
        }
        public TerminalNode CONSTANT() { return getToken(PlSqlParser.CONSTANT, 0); }
        public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
        public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
        public Default_value_partContext default_value_part() {
            return getRuleContext(Default_value_partContext.class,0);
        }
        public Variable_declarationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_variable_declaration; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterVariable_declaration(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitVariable_declaration(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitVariable_declaration(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Variable_declarationContext variable_declaration() throws RecognitionException {
        Variable_declarationContext _localctx = new Variable_declarationContext(_ctx, getState());
        enterRule(_localctx, 196, RULE_variable_declaration);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2005);
                variable_name();
                setState(2007);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,170,_ctx) ) {
                    case 1:
                    {
                        setState(2006);
                        match(CONSTANT);
                    }
                    break;
                }
                setState(2009);
                type_spec();
                setState(2012);
                _la = _input.LA(1);
                if (_la==NOT) {
                    {
                        setState(2010);
                        match(NOT);
                        setState(2011);
                        match(NULL);
                    }
                }

                setState(2015);
                _la = _input.LA(1);
                if (_la==DEFAULT || _la==ASSIGN_OP) {
                    {
                        setState(2014);
                        default_value_part();
                    }
                }

                setState(2017);
                match(SEMICOLON);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Subtype_declarationContext extends ParserRuleContext {
        public TerminalNode SUBTYPE() { return getToken(PlSqlParser.SUBTYPE, 0); }
        public Type_nameContext type_name() {
            return getRuleContext(Type_nameContext.class,0);
        }
        public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
        public Type_specContext type_spec() {
            return getRuleContext(Type_specContext.class,0);
        }
        public TerminalNode RANGE() { return getToken(PlSqlParser.RANGE, 0); }
        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }
        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class,i);
        }
        public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
        public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
        public Subtype_declarationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_subtype_declaration; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSubtype_declaration(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSubtype_declaration(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSubtype_declaration(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Subtype_declarationContext subtype_declaration() throws RecognitionException {
        Subtype_declarationContext _localctx = new Subtype_declarationContext(_ctx, getState());
        enterRule(_localctx, 198, RULE_subtype_declaration);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2019);
                match(SUBTYPE);
                setState(2020);
                type_name();
                setState(2021);
                match(IS);
                setState(2022);
                type_spec();
                setState(2028);
                _la = _input.LA(1);
                if (_la==RANGE) {
                    {
                        setState(2023);
                        match(RANGE);
                        setState(2024);
                        expression();
                        setState(2025);
                        match(T__0);
                        setState(2026);
                        expression();
                    }
                }

                setState(2032);
                _la = _input.LA(1);
                if (_la==NOT) {
                    {
                        setState(2030);
                        match(NOT);
                        setState(2031);
                        match(NULL);
                    }
                }

                setState(2034);
                match(SEMICOLON);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Cursor_declarationContext extends ParserRuleContext {
        public TerminalNode CURSOR() { return getToken(PlSqlParser.CURSOR, 0); }
        public Cursor_nameContext cursor_name() {
            return getRuleContext(Cursor_nameContext.class,0);
        }
        public List<Parameter_specContext> parameter_spec() {
            return getRuleContexts(Parameter_specContext.class);
        }
        public Parameter_specContext parameter_spec(int i) {
            return getRuleContext(Parameter_specContext.class,i);
        }
        public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
        public Type_specContext type_spec() {
            return getRuleContext(Type_specContext.class,0);
        }
        public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
        public Select_statementContext select_statement() {
            return getRuleContext(Select_statementContext.class,0);
        }
        public Cursor_declarationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_cursor_declaration; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCursor_declaration(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCursor_declaration(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCursor_declaration(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Cursor_declarationContext cursor_declaration() throws RecognitionException {
        Cursor_declarationContext _localctx = new Cursor_declarationContext(_ctx, getState());
        enterRule(_localctx, 200, RULE_cursor_declaration);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2036);
                match(CURSOR);
                setState(2037);
                cursor_name();
                setState(2049);
                _la = _input.LA(1);
                if (_la==LEFT_PAREN) {
                    {
                        setState(2038);
                        match(LEFT_PAREN);
                        setState(2039);
                        parameter_spec();
                        setState(2044);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la==COMMA) {
                            {
                                {
                                    setState(2040);
                                    match(COMMA);
                                    setState(2041);
                                    parameter_spec();
                                }
                            }
                            setState(2046);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                        setState(2047);
                        match(RIGHT_PAREN);
                    }
                }

                setState(2053);
                _la = _input.LA(1);
                if (_la==RETURN) {
                    {
                        setState(2051);
                        match(RETURN);
                        setState(2052);
                        type_spec();
                    }
                }

                setState(2057);
                _la = _input.LA(1);
                if (_la==IS) {
                    {
                        setState(2055);
                        match(IS);
                        setState(2056);
                        select_statement();
                    }
                }

                setState(2059);
                match(SEMICOLON);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Parameter_specContext extends ParserRuleContext {
        public Parameter_nameContext parameter_name() {
            return getRuleContext(Parameter_nameContext.class,0);
        }
        public Type_specContext type_spec() {
            return getRuleContext(Type_specContext.class,0);
        }
        public Default_value_partContext default_value_part() {
            return getRuleContext(Default_value_partContext.class,0);
        }
        public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
        public Parameter_specContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_parameter_spec; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterParameter_spec(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitParameter_spec(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitParameter_spec(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Parameter_specContext parameter_spec() throws RecognitionException {
        Parameter_specContext _localctx = new Parameter_specContext(_ctx, getState());
        enterRule(_localctx, 202, RULE_parameter_spec);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2061);
                parameter_name();
                setState(2066);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,180,_ctx) ) {
                    case 1:
                    {
                        setState(2063);
                        _errHandler.sync(this);
                        switch ( getInterpreter().adaptivePredict(_input,179,_ctx) ) {
                            case 1:
                            {
                                setState(2062);
                                match(IN);
                            }
                            break;
                        }
                        setState(2065);
                        type_spec();
                    }
                    break;
                }
                setState(2069);
                _la = _input.LA(1);
                if (_la==DEFAULT || _la==ASSIGN_OP) {
                    {
                        setState(2068);
                        default_value_part();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Exception_declarationContext extends ParserRuleContext {
        public Exception_nameContext exception_name() {
            return getRuleContext(Exception_nameContext.class,0);
        }
        public TerminalNode EXCEPTION() { return getToken(PlSqlParser.EXCEPTION, 0); }
        public Exception_declarationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_exception_declaration; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterException_declaration(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitException_declaration(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitException_declaration(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Exception_declarationContext exception_declaration() throws RecognitionException {
        Exception_declarationContext _localctx = new Exception_declarationContext(_ctx, getState());
        enterRule(_localctx, 204, RULE_exception_declaration);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2071);
                exception_name();
                setState(2072);
                match(EXCEPTION);
                setState(2073);
                match(SEMICOLON);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Pragma_declarationContext extends ParserRuleContext {
        public IdContext id1;
        public TerminalNode PRAGMA() { return getToken(PlSqlParser.PRAGMA, 0); }
        public TerminalNode SERIALLY_REUSABLE() { return getToken(PlSqlParser.SERIALLY_REUSABLE, 0); }
        public TerminalNode AUTONOMOUS_TRANSACTION() { return getToken(PlSqlParser.AUTONOMOUS_TRANSACTION, 0); }
        public TerminalNode EXCEPTION_INIT() { return getToken(PlSqlParser.EXCEPTION_INIT, 0); }
        public Exception_nameContext exception_name() {
            return getRuleContext(Exception_nameContext.class,0);
        }
        public NumericContext numeric() {
            return getRuleContext(NumericContext.class,0);
        }
        public TerminalNode INLINE() { return getToken(PlSqlParser.INLINE, 0); }
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class,0);
        }
        public TerminalNode RESTRICT_REFERENCES() { return getToken(PlSqlParser.RESTRICT_REFERENCES, 0); }
        public List<IdContext> id() {
            return getRuleContexts(IdContext.class);
        }
        public IdContext id(int i) {
            return getRuleContext(IdContext.class,i);
        }
        public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
        public TerminalNode MINUS_SIGN() { return getToken(PlSqlParser.MINUS_SIGN, 0); }
        public Pragma_declarationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_pragma_declaration; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPragma_declaration(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPragma_declaration(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPragma_declaration(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Pragma_declarationContext pragma_declaration() throws RecognitionException {
        Pragma_declarationContext _localctx = new Pragma_declarationContext(_ctx, getState());
        enterRule(_localctx, 206, RULE_pragma_declaration);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2075);
                match(PRAGMA);
                setState(2109);
                switch (_input.LA(1)) {
                    case SERIALLY_REUSABLE:
                    {
                        setState(2076);
                        match(SERIALLY_REUSABLE);
                    }
                    break;
                    case AUTONOMOUS_TRANSACTION:
                    {
                        setState(2077);
                        match(AUTONOMOUS_TRANSACTION);
                    }
                    break;
                    case EXCEPTION_INIT:
                    {
                        setState(2078);
                        match(EXCEPTION_INIT);
                        setState(2079);
                        match(LEFT_PAREN);
                        setState(2080);
                        exception_name();
                        setState(2081);
                        match(COMMA);
                        setState(2083);
                        _la = _input.LA(1);
                        if (_la==MINUS_SIGN) {
                            {
                                setState(2082);
                                match(MINUS_SIGN);
                            }
                        }

                        setState(2085);
                        numeric();
                        setState(2086);
                        match(RIGHT_PAREN);
                    }
                    break;
                    case INLINE:
                    {
                        setState(2088);
                        match(INLINE);
                        setState(2089);
                        match(LEFT_PAREN);
                        setState(2090);
                        ((Pragma_declarationContext)_localctx).id1 = id();
                        setState(2091);
                        match(COMMA);
                        setState(2092);
                        expression();
                        setState(2093);
                        match(RIGHT_PAREN);
                    }
                    break;
                    case RESTRICT_REFERENCES:
                    {
                        setState(2095);
                        match(RESTRICT_REFERENCES);
                        setState(2096);
                        match(LEFT_PAREN);
                        setState(2099);
                        _errHandler.sync(this);
                        switch ( getInterpreter().adaptivePredict(_input,183,_ctx) ) {
                            case 1:
                            {
                                setState(2097);
                                id();
                            }
                            break;
                            case 2:
                            {
                                setState(2098);
                                match(DEFAULT);
                            }
                            break;
                        }
                        setState(2103);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        do {
                            {
                                {
                                    setState(2101);
                                    match(COMMA);
                                    setState(2102);
                                    id();
                                }
                            }
                            setState(2105);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        } while ( _la==COMMA );
                        setState(2107);
                        match(RIGHT_PAREN);
                    }
                    break;
                    default:
                        throw new NoViableAltException(this);
                }
                setState(2111);
                match(SEMICOLON);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Record_declarationContext extends ParserRuleContext {
        public Record_type_decContext record_type_dec() {
            return getRuleContext(Record_type_decContext.class,0);
        }
        public Record_var_decContext record_var_dec() {
            return getRuleContext(Record_var_decContext.class,0);
        }
        public Record_declarationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_record_declaration; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterRecord_declaration(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitRecord_declaration(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitRecord_declaration(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Record_declarationContext record_declaration() throws RecognitionException {
        Record_declarationContext _localctx = new Record_declarationContext(_ctx, getState());
        enterRule(_localctx, 208, RULE_record_declaration);
        try {
            setState(2115);
            _errHandler.sync(this);
            switch ( getInterpreter().adaptivePredict(_input,186,_ctx) ) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2113);
                    record_type_dec();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2114);
                    record_var_dec();
                }
                break;
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Record_type_decContext extends ParserRuleContext {
        public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
        public Type_nameContext type_name() {
            return getRuleContext(Type_nameContext.class,0);
        }
        public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
        public TerminalNode RECORD() { return getToken(PlSqlParser.RECORD, 0); }
        public List<Field_specContext> field_spec() {
            return getRuleContexts(Field_specContext.class);
        }
        public Field_specContext field_spec(int i) {
            return getRuleContext(Field_specContext.class,i);
        }
        public TerminalNode REF() { return getToken(PlSqlParser.REF, 0); }
        public TerminalNode CURSOR() { return getToken(PlSqlParser.CURSOR, 0); }
        public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
        public Type_specContext type_spec() {
            return getRuleContext(Type_specContext.class,0);
        }
        public Record_type_decContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_record_type_dec; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterRecord_type_dec(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitRecord_type_dec(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitRecord_type_dec(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Record_type_decContext record_type_dec() throws RecognitionException {
        Record_type_decContext _localctx = new Record_type_decContext(_ctx, getState());
        enterRule(_localctx, 210, RULE_record_type_dec);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2117);
                match(TYPE);
                setState(2118);
                type_name();
                setState(2119);
                match(IS);
                setState(2138);
                switch (_input.LA(1)) {
                    case RECORD:
                    {
                        setState(2120);
                        match(RECORD);
                        setState(2121);
                        match(LEFT_PAREN);
                        setState(2122);
                        field_spec();
                        setState(2127);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la==COMMA) {
                            {
                                {
                                    setState(2123);
                                    match(COMMA);
                                    setState(2124);
                                    field_spec();
                                }
                            }
                            setState(2129);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                        setState(2130);
                        match(RIGHT_PAREN);
                    }
                    break;
                    case REF:
                    {
                        setState(2132);
                        match(REF);
                        setState(2133);
                        match(CURSOR);
                        setState(2136);
                        _la = _input.LA(1);
                        if (_la==RETURN) {
                            {
                                setState(2134);
                                match(RETURN);
                                setState(2135);
                                type_spec();
                            }
                        }

                    }
                    break;
                    default:
                        throw new NoViableAltException(this);
                }
                setState(2140);
                match(SEMICOLON);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Field_specContext extends ParserRuleContext {
        public Column_nameContext column_name() {
            return getRuleContext(Column_nameContext.class,0);
        }
        public Type_specContext type_spec() {
            return getRuleContext(Type_specContext.class,0);
        }
        public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
        public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
        public Default_value_partContext default_value_part() {
            return getRuleContext(Default_value_partContext.class,0);
        }
        public Field_specContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_field_spec; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterField_spec(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitField_spec(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitField_spec(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Field_specContext field_spec() throws RecognitionException {
        Field_specContext _localctx = new Field_specContext(_ctx, getState());
        enterRule(_localctx, 212, RULE_field_spec);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2142);
                column_name();
                setState(2144);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,190,_ctx) ) {
                    case 1:
                    {
                        setState(2143);
                        type_spec();
                    }
                    break;
                }
                setState(2148);
                _la = _input.LA(1);
                if (_la==NOT) {
                    {
                        setState(2146);
                        match(NOT);
                        setState(2147);
                        match(NULL);
                    }
                }

                setState(2151);
                _la = _input.LA(1);
                if (_la==DEFAULT || _la==ASSIGN_OP) {
                    {
                        setState(2150);
                        default_value_part();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Record_var_decContext extends ParserRuleContext {
        public Record_nameContext record_name() {
            return getRuleContext(Record_nameContext.class,0);
        }
        public Type_nameContext type_name() {
            return getRuleContext(Type_nameContext.class,0);
        }
        public TerminalNode PERCENT_ROWTYPE() { return getToken(PlSqlParser.PERCENT_ROWTYPE, 0); }
        public TerminalNode PERCENT_TYPE() { return getToken(PlSqlParser.PERCENT_TYPE, 0); }
        public TerminalNode AT_SIGN() { return getToken(PlSqlParser.AT_SIGN, 0); }
        public Link_nameContext link_name() {
            return getRuleContext(Link_nameContext.class,0);
        }
        public Default_value_partContext default_value_part() {
            return getRuleContext(Default_value_partContext.class,0);
        }
        public Record_var_decContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_record_var_dec; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterRecord_var_dec(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitRecord_var_dec(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitRecord_var_dec(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Record_var_decContext record_var_dec() throws RecognitionException {
        Record_var_decContext _localctx = new Record_var_decContext(_ctx, getState());
        enterRule(_localctx, 214, RULE_record_var_dec);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2153);
                record_name();
                setState(2154);
                type_name();
                setState(2157);
                _la = _input.LA(1);
                if (_la==AT_SIGN) {
                    {
                        setState(2155);
                        match(AT_SIGN);
                        setState(2156);
                        link_name();
                    }
                }

                setState(2164);
                switch (_input.LA(1)) {
                    case PERCENT_ROWTYPE:
                    {
                        setState(2159);
                        match(PERCENT_ROWTYPE);
                    }
                    break;
                    case PERCENT_TYPE:
                    {
                        setState(2160);
                        match(PERCENT_TYPE);
                        setState(2162);
                        _la = _input.LA(1);
                        if (_la==DEFAULT || _la==ASSIGN_OP) {
                            {
                                setState(2161);
                                default_value_part();
                            }
                        }

                    }
                    break;
                    default:
                        throw new NoViableAltException(this);
                }
                setState(2166);
                match(SEMICOLON);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Table_declarationContext extends ParserRuleContext {
        public Table_type_decContext table_type_dec() {
            return getRuleContext(Table_type_decContext.class,0);
        }
        public Table_var_decContext table_var_dec() {
            return getRuleContext(Table_var_decContext.class,0);
        }
        public Table_declarationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_table_declaration; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTable_declaration(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTable_declaration(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTable_declaration(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Table_declarationContext table_declaration() throws RecognitionException {
        Table_declarationContext _localctx = new Table_declarationContext(_ctx, getState());
        enterRule(_localctx, 216, RULE_table_declaration);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2170);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,196,_ctx) ) {
                    case 1:
                    {
                        setState(2168);
                        table_type_dec();
                    }
                    break;
                    case 2:
                    {
                        setState(2169);
                        table_var_dec();
                    }
                    break;
                }
                setState(2172);
                match(SEMICOLON);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Table_type_decContext extends ParserRuleContext {
        public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
        public Type_nameContext type_name() {
            return getRuleContext(Type_nameContext.class,0);
        }
        public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
        public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
        public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
        public Type_specContext type_spec() {
            return getRuleContext(Type_specContext.class,0);
        }
        public Varray_type_defContext varray_type_def() {
            return getRuleContext(Varray_type_defContext.class,0);
        }
        public Table_indexed_by_partContext table_indexed_by_part() {
            return getRuleContext(Table_indexed_by_partContext.class,0);
        }
        public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
        public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
        public Table_type_decContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_table_type_dec; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTable_type_dec(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTable_type_dec(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTable_type_dec(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Table_type_decContext table_type_dec() throws RecognitionException {
        Table_type_decContext _localctx = new Table_type_decContext(_ctx, getState());
        enterRule(_localctx, 218, RULE_table_type_dec);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2174);
                match(TYPE);
                setState(2175);
                type_name();
                setState(2176);
                match(IS);
                setState(2188);
                switch (_input.LA(1)) {
                    case TABLE:
                    {
                        setState(2177);
                        match(TABLE);
                        setState(2178);
                        match(OF);
                        setState(2179);
                        type_spec();
                        setState(2181);
                        _la = _input.LA(1);
                        if (_la==INDEX || _la==INDEXED) {
                            {
                                setState(2180);
                                table_indexed_by_part();
                            }
                        }

                        setState(2185);
                        _la = _input.LA(1);
                        if (_la==NOT) {
                            {
                                setState(2183);
                                match(NOT);
                                setState(2184);
                                match(NULL);
                            }
                        }

                    }
                    break;
                    case VARRAY:
                    case VARYING:
                    {
                        setState(2187);
                        varray_type_def();
                    }
                    break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Table_indexed_by_partContext extends ParserRuleContext {
        public Token idx1;
        public Token idx2;
        public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
        public Type_specContext type_spec() {
            return getRuleContext(Type_specContext.class,0);
        }
        public TerminalNode INDEXED() { return getToken(PlSqlParser.INDEXED, 0); }
        public TerminalNode INDEX() { return getToken(PlSqlParser.INDEX, 0); }
        public Table_indexed_by_partContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_table_indexed_by_part; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTable_indexed_by_part(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTable_indexed_by_part(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTable_indexed_by_part(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Table_indexed_by_partContext table_indexed_by_part() throws RecognitionException {
        Table_indexed_by_partContext _localctx = new Table_indexed_by_partContext(_ctx, getState());
        enterRule(_localctx, 220, RULE_table_indexed_by_part);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2192);
                switch (_input.LA(1)) {
                    case INDEXED:
                    {
                        setState(2190);
                        ((Table_indexed_by_partContext)_localctx).idx1 = match(INDEXED);
                    }
                    break;
                    case INDEX:
                    {
                        setState(2191);
                        ((Table_indexed_by_partContext)_localctx).idx2 = match(INDEX);
                    }
                    break;
                    default:
                        throw new NoViableAltException(this);
                }
                setState(2194);
                match(BY);
                setState(2195);
                type_spec();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Varray_type_defContext extends ParserRuleContext {
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class,0);
        }
        public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
        public Type_specContext type_spec() {
            return getRuleContext(Type_specContext.class,0);
        }
        public TerminalNode VARRAY() { return getToken(PlSqlParser.VARRAY, 0); }
        public TerminalNode VARYING() { return getToken(PlSqlParser.VARYING, 0); }
        public TerminalNode ARRAY() { return getToken(PlSqlParser.ARRAY, 0); }
        public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
        public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
        public Varray_type_defContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_varray_type_def; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterVarray_type_def(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitVarray_type_def(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitVarray_type_def(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Varray_type_defContext varray_type_def() throws RecognitionException {
        Varray_type_defContext _localctx = new Varray_type_defContext(_ctx, getState());
        enterRule(_localctx, 222, RULE_varray_type_def);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2200);
                switch (_input.LA(1)) {
                    case VARRAY:
                    {
                        setState(2197);
                        match(VARRAY);
                    }
                    break;
                    case VARYING:
                    {
                        setState(2198);
                        match(VARYING);
                        setState(2199);
                        match(ARRAY);
                    }
                    break;
                    default:
                        throw new NoViableAltException(this);
                }
                setState(2202);
                match(LEFT_PAREN);
                setState(2203);
                expression();
                setState(2204);
                match(RIGHT_PAREN);
                setState(2205);
                match(OF);
                setState(2206);
                type_spec();
                setState(2209);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,202,_ctx) ) {
                    case 1:
                    {
                        setState(2207);
                        match(NOT);
                        setState(2208);
                        match(NULL);
                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Table_var_decContext extends ParserRuleContext {
        public Table_var_nameContext table_var_name() {
            return getRuleContext(Table_var_nameContext.class,0);
        }
        public Type_specContext type_spec() {
            return getRuleContext(Type_specContext.class,0);
        }
        public Table_var_decContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_table_var_dec; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTable_var_dec(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTable_var_dec(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTable_var_dec(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Table_var_decContext table_var_dec() throws RecognitionException {
        Table_var_decContext _localctx = new Table_var_decContext(_ctx, getState());
        enterRule(_localctx, 224, RULE_table_var_dec);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2211);
                table_var_name();
                setState(2212);
                type_spec();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Seq_of_statementsContext extends ParserRuleContext {
        public List<StatementContext> statement() {
            return getRuleContexts(StatementContext.class);
        }
        public StatementContext statement(int i) {
            return getRuleContext(StatementContext.class,i);
        }
        public List<Label_declarationContext> label_declaration() {
            return getRuleContexts(Label_declarationContext.class);
        }
        public Label_declarationContext label_declaration(int i) {
            return getRuleContext(Label_declarationContext.class,i);
        }
        public List<Preprocessor_statementContext> preprocessor_statement() {
            return getRuleContexts(Preprocessor_statementContext.class);
        }
        public Preprocessor_statementContext preprocessor_statement(int i) {
            return getRuleContext(Preprocessor_statementContext.class,i);
        }
        public Seq_of_statementsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_seq_of_statements; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSeq_of_statements(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSeq_of_statements(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSeq_of_statements(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Seq_of_statementsContext seq_of_statements() throws RecognitionException {
        Seq_of_statementsContext _localctx = new Seq_of_statementsContext(_ctx, getState());
        enterRule(_localctx, 226, RULE_seq_of_statements);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(2219);
                _errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                        {
                            setState(2219);
                            switch (_input.LA(1)) {
                                case A_LETTER:
                                case ADD:
                                case AFTER:
                                case AGENT:
                                case AGGREGATE:
                                case ALL:
                                case ALTER:
                                case ANALYZE:
                                case AND:
                                case ANY:
                                case ARRAY:
                                case AS:
                                case ASC:
                                case ASSOCIATE:
                                case AT:
                                case ATTRIBUTE:
                                case AUDIT:
                                case AUTHID:
                                case AUTO:
                                case AUTOMATIC:
                                case AUTONOMOUS_TRANSACTION:
                                case BATCH:
                                case BEFORE:
                                case BEGIN:
                                case BETWEEN:
                                case BFILE:
                                case BINARY_DOUBLE:
                                case BINARY_FLOAT:
                                case BINARY_INTEGER:
                                case BLOB:
                                case BLOCK:
                                case BODY:
                                case BOOLEAN:
                                case BOTH:
                                case BREADTH:
                                case BULK:
                                case BY:
                                case BYTE:
                                case C_LETTER:
                                case CACHE:
                                case CALL:
                                case CANONICAL:
                                case CASCADE:
                                case CASE:
                                case CAST:
                                case CHAR:
                                case CHAR_CS:
                                case CHARACTER:
                                case CHECK:
                                case CHR:
                                case CLOB:
                                case CLOSE:
                                case CLUSTER:
                                case COLLECT:
                                case COLUMNS:
                                case COMMENT:
                                case COMMIT:
                                case COMMITTED:
                                case COMPATIBILITY:
                                case COMPILE:
                                case COMPOUND:
                                case CONNECT:
                                case CONNECT_BY_ROOT:
                                case CONSTANT:
                                case CONSTRAINT:
                                case CONSTRAINTS:
                                case CONSTRUCTOR:
                                case CONTENT:
                                case CONTEXT:
                                case CONTINUE:
                                case CONVERT:
                                case CORRUPT_XID:
                                case CORRUPT_XID_ALL:
                                case COST:
                                case COUNT:
                                case CREATE:
                                case CROSS:
                                case CUBE:
                                case CURRENT:
                                case CURRENT_USER:
                                case CURSOR:
                                case CUSTOMDATUM:
                                case CYCLE:
                                case DATA:
                                case DATABASE:
                                case DATE:
                                case DAY:
                                case DB_ROLE_CHANGE:
                                case DBTIMEZONE:
                                case DDL:
                                case DEBUG:
                                case DEC:
                                case DECIMAL:
                                case DECLARE:
                                case DECOMPOSE:
                                case DECREMENT:
                                case DEFAULT:
                                case DEFAULTS:
                                case DEFERRED:
                                case DEFINER:
                                case DELETE:
                                case DEPTH:
                                case DESC:
                                case DETERMINISTIC:
                                case DIMENSION:
                                case DISABLE:
                                case DISASSOCIATE:
                                case DISTINCT:
                                case DOCUMENT:
                                case DOUBLE:
                                case DROP:
                                case DSINTERVAL_UNCONSTRAINED:
                                case EACH:
                                case ELEMENT:
                                case ELSE:
                                case ELSIF:
                                case EMPTY:
                                case ENABLE:
                                case ENCODING:
                                case END:
                                case ENTITYESCAPING:
                                case ERRORS:
                                case ESCAPE:
                                case EXCEPT:
                                case EVALNAME:
                                case EXCEPTION:
                                case EXCEPTION_INIT:
                                case EXCEPTIONS:
                                case EXCLUDE:
                                case EXCLUSIVE:
                                case EXECUTE:
                                case EXISTS:
                                case EXIT:
                                case EXPLAIN:
                                case EXTERNAL:
                                case EXTRACT:
                                case FAILURE:
                                case FALSE:
                                case FETCH:
                                case FINAL:
                                case FIRST:
                                case FIRST_VALUE:
                                case FLOAT:
                                case FOLLOWING:
                                case FOLLOWS:
                                case FOR:
                                case FORALL:
                                case FORCE:
                                case FROM:
                                case FULL:
                                case FUNCTION:
                                case GOTO:
                                case GRANT:
                                case GROUP:
                                case GROUPING:
                                case HASH:
                                case HAVING:
                                case HIDE:
                                case HOUR:
                                case IF:
                                case IGNORE:
                                case IMMEDIATE:
                                case IN:
                                case INCLUDE:
                                case INCLUDING:
                                case INCREMENT:
                                case INDENT:
                                case INDEX:
                                case INDEXED:
                                case INDICATOR:
                                case INDICES:
                                case INFINITE:
                                case INLINE:
                                case INNER:
                                case INOUT:
                                case INSERT:
                                case INSTANTIABLE:
                                case INSTEAD:
                                case INT:
                                case INTEGER:
                                case INTERSECT:
                                case INTERVAL:
                                case INTO:
                                case INVALIDATE:
                                case IS:
                                case ISOLATION:
                                case ITERATE:
                                case JAVA:
                                case JOIN:
                                case KEEP:
                                case LANGUAGE:
                                case LAST:
                                case LAST_VALUE:
                                case LEADING:
                                case LEFT:
                                case LEVEL:
                                case LIBRARY:
                                case LIKE:
                                case LIKE2:
                                case LIKE4:
                                case LIKEC:
                                case LIMIT:
                                case LOCAL:
                                case LOCK:
                                case LOCKED:
                                case LOG:
                                case LOGOFF:
                                case LOGON:
                                case LONG:
                                case LOOP:
                                case MAIN:
                                case MAP:
                                case MATCHED:
                                case MAXVALUE:
                                case MEASURES:
                                case MEMBER:
                                case MERGE:
                                case MINUS:
                                case MINUTE:
                                case MINVALUE:
                                case MLSLABEL:
                                case MODE:
                                case MODEL:
                                case MODIFY:
                                case MONTH:
                                case MULTISET:
                                case NAME:
                                case NAN:
                                case NATURAL:
                                case NATURALN:
                                case NAV:
                                case NCHAR:
                                case NCHAR_CS:
                                case NCLOB:
                                case NESTED:
                                case NEW:
                                case NO:
                                case NOAUDIT:
                                case NOCACHE:
                                case NOCOPY:
                                case NOCYCLE:
                                case NOENTITYESCAPING:
                                case NOMAXVALUE:
                                case NOMINVALUE:
                                case NONE:
                                case NOORDER:
                                case NOSCHEMACHECK:
                                case NOT:
                                case NOWAIT:
                                case NULL:
                                case NULLS:
                                case NUMBER:
                                case NUMERIC:
                                case NVARCHAR2:
                                case OBJECT:
                                case OF:
                                case OFF:
                                case OID:
                                case OLD:
                                case ON:
                                case ONLY:
                                case OPEN:
                                case OPTION:
                                case OR:
                                case ORADATA:
                                case ORDER:
                                case ORDINALITY:
                                case OSERROR:
                                case OUT:
                                case OUTER:
                                case OVER:
                                case OVERRIDING:
                                case PACKAGE:
                                case PARALLEL_ENABLE:
                                case PARAMETERS:
                                case PARENT:
                                case PARTITION:
                                case PASSING:
                                case PATH:
                                case PIPELINED:
                                case PIPE:
                                case PIVOT:
                                case PLAN:
                                case PLS_INTEGER:
                                case POSITIVE:
                                case POSITIVEN:
                                case PRAGMA:
                                case PRECEDING:
                                case PRECISION:
                                case PRESENT:
                                case PRIOR:
                                case PROCEDURE:
                                case RAISE:
                                case RANGE:
                                case RAW:
                                case READ:
                                case REAL:
                                case RECORD:
                                case REF:
                                case REFERENCE:
                                case REFERENCING:
                                case REJECT:
                                case RELIES_ON:
                                case RENAME:
                                case REPLACE:
                                case RESPECT:
                                case RESTRICT_REFERENCES:
                                case RESULT:
                                case RESULT_CACHE:
                                case RETURN:
                                case RETURNING:
                                case REUSE:
                                case REVERSE:
                                case REVOKE:
                                case RIGHT:
                                case ROLLBACK:
                                case ROLLUP:
                                case ROW:
                                case ROWID:
                                case ROWS:
                                case RULES:
                                case SAMPLE:
                                case SAVE:
                                case SAVEPOINT:
                                case SCHEMA:
                                case SCHEMACHECK:
                                case SCN:
                                case SEARCH:
                                case SECOND:
                                case SEED:
                                case SEGMENT:
                                case SELECT:
                                case SELF:
                                case SEQUENCE:
                                case SEQUENTIAL:
                                case SERIALIZABLE:
                                case SERIALLY_REUSABLE:
                                case SERVERERROR:
                                case SESSIONTIMEZONE:
                                case SET:
                                case SETS:
                                case SETTINGS:
                                case SHARE:
                                case SHOW:
                                case SHUTDOWN:
                                case SIBLINGS:
                                case SIGNTYPE:
                                case SIMPLE_INTEGER:
                                case SINGLE:
                                case SIZE:
                                case SKIP_:
                                case SMALLINT:
                                case SNAPSHOT:
                                case SOME:
                                case SPECIFICATION:
                                case SQLDATA:
                                case SQLERROR:
                                case SQL_PERCENT_ROWCOUNT:
                                case STANDALONE:
                                case START:
                                case STARTUP:
                                case STATEMENT:
                                case STATEMENT_ID:
                                case STATIC:
                                case STATISTICS:
                                case STRING:
                                case SUBMULTISET:
                                case SUBPARTITION:
                                case SUBSTITUTABLE:
                                case SUBTYPE:
                                case SUCCESS:
                                case SUSPEND:
                                case TABLE:
                                case THE:
                                case THEN:
                                case TIME:
                                case TIMESTAMP:
                                case TIMESTAMP_LTZ_UNCONSTRAINED:
                                case TIMESTAMP_TZ_UNCONSTRAINED:
                                case TIMESTAMP_UNCONSTRAINED:
                                case TIMEZONE_ABBR:
                                case TIMEZONE_HOUR:
                                case TIMEZONE_MINUTE:
                                case TIMEZONE_REGION:
                                case TO:
                                case TO_CHAR:
                                case TRAILING:
                                case TRANSACTION:
                                case TRANSLATE:
                                case TREAT:
                                case TRIGGER:
                                case TRIM:
                                case TRUE:
                                case TRUNCATE:
                                case TYPE:
                                case UNBOUNDED:
                                case UNDER:
                                case UNION:
                                case UNIQUE:
                                case UNLIMITED:
                                case UNPIVOT:
                                case UNTIL:
                                case UPDATE:
                                case UPDATED:
                                case UPSERT:
                                case UROWID:
                                case USE:
                                case USING:
                                case VALIDATE:
                                case VALUE:
                                case VALUES:
                                case VARCHAR:
                                case VARCHAR2:
                                case VARIABLE:
                                case VARRAY:
                                case VARYING:
                                case VERSION:
                                case VERSIONS:
                                case WAIT:
                                case WARNING:
                                case WELLFORMED:
                                case WHEN:
                                case WHENEVER:
                                case WHERE:
                                case WHILE:
                                case WITH:
                                case WITHIN:
                                case WORK:
                                case WRITE:
                                case XML:
                                case XMLAGG:
                                case XMLATTRIBUTES:
                                case XMLCAST:
                                case XMLCOLATTVAL:
                                case XMLELEMENT:
                                case XMLEXISTS:
                                case XMLFOREST:
                                case XMLNAMESPACES:
                                case XMLPARSE:
                                case XMLPI:
                                case XMLQUERY:
                                case XMLROOT:
                                case XMLSERIALIZE:
                                case XMLTABLE:
                                case YEAR:
                                case YES:
                                case YMINTERVAL_UNCONSTRAINED:
                                case ZONE:
                                case PREDICTION:
                                case PREDICTION_BOUNDS:
                                case PREDICTION_COST:
                                case PREDICTION_DETAILS:
                                case PREDICTION_PROBABILITY:
                                case PREDICTION_SET:
                                case CUME_DIST:
                                case DENSE_RANK:
                                case LISTAGG:
                                case PERCENT_RANK:
                                case PERCENTILE_CONT:
                                case PERCENTILE_DISC:
                                case RANK:
                                case AVG:
                                case CORR:
                                case LAG:
                                case LEAD:
                                case MAX:
                                case MEDIAN:
                                case MIN:
                                case NTILE:
                                case RATIO_TO_REPORT:
                                case ROW_NUMBER:
                                case SUM:
                                case VARIANCE:
                                case REGR_:
                                case STDDEV:
                                case VAR_:
                                case COVAR_:
                                case DELIMITED_ID:
                                case LEFT_PAREN:
                                case BINDVAR:
                                case COLON:
                                case INTRODUCER:
                                case REGULAR_ID:
                                {
                                    setState(2214);
                                    statement();
                                    setState(2215);
                                    match(SEMICOLON);
                                }
                                break;
                                case LESS_THAN_OP:
                                {
                                    setState(2217);
                                    label_declaration();
                                }
                                break;
                                case PP_IF:
                                {
                                    setState(2218);
                                    preprocessor_statement();
                                }
                                break;
                                default:
                                    throw new NoViableAltException(this);
                            }
                        }
                        break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    setState(2221);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input,204,_ctx);
                } while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Label_declarationContext extends ParserRuleContext {
        public Token ltp1;
        public Label_nameContext label_name() {
            return getRuleContext(Label_nameContext.class,0);
        }
        public Label_declarationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_label_declaration; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterLabel_declaration(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitLabel_declaration(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitLabel_declaration(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Label_declarationContext label_declaration() throws RecognitionException {
        Label_declarationContext _localctx = new Label_declarationContext(_ctx, getState());
        enterRule(_localctx, 228, RULE_label_declaration);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2223);
                ((Label_declarationContext)_localctx).ltp1 = match(LESS_THAN_OP);
                setState(2224);
                match(LESS_THAN_OP);
                setState(2225);
                label_name();
                setState(2226);
                match(GREATER_THAN_OP);
                setState(2227);
                match(GREATER_THAN_OP);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class StatementContext extends ParserRuleContext {
        public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
        public Swallow_to_semiContext swallow_to_semi() {
            return getRuleContext(Swallow_to_semiContext.class,0);
        }
        public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
        public TerminalNode GRANT() { return getToken(PlSqlParser.GRANT, 0); }
        public TerminalNode TRUNCATE() { return getToken(PlSqlParser.TRUNCATE, 0); }
        public TerminalNode PRAGMA() { return getToken(PlSqlParser.PRAGMA, 0); }
        public BodyContext body() {
            return getRuleContext(BodyContext.class,0);
        }
        public BlockContext block() {
            return getRuleContext(BlockContext.class,0);
        }
        public Assignment_statementContext assignment_statement() {
            return getRuleContext(Assignment_statementContext.class,0);
        }
        public Continue_statementContext continue_statement() {
            return getRuleContext(Continue_statementContext.class,0);
        }
        public Exit_statementContext exit_statement() {
            return getRuleContext(Exit_statementContext.class,0);
        }
        public Goto_statementContext goto_statement() {
            return getRuleContext(Goto_statementContext.class,0);
        }
        public If_statementContext if_statement() {
            return getRuleContext(If_statementContext.class,0);
        }
        public Loop_statementContext loop_statement() {
            return getRuleContext(Loop_statementContext.class,0);
        }
        public Forall_statementContext forall_statement() {
            return getRuleContext(Forall_statementContext.class,0);
        }
        public Null_statementContext null_statement() {
            return getRuleContext(Null_statementContext.class,0);
        }
        public Raise_statementContext raise_statement() {
            return getRuleContext(Raise_statementContext.class,0);
        }
        public Return_statementContext return_statement() {
            return getRuleContext(Return_statementContext.class,0);
        }
        public Case_statementContext case_statement() {
            return getRuleContext(Case_statementContext.class,0);
        }
        public Sql_statementContext sql_statement() {
            return getRuleContext(Sql_statementContext.class,0);
        }
        public Function_callContext function_call() {
            return getRuleContext(Function_callContext.class,0);
        }
        public Pipe_rowContext pipe_row() {
            return getRuleContext(Pipe_rowContext.class,0);
        }
        public Collection_statementContext collection_statement() {
            return getRuleContext(Collection_statementContext.class,0);
        }
        public StatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_statement; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterStatement(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitStatement(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final StatementContext statement() throws RecognitionException {
        StatementContext _localctx = new StatementContext(_ctx, getState());
        enterRule(_localctx, 230, RULE_statement);
        try {
            setState(2256);
            _errHandler.sync(this);
            switch ( getInterpreter().adaptivePredict(_input,205,_ctx) ) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2229);
                    match(CREATE);
                    setState(2230);
                    swallow_to_semi();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2231);
                    match(ALTER);
                    setState(2232);
                    swallow_to_semi();
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(2233);
                    match(GRANT);
                    setState(2234);
                    swallow_to_semi();
                }
                break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                {
                    setState(2235);
                    match(TRUNCATE);
                    setState(2236);
                    swallow_to_semi();
                }
                break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                {
                    setState(2237);
                    match(PRAGMA);
                    setState(2238);
                    swallow_to_semi();
                }
                break;
                case 6:
                    enterOuterAlt(_localctx, 6);
                {
                    setState(2239);
                    body();
                }
                break;
                case 7:
                    enterOuterAlt(_localctx, 7);
                {
                    setState(2240);
                    block();
                }
                break;
                case 8:
                    enterOuterAlt(_localctx, 8);
                {
                    setState(2241);
                    assignment_statement();
                }
                break;
                case 9:
                    enterOuterAlt(_localctx, 9);
                {
                    setState(2242);
                    continue_statement();
                }
                break;
                case 10:
                    enterOuterAlt(_localctx, 10);
                {
                    setState(2243);
                    exit_statement();
                }
                break;
                case 11:
                    enterOuterAlt(_localctx, 11);
                {
                    setState(2244);
                    goto_statement();
                }
                break;
                case 12:
                    enterOuterAlt(_localctx, 12);
                {
                    setState(2245);
                    if_statement();
                }
                break;
                case 13:
                    enterOuterAlt(_localctx, 13);
                {
                    setState(2246);
                    loop_statement();
                }
                break;
                case 14:
                    enterOuterAlt(_localctx, 14);
                {
                    setState(2247);
                    forall_statement();
                }
                break;
                case 15:
                    enterOuterAlt(_localctx, 15);
                {
                    setState(2248);
                    null_statement();
                }
                break;
                case 16:
                    enterOuterAlt(_localctx, 16);
                {
                    setState(2249);
                    raise_statement();
                }
                break;
                case 17:
                    enterOuterAlt(_localctx, 17);
                {
                    setState(2250);
                    return_statement();
                }
                break;
                case 18:
                    enterOuterAlt(_localctx, 18);
                {
                    setState(2251);
                    case_statement();
                }
                break;
                case 19:
                    enterOuterAlt(_localctx, 19);
                {
                    setState(2252);
                    sql_statement();
                }
                break;
                case 20:
                    enterOuterAlt(_localctx, 20);
                {
                    setState(2253);
                    function_call();
                }
                break;
                case 21:
                    enterOuterAlt(_localctx, 21);
                {
                    setState(2254);
                    pipe_row();
                }
                break;
                case 22:
                    enterOuterAlt(_localctx, 22);
                {
                    setState(2255);
                    collection_statement();
                }
                break;
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Assignment_statementContext extends ParserRuleContext {
        public TerminalNode ASSIGN_OP() { return getToken(PlSqlParser.ASSIGN_OP, 0); }
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class,0);
        }
        public Collection_assoc_expressionContext collection_assoc_expression() {
            return getRuleContext(Collection_assoc_expressionContext.class,0);
        }
        public General_elementContext general_element() {
            return getRuleContext(General_elementContext.class,0);
        }
        public Bind_variableContext bind_variable() {
            return getRuleContext(Bind_variableContext.class,0);
        }
        public Assignment_statementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_assignment_statement; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAssignment_statement(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAssignment_statement(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAssignment_statement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Assignment_statementContext assignment_statement() throws RecognitionException {
        Assignment_statementContext _localctx = new Assignment_statementContext(_ctx, getState());
        enterRule(_localctx, 232, RULE_assignment_statement);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2261);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,206,_ctx) ) {
                    case 1:
                    {
                        setState(2258);
                        collection_assoc_expression();
                    }
                    break;
                    case 2:
                    {
                        setState(2259);
                        general_element();
                    }
                    break;
                    case 3:
                    {
                        setState(2260);
                        bind_variable();
                    }
                    break;
                }
                setState(2263);
                match(ASSIGN_OP);
                setState(2264);
                expression();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Continue_statementContext extends ParserRuleContext {
        public TerminalNode CONTINUE() { return getToken(PlSqlParser.CONTINUE, 0); }
        public Label_nameContext label_name() {
            return getRuleContext(Label_nameContext.class,0);
        }
        public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
        public ConditionContext condition() {
            return getRuleContext(ConditionContext.class,0);
        }
        public Continue_statementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_continue_statement; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterContinue_statement(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitContinue_statement(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitContinue_statement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Continue_statementContext continue_statement() throws RecognitionException {
        Continue_statementContext _localctx = new Continue_statementContext(_ctx, getState());
        enterRule(_localctx, 234, RULE_continue_statement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2266);
                match(CONTINUE);
                setState(2268);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,207,_ctx) ) {
                    case 1:
                    {
                        setState(2267);
                        label_name();
                    }
                    break;
                }
                setState(2272);
                _la = _input.LA(1);
                if (_la==WHEN) {
                    {
                        setState(2270);
                        match(WHEN);
                        setState(2271);
                        condition();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Exit_statementContext extends ParserRuleContext {
        public TerminalNode EXIT() { return getToken(PlSqlParser.EXIT, 0); }
        public Label_nameContext label_name() {
            return getRuleContext(Label_nameContext.class,0);
        }
        public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
        public ConditionContext condition() {
            return getRuleContext(ConditionContext.class,0);
        }
        public Exit_statementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_exit_statement; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterExit_statement(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitExit_statement(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitExit_statement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Exit_statementContext exit_statement() throws RecognitionException {
        Exit_statementContext _localctx = new Exit_statementContext(_ctx, getState());
        enterRule(_localctx, 236, RULE_exit_statement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2274);
                match(EXIT);
                setState(2276);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,209,_ctx) ) {
                    case 1:
                    {
                        setState(2275);
                        label_name();
                    }
                    break;
                }
                setState(2280);
                _la = _input.LA(1);
                if (_la==WHEN) {
                    {
                        setState(2278);
                        match(WHEN);
                        setState(2279);
                        condition();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Goto_statementContext extends ParserRuleContext {
        public TerminalNode GOTO() { return getToken(PlSqlParser.GOTO, 0); }
        public Label_nameContext label_name() {
            return getRuleContext(Label_nameContext.class,0);
        }
        public Goto_statementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_goto_statement; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterGoto_statement(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitGoto_statement(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitGoto_statement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Goto_statementContext goto_statement() throws RecognitionException {
        Goto_statementContext _localctx = new Goto_statementContext(_ctx, getState());
        enterRule(_localctx, 238, RULE_goto_statement);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2282);
                match(GOTO);
                setState(2283);
                label_name();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class If_statementContext extends ParserRuleContext {
        public List<TerminalNode> IF() { return getTokens(PlSqlParser.IF); }
        public TerminalNode IF(int i) {
            return getToken(PlSqlParser.IF, i);
        }
        public ConditionContext condition() {
            return getRuleContext(ConditionContext.class,0);
        }
        public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
        public Seq_of_statementsContext seq_of_statements() {
            return getRuleContext(Seq_of_statementsContext.class,0);
        }
        public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
        public List<Elsif_partContext> elsif_part() {
            return getRuleContexts(Elsif_partContext.class);
        }
        public Elsif_partContext elsif_part(int i) {
            return getRuleContext(Elsif_partContext.class,i);
        }
        public Else_partContext else_part() {
            return getRuleContext(Else_partContext.class,0);
        }
        public If_statementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_if_statement; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterIf_statement(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitIf_statement(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitIf_statement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final If_statementContext if_statement() throws RecognitionException {
        If_statementContext _localctx = new If_statementContext(_ctx, getState());
        enterRule(_localctx, 240, RULE_if_statement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2285);
                match(IF);
                setState(2286);
                condition();
                setState(2287);
                match(THEN);
                setState(2288);
                seq_of_statements();
                setState(2292);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==ELSIF) {
                    {
                        {
                            setState(2289);
                            elsif_part();
                        }
                    }
                    setState(2294);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(2296);
                _la = _input.LA(1);
                if (_la==ELSE) {
                    {
                        setState(2295);
                        else_part();
                    }
                }

                setState(2298);
                match(END);
                setState(2299);
                match(IF);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Elsif_partContext extends ParserRuleContext {
        public TerminalNode ELSIF() { return getToken(PlSqlParser.ELSIF, 0); }
        public ConditionContext condition() {
            return getRuleContext(ConditionContext.class,0);
        }
        public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
        public Seq_of_statementsContext seq_of_statements() {
            return getRuleContext(Seq_of_statementsContext.class,0);
        }
        public Elsif_partContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_elsif_part; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterElsif_part(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitElsif_part(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitElsif_part(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Elsif_partContext elsif_part() throws RecognitionException {
        Elsif_partContext _localctx = new Elsif_partContext(_ctx, getState());
        enterRule(_localctx, 242, RULE_elsif_part);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2301);
                match(ELSIF);
                setState(2302);
                condition();
                setState(2303);
                match(THEN);
                setState(2304);
                seq_of_statements();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Else_partContext extends ParserRuleContext {
        public TerminalNode ELSE() { return getToken(PlSqlParser.ELSE, 0); }
        public Seq_of_statementsContext seq_of_statements() {
            return getRuleContext(Seq_of_statementsContext.class,0);
        }
        public Else_partContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_else_part; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterElse_part(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitElse_part(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitElse_part(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Else_partContext else_part() throws RecognitionException {
        Else_partContext _localctx = new Else_partContext(_ctx, getState());
        enterRule(_localctx, 244, RULE_else_part);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2306);
                match(ELSE);
                setState(2307);
                seq_of_statements();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Loop_statementContext extends ParserRuleContext {
        public List<TerminalNode> LOOP() { return getTokens(PlSqlParser.LOOP); }
        public TerminalNode LOOP(int i) {
            return getToken(PlSqlParser.LOOP, i);
        }
        public Seq_of_statementsContext seq_of_statements() {
            return getRuleContext(Seq_of_statementsContext.class,0);
        }
        public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
        public List<Label_nameContext> label_name() {
            return getRuleContexts(Label_nameContext.class);
        }
        public Label_nameContext label_name(int i) {
            return getRuleContext(Label_nameContext.class,i);
        }
        public TerminalNode WHILE() { return getToken(PlSqlParser.WHILE, 0); }
        public ConditionContext condition() {
            return getRuleContext(ConditionContext.class,0);
        }
        public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
        public Cursor_loop_paramContext cursor_loop_param() {
            return getRuleContext(Cursor_loop_paramContext.class,0);
        }
        public Loop_statementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_loop_statement; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterLoop_statement(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitLoop_statement(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitLoop_statement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Loop_statementContext loop_statement() throws RecognitionException {
        Loop_statementContext _localctx = new Loop_statementContext(_ctx, getState());
        enterRule(_localctx, 246, RULE_loop_statement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2310);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,213,_ctx) ) {
                    case 1:
                    {
                        setState(2309);
                        label_name();
                    }
                    break;
                }
                setState(2316);
                switch (_input.LA(1)) {
                    case WHILE:
                    {
                        setState(2312);
                        match(WHILE);
                        setState(2313);
                        condition();
                    }
                    break;
                    case FOR:
                    {
                        setState(2314);
                        match(FOR);
                        setState(2315);
                        cursor_loop_param();
                    }
                    break;
                    case LOOP:
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
                setState(2318);
                match(LOOP);
                setState(2319);
                seq_of_statements();
                setState(2320);
                match(END);
                setState(2321);
                match(LOOP);
                setState(2323);
                _la = _input.LA(1);
                if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ALTER) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREADTH) | (1L << BULK) | (1L << BY) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHECK) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DEPTH - 64)) | (1L << (DESC - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (ELSE - 64)) | (1L << (ELSIF - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (END - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EXCEPT - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXCLUSIVE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FETCH - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FOR - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GOTO - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HAVING - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IN - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEX - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERSECT - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTO - 192)) | (1L << (INVALIDATE - 192)) | (1L << (IS - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCK - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUS - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCACHE - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)) | (1L << (NOENTITYESCAPING - 192)) | (1L << (NOMAXVALUE - 192)) | (1L << (NOMINVALUE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NONE - 256)) | (1L << (NOORDER - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NOT - 256)) | (1L << (NOWAIT - 256)) | (1L << (NULL - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OF - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ON - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (OPTION - 256)) | (1L << (OR - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDER - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PIVOT - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (PRIOR - 256)) | (1L << (PROCEDURE - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (REVOKE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SEARCH - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELECT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENCE - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHARE - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (SQL_PERCENT_ROWCOUNT - 320)) | (1L << (STANDALONE - 320)) | (1L << (START - 320)) | (1L << (STARTUP - 320)) | (1L << (STATEMENT - 320)) | (1L << (STATEMENT_ID - 320)) | (1L << (STATIC - 320)) | (1L << (STATISTICS - 320)) | (1L << (STRING - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TABLE - 384)) | (1L << (THE - 384)) | (1L << (THEN - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TO - 384)) | (1L << (TO_CHAR - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUE - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNION - 384)) | (1L << (UNIQUE - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNPIVOT - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATE - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (USING - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VALUES - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHEN - 384)) | (1L << (WHENEVER - 384)) | (1L << (WHERE - 384)) | (1L << (WHILE - 384)) | (1L << (WITH - 384)) | (1L << (WITHIN - 384)) | (1L << (WORK - 384)) | (1L << (WRITE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)) | (1L << (REGR_ - 448)) | (1L << (STDDEV - 448)) | (1L << (VAR_ - 448)) | (1L << (COVAR_ - 448)) | (1L << (DELIMITED_ID - 448)))) != 0) || _la==REGULAR_ID) {
                    {
                        setState(2322);
                        label_name();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Cursor_loop_paramContext extends ParserRuleContext {
        public Index_nameContext index_name() {
            return getRuleContext(Index_nameContext.class,0);
        }
        public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
        public Lower_boundContext lower_bound() {
            return getRuleContext(Lower_boundContext.class,0);
        }
        public Upper_boundContext upper_bound() {
            return getRuleContext(Upper_boundContext.class,0);
        }
        public TerminalNode REVERSE() { return getToken(PlSqlParser.REVERSE, 0); }
        public Record_nameContext record_name() {
            return getRuleContext(Record_nameContext.class,0);
        }
        public Cursor_nameContext cursor_name() {
            return getRuleContext(Cursor_nameContext.class,0);
        }
        public Select_statementContext select_statement() {
            return getRuleContext(Select_statementContext.class,0);
        }
        public Expression_listContext expression_list() {
            return getRuleContext(Expression_listContext.class,0);
        }
        public Cursor_loop_paramContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_cursor_loop_param; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCursor_loop_param(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCursor_loop_param(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCursor_loop_param(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Cursor_loop_paramContext cursor_loop_param() throws RecognitionException {
        Cursor_loop_paramContext _localctx = new Cursor_loop_paramContext(_ctx, getState());
        enterRule(_localctx, 248, RULE_cursor_loop_param);
        int _la;
        try {
            setState(2346);
            _errHandler.sync(this);
            switch ( getInterpreter().adaptivePredict(_input,219,_ctx) ) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2325);
                    index_name();
                    setState(2326);
                    match(IN);
                    setState(2328);
                    _errHandler.sync(this);
                    switch ( getInterpreter().adaptivePredict(_input,216,_ctx) ) {
                        case 1:
                        {
                            setState(2327);
                            match(REVERSE);
                        }
                        break;
                    }
                    setState(2330);
                    lower_bound();
                    setState(2331);
                    match(T__0);
                    setState(2332);
                    upper_bound();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2334);
                    record_name();
                    setState(2335);
                    match(IN);
                    setState(2344);
                    switch (_input.LA(1)) {
                        case A_LETTER:
                        case ADD:
                        case AFTER:
                        case AGENT:
                        case AGGREGATE:
                        case ALL:
                        case ALTER:
                        case ANALYZE:
                        case AND:
                        case ANY:
                        case ARRAY:
                        case AS:
                        case ASC:
                        case ASSOCIATE:
                        case AT:
                        case ATTRIBUTE:
                        case AUDIT:
                        case AUTHID:
                        case AUTO:
                        case AUTOMATIC:
                        case AUTONOMOUS_TRANSACTION:
                        case BATCH:
                        case BEFORE:
                        case BEGIN:
                        case BETWEEN:
                        case BFILE:
                        case BINARY_DOUBLE:
                        case BINARY_FLOAT:
                        case BINARY_INTEGER:
                        case BLOB:
                        case BLOCK:
                        case BODY:
                        case BOOLEAN:
                        case BOTH:
                        case BREADTH:
                        case BULK:
                        case BY:
                        case BYTE:
                        case C_LETTER:
                        case CACHE:
                        case CALL:
                        case CANONICAL:
                        case CASCADE:
                        case CASE:
                        case CAST:
                        case CHAR:
                        case CHAR_CS:
                        case CHARACTER:
                        case CHECK:
                        case CHR:
                        case CLOB:
                        case CLOSE:
                        case CLUSTER:
                        case COLLECT:
                        case COLUMNS:
                        case COMMENT:
                        case COMMIT:
                        case COMMITTED:
                        case COMPATIBILITY:
                        case COMPILE:
                        case COMPOUND:
                        case CONNECT:
                        case CONNECT_BY_ROOT:
                        case CONSTANT:
                        case CONSTRAINT:
                        case CONSTRAINTS:
                        case CONSTRUCTOR:
                        case CONTENT:
                        case CONTEXT:
                        case CONTINUE:
                        case CONVERT:
                        case CORRUPT_XID:
                        case CORRUPT_XID_ALL:
                        case COST:
                        case COUNT:
                        case CREATE:
                        case CROSS:
                        case CUBE:
                        case CURRENT:
                        case CURRENT_USER:
                        case CURSOR:
                        case CUSTOMDATUM:
                        case CYCLE:
                        case DATA:
                        case DATABASE:
                        case DATE:
                        case DAY:
                        case DB_ROLE_CHANGE:
                        case DBTIMEZONE:
                        case DDL:
                        case DEBUG:
                        case DEC:
                        case DECIMAL:
                        case DECLARE:
                        case DECOMPOSE:
                        case DECREMENT:
                        case DEFAULT:
                        case DEFAULTS:
                        case DEFERRED:
                        case DEFINER:
                        case DELETE:
                        case DEPTH:
                        case DESC:
                        case DETERMINISTIC:
                        case DIMENSION:
                        case DISABLE:
                        case DISASSOCIATE:
                        case DISTINCT:
                        case DOCUMENT:
                        case DOUBLE:
                        case DROP:
                        case DSINTERVAL_UNCONSTRAINED:
                        case EACH:
                        case ELEMENT:
                        case ELSE:
                        case ELSIF:
                        case EMPTY:
                        case ENABLE:
                        case ENCODING:
                        case END:
                        case ENTITYESCAPING:
                        case ERRORS:
                        case ESCAPE:
                        case EXCEPT:
                        case EVALNAME:
                        case EXCEPTION:
                        case EXCEPTION_INIT:
                        case EXCEPTIONS:
                        case EXCLUDE:
                        case EXCLUSIVE:
                        case EXECUTE:
                        case EXISTS:
                        case EXIT:
                        case EXPLAIN:
                        case EXTERNAL:
                        case EXTRACT:
                        case FAILURE:
                        case FALSE:
                        case FETCH:
                        case FINAL:
                        case FIRST:
                        case FIRST_VALUE:
                        case FLOAT:
                        case FOLLOWING:
                        case FOLLOWS:
                        case FOR:
                        case FORALL:
                        case FORCE:
                        case FROM:
                        case FULL:
                        case FUNCTION:
                        case GOTO:
                        case GRANT:
                        case GROUP:
                        case GROUPING:
                        case HASH:
                        case HAVING:
                        case HIDE:
                        case HOUR:
                        case IF:
                        case IGNORE:
                        case IMMEDIATE:
                        case IN:
                        case INCLUDE:
                        case INCLUDING:
                        case INCREMENT:
                        case INDENT:
                        case INDEX:
                        case INDEXED:
                        case INDICATOR:
                        case INDICES:
                        case INFINITE:
                        case INLINE:
                        case INNER:
                        case INOUT:
                        case INSERT:
                        case INSTANTIABLE:
                        case INSTEAD:
                        case INT:
                        case INTEGER:
                        case INTERSECT:
                        case INTERVAL:
                        case INTO:
                        case INVALIDATE:
                        case IS:
                        case ISOLATION:
                        case ITERATE:
                        case JAVA:
                        case JOIN:
                        case KEEP:
                        case LANGUAGE:
                        case LAST:
                        case LAST_VALUE:
                        case LEADING:
                        case LEFT:
                        case LEVEL:
                        case LIBRARY:
                        case LIKE:
                        case LIKE2:
                        case LIKE4:
                        case LIKEC:
                        case LIMIT:
                        case LOCAL:
                        case LOCK:
                        case LOCKED:
                        case LOG:
                        case LOGOFF:
                        case LOGON:
                        case LONG:
                        case LOOP:
                        case MAIN:
                        case MAP:
                        case MATCHED:
                        case MAXVALUE:
                        case MEASURES:
                        case MEMBER:
                        case MERGE:
                        case MINUS:
                        case MINUTE:
                        case MINVALUE:
                        case MLSLABEL:
                        case MODE:
                        case MODEL:
                        case MODIFY:
                        case MONTH:
                        case MULTISET:
                        case NAME:
                        case NAN:
                        case NATURAL:
                        case NATURALN:
                        case NAV:
                        case NCHAR:
                        case NCHAR_CS:
                        case NCLOB:
                        case NESTED:
                        case NEW:
                        case NO:
                        case NOAUDIT:
                        case NOCACHE:
                        case NOCOPY:
                        case NOCYCLE:
                        case NOENTITYESCAPING:
                        case NOMAXVALUE:
                        case NOMINVALUE:
                        case NONE:
                        case NOORDER:
                        case NOSCHEMACHECK:
                        case NOT:
                        case NOWAIT:
                        case NULL:
                        case NULLS:
                        case NUMBER:
                        case NUMERIC:
                        case NVARCHAR2:
                        case OBJECT:
                        case OF:
                        case OFF:
                        case OID:
                        case OLD:
                        case ON:
                        case ONLY:
                        case OPEN:
                        case OPTION:
                        case OR:
                        case ORADATA:
                        case ORDER:
                        case ORDINALITY:
                        case OSERROR:
                        case OUT:
                        case OUTER:
                        case OVER:
                        case OVERRIDING:
                        case PACKAGE:
                        case PARALLEL_ENABLE:
                        case PARAMETERS:
                        case PARENT:
                        case PARTITION:
                        case PASSING:
                        case PATH:
                        case PIPELINED:
                        case PIVOT:
                        case PLAN:
                        case PLS_INTEGER:
                        case POSITIVE:
                        case POSITIVEN:
                        case PRAGMA:
                        case PRECEDING:
                        case PRECISION:
                        case PRESENT:
                        case PRIOR:
                        case PROCEDURE:
                        case RAISE:
                        case RANGE:
                        case RAW:
                        case READ:
                        case REAL:
                        case RECORD:
                        case REF:
                        case REFERENCE:
                        case REFERENCING:
                        case REJECT:
                        case RELIES_ON:
                        case RENAME:
                        case REPLACE:
                        case RESPECT:
                        case RESTRICT_REFERENCES:
                        case RESULT:
                        case RESULT_CACHE:
                        case RETURN:
                        case RETURNING:
                        case REUSE:
                        case REVERSE:
                        case REVOKE:
                        case RIGHT:
                        case ROLLBACK:
                        case ROLLUP:
                        case ROW:
                        case ROWID:
                        case ROWS:
                        case RULES:
                        case SAMPLE:
                        case SAVE:
                        case SAVEPOINT:
                        case SCHEMA:
                        case SCHEMACHECK:
                        case SCN:
                        case SEARCH:
                        case SECOND:
                        case SEED:
                        case SEGMENT:
                        case SELECT:
                        case SELF:
                        case SEQUENCE:
                        case SEQUENTIAL:
                        case SERIALIZABLE:
                        case SERIALLY_REUSABLE:
                        case SERVERERROR:
                        case SESSIONTIMEZONE:
                        case SET:
                        case SETS:
                        case SETTINGS:
                        case SHARE:
                        case SHOW:
                        case SHUTDOWN:
                        case SIBLINGS:
                        case SIGNTYPE:
                        case SIMPLE_INTEGER:
                        case SINGLE:
                        case SIZE:
                        case SKIP_:
                        case SMALLINT:
                        case SNAPSHOT:
                        case SOME:
                        case SPECIFICATION:
                        case SQLDATA:
                        case SQLERROR:
                        case SQL_PERCENT_ROWCOUNT:
                        case STANDALONE:
                        case START:
                        case STARTUP:
                        case STATEMENT:
                        case STATEMENT_ID:
                        case STATIC:
                        case STATISTICS:
                        case STRING:
                        case SUBMULTISET:
                        case SUBPARTITION:
                        case SUBSTITUTABLE:
                        case SUBTYPE:
                        case SUCCESS:
                        case SUSPEND:
                        case TABLE:
                        case THE:
                        case THEN:
                        case TIME:
                        case TIMESTAMP:
                        case TIMESTAMP_LTZ_UNCONSTRAINED:
                        case TIMESTAMP_TZ_UNCONSTRAINED:
                        case TIMESTAMP_UNCONSTRAINED:
                        case TIMEZONE_ABBR:
                        case TIMEZONE_HOUR:
                        case TIMEZONE_MINUTE:
                        case TIMEZONE_REGION:
                        case TO:
                        case TO_CHAR:
                        case TRAILING:
                        case TRANSACTION:
                        case TRANSLATE:
                        case TREAT:
                        case TRIGGER:
                        case TRIM:
                        case TRUE:
                        case TRUNCATE:
                        case TYPE:
                        case UNBOUNDED:
                        case UNDER:
                        case UNION:
                        case UNIQUE:
                        case UNLIMITED:
                        case UNPIVOT:
                        case UNTIL:
                        case UPDATE:
                        case UPDATED:
                        case UPSERT:
                        case UROWID:
                        case USE:
                        case USING:
                        case VALIDATE:
                        case VALUE:
                        case VALUES:
                        case VARCHAR:
                        case VARCHAR2:
                        case VARIABLE:
                        case VARRAY:
                        case VARYING:
                        case VERSION:
                        case VERSIONS:
                        case WAIT:
                        case WARNING:
                        case WELLFORMED:
                        case WHEN:
                        case WHENEVER:
                        case WHERE:
                        case WHILE:
                        case WITH:
                        case WITHIN:
                        case WORK:
                        case WRITE:
                        case XML:
                        case XMLAGG:
                        case XMLATTRIBUTES:
                        case XMLCAST:
                        case XMLCOLATTVAL:
                        case XMLELEMENT:
                        case XMLEXISTS:
                        case XMLFOREST:
                        case XMLNAMESPACES:
                        case XMLPARSE:
                        case XMLPI:
                        case XMLQUERY:
                        case XMLROOT:
                        case XMLSERIALIZE:
                        case XMLTABLE:
                        case YEAR:
                        case YES:
                        case YMINTERVAL_UNCONSTRAINED:
                        case ZONE:
                        case PREDICTION:
                        case PREDICTION_BOUNDS:
                        case PREDICTION_COST:
                        case PREDICTION_DETAILS:
                        case PREDICTION_PROBABILITY:
                        case PREDICTION_SET:
                        case CUME_DIST:
                        case DENSE_RANK:
                        case LISTAGG:
                        case PERCENT_RANK:
                        case PERCENTILE_CONT:
                        case PERCENTILE_DISC:
                        case RANK:
                        case AVG:
                        case CORR:
                        case LAG:
                        case LEAD:
                        case MAX:
                        case MEDIAN:
                        case MIN:
                        case NTILE:
                        case RATIO_TO_REPORT:
                        case ROW_NUMBER:
                        case SUM:
                        case VARIANCE:
                        case REGR_:
                        case STDDEV:
                        case VAR_:
                        case COVAR_:
                        case DELIMITED_ID:
                        case BINDVAR:
                        case COLON:
                        case INTRODUCER:
                        case REGULAR_ID:
                        {
                            setState(2336);
                            cursor_name();
                            setState(2338);
                            _la = _input.LA(1);
                            if (_la==LEFT_PAREN) {
                                {
                                    setState(2337);
                                    expression_list();
                                }
                            }

                        }
                        break;
                        case LEFT_PAREN:
                        {
                            setState(2340);
                            match(LEFT_PAREN);
                            setState(2341);
                            select_statement();
                            setState(2342);
                            match(RIGHT_PAREN);
                        }
                        break;
                        default:
                            throw new NoViableAltException(this);
                    }
                }
                break;
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Forall_statementContext extends ParserRuleContext {
        public TerminalNode FORALL() { return getToken(PlSqlParser.FORALL, 0); }
        public Index_nameContext index_name() {
            return getRuleContext(Index_nameContext.class,0);
        }
        public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
        public Bounds_clauseContext bounds_clause() {
            return getRuleContext(Bounds_clauseContext.class,0);
        }
        public Sql_statementContext sql_statement() {
            return getRuleContext(Sql_statementContext.class,0);
        }
        public TerminalNode SAVE() { return getToken(PlSqlParser.SAVE, 0); }
        public TerminalNode EXCEPTIONS() { return getToken(PlSqlParser.EXCEPTIONS, 0); }
        public Forall_statementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_forall_statement; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterForall_statement(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitForall_statement(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitForall_statement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Forall_statementContext forall_statement() throws RecognitionException {
        Forall_statementContext _localctx = new Forall_statementContext(_ctx, getState());
        enterRule(_localctx, 250, RULE_forall_statement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2348);
                match(FORALL);
                setState(2349);
                index_name();
                setState(2350);
                match(IN);
                setState(2351);
                bounds_clause();
                setState(2352);
                sql_statement();
                setState(2355);
                _la = _input.LA(1);
                if (_la==SAVE) {
                    {
                        setState(2353);
                        match(SAVE);
                        setState(2354);
                        match(EXCEPTIONS);
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Bounds_clauseContext extends ParserRuleContext {
        public Lower_boundContext lower_bound() {
            return getRuleContext(Lower_boundContext.class,0);
        }
        public Upper_boundContext upper_bound() {
            return getRuleContext(Upper_boundContext.class,0);
        }
        public TerminalNode INDICES() { return getToken(PlSqlParser.INDICES, 0); }
        public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
        public Collection_nameContext collection_name() {
            return getRuleContext(Collection_nameContext.class,0);
        }
        public Between_boundContext between_bound() {
            return getRuleContext(Between_boundContext.class,0);
        }
        public TerminalNode VALUES() { return getToken(PlSqlParser.VALUES, 0); }
        public Index_nameContext index_name() {
            return getRuleContext(Index_nameContext.class,0);
        }
        public Bounds_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_bounds_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterBounds_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitBounds_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitBounds_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Bounds_clauseContext bounds_clause() throws RecognitionException {
        Bounds_clauseContext _localctx = new Bounds_clauseContext(_ctx, getState());
        enterRule(_localctx, 252, RULE_bounds_clause);
        int _la;
        try {
            setState(2370);
            _errHandler.sync(this);
            switch ( getInterpreter().adaptivePredict(_input,222,_ctx) ) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2357);
                    lower_bound();
                    setState(2358);
                    match(T__0);
                    setState(2359);
                    upper_bound();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2361);
                    match(INDICES);
                    setState(2362);
                    match(OF);
                    setState(2363);
                    collection_name();
                    setState(2365);
                    _la = _input.LA(1);
                    if (_la==BETWEEN) {
                        {
                            setState(2364);
                            between_bound();
                        }
                    }

                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(2367);
                    match(VALUES);
                    setState(2368);
                    match(OF);
                    setState(2369);
                    index_name();
                }
                break;
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Between_boundContext extends ParserRuleContext {
        public TerminalNode BETWEEN() { return getToken(PlSqlParser.BETWEEN, 0); }
        public Lower_boundContext lower_bound() {
            return getRuleContext(Lower_boundContext.class,0);
        }
        public TerminalNode AND() { return getToken(PlSqlParser.AND, 0); }
        public Upper_boundContext upper_bound() {
            return getRuleContext(Upper_boundContext.class,0);
        }
        public Between_boundContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_between_bound; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterBetween_bound(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitBetween_bound(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitBetween_bound(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Between_boundContext between_bound() throws RecognitionException {
        Between_boundContext _localctx = new Between_boundContext(_ctx, getState());
        enterRule(_localctx, 254, RULE_between_bound);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2372);
                match(BETWEEN);
                setState(2373);
                lower_bound();
                setState(2374);
                match(AND);
                setState(2375);
                upper_bound();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Lower_boundContext extends ParserRuleContext {
        public ConcatenationContext concatenation() {
            return getRuleContext(ConcatenationContext.class,0);
        }
        public Lower_boundContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_lower_bound; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterLower_bound(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitLower_bound(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitLower_bound(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Lower_boundContext lower_bound() throws RecognitionException {
        Lower_boundContext _localctx = new Lower_boundContext(_ctx, getState());
        enterRule(_localctx, 256, RULE_lower_bound);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2377);
                concatenation();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Upper_boundContext extends ParserRuleContext {
        public ConcatenationContext concatenation() {
            return getRuleContext(ConcatenationContext.class,0);
        }
        public Upper_boundContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_upper_bound; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterUpper_bound(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitUpper_bound(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitUpper_bound(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Upper_boundContext upper_bound() throws RecognitionException {
        Upper_boundContext _localctx = new Upper_boundContext(_ctx, getState());
        enterRule(_localctx, 258, RULE_upper_bound);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2379);
                concatenation();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Null_statementContext extends ParserRuleContext {
        public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
        public Null_statementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_null_statement; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterNull_statement(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitNull_statement(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitNull_statement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Null_statementContext null_statement() throws RecognitionException {
        Null_statementContext _localctx = new Null_statementContext(_ctx, getState());
        enterRule(_localctx, 260, RULE_null_statement);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2381);
                match(NULL);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Raise_statementContext extends ParserRuleContext {
        public TerminalNode RAISE() { return getToken(PlSqlParser.RAISE, 0); }
        public Exception_nameContext exception_name() {
            return getRuleContext(Exception_nameContext.class,0);
        }
        public Raise_statementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_raise_statement; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterRaise_statement(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitRaise_statement(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitRaise_statement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Raise_statementContext raise_statement() throws RecognitionException {
        Raise_statementContext _localctx = new Raise_statementContext(_ctx, getState());
        enterRule(_localctx, 262, RULE_raise_statement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2383);
                match(RAISE);
                setState(2385);
                _la = _input.LA(1);
                if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ALTER) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREADTH) | (1L << BULK) | (1L << BY) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHECK) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DEPTH - 64)) | (1L << (DESC - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (ELSE - 64)) | (1L << (ELSIF - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (END - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EXCEPT - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXCLUSIVE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FETCH - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FOR - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GOTO - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HAVING - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IN - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEX - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERSECT - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTO - 192)) | (1L << (INVALIDATE - 192)) | (1L << (IS - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCK - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUS - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCACHE - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)) | (1L << (NOENTITYESCAPING - 192)) | (1L << (NOMAXVALUE - 192)) | (1L << (NOMINVALUE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NONE - 256)) | (1L << (NOORDER - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NOT - 256)) | (1L << (NOWAIT - 256)) | (1L << (NULL - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OF - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ON - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (OPTION - 256)) | (1L << (OR - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDER - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PIVOT - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (PRIOR - 256)) | (1L << (PROCEDURE - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (REVOKE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SEARCH - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELECT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENCE - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHARE - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (SQL_PERCENT_ROWCOUNT - 320)) | (1L << (STANDALONE - 320)) | (1L << (START - 320)) | (1L << (STARTUP - 320)) | (1L << (STATEMENT - 320)) | (1L << (STATEMENT_ID - 320)) | (1L << (STATIC - 320)) | (1L << (STATISTICS - 320)) | (1L << (STRING - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TABLE - 384)) | (1L << (THE - 384)) | (1L << (THEN - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TO - 384)) | (1L << (TO_CHAR - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUE - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNION - 384)) | (1L << (UNIQUE - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNPIVOT - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATE - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (USING - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VALUES - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHEN - 384)) | (1L << (WHENEVER - 384)) | (1L << (WHERE - 384)) | (1L << (WHILE - 384)) | (1L << (WITH - 384)) | (1L << (WITHIN - 384)) | (1L << (WORK - 384)) | (1L << (WRITE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)) | (1L << (REGR_ - 448)) | (1L << (STDDEV - 448)) | (1L << (VAR_ - 448)) | (1L << (COVAR_ - 448)) | (1L << (DELIMITED_ID - 448)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
                    {
                        setState(2384);
                        exception_name();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Return_statementContext extends ParserRuleContext {
        public ConditionContext cn1;
        public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
        public ConditionContext condition() {
            return getRuleContext(ConditionContext.class,0);
        }
        public Return_statementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_return_statement; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterReturn_statement(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitReturn_statement(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitReturn_statement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Return_statementContext return_statement() throws RecognitionException {
        Return_statementContext _localctx = new Return_statementContext(_ctx, getState());
        enterRule(_localctx, 264, RULE_return_statement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2387);
                match(RETURN);
                setState(2389);
                _la = _input.LA(1);
                if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ALTER) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREADTH) | (1L << BULK) | (1L << BY) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHECK) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DEPTH - 64)) | (1L << (DESC - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (ELSE - 64)) | (1L << (ELSIF - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (END - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EXCEPT - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXCLUSIVE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FETCH - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FOR - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GOTO - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HAVING - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IN - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEX - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERSECT - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTO - 192)) | (1L << (INVALIDATE - 192)) | (1L << (IS - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCK - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUS - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MOD - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCACHE - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)) | (1L << (NOENTITYESCAPING - 192)) | (1L << (NOMAXVALUE - 192)) | (1L << (NOMINVALUE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NONE - 256)) | (1L << (NOORDER - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NOT - 256)) | (1L << (NOWAIT - 256)) | (1L << (NULL - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OF - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ON - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (OPTION - 256)) | (1L << (OR - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDER - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PIVOT - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (PRIOR - 256)) | (1L << (PROCEDURE - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (REVOKE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SEARCH - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELECT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENCE - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHARE - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (SQL_PERCENT_ROWCOUNT - 320)) | (1L << (STANDALONE - 320)) | (1L << (START - 320)) | (1L << (STARTUP - 320)) | (1L << (STATEMENT - 320)) | (1L << (STATEMENT_ID - 320)) | (1L << (STATIC - 320)) | (1L << (STATISTICS - 320)) | (1L << (STRING - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TABLE - 384)) | (1L << (THE - 384)) | (1L << (THEN - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TO - 384)) | (1L << (TO_CHAR - 384)) | (1L << (TO_NUMBER - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUE - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNION - 384)) | (1L << (UNIQUE - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNPIVOT - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATE - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (USING - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VALUES - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHEN - 384)) | (1L << (WHENEVER - 384)) | (1L << (WHERE - 384)) | (1L << (WHILE - 384)) | (1L << (WITH - 384)) | (1L << (WITHIN - 384)) | (1L << (WORK - 384)) | (1L << (WRITE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)) | (1L << (REGR_ - 448)) | (1L << (STDDEV - 448)) | (1L << (VAR_ - 448)) | (1L << (COVAR_ - 448)) | (1L << (NATIONAL_CHAR_STRING_LIT - 448)) | (1L << (UNSIGNED_INTEGER - 448)) | (1L << (APPROXIMATE_NUM_LIT - 448)) | (1L << (CHAR_STRING - 448)) | (1L << (DELIMITED_ID - 448)) | (1L << (LEFT_PAREN - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PLUS_SIGN - 512)) | (1L << (MINUS_SIGN - 512)) | (1L << (BINDVAR - 512)) | (1L << (COLON - 512)) | (1L << (INTRODUCER - 512)))) != 0) || _la==REGULAR_ID) {
                    {
                        setState(2388);
                        ((Return_statementContext)_localctx).cn1 = condition();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Function_callContext extends ParserRuleContext {
        public Routine_nameContext routine_name() {
            return getRuleContext(Routine_nameContext.class,0);
        }
        public TerminalNode CALL() { return getToken(PlSqlParser.CALL, 0); }
        public Function_argumentContext function_argument() {
            return getRuleContext(Function_argumentContext.class,0);
        }
        public Function_callContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_function_call; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFunction_call(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFunction_call(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFunction_call(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Function_callContext function_call() throws RecognitionException {
        Function_callContext _localctx = new Function_callContext(_ctx, getState());
        enterRule(_localctx, 266, RULE_function_call);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2392);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,225,_ctx) ) {
                    case 1:
                    {
                        setState(2391);
                        match(CALL);
                    }
                    break;
                }
                setState(2394);
                routine_name();
                setState(2396);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,226,_ctx) ) {
                    case 1:
                    {
                        setState(2395);
                        function_argument();
                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class BodyContext extends ParserRuleContext {
        public TerminalNode BEGIN() { return getToken(PlSqlParser.BEGIN, 0); }
        public Seq_of_statementsContext seq_of_statements() {
            return getRuleContext(Seq_of_statementsContext.class,0);
        }
        public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
        public Exception_clauseContext exception_clause() {
            return getRuleContext(Exception_clauseContext.class,0);
        }
        public Label_nameContext label_name() {
            return getRuleContext(Label_nameContext.class,0);
        }
        public BodyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_body; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterBody(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitBody(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitBody(this);
            else return visitor.visitChildren(this);
        }
    }

    public final BodyContext body() throws RecognitionException {
        BodyContext _localctx = new BodyContext(_ctx, getState());
        enterRule(_localctx, 268, RULE_body);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2398);
                match(BEGIN);
                setState(2399);
                seq_of_statements();
                setState(2401);
                _la = _input.LA(1);
                if (_la==EXCEPTION) {
                    {
                        setState(2400);
                        exception_clause();
                    }
                }

                setState(2403);
                match(END);
                setState(2405);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,228,_ctx) ) {
                    case 1:
                    {
                        setState(2404);
                        label_name();
                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Collection_statementContext extends ParserRuleContext {
        public Collection_assoc_expressionContext collection_assoc_expression() {
            return getRuleContext(Collection_assoc_expressionContext.class,0);
        }
        public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }
        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class,i);
        }
        public TerminalNode EXTEND() { return getToken(PlSqlParser.EXTEND, 0); }
        public TerminalNode TRIM() { return getToken(PlSqlParser.TRIM, 0); }
        public Collection_statementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_collection_statement; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCollection_statement(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCollection_statement(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCollection_statement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Collection_statementContext collection_statement() throws RecognitionException {
        Collection_statementContext _localctx = new Collection_statementContext(_ctx, getState());
        enterRule(_localctx, 270, RULE_collection_statement);
        int _la;
        try {
            setState(2445);
            _errHandler.sync(this);
            switch ( getInterpreter().adaptivePredict(_input,237,_ctx) ) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2407);
                    collection_assoc_expression();
                    setState(2408);
                    match(PERIOD);
                    setState(2409);
                    match(DELETE);
                    setState(2419);
                    _la = _input.LA(1);
                    if (_la==LEFT_PAREN) {
                        {
                            setState(2410);
                            match(LEFT_PAREN);
                            setState(2416);
                            _la = _input.LA(1);
                            if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ALTER) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREADTH) | (1L << BULK) | (1L << BY) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHECK) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DEPTH - 64)) | (1L << (DESC - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (ELSE - 64)) | (1L << (ELSIF - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (END - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EXCEPT - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXCLUSIVE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FETCH - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FOR - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GOTO - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HAVING - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IN - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEX - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERSECT - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTO - 192)) | (1L << (INVALIDATE - 192)) | (1L << (IS - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCK - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUS - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MOD - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCACHE - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)) | (1L << (NOENTITYESCAPING - 192)) | (1L << (NOMAXVALUE - 192)) | (1L << (NOMINVALUE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NONE - 256)) | (1L << (NOORDER - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NOT - 256)) | (1L << (NOWAIT - 256)) | (1L << (NULL - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OF - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ON - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (OPTION - 256)) | (1L << (OR - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDER - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PIVOT - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (PRIOR - 256)) | (1L << (PROCEDURE - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (REVOKE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SEARCH - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELECT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENCE - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHARE - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (SQL_PERCENT_ROWCOUNT - 320)) | (1L << (STANDALONE - 320)) | (1L << (START - 320)) | (1L << (STARTUP - 320)) | (1L << (STATEMENT - 320)) | (1L << (STATEMENT_ID - 320)) | (1L << (STATIC - 320)) | (1L << (STATISTICS - 320)) | (1L << (STRING - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TABLE - 384)) | (1L << (THE - 384)) | (1L << (THEN - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TO - 384)) | (1L << (TO_CHAR - 384)) | (1L << (TO_NUMBER - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUE - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNION - 384)) | (1L << (UNIQUE - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNPIVOT - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATE - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (USING - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VALUES - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHEN - 384)) | (1L << (WHENEVER - 384)) | (1L << (WHERE - 384)) | (1L << (WHILE - 384)) | (1L << (WITH - 384)) | (1L << (WITHIN - 384)) | (1L << (WORK - 384)) | (1L << (WRITE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)) | (1L << (REGR_ - 448)) | (1L << (STDDEV - 448)) | (1L << (VAR_ - 448)) | (1L << (COVAR_ - 448)) | (1L << (NATIONAL_CHAR_STRING_LIT - 448)) | (1L << (UNSIGNED_INTEGER - 448)) | (1L << (APPROXIMATE_NUM_LIT - 448)) | (1L << (CHAR_STRING - 448)) | (1L << (DELIMITED_ID - 448)) | (1L << (LEFT_PAREN - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PLUS_SIGN - 512)) | (1L << (MINUS_SIGN - 512)) | (1L << (BINDVAR - 512)) | (1L << (COLON - 512)) | (1L << (INTRODUCER - 512)))) != 0) || _la==REGULAR_ID) {
                                {
                                    setState(2411);
                                    expression();
                                    setState(2414);
                                    _la = _input.LA(1);
                                    if (_la==COMMA) {
                                        {
                                            setState(2412);
                                            match(COMMA);
                                            setState(2413);
                                            expression();
                                        }
                                    }

                                }
                            }

                            setState(2418);
                            match(RIGHT_PAREN);
                        }
                    }

                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2421);
                    collection_assoc_expression();
                    setState(2422);
                    match(PERIOD);
                    setState(2423);
                    match(EXTEND);
                    setState(2433);
                    _la = _input.LA(1);
                    if (_la==LEFT_PAREN) {
                        {
                            setState(2424);
                            match(LEFT_PAREN);
                            setState(2430);
                            _la = _input.LA(1);
                            if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ALTER) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREADTH) | (1L << BULK) | (1L << BY) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHECK) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DEPTH - 64)) | (1L << (DESC - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (ELSE - 64)) | (1L << (ELSIF - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (END - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EXCEPT - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXCLUSIVE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FETCH - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FOR - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GOTO - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HAVING - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IN - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEX - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERSECT - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTO - 192)) | (1L << (INVALIDATE - 192)) | (1L << (IS - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCK - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUS - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MOD - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCACHE - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)) | (1L << (NOENTITYESCAPING - 192)) | (1L << (NOMAXVALUE - 192)) | (1L << (NOMINVALUE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NONE - 256)) | (1L << (NOORDER - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NOT - 256)) | (1L << (NOWAIT - 256)) | (1L << (NULL - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OF - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ON - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (OPTION - 256)) | (1L << (OR - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDER - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PIVOT - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (PRIOR - 256)) | (1L << (PROCEDURE - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (REVOKE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SEARCH - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELECT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENCE - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHARE - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (SQL_PERCENT_ROWCOUNT - 320)) | (1L << (STANDALONE - 320)) | (1L << (START - 320)) | (1L << (STARTUP - 320)) | (1L << (STATEMENT - 320)) | (1L << (STATEMENT_ID - 320)) | (1L << (STATIC - 320)) | (1L << (STATISTICS - 320)) | (1L << (STRING - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TABLE - 384)) | (1L << (THE - 384)) | (1L << (THEN - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TO - 384)) | (1L << (TO_CHAR - 384)) | (1L << (TO_NUMBER - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUE - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNION - 384)) | (1L << (UNIQUE - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNPIVOT - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATE - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (USING - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VALUES - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHEN - 384)) | (1L << (WHENEVER - 384)) | (1L << (WHERE - 384)) | (1L << (WHILE - 384)) | (1L << (WITH - 384)) | (1L << (WITHIN - 384)) | (1L << (WORK - 384)) | (1L << (WRITE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)) | (1L << (REGR_ - 448)) | (1L << (STDDEV - 448)) | (1L << (VAR_ - 448)) | (1L << (COVAR_ - 448)) | (1L << (NATIONAL_CHAR_STRING_LIT - 448)) | (1L << (UNSIGNED_INTEGER - 448)) | (1L << (APPROXIMATE_NUM_LIT - 448)) | (1L << (CHAR_STRING - 448)) | (1L << (DELIMITED_ID - 448)) | (1L << (LEFT_PAREN - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PLUS_SIGN - 512)) | (1L << (MINUS_SIGN - 512)) | (1L << (BINDVAR - 512)) | (1L << (COLON - 512)) | (1L << (INTRODUCER - 512)))) != 0) || _la==REGULAR_ID) {
                                {
                                    setState(2425);
                                    expression();
                                    setState(2428);
                                    _la = _input.LA(1);
                                    if (_la==COMMA) {
                                        {
                                            setState(2426);
                                            match(COMMA);
                                            setState(2427);
                                            expression();
                                        }
                                    }

                                }
                            }

                            setState(2432);
                            match(RIGHT_PAREN);
                        }
                    }

                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(2435);
                    collection_assoc_expression();
                    setState(2436);
                    match(PERIOD);
                    setState(2437);
                    match(TRIM);
                    setState(2443);
                    _la = _input.LA(1);
                    if (_la==LEFT_PAREN) {
                        {
                            setState(2438);
                            match(LEFT_PAREN);
                            setState(2440);
                            _la = _input.LA(1);
                            if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ALTER) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREADTH) | (1L << BULK) | (1L << BY) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHECK) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DEPTH - 64)) | (1L << (DESC - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (ELSE - 64)) | (1L << (ELSIF - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (END - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EXCEPT - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXCLUSIVE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FETCH - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FOR - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GOTO - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HAVING - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IN - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEX - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERSECT - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTO - 192)) | (1L << (INVALIDATE - 192)) | (1L << (IS - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCK - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUS - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MOD - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCACHE - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)) | (1L << (NOENTITYESCAPING - 192)) | (1L << (NOMAXVALUE - 192)) | (1L << (NOMINVALUE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NONE - 256)) | (1L << (NOORDER - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NOT - 256)) | (1L << (NOWAIT - 256)) | (1L << (NULL - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OF - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ON - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (OPTION - 256)) | (1L << (OR - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDER - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PIVOT - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (PRIOR - 256)) | (1L << (PROCEDURE - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (REVOKE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SEARCH - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELECT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENCE - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHARE - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (SQL_PERCENT_ROWCOUNT - 320)) | (1L << (STANDALONE - 320)) | (1L << (START - 320)) | (1L << (STARTUP - 320)) | (1L << (STATEMENT - 320)) | (1L << (STATEMENT_ID - 320)) | (1L << (STATIC - 320)) | (1L << (STATISTICS - 320)) | (1L << (STRING - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TABLE - 384)) | (1L << (THE - 384)) | (1L << (THEN - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TO - 384)) | (1L << (TO_CHAR - 384)) | (1L << (TO_NUMBER - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUE - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNION - 384)) | (1L << (UNIQUE - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNPIVOT - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATE - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (USING - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VALUES - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHEN - 384)) | (1L << (WHENEVER - 384)) | (1L << (WHERE - 384)) | (1L << (WHILE - 384)) | (1L << (WITH - 384)) | (1L << (WITHIN - 384)) | (1L << (WORK - 384)) | (1L << (WRITE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)) | (1L << (REGR_ - 448)) | (1L << (STDDEV - 448)) | (1L << (VAR_ - 448)) | (1L << (COVAR_ - 448)) | (1L << (NATIONAL_CHAR_STRING_LIT - 448)) | (1L << (UNSIGNED_INTEGER - 448)) | (1L << (APPROXIMATE_NUM_LIT - 448)) | (1L << (CHAR_STRING - 448)) | (1L << (DELIMITED_ID - 448)) | (1L << (LEFT_PAREN - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PLUS_SIGN - 512)) | (1L << (MINUS_SIGN - 512)) | (1L << (BINDVAR - 512)) | (1L << (COLON - 512)) | (1L << (INTRODUCER - 512)))) != 0) || _la==REGULAR_ID) {
                                {
                                    setState(2439);
                                    expression();
                                }
                            }

                            setState(2442);
                            match(RIGHT_PAREN);
                        }
                    }

                }
                break;
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Pipe_rowContext extends ParserRuleContext {
        public TerminalNode PIPE() { return getToken(PlSqlParser.PIPE, 0); }
        public TerminalNode ROW() { return getToken(PlSqlParser.ROW, 0); }
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class,0);
        }
        public Pipe_rowContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_pipe_row; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPipe_row(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPipe_row(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPipe_row(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Pipe_rowContext pipe_row() throws RecognitionException {
        Pipe_rowContext _localctx = new Pipe_rowContext(_ctx, getState());
        enterRule(_localctx, 272, RULE_pipe_row);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2447);
                match(PIPE);
                setState(2448);
                match(ROW);
                setState(2449);
                match(LEFT_PAREN);
                setState(2450);
                expression();
                setState(2451);
                match(RIGHT_PAREN);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Exception_clauseContext extends ParserRuleContext {
        public TerminalNode EXCEPTION() { return getToken(PlSqlParser.EXCEPTION, 0); }
        public List<Exception_handlerContext> exception_handler() {
            return getRuleContexts(Exception_handlerContext.class);
        }
        public Exception_handlerContext exception_handler(int i) {
            return getRuleContext(Exception_handlerContext.class,i);
        }
        public Exception_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_exception_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterException_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitException_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitException_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Exception_clauseContext exception_clause() throws RecognitionException {
        Exception_clauseContext _localctx = new Exception_clauseContext(_ctx, getState());
        enterRule(_localctx, 274, RULE_exception_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2453);
                match(EXCEPTION);
                setState(2455);
                _errHandler.sync(this);
                _la = _input.LA(1);
                do {
                    {
                        {
                            setState(2454);
                            exception_handler();
                        }
                    }
                    setState(2457);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                } while ( _la==WHEN );
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Exception_handlerContext extends ParserRuleContext {
        public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
        public List<Exception_nameContext> exception_name() {
            return getRuleContexts(Exception_nameContext.class);
        }
        public Exception_nameContext exception_name(int i) {
            return getRuleContext(Exception_nameContext.class,i);
        }
        public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
        public Seq_of_statementsContext seq_of_statements() {
            return getRuleContext(Seq_of_statementsContext.class,0);
        }
        public List<TerminalNode> OR() { return getTokens(PlSqlParser.OR); }
        public TerminalNode OR(int i) {
            return getToken(PlSqlParser.OR, i);
        }
        public Exception_handlerContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_exception_handler; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterException_handler(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitException_handler(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitException_handler(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Exception_handlerContext exception_handler() throws RecognitionException {
        Exception_handlerContext _localctx = new Exception_handlerContext(_ctx, getState());
        enterRule(_localctx, 276, RULE_exception_handler);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2459);
                match(WHEN);
                setState(2460);
                exception_name();
                setState(2465);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==OR) {
                    {
                        {
                            setState(2461);
                            match(OR);
                            setState(2462);
                            exception_name();
                        }
                    }
                    setState(2467);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(2468);
                match(THEN);
                setState(2469);
                seq_of_statements();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Trigger_blockContext extends ParserRuleContext {
        public BodyContext body() {
            return getRuleContext(BodyContext.class,0);
        }
        public Declare_wrapperContext declare_wrapper() {
            return getRuleContext(Declare_wrapperContext.class,0);
        }
        public Trigger_blockContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_trigger_block; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTrigger_block(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTrigger_block(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTrigger_block(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Trigger_blockContext trigger_block() throws RecognitionException {
        Trigger_blockContext _localctx = new Trigger_blockContext(_ctx, getState());
        enterRule(_localctx, 278, RULE_trigger_block);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2472);
                _la = _input.LA(1);
                if (_la==DECLARE) {
                    {
                        setState(2471);
                        declare_wrapper();
                    }
                }

                setState(2474);
                body();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class BlockContext extends ParserRuleContext {
        public BodyContext body() {
            return getRuleContext(BodyContext.class,0);
        }
        public Declare_wrapperContext declare_wrapper() {
            return getRuleContext(Declare_wrapperContext.class,0);
        }
        public BlockContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_block; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterBlock(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitBlock(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitBlock(this);
            else return visitor.visitChildren(this);
        }
    }

    public final BlockContext block() throws RecognitionException {
        BlockContext _localctx = new BlockContext(_ctx, getState());
        enterRule(_localctx, 280, RULE_block);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2477);
                _la = _input.LA(1);
                if (_la==DECLARE) {
                    {
                        setState(2476);
                        declare_wrapper();
                    }
                }

                setState(2479);
                body();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Sql_statementContext extends ParserRuleContext {
        public Execute_immediateContext execute_immediate() {
            return getRuleContext(Execute_immediateContext.class,0);
        }
        public Data_manipulation_language_statementsContext data_manipulation_language_statements() {
            return getRuleContext(Data_manipulation_language_statementsContext.class,0);
        }
        public Cursor_manipulation_statementsContext cursor_manipulation_statements() {
            return getRuleContext(Cursor_manipulation_statementsContext.class,0);
        }
        public Transaction_control_statementsContext transaction_control_statements() {
            return getRuleContext(Transaction_control_statementsContext.class,0);
        }
        public Sql_statementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_sql_statement; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSql_statement(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSql_statement(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSql_statement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Sql_statementContext sql_statement() throws RecognitionException {
        Sql_statementContext _localctx = new Sql_statementContext(_ctx, getState());
        enterRule(_localctx, 282, RULE_sql_statement);
        try {
            setState(2485);
            switch (_input.LA(1)) {
                case EXECUTE:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2481);
                    execute_immediate();
                }
                break;
                case DELETE:
                case EXPLAIN:
                case INSERT:
                case LOCK:
                case MERGE:
                case SELECT:
                case UPDATE:
                case WITH:
                case LEFT_PAREN:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2482);
                    data_manipulation_language_statements();
                }
                break;
                case CLOSE:
                case FETCH:
                case OPEN:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(2483);
                    cursor_manipulation_statements();
                }
                break;
                case COMMIT:
                case ROLLBACK:
                case SAVEPOINT:
                case SET:
                    enterOuterAlt(_localctx, 4);
                {
                    setState(2484);
                    transaction_control_statements();
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Execute_immediateContext extends ParserRuleContext {
        public TerminalNode EXECUTE() { return getToken(PlSqlParser.EXECUTE, 0); }
        public TerminalNode IMMEDIATE() { return getToken(PlSqlParser.IMMEDIATE, 0); }
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class,0);
        }
        public Into_clauseContext into_clause() {
            return getRuleContext(Into_clauseContext.class,0);
        }
        public Using_clauseContext using_clause() {
            return getRuleContext(Using_clauseContext.class,0);
        }
        public Dynamic_returning_clauseContext dynamic_returning_clause() {
            return getRuleContext(Dynamic_returning_clauseContext.class,0);
        }
        public Execute_immediateContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_execute_immediate; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterExecute_immediate(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitExecute_immediate(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitExecute_immediate(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Execute_immediateContext execute_immediate() throws RecognitionException {
        Execute_immediateContext _localctx = new Execute_immediateContext(_ctx, getState());
        enterRule(_localctx, 284, RULE_execute_immediate);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2487);
                match(EXECUTE);
                setState(2488);
                match(IMMEDIATE);
                setState(2489);
                expression();
                setState(2499);
                switch (_input.LA(1)) {
                    case BULK:
                    case INTO:
                    {
                        setState(2490);
                        into_clause();
                        setState(2492);
                        _la = _input.LA(1);
                        if (_la==USING) {
                            {
                                setState(2491);
                                using_clause();
                            }
                        }

                    }
                    break;
                    case USING:
                    {
                        setState(2494);
                        using_clause();
                        setState(2496);
                        _la = _input.LA(1);
                        if (_la==RETURN || _la==RETURNING) {
                            {
                                setState(2495);
                                dynamic_returning_clause();
                            }
                        }

                    }
                    break;
                    case RETURN:
                    case RETURNING:
                    {
                        setState(2498);
                        dynamic_returning_clause();
                    }
                    break;
                    case SAVE:
                    case SEMICOLON:
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Dynamic_returning_clauseContext extends ParserRuleContext {
        public Into_clauseContext into_clause() {
            return getRuleContext(Into_clauseContext.class,0);
        }
        public TerminalNode RETURNING() { return getToken(PlSqlParser.RETURNING, 0); }
        public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
        public Dynamic_returning_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_dynamic_returning_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDynamic_returning_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDynamic_returning_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDynamic_returning_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Dynamic_returning_clauseContext dynamic_returning_clause() throws RecognitionException {
        Dynamic_returning_clauseContext _localctx = new Dynamic_returning_clauseContext(_ctx, getState());
        enterRule(_localctx, 286, RULE_dynamic_returning_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2501);
                _la = _input.LA(1);
                if ( !(_la==RETURN || _la==RETURNING) ) {
                    _errHandler.recoverInline(this);
                } else {
                    consume();
                }
                setState(2502);
                into_clause();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Data_manipulation_language_statementsContext extends ParserRuleContext {
        public Merge_statementContext merge_statement() {
            return getRuleContext(Merge_statementContext.class,0);
        }
        public Lock_table_statementContext lock_table_statement() {
            return getRuleContext(Lock_table_statementContext.class,0);
        }
        public Select_statementContext select_statement() {
            return getRuleContext(Select_statementContext.class,0);
        }
        public Update_statementContext update_statement() {
            return getRuleContext(Update_statementContext.class,0);
        }
        public Delete_statementContext delete_statement() {
            return getRuleContext(Delete_statementContext.class,0);
        }
        public Insert_statementContext insert_statement() {
            return getRuleContext(Insert_statementContext.class,0);
        }
        public Explain_statementContext explain_statement() {
            return getRuleContext(Explain_statementContext.class,0);
        }
        public Data_manipulation_language_statementsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_data_manipulation_language_statements; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterData_manipulation_language_statements(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitData_manipulation_language_statements(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitData_manipulation_language_statements(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Data_manipulation_language_statementsContext data_manipulation_language_statements() throws RecognitionException {
        Data_manipulation_language_statementsContext _localctx = new Data_manipulation_language_statementsContext(_ctx, getState());
        enterRule(_localctx, 288, RULE_data_manipulation_language_statements);
        try {
            setState(2511);
            switch (_input.LA(1)) {
                case MERGE:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2504);
                    merge_statement();
                }
                break;
                case LOCK:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2505);
                    lock_table_statement();
                }
                break;
                case SELECT:
                case WITH:
                case LEFT_PAREN:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(2506);
                    select_statement();
                }
                break;
                case UPDATE:
                    enterOuterAlt(_localctx, 4);
                {
                    setState(2507);
                    update_statement();
                }
                break;
                case DELETE:
                    enterOuterAlt(_localctx, 5);
                {
                    setState(2508);
                    delete_statement();
                }
                break;
                case INSERT:
                    enterOuterAlt(_localctx, 6);
                {
                    setState(2509);
                    insert_statement();
                }
                break;
                case EXPLAIN:
                    enterOuterAlt(_localctx, 7);
                {
                    setState(2510);
                    explain_statement();
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Cursor_manipulation_statementsContext extends ParserRuleContext {
        public Close_statementContext close_statement() {
            return getRuleContext(Close_statementContext.class,0);
        }
        public Open_statementContext open_statement() {
            return getRuleContext(Open_statementContext.class,0);
        }
        public Fetch_statementContext fetch_statement() {
            return getRuleContext(Fetch_statementContext.class,0);
        }
        public Open_for_statementContext open_for_statement() {
            return getRuleContext(Open_for_statementContext.class,0);
        }
        public Cursor_manipulation_statementsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_cursor_manipulation_statements; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCursor_manipulation_statements(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCursor_manipulation_statements(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCursor_manipulation_statements(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Cursor_manipulation_statementsContext cursor_manipulation_statements() throws RecognitionException {
        Cursor_manipulation_statementsContext _localctx = new Cursor_manipulation_statementsContext(_ctx, getState());
        enterRule(_localctx, 290, RULE_cursor_manipulation_statements);
        try {
            setState(2517);
            _errHandler.sync(this);
            switch ( getInterpreter().adaptivePredict(_input,247,_ctx) ) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2513);
                    close_statement();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2514);
                    open_statement();
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(2515);
                    fetch_statement();
                }
                break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                {
                    setState(2516);
                    open_for_statement();
                }
                break;
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Close_statementContext extends ParserRuleContext {
        public TerminalNode CLOSE() { return getToken(PlSqlParser.CLOSE, 0); }
        public Cursor_nameContext cursor_name() {
            return getRuleContext(Cursor_nameContext.class,0);
        }
        public Close_statementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_close_statement; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterClose_statement(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitClose_statement(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitClose_statement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Close_statementContext close_statement() throws RecognitionException {
        Close_statementContext _localctx = new Close_statementContext(_ctx, getState());
        enterRule(_localctx, 292, RULE_close_statement);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2519);
                match(CLOSE);
                setState(2520);
                cursor_name();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Open_statementContext extends ParserRuleContext {
        public TerminalNode OPEN() { return getToken(PlSqlParser.OPEN, 0); }
        public Cursor_nameContext cursor_name() {
            return getRuleContext(Cursor_nameContext.class,0);
        }
        public Expression_listContext expression_list() {
            return getRuleContext(Expression_listContext.class,0);
        }
        public Open_statementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_open_statement; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterOpen_statement(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitOpen_statement(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitOpen_statement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Open_statementContext open_statement() throws RecognitionException {
        Open_statementContext _localctx = new Open_statementContext(_ctx, getState());
        enterRule(_localctx, 294, RULE_open_statement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2522);
                match(OPEN);
                setState(2523);
                cursor_name();
                setState(2525);
                _la = _input.LA(1);
                if (_la==LEFT_PAREN) {
                    {
                        setState(2524);
                        expression_list();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Fetch_statementContext extends ParserRuleContext {
        public Token it1;
        public TerminalNode FETCH() { return getToken(PlSqlParser.FETCH, 0); }
        public Cursor_nameContext cursor_name() {
            return getRuleContext(Cursor_nameContext.class,0);
        }
        public List<Variable_nameContext> variable_name() {
            return getRuleContexts(Variable_nameContext.class);
        }
        public Variable_nameContext variable_name(int i) {
            return getRuleContext(Variable_nameContext.class,i);
        }
        public TerminalNode BULK() { return getToken(PlSqlParser.BULK, 0); }
        public TerminalNode COLLECT() { return getToken(PlSqlParser.COLLECT, 0); }
        public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
        public TerminalNode LIMIT() { return getToken(PlSqlParser.LIMIT, 0); }
        public NumericContext numeric() {
            return getRuleContext(NumericContext.class,0);
        }
        public Fetch_statementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_fetch_statement; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFetch_statement(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFetch_statement(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFetch_statement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Fetch_statementContext fetch_statement() throws RecognitionException {
        Fetch_statementContext _localctx = new Fetch_statementContext(_ctx, getState());
        enterRule(_localctx, 296, RULE_fetch_statement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2527);
                match(FETCH);
                setState(2528);
                cursor_name();
                setState(2556);
                switch (_input.LA(1)) {
                    case INTO:
                    {
                        setState(2529);
                        ((Fetch_statementContext)_localctx).it1 = match(INTO);
                        setState(2530);
                        variable_name();
                        setState(2535);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la==COMMA) {
                            {
                                {
                                    setState(2531);
                                    match(COMMA);
                                    setState(2532);
                                    variable_name();
                                }
                            }
                            setState(2537);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                    }
                    break;
                    case BULK:
                    {
                        setState(2538);
                        match(BULK);
                        setState(2539);
                        match(COLLECT);
                        setState(2540);
                        match(INTO);
                        setState(2541);
                        variable_name();
                        setState(2546);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la==COMMA) {
                            {
                                {
                                    setState(2542);
                                    match(COMMA);
                                    setState(2543);
                                    variable_name();
                                }
                            }
                            setState(2548);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                        setState(2554);
                        _la = _input.LA(1);
                        if (_la==LIMIT) {
                            {
                                setState(2549);
                                match(LIMIT);
                                setState(2552);
                                switch (_input.LA(1)) {
                                    case A_LETTER:
                                    case ADD:
                                    case AFTER:
                                    case AGENT:
                                    case AGGREGATE:
                                    case ALL:
                                    case ALTER:
                                    case ANALYZE:
                                    case AND:
                                    case ANY:
                                    case ARRAY:
                                    case AS:
                                    case ASC:
                                    case ASSOCIATE:
                                    case AT:
                                    case ATTRIBUTE:
                                    case AUDIT:
                                    case AUTHID:
                                    case AUTO:
                                    case AUTOMATIC:
                                    case AUTONOMOUS_TRANSACTION:
                                    case BATCH:
                                    case BEFORE:
                                    case BEGIN:
                                    case BETWEEN:
                                    case BFILE:
                                    case BINARY_DOUBLE:
                                    case BINARY_FLOAT:
                                    case BINARY_INTEGER:
                                    case BLOB:
                                    case BLOCK:
                                    case BODY:
                                    case BOOLEAN:
                                    case BOTH:
                                    case BREADTH:
                                    case BULK:
                                    case BY:
                                    case BYTE:
                                    case C_LETTER:
                                    case CACHE:
                                    case CALL:
                                    case CANONICAL:
                                    case CASCADE:
                                    case CASE:
                                    case CAST:
                                    case CHAR:
                                    case CHAR_CS:
                                    case CHARACTER:
                                    case CHECK:
                                    case CHR:
                                    case CLOB:
                                    case CLOSE:
                                    case CLUSTER:
                                    case COLLECT:
                                    case COLUMNS:
                                    case COMMENT:
                                    case COMMIT:
                                    case COMMITTED:
                                    case COMPATIBILITY:
                                    case COMPILE:
                                    case COMPOUND:
                                    case CONNECT:
                                    case CONNECT_BY_ROOT:
                                    case CONSTANT:
                                    case CONSTRAINT:
                                    case CONSTRAINTS:
                                    case CONSTRUCTOR:
                                    case CONTENT:
                                    case CONTEXT:
                                    case CONTINUE:
                                    case CONVERT:
                                    case CORRUPT_XID:
                                    case CORRUPT_XID_ALL:
                                    case COST:
                                    case COUNT:
                                    case CREATE:
                                    case CROSS:
                                    case CUBE:
                                    case CURRENT:
                                    case CURRENT_USER:
                                    case CURSOR:
                                    case CUSTOMDATUM:
                                    case CYCLE:
                                    case DATA:
                                    case DATABASE:
                                    case DATE:
                                    case DAY:
                                    case DB_ROLE_CHANGE:
                                    case DBTIMEZONE:
                                    case DDL:
                                    case DEBUG:
                                    case DEC:
                                    case DECIMAL:
                                    case DECLARE:
                                    case DECOMPOSE:
                                    case DECREMENT:
                                    case DEFAULT:
                                    case DEFAULTS:
                                    case DEFERRED:
                                    case DEFINER:
                                    case DELETE:
                                    case DEPTH:
                                    case DESC:
                                    case DETERMINISTIC:
                                    case DIMENSION:
                                    case DISABLE:
                                    case DISASSOCIATE:
                                    case DISTINCT:
                                    case DOCUMENT:
                                    case DOUBLE:
                                    case DROP:
                                    case DSINTERVAL_UNCONSTRAINED:
                                    case EACH:
                                    case ELEMENT:
                                    case ELSE:
                                    case ELSIF:
                                    case EMPTY:
                                    case ENABLE:
                                    case ENCODING:
                                    case END:
                                    case ENTITYESCAPING:
                                    case ERRORS:
                                    case ESCAPE:
                                    case EXCEPT:
                                    case EVALNAME:
                                    case EXCEPTION:
                                    case EXCEPTION_INIT:
                                    case EXCEPTIONS:
                                    case EXCLUDE:
                                    case EXCLUSIVE:
                                    case EXECUTE:
                                    case EXISTS:
                                    case EXIT:
                                    case EXPLAIN:
                                    case EXTERNAL:
                                    case EXTRACT:
                                    case FAILURE:
                                    case FALSE:
                                    case FETCH:
                                    case FINAL:
                                    case FIRST:
                                    case FIRST_VALUE:
                                    case FLOAT:
                                    case FOLLOWING:
                                    case FOLLOWS:
                                    case FOR:
                                    case FORALL:
                                    case FORCE:
                                    case FROM:
                                    case FULL:
                                    case FUNCTION:
                                    case GOTO:
                                    case GRANT:
                                    case GROUP:
                                    case GROUPING:
                                    case HASH:
                                    case HAVING:
                                    case HIDE:
                                    case HOUR:
                                    case IF:
                                    case IGNORE:
                                    case IMMEDIATE:
                                    case IN:
                                    case INCLUDE:
                                    case INCLUDING:
                                    case INCREMENT:
                                    case INDENT:
                                    case INDEX:
                                    case INDEXED:
                                    case INDICATOR:
                                    case INDICES:
                                    case INFINITE:
                                    case INLINE:
                                    case INNER:
                                    case INOUT:
                                    case INSERT:
                                    case INSTANTIABLE:
                                    case INSTEAD:
                                    case INT:
                                    case INTEGER:
                                    case INTERSECT:
                                    case INTERVAL:
                                    case INTO:
                                    case INVALIDATE:
                                    case IS:
                                    case ISOLATION:
                                    case ITERATE:
                                    case JAVA:
                                    case JOIN:
                                    case KEEP:
                                    case LANGUAGE:
                                    case LAST:
                                    case LAST_VALUE:
                                    case LEADING:
                                    case LEFT:
                                    case LEVEL:
                                    case LIBRARY:
                                    case LIKE:
                                    case LIKE2:
                                    case LIKE4:
                                    case LIKEC:
                                    case LIMIT:
                                    case LOCAL:
                                    case LOCK:
                                    case LOCKED:
                                    case LOG:
                                    case LOGOFF:
                                    case LOGON:
                                    case LONG:
                                    case LOOP:
                                    case MAIN:
                                    case MAP:
                                    case MATCHED:
                                    case MAXVALUE:
                                    case MEASURES:
                                    case MEMBER:
                                    case MERGE:
                                    case MINUS:
                                    case MINUTE:
                                    case MINVALUE:
                                    case MLSLABEL:
                                    case MODE:
                                    case MODEL:
                                    case MODIFY:
                                    case MONTH:
                                    case MULTISET:
                                    case NAME:
                                    case NAN:
                                    case NATURAL:
                                    case NATURALN:
                                    case NAV:
                                    case NCHAR:
                                    case NCHAR_CS:
                                    case NCLOB:
                                    case NESTED:
                                    case NEW:
                                    case NO:
                                    case NOAUDIT:
                                    case NOCACHE:
                                    case NOCOPY:
                                    case NOCYCLE:
                                    case NOENTITYESCAPING:
                                    case NOMAXVALUE:
                                    case NOMINVALUE:
                                    case NONE:
                                    case NOORDER:
                                    case NOSCHEMACHECK:
                                    case NOT:
                                    case NOWAIT:
                                    case NULL:
                                    case NULLS:
                                    case NUMBER:
                                    case NUMERIC:
                                    case NVARCHAR2:
                                    case OBJECT:
                                    case OF:
                                    case OFF:
                                    case OID:
                                    case OLD:
                                    case ON:
                                    case ONLY:
                                    case OPEN:
                                    case OPTION:
                                    case OR:
                                    case ORADATA:
                                    case ORDER:
                                    case ORDINALITY:
                                    case OSERROR:
                                    case OUT:
                                    case OUTER:
                                    case OVER:
                                    case OVERRIDING:
                                    case PACKAGE:
                                    case PARALLEL_ENABLE:
                                    case PARAMETERS:
                                    case PARENT:
                                    case PARTITION:
                                    case PASSING:
                                    case PATH:
                                    case PIPELINED:
                                    case PIVOT:
                                    case PLAN:
                                    case PLS_INTEGER:
                                    case POSITIVE:
                                    case POSITIVEN:
                                    case PRAGMA:
                                    case PRECEDING:
                                    case PRECISION:
                                    case PRESENT:
                                    case PRIOR:
                                    case PROCEDURE:
                                    case RAISE:
                                    case RANGE:
                                    case RAW:
                                    case READ:
                                    case REAL:
                                    case RECORD:
                                    case REF:
                                    case REFERENCE:
                                    case REFERENCING:
                                    case REJECT:
                                    case RELIES_ON:
                                    case RENAME:
                                    case REPLACE:
                                    case RESPECT:
                                    case RESTRICT_REFERENCES:
                                    case RESULT:
                                    case RESULT_CACHE:
                                    case RETURN:
                                    case RETURNING:
                                    case REUSE:
                                    case REVERSE:
                                    case REVOKE:
                                    case RIGHT:
                                    case ROLLBACK:
                                    case ROLLUP:
                                    case ROW:
                                    case ROWID:
                                    case ROWS:
                                    case RULES:
                                    case SAMPLE:
                                    case SAVE:
                                    case SAVEPOINT:
                                    case SCHEMA:
                                    case SCHEMACHECK:
                                    case SCN:
                                    case SEARCH:
                                    case SECOND:
                                    case SEED:
                                    case SEGMENT:
                                    case SELECT:
                                    case SELF:
                                    case SEQUENCE:
                                    case SEQUENTIAL:
                                    case SERIALIZABLE:
                                    case SERIALLY_REUSABLE:
                                    case SERVERERROR:
                                    case SESSIONTIMEZONE:
                                    case SET:
                                    case SETS:
                                    case SETTINGS:
                                    case SHARE:
                                    case SHOW:
                                    case SHUTDOWN:
                                    case SIBLINGS:
                                    case SIGNTYPE:
                                    case SIMPLE_INTEGER:
                                    case SINGLE:
                                    case SIZE:
                                    case SKIP_:
                                    case SMALLINT:
                                    case SNAPSHOT:
                                    case SOME:
                                    case SPECIFICATION:
                                    case SQLDATA:
                                    case SQLERROR:
                                    case SQL_PERCENT_ROWCOUNT:
                                    case STANDALONE:
                                    case START:
                                    case STARTUP:
                                    case STATEMENT:
                                    case STATEMENT_ID:
                                    case STATIC:
                                    case STATISTICS:
                                    case STRING:
                                    case SUBMULTISET:
                                    case SUBPARTITION:
                                    case SUBSTITUTABLE:
                                    case SUBTYPE:
                                    case SUCCESS:
                                    case SUSPEND:
                                    case TABLE:
                                    case THE:
                                    case THEN:
                                    case TIME:
                                    case TIMESTAMP:
                                    case TIMESTAMP_LTZ_UNCONSTRAINED:
                                    case TIMESTAMP_TZ_UNCONSTRAINED:
                                    case TIMESTAMP_UNCONSTRAINED:
                                    case TIMEZONE_ABBR:
                                    case TIMEZONE_HOUR:
                                    case TIMEZONE_MINUTE:
                                    case TIMEZONE_REGION:
                                    case TO:
                                    case TO_CHAR:
                                    case TRAILING:
                                    case TRANSACTION:
                                    case TRANSLATE:
                                    case TREAT:
                                    case TRIGGER:
                                    case TRIM:
                                    case TRUE:
                                    case TRUNCATE:
                                    case TYPE:
                                    case UNBOUNDED:
                                    case UNDER:
                                    case UNION:
                                    case UNIQUE:
                                    case UNLIMITED:
                                    case UNPIVOT:
                                    case UNTIL:
                                    case UPDATE:
                                    case UPDATED:
                                    case UPSERT:
                                    case UROWID:
                                    case USE:
                                    case USING:
                                    case VALIDATE:
                                    case VALUE:
                                    case VALUES:
                                    case VARCHAR:
                                    case VARCHAR2:
                                    case VARIABLE:
                                    case VARRAY:
                                    case VARYING:
                                    case VERSION:
                                    case VERSIONS:
                                    case WAIT:
                                    case WARNING:
                                    case WELLFORMED:
                                    case WHEN:
                                    case WHENEVER:
                                    case WHERE:
                                    case WHILE:
                                    case WITH:
                                    case WITHIN:
                                    case WORK:
                                    case WRITE:
                                    case XML:
                                    case XMLAGG:
                                    case XMLATTRIBUTES:
                                    case XMLCAST:
                                    case XMLCOLATTVAL:
                                    case XMLELEMENT:
                                    case XMLEXISTS:
                                    case XMLFOREST:
                                    case XMLNAMESPACES:
                                    case XMLPARSE:
                                    case XMLPI:
                                    case XMLQUERY:
                                    case XMLROOT:
                                    case XMLSERIALIZE:
                                    case XMLTABLE:
                                    case YEAR:
                                    case YES:
                                    case YMINTERVAL_UNCONSTRAINED:
                                    case ZONE:
                                    case PREDICTION:
                                    case PREDICTION_BOUNDS:
                                    case PREDICTION_COST:
                                    case PREDICTION_DETAILS:
                                    case PREDICTION_PROBABILITY:
                                    case PREDICTION_SET:
                                    case CUME_DIST:
                                    case DENSE_RANK:
                                    case LISTAGG:
                                    case PERCENT_RANK:
                                    case PERCENTILE_CONT:
                                    case PERCENTILE_DISC:
                                    case RANK:
                                    case AVG:
                                    case CORR:
                                    case LAG:
                                    case LEAD:
                                    case MAX:
                                    case MEDIAN:
                                    case MIN:
                                    case NTILE:
                                    case RATIO_TO_REPORT:
                                    case ROW_NUMBER:
                                    case SUM:
                                    case VARIANCE:
                                    case REGR_:
                                    case STDDEV:
                                    case VAR_:
                                    case COVAR_:
                                    case DELIMITED_ID:
                                    case BINDVAR:
                                    case COLON:
                                    case INTRODUCER:
                                    case REGULAR_ID:
                                    {
                                        setState(2550);
                                        variable_name();
                                    }
                                    break;
                                    case UNSIGNED_INTEGER:
                                    case APPROXIMATE_NUM_LIT:
                                    {
                                        setState(2551);
                                        numeric();
                                    }
                                    break;
                                    default:
                                        throw new NoViableAltException(this);
                                }
                            }
                        }

                    }
                    break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Open_for_statementContext extends ParserRuleContext {
        public TerminalNode OPEN() { return getToken(PlSqlParser.OPEN, 0); }
        public Variable_nameContext variable_name() {
            return getRuleContext(Variable_nameContext.class,0);
        }
        public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
        public Select_statementContext select_statement() {
            return getRuleContext(Select_statementContext.class,0);
        }
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class,0);
        }
        public Using_clauseContext using_clause() {
            return getRuleContext(Using_clauseContext.class,0);
        }
        public Open_for_statementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_open_for_statement; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterOpen_for_statement(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitOpen_for_statement(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitOpen_for_statement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Open_for_statementContext open_for_statement() throws RecognitionException {
        Open_for_statementContext _localctx = new Open_for_statementContext(_ctx, getState());
        enterRule(_localctx, 298, RULE_open_for_statement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2558);
                match(OPEN);
                setState(2559);
                variable_name();
                setState(2560);
                match(FOR);
                setState(2563);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,254,_ctx) ) {
                    case 1:
                    {
                        setState(2561);
                        select_statement();
                    }
                    break;
                    case 2:
                    {
                        setState(2562);
                        expression();
                    }
                    break;
                }
                setState(2566);
                _la = _input.LA(1);
                if (_la==USING) {
                    {
                        setState(2565);
                        using_clause();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Transaction_control_statementsContext extends ParserRuleContext {
        public Set_transaction_commandContext set_transaction_command() {
            return getRuleContext(Set_transaction_commandContext.class,0);
        }
        public Set_constraint_commandContext set_constraint_command() {
            return getRuleContext(Set_constraint_commandContext.class,0);
        }
        public Commit_statementContext commit_statement() {
            return getRuleContext(Commit_statementContext.class,0);
        }
        public Rollback_statementContext rollback_statement() {
            return getRuleContext(Rollback_statementContext.class,0);
        }
        public Savepoint_statementContext savepoint_statement() {
            return getRuleContext(Savepoint_statementContext.class,0);
        }
        public Transaction_control_statementsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_transaction_control_statements; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTransaction_control_statements(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTransaction_control_statements(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTransaction_control_statements(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Transaction_control_statementsContext transaction_control_statements() throws RecognitionException {
        Transaction_control_statementsContext _localctx = new Transaction_control_statementsContext(_ctx, getState());
        enterRule(_localctx, 300, RULE_transaction_control_statements);
        try {
            setState(2573);
            _errHandler.sync(this);
            switch ( getInterpreter().adaptivePredict(_input,256,_ctx) ) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2568);
                    set_transaction_command();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2569);
                    set_constraint_command();
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(2570);
                    commit_statement();
                }
                break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                {
                    setState(2571);
                    rollback_statement();
                }
                break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                {
                    setState(2572);
                    savepoint_statement();
                }
                break;
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Set_transaction_commandContext extends ParserRuleContext {
        public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
        public TerminalNode TRANSACTION() { return getToken(PlSqlParser.TRANSACTION, 0); }
        public TerminalNode READ() { return getToken(PlSqlParser.READ, 0); }
        public TerminalNode ISOLATION() { return getToken(PlSqlParser.ISOLATION, 0); }
        public TerminalNode LEVEL() { return getToken(PlSqlParser.LEVEL, 0); }
        public TerminalNode USE() { return getToken(PlSqlParser.USE, 0); }
        public TerminalNode ROLLBACK() { return getToken(PlSqlParser.ROLLBACK, 0); }
        public TerminalNode SEGMENT() { return getToken(PlSqlParser.SEGMENT, 0); }
        public Rollback_segment_nameContext rollback_segment_name() {
            return getRuleContext(Rollback_segment_nameContext.class,0);
        }
        public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
        public Quoted_stringContext quoted_string() {
            return getRuleContext(Quoted_stringContext.class,0);
        }
        public TerminalNode ONLY() { return getToken(PlSqlParser.ONLY, 0); }
        public TerminalNode WRITE() { return getToken(PlSqlParser.WRITE, 0); }
        public TerminalNode SERIALIZABLE() { return getToken(PlSqlParser.SERIALIZABLE, 0); }
        public TerminalNode COMMITTED() { return getToken(PlSqlParser.COMMITTED, 0); }
        public Set_transaction_commandContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_set_transaction_command; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSet_transaction_command(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSet_transaction_command(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSet_transaction_command(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Set_transaction_commandContext set_transaction_command() throws RecognitionException {
        Set_transaction_commandContext _localctx = new Set_transaction_commandContext(_ctx, getState());
        enterRule(_localctx, 302, RULE_set_transaction_command);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2575);
                match(SET);
                setState(2576);
                match(TRANSACTION);
                setState(2590);
                switch (_input.LA(1)) {
                    case READ:
                    {
                        setState(2577);
                        match(READ);
                        setState(2578);
                        _la = _input.LA(1);
                        if ( !(_la==ONLY || _la==WRITE) ) {
                            _errHandler.recoverInline(this);
                        } else {
                            consume();
                        }
                    }
                    break;
                    case ISOLATION:
                    {
                        setState(2579);
                        match(ISOLATION);
                        setState(2580);
                        match(LEVEL);
                        setState(2584);
                        switch (_input.LA(1)) {
                            case SERIALIZABLE:
                            {
                                setState(2581);
                                match(SERIALIZABLE);
                            }
                            break;
                            case READ:
                            {
                                setState(2582);
                                match(READ);
                                setState(2583);
                                match(COMMITTED);
                            }
                            break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    break;
                    case USE:
                    {
                        setState(2586);
                        match(USE);
                        setState(2587);
                        match(ROLLBACK);
                        setState(2588);
                        match(SEGMENT);
                        setState(2589);
                        rollback_segment_name();
                    }
                    break;
                    case NAME:
                    case SAVE:
                    case SEMICOLON:
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
                setState(2594);
                _la = _input.LA(1);
                if (_la==NAME) {
                    {
                        setState(2592);
                        match(NAME);
                        setState(2593);
                        quoted_string();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Set_constraint_commandContext extends ParserRuleContext {
        public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
        public TerminalNode CONSTRAINT() { return getToken(PlSqlParser.CONSTRAINT, 0); }
        public TerminalNode CONSTRAINTS() { return getToken(PlSqlParser.CONSTRAINTS, 0); }
        public TerminalNode IMMEDIATE() { return getToken(PlSqlParser.IMMEDIATE, 0); }
        public TerminalNode DEFERRED() { return getToken(PlSqlParser.DEFERRED, 0); }
        public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
        public List<Constraint_nameContext> constraint_name() {
            return getRuleContexts(Constraint_nameContext.class);
        }
        public Constraint_nameContext constraint_name(int i) {
            return getRuleContext(Constraint_nameContext.class,i);
        }
        public Set_constraint_commandContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_set_constraint_command; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSet_constraint_command(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSet_constraint_command(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSet_constraint_command(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Set_constraint_commandContext set_constraint_command() throws RecognitionException {
        Set_constraint_commandContext _localctx = new Set_constraint_commandContext(_ctx, getState());
        enterRule(_localctx, 304, RULE_set_constraint_command);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2596);
                match(SET);
                setState(2597);
                _la = _input.LA(1);
                if ( !(_la==CONSTRAINT || _la==CONSTRAINTS) ) {
                    _errHandler.recoverInline(this);
                } else {
                    consume();
                }
                setState(2607);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,261,_ctx) ) {
                    case 1:
                    {
                        setState(2598);
                        match(ALL);
                    }
                    break;
                    case 2:
                    {
                        setState(2599);
                        constraint_name();
                        setState(2604);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la==COMMA) {
                            {
                                {
                                    setState(2600);
                                    match(COMMA);
                                    setState(2601);
                                    constraint_name();
                                }
                            }
                            setState(2606);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                    }
                    break;
                }
                setState(2609);
                _la = _input.LA(1);
                if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
                    _errHandler.recoverInline(this);
                } else {
                    consume();
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Commit_statementContext extends ParserRuleContext {
        public TerminalNode COMMIT() { return getToken(PlSqlParser.COMMIT, 0); }
        public TerminalNode WORK() { return getToken(PlSqlParser.WORK, 0); }
        public TerminalNode COMMENT() { return getToken(PlSqlParser.COMMENT, 0); }
        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }
        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class,i);
        }
        public TerminalNode FORCE() { return getToken(PlSqlParser.FORCE, 0); }
        public Write_clauseContext write_clause() {
            return getRuleContext(Write_clauseContext.class,0);
        }
        public TerminalNode CORRUPT_XID() { return getToken(PlSqlParser.CORRUPT_XID, 0); }
        public TerminalNode CORRUPT_XID_ALL() { return getToken(PlSqlParser.CORRUPT_XID_ALL, 0); }
        public Commit_statementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_commit_statement; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCommit_statement(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCommit_statement(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCommit_statement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Commit_statementContext commit_statement() throws RecognitionException {
        Commit_statementContext _localctx = new Commit_statementContext(_ctx, getState());
        enterRule(_localctx, 306, RULE_commit_statement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2611);
                match(COMMIT);
                setState(2613);
                _la = _input.LA(1);
                if (_la==WORK) {
                    {
                        setState(2612);
                        match(WORK);
                    }
                }

                setState(2628);
                switch (_input.LA(1)) {
                    case COMMENT:
                    {
                        setState(2615);
                        match(COMMENT);
                        setState(2616);
                        expression();
                    }
                    break;
                    case FORCE:
                    {
                        setState(2617);
                        match(FORCE);
                        setState(2626);
                        _errHandler.sync(this);
                        switch ( getInterpreter().adaptivePredict(_input,264,_ctx) ) {
                            case 1:
                            {
                                setState(2618);
                                match(CORRUPT_XID);
                                setState(2619);
                                expression();
                            }
                            break;
                            case 2:
                            {
                                setState(2620);
                                match(CORRUPT_XID_ALL);
                            }
                            break;
                            case 3:
                            {
                                setState(2621);
                                expression();
                                setState(2624);
                                _la = _input.LA(1);
                                if (_la==COMMA) {
                                    {
                                        setState(2622);
                                        match(COMMA);
                                        setState(2623);
                                        expression();
                                    }
                                }

                            }
                            break;
                        }
                    }
                    break;
                    case SAVE:
                    case WRITE:
                    case SEMICOLON:
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
                setState(2631);
                _la = _input.LA(1);
                if (_la==WRITE) {
                    {
                        setState(2630);
                        write_clause();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Write_clauseContext extends ParserRuleContext {
        public TerminalNode WRITE() { return getToken(PlSqlParser.WRITE, 0); }
        public TerminalNode WAIT() { return getToken(PlSqlParser.WAIT, 0); }
        public TerminalNode NOWAIT() { return getToken(PlSqlParser.NOWAIT, 0); }
        public TerminalNode IMMEDIATE() { return getToken(PlSqlParser.IMMEDIATE, 0); }
        public TerminalNode BATCH() { return getToken(PlSqlParser.BATCH, 0); }
        public Write_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_write_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterWrite_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitWrite_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitWrite_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Write_clauseContext write_clause() throws RecognitionException {
        Write_clauseContext _localctx = new Write_clauseContext(_ctx, getState());
        enterRule(_localctx, 308, RULE_write_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2633);
                match(WRITE);
                setState(2635);
                _la = _input.LA(1);
                if (_la==NOWAIT || _la==WAIT) {
                    {
                        setState(2634);
                        _la = _input.LA(1);
                        if ( !(_la==NOWAIT || _la==WAIT) ) {
                            _errHandler.recoverInline(this);
                        } else {
                            consume();
                        }
                    }
                }

                setState(2638);
                _la = _input.LA(1);
                if (_la==BATCH || _la==IMMEDIATE) {
                    {
                        setState(2637);
                        _la = _input.LA(1);
                        if ( !(_la==BATCH || _la==IMMEDIATE) ) {
                            _errHandler.recoverInline(this);
                        } else {
                            consume();
                        }
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Rollback_statementContext extends ParserRuleContext {
        public TerminalNode ROLLBACK() { return getToken(PlSqlParser.ROLLBACK, 0); }
        public TerminalNode WORK() { return getToken(PlSqlParser.WORK, 0); }
        public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
        public Savepoint_nameContext savepoint_name() {
            return getRuleContext(Savepoint_nameContext.class,0);
        }
        public TerminalNode FORCE() { return getToken(PlSqlParser.FORCE, 0); }
        public Quoted_stringContext quoted_string() {
            return getRuleContext(Quoted_stringContext.class,0);
        }
        public TerminalNode SAVEPOINT() { return getToken(PlSqlParser.SAVEPOINT, 0); }
        public Rollback_statementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_rollback_statement; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterRollback_statement(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitRollback_statement(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitRollback_statement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Rollback_statementContext rollback_statement() throws RecognitionException {
        Rollback_statementContext _localctx = new Rollback_statementContext(_ctx, getState());
        enterRule(_localctx, 310, RULE_rollback_statement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2640);
                match(ROLLBACK);
                setState(2642);
                _la = _input.LA(1);
                if (_la==WORK) {
                    {
                        setState(2641);
                        match(WORK);
                    }
                }

                setState(2651);
                switch (_input.LA(1)) {
                    case TO:
                    {
                        setState(2644);
                        match(TO);
                        setState(2646);
                        _errHandler.sync(this);
                        switch ( getInterpreter().adaptivePredict(_input,270,_ctx) ) {
                            case 1:
                            {
                                setState(2645);
                                match(SAVEPOINT);
                            }
                            break;
                        }
                        setState(2648);
                        savepoint_name();
                    }
                    break;
                    case FORCE:
                    {
                        setState(2649);
                        match(FORCE);
                        setState(2650);
                        quoted_string();
                    }
                    break;
                    case SAVE:
                    case SEMICOLON:
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Savepoint_statementContext extends ParserRuleContext {
        public TerminalNode SAVEPOINT() { return getToken(PlSqlParser.SAVEPOINT, 0); }
        public Savepoint_nameContext savepoint_name() {
            return getRuleContext(Savepoint_nameContext.class,0);
        }
        public Savepoint_statementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_savepoint_statement; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSavepoint_statement(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSavepoint_statement(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSavepoint_statement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Savepoint_statementContext savepoint_statement() throws RecognitionException {
        Savepoint_statementContext _localctx = new Savepoint_statementContext(_ctx, getState());
        enterRule(_localctx, 312, RULE_savepoint_statement);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2653);
                match(SAVEPOINT);
                setState(2654);
                savepoint_name();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Explain_statementContext extends ParserRuleContext {
        public TerminalNode EXPLAIN() { return getToken(PlSqlParser.EXPLAIN, 0); }
        public TerminalNode PLAN() { return getToken(PlSqlParser.PLAN, 0); }
        public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
        public Select_statementContext select_statement() {
            return getRuleContext(Select_statementContext.class,0);
        }
        public Update_statementContext update_statement() {
            return getRuleContext(Update_statementContext.class,0);
        }
        public Delete_statementContext delete_statement() {
            return getRuleContext(Delete_statementContext.class,0);
        }
        public Insert_statementContext insert_statement() {
            return getRuleContext(Insert_statementContext.class,0);
        }
        public Merge_statementContext merge_statement() {
            return getRuleContext(Merge_statementContext.class,0);
        }
        public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
        public TerminalNode STATEMENT_ID() { return getToken(PlSqlParser.STATEMENT_ID, 0); }
        public Quoted_stringContext quoted_string() {
            return getRuleContext(Quoted_stringContext.class,0);
        }
        public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
        public Tableview_nameContext tableview_name() {
            return getRuleContext(Tableview_nameContext.class,0);
        }
        public Explain_statementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_explain_statement; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterExplain_statement(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitExplain_statement(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitExplain_statement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Explain_statementContext explain_statement() throws RecognitionException {
        Explain_statementContext _localctx = new Explain_statementContext(_ctx, getState());
        enterRule(_localctx, 314, RULE_explain_statement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2656);
                match(EXPLAIN);
                setState(2657);
                match(PLAN);
                setState(2662);
                _la = _input.LA(1);
                if (_la==SET) {
                    {
                        setState(2658);
                        match(SET);
                        setState(2659);
                        match(STATEMENT_ID);
                        setState(2660);
                        match(EQUALS_OP);
                        setState(2661);
                        quoted_string();
                    }
                }

                setState(2666);
                _la = _input.LA(1);
                if (_la==INTO) {
                    {
                        setState(2664);
                        match(INTO);
                        setState(2665);
                        tableview_name();
                    }
                }

                setState(2668);
                match(FOR);
                setState(2674);
                switch (_input.LA(1)) {
                    case SELECT:
                    case WITH:
                    case LEFT_PAREN:
                    {
                        setState(2669);
                        select_statement();
                    }
                    break;
                    case UPDATE:
                    {
                        setState(2670);
                        update_statement();
                    }
                    break;
                    case DELETE:
                    {
                        setState(2671);
                        delete_statement();
                    }
                    break;
                    case INSERT:
                    {
                        setState(2672);
                        insert_statement();
                    }
                    break;
                    case MERGE:
                    {
                        setState(2673);
                        merge_statement();
                    }
                    break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Select_statementContext extends ParserRuleContext {
        public SubqueryContext subquery() {
            return getRuleContext(SubqueryContext.class,0);
        }
        public List<For_update_clauseContext> for_update_clause() {
            return getRuleContexts(For_update_clauseContext.class);
        }
        public For_update_clauseContext for_update_clause(int i) {
            return getRuleContext(For_update_clauseContext.class,i);
        }
        public List<Order_by_clauseContext> order_by_clause() {
            return getRuleContexts(Order_by_clauseContext.class);
        }
        public Order_by_clauseContext order_by_clause(int i) {
            return getRuleContext(Order_by_clauseContext.class,i);
        }
        public Select_statementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_select_statement; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSelect_statement(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSelect_statement(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSelect_statement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Select_statementContext select_statement() throws RecognitionException {
        Select_statementContext _localctx = new Select_statementContext(_ctx, getState());
        enterRule(_localctx, 316, RULE_select_statement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2676);
                subquery();
                setState(2681);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==FOR || _la==ORDER) {
                    {
                        setState(2679);
                        switch (_input.LA(1)) {
                            case FOR:
                            {
                                setState(2677);
                                for_update_clause();
                            }
                            break;
                            case ORDER:
                            {
                                setState(2678);
                                order_by_clause();
                            }
                            break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    setState(2683);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Subquery_factoring_clauseContext extends ParserRuleContext {
        public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
        public List<Factoring_elementContext> factoring_element() {
            return getRuleContexts(Factoring_elementContext.class);
        }
        public Factoring_elementContext factoring_element(int i) {
            return getRuleContext(Factoring_elementContext.class,i);
        }
        public Subquery_factoring_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_subquery_factoring_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSubquery_factoring_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSubquery_factoring_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSubquery_factoring_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Subquery_factoring_clauseContext subquery_factoring_clause() throws RecognitionException {
        Subquery_factoring_clauseContext _localctx = new Subquery_factoring_clauseContext(_ctx, getState());
        enterRule(_localctx, 318, RULE_subquery_factoring_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2684);
                match(WITH);
                setState(2685);
                factoring_element();
                setState(2690);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==COMMA) {
                    {
                        {
                            setState(2686);
                            match(COMMA);
                            setState(2687);
                            factoring_element();
                        }
                    }
                    setState(2692);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Factoring_elementContext extends ParserRuleContext {
        public Query_nameContext query_name() {
            return getRuleContext(Query_nameContext.class,0);
        }
        public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
        public SubqueryContext subquery() {
            return getRuleContext(SubqueryContext.class,0);
        }
        public List<Column_nameContext> column_name() {
            return getRuleContexts(Column_nameContext.class);
        }
        public Column_nameContext column_name(int i) {
            return getRuleContext(Column_nameContext.class,i);
        }
        public Order_by_clauseContext order_by_clause() {
            return getRuleContext(Order_by_clauseContext.class,0);
        }
        public Search_clauseContext search_clause() {
            return getRuleContext(Search_clauseContext.class,0);
        }
        public Cycle_clauseContext cycle_clause() {
            return getRuleContext(Cycle_clauseContext.class,0);
        }
        public Factoring_elementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_factoring_element; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFactoring_element(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFactoring_element(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFactoring_element(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Factoring_elementContext factoring_element() throws RecognitionException {
        Factoring_elementContext _localctx = new Factoring_elementContext(_ctx, getState());
        enterRule(_localctx, 320, RULE_factoring_element);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2693);
                query_name();
                setState(2705);
                _la = _input.LA(1);
                if (_la==LEFT_PAREN) {
                    {
                        setState(2694);
                        match(LEFT_PAREN);
                        setState(2695);
                        column_name();
                        setState(2700);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la==COMMA) {
                            {
                                {
                                    setState(2696);
                                    match(COMMA);
                                    setState(2697);
                                    column_name();
                                }
                            }
                            setState(2702);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                        setState(2703);
                        match(RIGHT_PAREN);
                    }
                }

                setState(2707);
                match(AS);
                setState(2708);
                match(LEFT_PAREN);
                setState(2709);
                subquery();
                setState(2711);
                _la = _input.LA(1);
                if (_la==ORDER) {
                    {
                        setState(2710);
                        order_by_clause();
                    }
                }

                setState(2713);
                match(RIGHT_PAREN);
                setState(2715);
                _la = _input.LA(1);
                if (_la==SEARCH) {
                    {
                        setState(2714);
                        search_clause();
                    }
                }

                setState(2718);
                _la = _input.LA(1);
                if (_la==CYCLE) {
                    {
                        setState(2717);
                        cycle_clause();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Search_clauseContext extends ParserRuleContext {
        public TerminalNode SEARCH() { return getToken(PlSqlParser.SEARCH, 0); }
        public List<TerminalNode> FIRST() { return getTokens(PlSqlParser.FIRST); }
        public TerminalNode FIRST(int i) {
            return getToken(PlSqlParser.FIRST, i);
        }
        public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
        public List<Column_nameContext> column_name() {
            return getRuleContexts(Column_nameContext.class);
        }
        public Column_nameContext column_name(int i) {
            return getRuleContext(Column_nameContext.class,i);
        }
        public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
        public TerminalNode DEPTH() { return getToken(PlSqlParser.DEPTH, 0); }
        public TerminalNode BREADTH() { return getToken(PlSqlParser.BREADTH, 0); }
        public List<TerminalNode> ASC() { return getTokens(PlSqlParser.ASC); }
        public TerminalNode ASC(int i) {
            return getToken(PlSqlParser.ASC, i);
        }
        public List<TerminalNode> DESC() { return getTokens(PlSqlParser.DESC); }
        public TerminalNode DESC(int i) {
            return getToken(PlSqlParser.DESC, i);
        }
        public List<TerminalNode> NULLS() { return getTokens(PlSqlParser.NULLS); }
        public TerminalNode NULLS(int i) {
            return getToken(PlSqlParser.NULLS, i);
        }
        public List<TerminalNode> LAST() { return getTokens(PlSqlParser.LAST); }
        public TerminalNode LAST(int i) {
            return getToken(PlSqlParser.LAST, i);
        }
        public Search_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_search_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSearch_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSearch_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSearch_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Search_clauseContext search_clause() throws RecognitionException {
        Search_clauseContext _localctx = new Search_clauseContext(_ctx, getState());
        enterRule(_localctx, 322, RULE_search_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2720);
                match(SEARCH);
                setState(2721);
                _la = _input.LA(1);
                if ( !(_la==BREADTH || _la==DEPTH) ) {
                    _errHandler.recoverInline(this);
                } else {
                    consume();
                }
                setState(2722);
                match(FIRST);
                setState(2723);
                match(BY);
                setState(2724);
                column_name();
                setState(2726);
                _la = _input.LA(1);
                if (_la==ASC) {
                    {
                        setState(2725);
                        match(ASC);
                    }
                }

                setState(2729);
                _la = _input.LA(1);
                if (_la==DESC) {
                    {
                        setState(2728);
                        match(DESC);
                    }
                }

                setState(2733);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,285,_ctx) ) {
                    case 1:
                    {
                        setState(2731);
                        match(NULLS);
                        setState(2732);
                        match(FIRST);
                    }
                    break;
                }
                setState(2737);
                _la = _input.LA(1);
                if (_la==NULLS) {
                    {
                        setState(2735);
                        match(NULLS);
                        setState(2736);
                        match(LAST);
                    }
                }

                setState(2757);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==COMMA) {
                    {
                        {
                            setState(2739);
                            match(COMMA);
                            setState(2740);
                            column_name();
                            setState(2742);
                            _la = _input.LA(1);
                            if (_la==ASC) {
                                {
                                    setState(2741);
                                    match(ASC);
                                }
                            }

                            setState(2745);
                            _la = _input.LA(1);
                            if (_la==DESC) {
                                {
                                    setState(2744);
                                    match(DESC);
                                }
                            }

                            setState(2749);
                            _errHandler.sync(this);
                            switch ( getInterpreter().adaptivePredict(_input,289,_ctx) ) {
                                case 1:
                                {
                                    setState(2747);
                                    match(NULLS);
                                    setState(2748);
                                    match(FIRST);
                                }
                                break;
                            }
                            setState(2753);
                            _la = _input.LA(1);
                            if (_la==NULLS) {
                                {
                                    setState(2751);
                                    match(NULLS);
                                    setState(2752);
                                    match(LAST);
                                }
                            }

                        }
                    }
                    setState(2759);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(2760);
                match(SET);
                setState(2761);
                column_name();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Cycle_clauseContext extends ParserRuleContext {
        public TerminalNode CYCLE() { return getToken(PlSqlParser.CYCLE, 0); }
        public List<Column_nameContext> column_name() {
            return getRuleContexts(Column_nameContext.class);
        }
        public Column_nameContext column_name(int i) {
            return getRuleContext(Column_nameContext.class,i);
        }
        public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
        public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }
        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class,i);
        }
        public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
        public Cycle_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_cycle_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCycle_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCycle_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCycle_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Cycle_clauseContext cycle_clause() throws RecognitionException {
        Cycle_clauseContext _localctx = new Cycle_clauseContext(_ctx, getState());
        enterRule(_localctx, 324, RULE_cycle_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2763);
                match(CYCLE);
                setState(2764);
                column_name();
                setState(2769);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==COMMA) {
                    {
                        {
                            setState(2765);
                            match(COMMA);
                            setState(2766);
                            column_name();
                        }
                    }
                    setState(2771);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(2772);
                match(SET);
                setState(2773);
                column_name();
                setState(2774);
                match(TO);
                setState(2775);
                expression();
                setState(2776);
                match(DEFAULT);
                setState(2777);
                expression();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class SubqueryContext extends ParserRuleContext {
        public Subquery_basic_elementsContext subquery_basic_elements() {
            return getRuleContext(Subquery_basic_elementsContext.class,0);
        }
        public List<Subquery_operation_partContext> subquery_operation_part() {
            return getRuleContexts(Subquery_operation_partContext.class);
        }
        public Subquery_operation_partContext subquery_operation_part(int i) {
            return getRuleContext(Subquery_operation_partContext.class,i);
        }
        public SubqueryContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_subquery; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSubquery(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSubquery(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSubquery(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SubqueryContext subquery() throws RecognitionException {
        SubqueryContext _localctx = new SubqueryContext(_ctx, getState());
        enterRule(_localctx, 326, RULE_subquery);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2779);
                subquery_basic_elements();
                setState(2783);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==INTERSECT || _la==MINUS || _la==UNION) {
                    {
                        {
                            setState(2780);
                            subquery_operation_part();
                        }
                    }
                    setState(2785);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Subquery_operation_partContext extends ParserRuleContext {
        public Subquery_basic_elementsContext subquery_basic_elements() {
            return getRuleContext(Subquery_basic_elementsContext.class,0);
        }
        public TerminalNode UNION() { return getToken(PlSqlParser.UNION, 0); }
        public TerminalNode INTERSECT() { return getToken(PlSqlParser.INTERSECT, 0); }
        public TerminalNode MINUS() { return getToken(PlSqlParser.MINUS, 0); }
        public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
        public Subquery_operation_partContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_subquery_operation_part; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSubquery_operation_part(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSubquery_operation_part(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSubquery_operation_part(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Subquery_operation_partContext subquery_operation_part() throws RecognitionException {
        Subquery_operation_partContext _localctx = new Subquery_operation_partContext(_ctx, getState());
        enterRule(_localctx, 328, RULE_subquery_operation_part);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2792);
                switch (_input.LA(1)) {
                    case UNION:
                    {
                        setState(2786);
                        match(UNION);
                        setState(2788);
                        _la = _input.LA(1);
                        if (_la==ALL) {
                            {
                                setState(2787);
                                match(ALL);
                            }
                        }

                    }
                    break;
                    case INTERSECT:
                    {
                        setState(2790);
                        match(INTERSECT);
                    }
                    break;
                    case MINUS:
                    {
                        setState(2791);
                        match(MINUS);
                    }
                    break;
                    default:
                        throw new NoViableAltException(this);
                }
                setState(2794);
                subquery_basic_elements();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Subquery_basic_elementsContext extends ParserRuleContext {
        public Query_blockContext query_block() {
            return getRuleContext(Query_blockContext.class,0);
        }
        public SubqueryContext subquery() {
            return getRuleContext(SubqueryContext.class,0);
        }
        public Subquery_basic_elementsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_subquery_basic_elements; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSubquery_basic_elements(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSubquery_basic_elements(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSubquery_basic_elements(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Subquery_basic_elementsContext subquery_basic_elements() throws RecognitionException {
        Subquery_basic_elementsContext _localctx = new Subquery_basic_elementsContext(_ctx, getState());
        enterRule(_localctx, 330, RULE_subquery_basic_elements);
        try {
            setState(2801);
            switch (_input.LA(1)) {
                case SELECT:
                case WITH:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2796);
                    query_block();
                }
                break;
                case LEFT_PAREN:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2797);
                    match(LEFT_PAREN);
                    setState(2798);
                    subquery();
                    setState(2799);
                    match(RIGHT_PAREN);
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Query_blockContext extends ParserRuleContext {
        public TerminalNode SELECT() { return getToken(PlSqlParser.SELECT, 0); }
        public From_clauseContext from_clause() {
            return getRuleContext(From_clauseContext.class,0);
        }
        public List<Selected_elementContext> selected_element() {
            return getRuleContexts(Selected_elementContext.class);
        }
        public Selected_elementContext selected_element(int i) {
            return getRuleContext(Selected_elementContext.class,i);
        }
        public Subquery_factoring_clauseContext subquery_factoring_clause() {
            return getRuleContext(Subquery_factoring_clauseContext.class,0);
        }
        public Into_clauseContext into_clause() {
            return getRuleContext(Into_clauseContext.class,0);
        }
        public Where_clauseContext where_clause() {
            return getRuleContext(Where_clauseContext.class,0);
        }
        public Hierarchical_query_clauseContext hierarchical_query_clause() {
            return getRuleContext(Hierarchical_query_clauseContext.class,0);
        }
        public Group_by_clauseContext group_by_clause() {
            return getRuleContext(Group_by_clauseContext.class,0);
        }
        public Order_by_clauseContext order_by_clause() {
            return getRuleContext(Order_by_clauseContext.class,0);
        }
        public Model_clauseContext model_clause() {
            return getRuleContext(Model_clauseContext.class,0);
        }
        public TerminalNode DISTINCT() { return getToken(PlSqlParser.DISTINCT, 0); }
        public TerminalNode UNIQUE() { return getToken(PlSqlParser.UNIQUE, 0); }
        public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
        public Query_blockContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_query_block; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterQuery_block(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitQuery_block(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitQuery_block(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Query_blockContext query_block() throws RecognitionException {
        Query_blockContext _localctx = new Query_blockContext(_ctx, getState());
        enterRule(_localctx, 332, RULE_query_block);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2804);
                _la = _input.LA(1);
                if (_la==WITH) {
                    {
                        setState(2803);
                        subquery_factoring_clause();
                    }
                }

                setState(2806);
                match(SELECT);
                setState(2808);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,298,_ctx) ) {
                    case 1:
                    {
                        setState(2807);
                        _la = _input.LA(1);
                        if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
                            _errHandler.recoverInline(this);
                        } else {
                            consume();
                        }
                    }
                    break;
                }
                setState(2819);
                switch (_input.LA(1)) {
                    case ASTERISK:
                    {
                        setState(2810);
                        match(ASTERISK);
                    }
                    break;
                    case A_LETTER:
                    case ADD:
                    case AFTER:
                    case AGENT:
                    case AGGREGATE:
                    case ALL:
                    case ALTER:
                    case ANALYZE:
                    case AND:
                    case ANY:
                    case ARRAY:
                    case AS:
                    case ASC:
                    case ASSOCIATE:
                    case AT:
                    case ATTRIBUTE:
                    case AUDIT:
                    case AUTHID:
                    case AUTO:
                    case AUTOMATIC:
                    case AUTONOMOUS_TRANSACTION:
                    case BATCH:
                    case BEFORE:
                    case BEGIN:
                    case BETWEEN:
                    case BFILE:
                    case BINARY_DOUBLE:
                    case BINARY_FLOAT:
                    case BINARY_INTEGER:
                    case BLOB:
                    case BLOCK:
                    case BODY:
                    case BOOLEAN:
                    case BOTH:
                    case BREADTH:
                    case BULK:
                    case BY:
                    case BYTE:
                    case C_LETTER:
                    case CACHE:
                    case CALL:
                    case CANONICAL:
                    case CASCADE:
                    case CASE:
                    case CAST:
                    case CHAR:
                    case CHAR_CS:
                    case CHARACTER:
                    case CHECK:
                    case CHR:
                    case CLOB:
                    case CLOSE:
                    case CLUSTER:
                    case COLLECT:
                    case COLUMNS:
                    case COMMENT:
                    case COMMIT:
                    case COMMITTED:
                    case COMPATIBILITY:
                    case COMPILE:
                    case COMPOUND:
                    case CONNECT:
                    case CONNECT_BY_ROOT:
                    case CONSTANT:
                    case CONSTRAINT:
                    case CONSTRAINTS:
                    case CONSTRUCTOR:
                    case CONTENT:
                    case CONTEXT:
                    case CONTINUE:
                    case CONVERT:
                    case CORRUPT_XID:
                    case CORRUPT_XID_ALL:
                    case COST:
                    case COUNT:
                    case CREATE:
                    case CROSS:
                    case CUBE:
                    case CURRENT:
                    case CURRENT_USER:
                    case CURSOR:
                    case CUSTOMDATUM:
                    case CYCLE:
                    case DATA:
                    case DATABASE:
                    case DATE:
                    case DAY:
                    case DB_ROLE_CHANGE:
                    case DBTIMEZONE:
                    case DDL:
                    case DEBUG:
                    case DEC:
                    case DECIMAL:
                    case DECLARE:
                    case DECOMPOSE:
                    case DECREMENT:
                    case DEFAULT:
                    case DEFAULTS:
                    case DEFERRED:
                    case DEFINER:
                    case DELETE:
                    case DEPTH:
                    case DESC:
                    case DETERMINISTIC:
                    case DIMENSION:
                    case DISABLE:
                    case DISASSOCIATE:
                    case DISTINCT:
                    case DOCUMENT:
                    case DOUBLE:
                    case DROP:
                    case DSINTERVAL_UNCONSTRAINED:
                    case EACH:
                    case ELEMENT:
                    case ELSE:
                    case ELSIF:
                    case EMPTY:
                    case ENABLE:
                    case ENCODING:
                    case END:
                    case ENTITYESCAPING:
                    case ERRORS:
                    case ESCAPE:
                    case EXCEPT:
                    case EVALNAME:
                    case EXCEPTION:
                    case EXCEPTION_INIT:
                    case EXCEPTIONS:
                    case EXCLUDE:
                    case EXCLUSIVE:
                    case EXECUTE:
                    case EXISTS:
                    case EXIT:
                    case EXPLAIN:
                    case EXTERNAL:
                    case EXTRACT:
                    case FAILURE:
                    case FALSE:
                    case FETCH:
                    case FINAL:
                    case FIRST:
                    case FIRST_VALUE:
                    case FLOAT:
                    case FOLLOWING:
                    case FOLLOWS:
                    case FOR:
                    case FORALL:
                    case FORCE:
                    case FROM:
                    case FULL:
                    case FUNCTION:
                    case GOTO:
                    case GRANT:
                    case GROUP:
                    case GROUPING:
                    case HASH:
                    case HAVING:
                    case HIDE:
                    case HOUR:
                    case IF:
                    case IGNORE:
                    case IMMEDIATE:
                    case IN:
                    case INCLUDE:
                    case INCLUDING:
                    case INCREMENT:
                    case INDENT:
                    case INDEX:
                    case INDEXED:
                    case INDICATOR:
                    case INDICES:
                    case INFINITE:
                    case INLINE:
                    case INNER:
                    case INOUT:
                    case INSERT:
                    case INSTANTIABLE:
                    case INSTEAD:
                    case INT:
                    case INTEGER:
                    case INTERSECT:
                    case INTERVAL:
                    case INTO:
                    case INVALIDATE:
                    case IS:
                    case ISOLATION:
                    case ITERATE:
                    case JAVA:
                    case JOIN:
                    case KEEP:
                    case LANGUAGE:
                    case LAST:
                    case LAST_VALUE:
                    case LEADING:
                    case LEFT:
                    case LEVEL:
                    case LIBRARY:
                    case LIKE:
                    case LIKE2:
                    case LIKE4:
                    case LIKEC:
                    case LIMIT:
                    case LOCAL:
                    case LOCK:
                    case LOCKED:
                    case LOG:
                    case LOGOFF:
                    case LOGON:
                    case LONG:
                    case LOOP:
                    case MAIN:
                    case MAP:
                    case MATCHED:
                    case MAXVALUE:
                    case MEASURES:
                    case MEMBER:
                    case MERGE:
                    case MINUS:
                    case MINUTE:
                    case MINVALUE:
                    case MLSLABEL:
                    case MOD:
                    case MODE:
                    case MODEL:
                    case MODIFY:
                    case MONTH:
                    case MULTISET:
                    case NAME:
                    case NAN:
                    case NATURAL:
                    case NATURALN:
                    case NAV:
                    case NCHAR:
                    case NCHAR_CS:
                    case NCLOB:
                    case NESTED:
                    case NEW:
                    case NO:
                    case NOAUDIT:
                    case NOCACHE:
                    case NOCOPY:
                    case NOCYCLE:
                    case NOENTITYESCAPING:
                    case NOMAXVALUE:
                    case NOMINVALUE:
                    case NONE:
                    case NOORDER:
                    case NOSCHEMACHECK:
                    case NOT:
                    case NOWAIT:
                    case NULL:
                    case NULLS:
                    case NUMBER:
                    case NUMERIC:
                    case NVARCHAR2:
                    case OBJECT:
                    case OF:
                    case OFF:
                    case OID:
                    case OLD:
                    case ON:
                    case ONLY:
                    case OPEN:
                    case OPTION:
                    case OR:
                    case ORADATA:
                    case ORDER:
                    case ORDINALITY:
                    case OSERROR:
                    case OUT:
                    case OUTER:
                    case OVER:
                    case OVERRIDING:
                    case PACKAGE:
                    case PARALLEL_ENABLE:
                    case PARAMETERS:
                    case PARENT:
                    case PARTITION:
                    case PASSING:
                    case PATH:
                    case PIPELINED:
                    case PIVOT:
                    case PLAN:
                    case PLS_INTEGER:
                    case POSITIVE:
                    case POSITIVEN:
                    case PRAGMA:
                    case PRECEDING:
                    case PRECISION:
                    case PRESENT:
                    case PRIOR:
                    case PROCEDURE:
                    case RAISE:
                    case RANGE:
                    case RAW:
                    case READ:
                    case REAL:
                    case RECORD:
                    case REF:
                    case REFERENCE:
                    case REFERENCING:
                    case REJECT:
                    case RELIES_ON:
                    case RENAME:
                    case REPLACE:
                    case RESPECT:
                    case RESTRICT_REFERENCES:
                    case RESULT:
                    case RESULT_CACHE:
                    case RETURN:
                    case RETURNING:
                    case REUSE:
                    case REVERSE:
                    case REVOKE:
                    case RIGHT:
                    case ROLLBACK:
                    case ROLLUP:
                    case ROW:
                    case ROWID:
                    case ROWS:
                    case RULES:
                    case SAMPLE:
                    case SAVE:
                    case SAVEPOINT:
                    case SCHEMA:
                    case SCHEMACHECK:
                    case SCN:
                    case SEARCH:
                    case SECOND:
                    case SEED:
                    case SEGMENT:
                    case SELECT:
                    case SELF:
                    case SEQUENCE:
                    case SEQUENTIAL:
                    case SERIALIZABLE:
                    case SERIALLY_REUSABLE:
                    case SERVERERROR:
                    case SESSIONTIMEZONE:
                    case SET:
                    case SETS:
                    case SETTINGS:
                    case SHARE:
                    case SHOW:
                    case SHUTDOWN:
                    case SIBLINGS:
                    case SIGNTYPE:
                    case SIMPLE_INTEGER:
                    case SINGLE:
                    case SIZE:
                    case SKIP_:
                    case SMALLINT:
                    case SNAPSHOT:
                    case SOME:
                    case SPECIFICATION:
                    case SQLDATA:
                    case SQLERROR:
                    case SQL_PERCENT_ROWCOUNT:
                    case STANDALONE:
                    case START:
                    case STARTUP:
                    case STATEMENT:
                    case STATEMENT_ID:
                    case STATIC:
                    case STATISTICS:
                    case STRING:
                    case SUBMULTISET:
                    case SUBPARTITION:
                    case SUBSTITUTABLE:
                    case SUBTYPE:
                    case SUCCESS:
                    case SUSPEND:
                    case TABLE:
                    case THE:
                    case THEN:
                    case TIME:
                    case TIMESTAMP:
                    case TIMESTAMP_LTZ_UNCONSTRAINED:
                    case TIMESTAMP_TZ_UNCONSTRAINED:
                    case TIMESTAMP_UNCONSTRAINED:
                    case TIMEZONE_ABBR:
                    case TIMEZONE_HOUR:
                    case TIMEZONE_MINUTE:
                    case TIMEZONE_REGION:
                    case TO:
                    case TO_CHAR:
                    case TO_NUMBER:
                    case TRAILING:
                    case TRANSACTION:
                    case TRANSLATE:
                    case TREAT:
                    case TRIGGER:
                    case TRIM:
                    case TRUE:
                    case TRUNCATE:
                    case TYPE:
                    case UNBOUNDED:
                    case UNDER:
                    case UNION:
                    case UNIQUE:
                    case UNLIMITED:
                    case UNPIVOT:
                    case UNTIL:
                    case UPDATE:
                    case UPDATED:
                    case UPSERT:
                    case UROWID:
                    case USE:
                    case USING:
                    case VALIDATE:
                    case VALUE:
                    case VALUES:
                    case VARCHAR:
                    case VARCHAR2:
                    case VARIABLE:
                    case VARRAY:
                    case VARYING:
                    case VERSION:
                    case VERSIONS:
                    case WAIT:
                    case WARNING:
                    case WELLFORMED:
                    case WHEN:
                    case WHENEVER:
                    case WHERE:
                    case WHILE:
                    case WITH:
                    case WITHIN:
                    case WORK:
                    case WRITE:
                    case XML:
                    case XMLAGG:
                    case XMLATTRIBUTES:
                    case XMLCAST:
                    case XMLCOLATTVAL:
                    case XMLELEMENT:
                    case XMLEXISTS:
                    case XMLFOREST:
                    case XMLNAMESPACES:
                    case XMLPARSE:
                    case XMLPI:
                    case XMLQUERY:
                    case XMLROOT:
                    case XMLSERIALIZE:
                    case XMLTABLE:
                    case YEAR:
                    case YES:
                    case YMINTERVAL_UNCONSTRAINED:
                    case ZONE:
                    case PREDICTION:
                    case PREDICTION_BOUNDS:
                    case PREDICTION_COST:
                    case PREDICTION_DETAILS:
                    case PREDICTION_PROBABILITY:
                    case PREDICTION_SET:
                    case CUME_DIST:
                    case DENSE_RANK:
                    case LISTAGG:
                    case PERCENT_RANK:
                    case PERCENTILE_CONT:
                    case PERCENTILE_DISC:
                    case RANK:
                    case AVG:
                    case CORR:
                    case LAG:
                    case LEAD:
                    case MAX:
                    case MEDIAN:
                    case MIN:
                    case NTILE:
                    case RATIO_TO_REPORT:
                    case ROW_NUMBER:
                    case SUM:
                    case VARIANCE:
                    case REGR_:
                    case STDDEV:
                    case VAR_:
                    case COVAR_:
                    case NATIONAL_CHAR_STRING_LIT:
                    case UNSIGNED_INTEGER:
                    case APPROXIMATE_NUM_LIT:
                    case CHAR_STRING:
                    case DELIMITED_ID:
                    case LEFT_PAREN:
                    case PLUS_SIGN:
                    case MINUS_SIGN:
                    case BINDVAR:
                    case COLON:
                    case INTRODUCER:
                    case REGULAR_ID:
                    {
                        setState(2811);
                        selected_element();
                        setState(2816);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la==COMMA) {
                            {
                                {
                                    setState(2812);
                                    match(COMMA);
                                    setState(2813);
                                    selected_element();
                                }
                            }
                            setState(2818);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                    }
                    break;
                    default:
                        throw new NoViableAltException(this);
                }
                setState(2822);
                _la = _input.LA(1);
                if (_la==BULK || _la==INTO) {
                    {
                        setState(2821);
                        into_clause();
                    }
                }

                setState(2824);
                from_clause();
                setState(2826);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,302,_ctx) ) {
                    case 1:
                    {
                        setState(2825);
                        where_clause();
                    }
                    break;
                }
                setState(2829);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,303,_ctx) ) {
                    case 1:
                    {
                        setState(2828);
                        hierarchical_query_clause();
                    }
                    break;
                }
                setState(2832);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,304,_ctx) ) {
                    case 1:
                    {
                        setState(2831);
                        group_by_clause();
                    }
                    break;
                }
                setState(2835);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,305,_ctx) ) {
                    case 1:
                    {
                        setState(2834);
                        order_by_clause();
                    }
                    break;
                }
                setState(2838);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,306,_ctx) ) {
                    case 1:
                    {
                        setState(2837);
                        model_clause();
                    }
                    break;
                }
                setState(2841);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,307,_ctx) ) {
                    case 1:
                    {
                        setState(2840);
                        match(SEMICOLON);
                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Selected_elementContext extends ParserRuleContext {
        public Select_list_elementsContext select_list_elements() {
            return getRuleContext(Select_list_elementsContext.class,0);
        }
        public Column_aliasContext column_alias() {
            return getRuleContext(Column_aliasContext.class,0);
        }
        public Selected_elementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_selected_element; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSelected_element(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSelected_element(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSelected_element(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Selected_elementContext selected_element() throws RecognitionException {
        Selected_elementContext _localctx = new Selected_elementContext(_ctx, getState());
        enterRule(_localctx, 334, RULE_selected_element);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2843);
                select_list_elements();
                setState(2845);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,308,_ctx) ) {
                    case 1:
                    {
                        setState(2844);
                        column_alias();
                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class From_clauseContext extends ParserRuleContext {
        public TerminalNode FROM() { return getToken(PlSqlParser.FROM, 0); }
        public Table_ref_listContext table_ref_list() {
            return getRuleContext(Table_ref_listContext.class,0);
        }
        public From_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_from_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFrom_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFrom_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFrom_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final From_clauseContext from_clause() throws RecognitionException {
        From_clauseContext _localctx = new From_clauseContext(_ctx, getState());
        enterRule(_localctx, 336, RULE_from_clause);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2847);
                match(FROM);
                setState(2848);
                table_ref_list();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Select_list_elementsContext extends ParserRuleContext {
        public Tableview_nameContext tableview_name() {
            return getRuleContext(Tableview_nameContext.class,0);
        }
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class,0);
        }
        public Select_list_elementsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_select_list_elements; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSelect_list_elements(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSelect_list_elements(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSelect_list_elements(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Select_list_elementsContext select_list_elements() throws RecognitionException {
        Select_list_elementsContext _localctx = new Select_list_elementsContext(_ctx, getState());
        enterRule(_localctx, 338, RULE_select_list_elements);
        try {
            setState(2855);
            _errHandler.sync(this);
            switch ( getInterpreter().adaptivePredict(_input,309,_ctx) ) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2850);
                    tableview_name();
                    setState(2851);
                    match(PERIOD);
                    setState(2852);
                    match(ASTERISK);
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2854);
                    expression();
                }
                break;
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Table_ref_listContext extends ParserRuleContext {
        public List<Table_refContext> table_ref() {
            return getRuleContexts(Table_refContext.class);
        }
        public Table_refContext table_ref(int i) {
            return getRuleContext(Table_refContext.class,i);
        }
        public Table_ref_listContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_table_ref_list; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTable_ref_list(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTable_ref_list(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTable_ref_list(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Table_ref_listContext table_ref_list() throws RecognitionException {
        Table_ref_listContext _localctx = new Table_ref_listContext(_ctx, getState());
        enterRule(_localctx, 340, RULE_table_ref_list);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(2857);
                table_ref();
                setState(2862);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input,310,_ctx);
                while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
                    if ( _alt==1 ) {
                        {
                            {
                                setState(2858);
                                match(COMMA);
                                setState(2859);
                                table_ref();
                            }
                        }
                    }
                    setState(2864);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input,310,_ctx);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Table_refContext extends ParserRuleContext {
        public Table_ref_auxContext table_ref_aux() {
            return getRuleContext(Table_ref_auxContext.class,0);
        }
        public List<Join_clauseContext> join_clause() {
            return getRuleContexts(Join_clauseContext.class);
        }
        public Join_clauseContext join_clause(int i) {
            return getRuleContext(Join_clauseContext.class,i);
        }
        public Pivot_clauseContext pivot_clause() {
            return getRuleContext(Pivot_clauseContext.class,0);
        }
        public Unpivot_clauseContext unpivot_clause() {
            return getRuleContext(Unpivot_clauseContext.class,0);
        }
        public Table_refContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_table_ref; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTable_ref(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTable_ref(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTable_ref(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Table_refContext table_ref() throws RecognitionException {
        Table_refContext _localctx = new Table_refContext(_ctx, getState());
        enterRule(_localctx, 342, RULE_table_ref);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(2865);
                table_ref_aux();
                setState(2869);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input,311,_ctx);
                while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
                    if ( _alt==1 ) {
                        {
                            {
                                setState(2866);
                                join_clause();
                            }
                        }
                    }
                    setState(2871);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input,311,_ctx);
                }
                setState(2874);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,312,_ctx) ) {
                    case 1:
                    {
                        setState(2872);
                        pivot_clause();
                    }
                    break;
                    case 2:
                    {
                        setState(2873);
                        unpivot_clause();
                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Table_ref_auxContext extends ParserRuleContext {
        public Dml_table_expression_clauseContext dml_table_expression_clause() {
            return getRuleContext(Dml_table_expression_clauseContext.class,0);
        }
        public Table_refContext table_ref() {
            return getRuleContext(Table_refContext.class,0);
        }
        public TerminalNode ONLY() { return getToken(PlSqlParser.ONLY, 0); }
        public Xml_tableContext xml_table() {
            return getRuleContext(Xml_tableContext.class,0);
        }
        public List<Flashback_query_clauseContext> flashback_query_clause() {
            return getRuleContexts(Flashback_query_clauseContext.class);
        }
        public Flashback_query_clauseContext flashback_query_clause(int i) {
            return getRuleContext(Flashback_query_clauseContext.class,i);
        }
        public Table_aliasContext table_alias() {
            return getRuleContext(Table_aliasContext.class,0);
        }
        public Pivot_clauseContext pivot_clause() {
            return getRuleContext(Pivot_clauseContext.class,0);
        }
        public Unpivot_clauseContext unpivot_clause() {
            return getRuleContext(Unpivot_clauseContext.class,0);
        }
        public List<Subquery_operation_partContext> subquery_operation_part() {
            return getRuleContexts(Subquery_operation_partContext.class);
        }
        public Subquery_operation_partContext subquery_operation_part(int i) {
            return getRuleContext(Subquery_operation_partContext.class,i);
        }
        public Table_ref_auxContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_table_ref_aux; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTable_ref_aux(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTable_ref_aux(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTable_ref_aux(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Table_ref_auxContext table_ref_aux() throws RecognitionException {
        Table_ref_auxContext _localctx = new Table_ref_auxContext(_ctx, getState());
        enterRule(_localctx, 344, RULE_table_ref_aux);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(2905);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,317,_ctx) ) {
                    case 1:
                    {
                        setState(2876);
                        dml_table_expression_clause();
                        setState(2879);
                        _errHandler.sync(this);
                        switch ( getInterpreter().adaptivePredict(_input,313,_ctx) ) {
                            case 1:
                            {
                                setState(2877);
                                pivot_clause();
                            }
                            break;
                            case 2:
                            {
                                setState(2878);
                                unpivot_clause();
                            }
                            break;
                        }
                    }
                    break;
                    case 2:
                    {
                        setState(2881);
                        match(LEFT_PAREN);
                        setState(2882);
                        table_ref();
                        setState(2886);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la==INTERSECT || _la==MINUS || _la==UNION) {
                            {
                                {
                                    setState(2883);
                                    subquery_operation_part();
                                }
                            }
                            setState(2888);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                        setState(2889);
                        match(RIGHT_PAREN);
                        setState(2892);
                        _errHandler.sync(this);
                        switch ( getInterpreter().adaptivePredict(_input,315,_ctx) ) {
                            case 1:
                            {
                                setState(2890);
                                pivot_clause();
                            }
                            break;
                            case 2:
                            {
                                setState(2891);
                                unpivot_clause();
                            }
                            break;
                        }
                    }
                    break;
                    case 3:
                    {
                        setState(2894);
                        match(ONLY);
                        setState(2895);
                        match(LEFT_PAREN);
                        setState(2896);
                        dml_table_expression_clause();
                        setState(2897);
                        match(RIGHT_PAREN);
                    }
                    break;
                    case 4:
                    {
                        setState(2899);
                        dml_table_expression_clause();
                        setState(2902);
                        _errHandler.sync(this);
                        switch ( getInterpreter().adaptivePredict(_input,316,_ctx) ) {
                            case 1:
                            {
                                setState(2900);
                                pivot_clause();
                            }
                            break;
                            case 2:
                            {
                                setState(2901);
                                unpivot_clause();
                            }
                            break;
                        }
                    }
                    break;
                    case 5:
                    {
                        setState(2904);
                        xml_table();
                    }
                    break;
                }
                setState(2910);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input,318,_ctx);
                while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
                    if ( _alt==1 ) {
                        {
                            {
                                setState(2907);
                                flashback_query_clause();
                            }
                        }
                    }
                    setState(2912);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input,318,_ctx);
                }
                setState(2914);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,319,_ctx) ) {
                    case 1:
                    {
                        setState(2913);
                        table_alias();
                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Join_clauseContext extends ParserRuleContext {
        public TerminalNode JOIN() { return getToken(PlSqlParser.JOIN, 0); }
        public Table_ref_auxContext table_ref_aux() {
            return getRuleContext(Table_ref_auxContext.class,0);
        }
        public List<Query_partition_clauseContext> query_partition_clause() {
            return getRuleContexts(Query_partition_clauseContext.class);
        }
        public Query_partition_clauseContext query_partition_clause(int i) {
            return getRuleContext(Query_partition_clauseContext.class,i);
        }
        public TerminalNode INNER() { return getToken(PlSqlParser.INNER, 0); }
        public Outer_join_typeContext outer_join_type() {
            return getRuleContext(Outer_join_typeContext.class,0);
        }
        public List<Join_on_partContext> join_on_part() {
            return getRuleContexts(Join_on_partContext.class);
        }
        public Join_on_partContext join_on_part(int i) {
            return getRuleContext(Join_on_partContext.class,i);
        }
        public List<Join_using_partContext> join_using_part() {
            return getRuleContexts(Join_using_partContext.class);
        }
        public Join_using_partContext join_using_part(int i) {
            return getRuleContext(Join_using_partContext.class,i);
        }
        public TerminalNode CROSS() { return getToken(PlSqlParser.CROSS, 0); }
        public TerminalNode NATURAL() { return getToken(PlSqlParser.NATURAL, 0); }
        public Join_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_join_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterJoin_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitJoin_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitJoin_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Join_clauseContext join_clause() throws RecognitionException {
        Join_clauseContext _localctx = new Join_clauseContext(_ctx, getState());
        enterRule(_localctx, 346, RULE_join_clause);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(2917);
                _la = _input.LA(1);
                if (_la==PARTITION) {
                    {
                        setState(2916);
                        query_partition_clause();
                    }
                }

                setState(2920);
                _la = _input.LA(1);
                if (_la==CROSS || _la==NATURAL) {
                    {
                        setState(2919);
                        _la = _input.LA(1);
                        if ( !(_la==CROSS || _la==NATURAL) ) {
                            _errHandler.recoverInline(this);
                        } else {
                            consume();
                        }
                    }
                }

                setState(2924);
                switch (_input.LA(1)) {
                    case INNER:
                    {
                        setState(2922);
                        match(INNER);
                    }
                    break;
                    case FULL:
                    case LEFT:
                    case RIGHT:
                    {
                        setState(2923);
                        outer_join_type();
                    }
                    break;
                    case JOIN:
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
                setState(2926);
                match(JOIN);
                setState(2927);
                table_ref_aux();
                setState(2929);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,323,_ctx) ) {
                    case 1:
                    {
                        setState(2928);
                        query_partition_clause();
                    }
                    break;
                }
                setState(2935);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input,325,_ctx);
                while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
                    if ( _alt==1 ) {
                        {
                            setState(2933);
                            switch (_input.LA(1)) {
                                case ON:
                                {
                                    setState(2931);
                                    join_on_part();
                                }
                                break;
                                case USING:
                                {
                                    setState(2932);
                                    join_using_part();
                                }
                                break;
                                default:
                                    throw new NoViableAltException(this);
                            }
                        }
                    }
                    setState(2937);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input,325,_ctx);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Join_on_partContext extends ParserRuleContext {
        public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
        public ConditionContext condition() {
            return getRuleContext(ConditionContext.class,0);
        }
        public Join_on_partContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_join_on_part; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterJoin_on_part(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitJoin_on_part(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitJoin_on_part(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Join_on_partContext join_on_part() throws RecognitionException {
        Join_on_partContext _localctx = new Join_on_partContext(_ctx, getState());
        enterRule(_localctx, 348, RULE_join_on_part);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2938);
                match(ON);
                setState(2939);
                condition();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Join_using_partContext extends ParserRuleContext {
        public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
        public List<Column_nameContext> column_name() {
            return getRuleContexts(Column_nameContext.class);
        }
        public Column_nameContext column_name(int i) {
            return getRuleContext(Column_nameContext.class,i);
        }
        public Join_using_partContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_join_using_part; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterJoin_using_part(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitJoin_using_part(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitJoin_using_part(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Join_using_partContext join_using_part() throws RecognitionException {
        Join_using_partContext _localctx = new Join_using_partContext(_ctx, getState());
        enterRule(_localctx, 350, RULE_join_using_part);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2941);
                match(USING);
                setState(2942);
                match(LEFT_PAREN);
                setState(2943);
                column_name();
                setState(2948);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==COMMA) {
                    {
                        {
                            setState(2944);
                            match(COMMA);
                            setState(2945);
                            column_name();
                        }
                    }
                    setState(2950);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(2951);
                match(RIGHT_PAREN);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Outer_join_typeContext extends ParserRuleContext {
        public TerminalNode FULL() { return getToken(PlSqlParser.FULL, 0); }
        public TerminalNode LEFT() { return getToken(PlSqlParser.LEFT, 0); }
        public TerminalNode RIGHT() { return getToken(PlSqlParser.RIGHT, 0); }
        public TerminalNode OUTER() { return getToken(PlSqlParser.OUTER, 0); }
        public Outer_join_typeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_outer_join_type; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterOuter_join_type(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitOuter_join_type(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitOuter_join_type(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Outer_join_typeContext outer_join_type() throws RecognitionException {
        Outer_join_typeContext _localctx = new Outer_join_typeContext(_ctx, getState());
        enterRule(_localctx, 352, RULE_outer_join_type);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2953);
                _la = _input.LA(1);
                if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
                    _errHandler.recoverInline(this);
                } else {
                    consume();
                }
                setState(2955);
                _la = _input.LA(1);
                if (_la==OUTER) {
                    {
                        setState(2954);
                        match(OUTER);
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Query_partition_clauseContext extends ParserRuleContext {
        public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
        public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
        public SubqueryContext subquery() {
            return getRuleContext(SubqueryContext.class,0);
        }
        public Expression_listContext expression_list() {
            return getRuleContext(Expression_listContext.class,0);
        }
        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }
        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class,i);
        }
        public Query_partition_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_query_partition_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterQuery_partition_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitQuery_partition_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitQuery_partition_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Query_partition_clauseContext query_partition_clause() throws RecognitionException {
        Query_partition_clauseContext _localctx = new Query_partition_clauseContext(_ctx, getState());
        enterRule(_localctx, 354, RULE_query_partition_clause);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(2957);
                match(PARTITION);
                setState(2958);
                match(BY);
                setState(2972);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,329,_ctx) ) {
                    case 1:
                    {
                        setState(2959);
                        match(LEFT_PAREN);
                        setState(2960);
                        subquery();
                        setState(2961);
                        match(RIGHT_PAREN);
                    }
                    break;
                    case 2:
                    {
                        setState(2963);
                        expression_list();
                    }
                    break;
                    case 3:
                    {
                        setState(2964);
                        expression();
                        setState(2969);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input,328,_ctx);
                        while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
                            if ( _alt==1 ) {
                                {
                                    {
                                        setState(2965);
                                        match(COMMA);
                                        setState(2966);
                                        expression();
                                    }
                                }
                            }
                            setState(2971);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input,328,_ctx);
                        }
                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Flashback_query_clauseContext extends ParserRuleContext {
        public TerminalNode VERSIONS() { return getToken(PlSqlParser.VERSIONS, 0); }
        public TerminalNode BETWEEN() { return getToken(PlSqlParser.BETWEEN, 0); }
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class,0);
        }
        public TerminalNode SCN() { return getToken(PlSqlParser.SCN, 0); }
        public TerminalNode TIMESTAMP() { return getToken(PlSqlParser.TIMESTAMP, 0); }
        public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
        public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
        public TerminalNode SNAPSHOT() { return getToken(PlSqlParser.SNAPSHOT, 0); }
        public Flashback_query_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_flashback_query_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFlashback_query_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFlashback_query_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFlashback_query_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Flashback_query_clauseContext flashback_query_clause() throws RecognitionException {
        Flashback_query_clauseContext _localctx = new Flashback_query_clauseContext(_ctx, getState());
        enterRule(_localctx, 356, RULE_flashback_query_clause);
        int _la;
        try {
            setState(2982);
            switch (_input.LA(1)) {
                case VERSIONS:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2974);
                    match(VERSIONS);
                    setState(2975);
                    match(BETWEEN);
                    setState(2976);
                    _la = _input.LA(1);
                    if ( !(_la==SCN || _la==TIMESTAMP) ) {
                        _errHandler.recoverInline(this);
                    } else {
                        consume();
                    }
                    setState(2977);
                    expression();
                }
                break;
                case AS:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2978);
                    match(AS);
                    setState(2979);
                    match(OF);
                    setState(2980);
                    _la = _input.LA(1);
                    if ( !(((((_la - 344)) & ~0x3f) == 0 && ((1L << (_la - 344)) & ((1L << (SCN - 344)) | (1L << (SNAPSHOT - 344)) | (1L << (TIMESTAMP - 344)))) != 0)) ) {
                        _errHandler.recoverInline(this);
                    } else {
                        consume();
                    }
                    setState(2981);
                    expression();
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Pivot_clauseContext extends ParserRuleContext {
        public TerminalNode PIVOT() { return getToken(PlSqlParser.PIVOT, 0); }
        public List<Pivot_elementContext> pivot_element() {
            return getRuleContexts(Pivot_elementContext.class);
        }
        public Pivot_elementContext pivot_element(int i) {
            return getRuleContext(Pivot_elementContext.class,i);
        }
        public Pivot_for_clauseContext pivot_for_clause() {
            return getRuleContext(Pivot_for_clauseContext.class,0);
        }
        public Pivot_in_clauseContext pivot_in_clause() {
            return getRuleContext(Pivot_in_clauseContext.class,0);
        }
        public TerminalNode XML() { return getToken(PlSqlParser.XML, 0); }
        public Pivot_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_pivot_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPivot_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPivot_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPivot_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Pivot_clauseContext pivot_clause() throws RecognitionException {
        Pivot_clauseContext _localctx = new Pivot_clauseContext(_ctx, getState());
        enterRule(_localctx, 358, RULE_pivot_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2984);
                match(PIVOT);
                setState(2986);
                _la = _input.LA(1);
                if (_la==XML) {
                    {
                        setState(2985);
                        match(XML);
                    }
                }

                setState(2988);
                match(LEFT_PAREN);
                setState(2989);
                pivot_element();
                setState(2994);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==COMMA) {
                    {
                        {
                            setState(2990);
                            match(COMMA);
                            setState(2991);
                            pivot_element();
                        }
                    }
                    setState(2996);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(2997);
                pivot_for_clause();
                setState(2998);
                pivot_in_clause();
                setState(2999);
                match(RIGHT_PAREN);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Pivot_elementContext extends ParserRuleContext {
        public Aggregate_function_nameContext aggregate_function_name() {
            return getRuleContext(Aggregate_function_nameContext.class,0);
        }
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class,0);
        }
        public Column_aliasContext column_alias() {
            return getRuleContext(Column_aliasContext.class,0);
        }
        public Pivot_elementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_pivot_element; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPivot_element(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPivot_element(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPivot_element(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Pivot_elementContext pivot_element() throws RecognitionException {
        Pivot_elementContext _localctx = new Pivot_elementContext(_ctx, getState());
        enterRule(_localctx, 360, RULE_pivot_element);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3001);
                aggregate_function_name();
                setState(3002);
                match(LEFT_PAREN);
                setState(3003);
                expression();
                setState(3004);
                match(RIGHT_PAREN);
                setState(3006);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,333,_ctx) ) {
                    case 1:
                    {
                        setState(3005);
                        column_alias();
                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Pivot_for_clauseContext extends ParserRuleContext {
        public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
        public List<Column_nameContext> column_name() {
            return getRuleContexts(Column_nameContext.class);
        }
        public Column_nameContext column_name(int i) {
            return getRuleContext(Column_nameContext.class,i);
        }
        public Pivot_for_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_pivot_for_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPivot_for_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPivot_for_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPivot_for_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Pivot_for_clauseContext pivot_for_clause() throws RecognitionException {
        Pivot_for_clauseContext _localctx = new Pivot_for_clauseContext(_ctx, getState());
        enterRule(_localctx, 362, RULE_pivot_for_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3008);
                match(FOR);
                setState(3021);
                switch (_input.LA(1)) {
                    case A_LETTER:
                    case ADD:
                    case AFTER:
                    case AGENT:
                    case AGGREGATE:
                    case ALL:
                    case ALTER:
                    case ANALYZE:
                    case AND:
                    case ANY:
                    case ARRAY:
                    case AS:
                    case ASC:
                    case ASSOCIATE:
                    case AT:
                    case ATTRIBUTE:
                    case AUDIT:
                    case AUTHID:
                    case AUTO:
                    case AUTOMATIC:
                    case AUTONOMOUS_TRANSACTION:
                    case BATCH:
                    case BEFORE:
                    case BEGIN:
                    case BETWEEN:
                    case BFILE:
                    case BINARY_DOUBLE:
                    case BINARY_FLOAT:
                    case BINARY_INTEGER:
                    case BLOB:
                    case BLOCK:
                    case BODY:
                    case BOOLEAN:
                    case BOTH:
                    case BREADTH:
                    case BULK:
                    case BY:
                    case BYTE:
                    case C_LETTER:
                    case CACHE:
                    case CALL:
                    case CANONICAL:
                    case CASCADE:
                    case CASE:
                    case CAST:
                    case CHAR:
                    case CHAR_CS:
                    case CHARACTER:
                    case CHECK:
                    case CHR:
                    case CLOB:
                    case CLOSE:
                    case CLUSTER:
                    case COLLECT:
                    case COLUMNS:
                    case COMMENT:
                    case COMMIT:
                    case COMMITTED:
                    case COMPATIBILITY:
                    case COMPILE:
                    case COMPOUND:
                    case CONNECT:
                    case CONNECT_BY_ROOT:
                    case CONSTANT:
                    case CONSTRAINT:
                    case CONSTRAINTS:
                    case CONSTRUCTOR:
                    case CONTENT:
                    case CONTEXT:
                    case CONTINUE:
                    case CONVERT:
                    case CORRUPT_XID:
                    case CORRUPT_XID_ALL:
                    case COST:
                    case COUNT:
                    case CREATE:
                    case CROSS:
                    case CUBE:
                    case CURRENT:
                    case CURRENT_USER:
                    case CURSOR:
                    case CUSTOMDATUM:
                    case CYCLE:
                    case DATA:
                    case DATABASE:
                    case DATE:
                    case DAY:
                    case DB_ROLE_CHANGE:
                    case DBTIMEZONE:
                    case DDL:
                    case DEBUG:
                    case DEC:
                    case DECIMAL:
                    case DECLARE:
                    case DECOMPOSE:
                    case DECREMENT:
                    case DEFAULT:
                    case DEFAULTS:
                    case DEFERRED:
                    case DEFINER:
                    case DELETE:
                    case DEPTH:
                    case DESC:
                    case DETERMINISTIC:
                    case DIMENSION:
                    case DISABLE:
                    case DISASSOCIATE:
                    case DISTINCT:
                    case DOCUMENT:
                    case DOUBLE:
                    case DROP:
                    case DSINTERVAL_UNCONSTRAINED:
                    case EACH:
                    case ELEMENT:
                    case ELSE:
                    case ELSIF:
                    case EMPTY:
                    case ENABLE:
                    case ENCODING:
                    case END:
                    case ENTITYESCAPING:
                    case ERRORS:
                    case ESCAPE:
                    case EXCEPT:
                    case EVALNAME:
                    case EXCEPTION:
                    case EXCEPTION_INIT:
                    case EXCEPTIONS:
                    case EXCLUDE:
                    case EXCLUSIVE:
                    case EXECUTE:
                    case EXISTS:
                    case EXIT:
                    case EXPLAIN:
                    case EXTERNAL:
                    case EXTRACT:
                    case FAILURE:
                    case FALSE:
                    case FETCH:
                    case FINAL:
                    case FIRST:
                    case FIRST_VALUE:
                    case FLOAT:
                    case FOLLOWING:
                    case FOLLOWS:
                    case FOR:
                    case FORALL:
                    case FORCE:
                    case FROM:
                    case FULL:
                    case FUNCTION:
                    case GOTO:
                    case GRANT:
                    case GROUP:
                    case GROUPING:
                    case HASH:
                    case HAVING:
                    case HIDE:
                    case HOUR:
                    case IF:
                    case IGNORE:
                    case IMMEDIATE:
                    case IN:
                    case INCLUDE:
                    case INCLUDING:
                    case INCREMENT:
                    case INDENT:
                    case INDEX:
                    case INDEXED:
                    case INDICATOR:
                    case INDICES:
                    case INFINITE:
                    case INLINE:
                    case INNER:
                    case INOUT:
                    case INSERT:
                    case INSTANTIABLE:
                    case INSTEAD:
                    case INT:
                    case INTEGER:
                    case INTERSECT:
                    case INTERVAL:
                    case INTO:
                    case INVALIDATE:
                    case IS:
                    case ISOLATION:
                    case ITERATE:
                    case JAVA:
                    case JOIN:
                    case KEEP:
                    case LANGUAGE:
                    case LAST:
                    case LAST_VALUE:
                    case LEADING:
                    case LEFT:
                    case LEVEL:
                    case LIBRARY:
                    case LIKE:
                    case LIKE2:
                    case LIKE4:
                    case LIKEC:
                    case LIMIT:
                    case LOCAL:
                    case LOCK:
                    case LOCKED:
                    case LOG:
                    case LOGOFF:
                    case LOGON:
                    case LONG:
                    case LOOP:
                    case MAIN:
                    case MAP:
                    case MATCHED:
                    case MAXVALUE:
                    case MEASURES:
                    case MEMBER:
                    case MERGE:
                    case MINUS:
                    case MINUTE:
                    case MINVALUE:
                    case MLSLABEL:
                    case MODE:
                    case MODEL:
                    case MODIFY:
                    case MONTH:
                    case MULTISET:
                    case NAME:
                    case NAN:
                    case NATURAL:
                    case NATURALN:
                    case NAV:
                    case NCHAR:
                    case NCHAR_CS:
                    case NCLOB:
                    case NESTED:
                    case NEW:
                    case NO:
                    case NOAUDIT:
                    case NOCACHE:
                    case NOCOPY:
                    case NOCYCLE:
                    case NOENTITYESCAPING:
                    case NOMAXVALUE:
                    case NOMINVALUE:
                    case NONE:
                    case NOORDER:
                    case NOSCHEMACHECK:
                    case NOT:
                    case NOWAIT:
                    case NULL:
                    case NULLS:
                    case NUMBER:
                    case NUMERIC:
                    case NVARCHAR2:
                    case OBJECT:
                    case OF:
                    case OFF:
                    case OID:
                    case OLD:
                    case ON:
                    case ONLY:
                    case OPEN:
                    case OPTION:
                    case OR:
                    case ORADATA:
                    case ORDER:
                    case ORDINALITY:
                    case OSERROR:
                    case OUT:
                    case OUTER:
                    case OVER:
                    case OVERRIDING:
                    case PACKAGE:
                    case PARALLEL_ENABLE:
                    case PARAMETERS:
                    case PARENT:
                    case PARTITION:
                    case PASSING:
                    case PATH:
                    case PIPELINED:
                    case PIVOT:
                    case PLAN:
                    case PLS_INTEGER:
                    case POSITIVE:
                    case POSITIVEN:
                    case PRAGMA:
                    case PRECEDING:
                    case PRECISION:
                    case PRESENT:
                    case PRIOR:
                    case PROCEDURE:
                    case RAISE:
                    case RANGE:
                    case RAW:
                    case READ:
                    case REAL:
                    case RECORD:
                    case REF:
                    case REFERENCE:
                    case REFERENCING:
                    case REJECT:
                    case RELIES_ON:
                    case RENAME:
                    case REPLACE:
                    case RESPECT:
                    case RESTRICT_REFERENCES:
                    case RESULT:
                    case RESULT_CACHE:
                    case RETURN:
                    case RETURNING:
                    case REUSE:
                    case REVERSE:
                    case REVOKE:
                    case RIGHT:
                    case ROLLBACK:
                    case ROLLUP:
                    case ROW:
                    case ROWID:
                    case ROWS:
                    case RULES:
                    case SAMPLE:
                    case SAVE:
                    case SAVEPOINT:
                    case SCHEMA:
                    case SCHEMACHECK:
                    case SCN:
                    case SEARCH:
                    case SECOND:
                    case SEED:
                    case SEGMENT:
                    case SELECT:
                    case SELF:
                    case SEQUENCE:
                    case SEQUENTIAL:
                    case SERIALIZABLE:
                    case SERIALLY_REUSABLE:
                    case SERVERERROR:
                    case SESSIONTIMEZONE:
                    case SET:
                    case SETS:
                    case SETTINGS:
                    case SHARE:
                    case SHOW:
                    case SHUTDOWN:
                    case SIBLINGS:
                    case SIGNTYPE:
                    case SIMPLE_INTEGER:
                    case SINGLE:
                    case SIZE:
                    case SKIP_:
                    case SMALLINT:
                    case SNAPSHOT:
                    case SOME:
                    case SPECIFICATION:
                    case SQLDATA:
                    case SQLERROR:
                    case SQL_PERCENT_ROWCOUNT:
                    case STANDALONE:
                    case START:
                    case STARTUP:
                    case STATEMENT:
                    case STATEMENT_ID:
                    case STATIC:
                    case STATISTICS:
                    case STRING:
                    case SUBMULTISET:
                    case SUBPARTITION:
                    case SUBSTITUTABLE:
                    case SUBTYPE:
                    case SUCCESS:
                    case SUSPEND:
                    case TABLE:
                    case THE:
                    case THEN:
                    case TIME:
                    case TIMESTAMP:
                    case TIMESTAMP_LTZ_UNCONSTRAINED:
                    case TIMESTAMP_TZ_UNCONSTRAINED:
                    case TIMESTAMP_UNCONSTRAINED:
                    case TIMEZONE_ABBR:
                    case TIMEZONE_HOUR:
                    case TIMEZONE_MINUTE:
                    case TIMEZONE_REGION:
                    case TO:
                    case TO_CHAR:
                    case TRAILING:
                    case TRANSACTION:
                    case TRANSLATE:
                    case TREAT:
                    case TRIGGER:
                    case TRIM:
                    case TRUE:
                    case TRUNCATE:
                    case TYPE:
                    case UNBOUNDED:
                    case UNDER:
                    case UNION:
                    case UNIQUE:
                    case UNLIMITED:
                    case UNPIVOT:
                    case UNTIL:
                    case UPDATE:
                    case UPDATED:
                    case UPSERT:
                    case UROWID:
                    case USE:
                    case USING:
                    case VALIDATE:
                    case VALUE:
                    case VALUES:
                    case VARCHAR:
                    case VARCHAR2:
                    case VARIABLE:
                    case VARRAY:
                    case VARYING:
                    case VERSION:
                    case VERSIONS:
                    case WAIT:
                    case WARNING:
                    case WELLFORMED:
                    case WHEN:
                    case WHENEVER:
                    case WHERE:
                    case WHILE:
                    case WITH:
                    case WITHIN:
                    case WORK:
                    case WRITE:
                    case XML:
                    case XMLAGG:
                    case XMLATTRIBUTES:
                    case XMLCAST:
                    case XMLCOLATTVAL:
                    case XMLELEMENT:
                    case XMLEXISTS:
                    case XMLFOREST:
                    case XMLNAMESPACES:
                    case XMLPARSE:
                    case XMLPI:
                    case XMLQUERY:
                    case XMLROOT:
                    case XMLSERIALIZE:
                    case XMLTABLE:
                    case YEAR:
                    case YES:
                    case YMINTERVAL_UNCONSTRAINED:
                    case ZONE:
                    case PREDICTION:
                    case PREDICTION_BOUNDS:
                    case PREDICTION_COST:
                    case PREDICTION_DETAILS:
                    case PREDICTION_PROBABILITY:
                    case PREDICTION_SET:
                    case CUME_DIST:
                    case DENSE_RANK:
                    case LISTAGG:
                    case PERCENT_RANK:
                    case PERCENTILE_CONT:
                    case PERCENTILE_DISC:
                    case RANK:
                    case AVG:
                    case CORR:
                    case LAG:
                    case LEAD:
                    case MAX:
                    case MEDIAN:
                    case MIN:
                    case NTILE:
                    case RATIO_TO_REPORT:
                    case ROW_NUMBER:
                    case SUM:
                    case VARIANCE:
                    case REGR_:
                    case STDDEV:
                    case VAR_:
                    case COVAR_:
                    case DELIMITED_ID:
                    case INTRODUCER:
                    case REGULAR_ID:
                    {
                        setState(3009);
                        column_name();
                    }
                    break;
                    case LEFT_PAREN:
                    {
                        setState(3010);
                        match(LEFT_PAREN);
                        setState(3011);
                        column_name();
                        setState(3016);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la==COMMA) {
                            {
                                {
                                    setState(3012);
                                    match(COMMA);
                                    setState(3013);
                                    column_name();
                                }
                            }
                            setState(3018);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                        setState(3019);
                        match(RIGHT_PAREN);
                    }
                    break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Pivot_in_clauseContext extends ParserRuleContext {
        public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
        public SubqueryContext subquery() {
            return getRuleContext(SubqueryContext.class,0);
        }
        public List<TerminalNode> ANY() { return getTokens(PlSqlParser.ANY); }
        public TerminalNode ANY(int i) {
            return getToken(PlSqlParser.ANY, i);
        }
        public List<Pivot_in_clause_elementContext> pivot_in_clause_element() {
            return getRuleContexts(Pivot_in_clause_elementContext.class);
        }
        public Pivot_in_clause_elementContext pivot_in_clause_element(int i) {
            return getRuleContext(Pivot_in_clause_elementContext.class,i);
        }
        public Pivot_in_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_pivot_in_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPivot_in_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPivot_in_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPivot_in_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Pivot_in_clauseContext pivot_in_clause() throws RecognitionException {
        Pivot_in_clauseContext _localctx = new Pivot_in_clauseContext(_ctx, getState());
        enterRule(_localctx, 364, RULE_pivot_in_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3023);
                match(IN);
                setState(3024);
                match(LEFT_PAREN);
                setState(3042);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,338,_ctx) ) {
                    case 1:
                    {
                        setState(3025);
                        subquery();
                    }
                    break;
                    case 2:
                    {
                        setState(3026);
                        match(ANY);
                        setState(3031);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la==COMMA) {
                            {
                                {
                                    setState(3027);
                                    match(COMMA);
                                    setState(3028);
                                    match(ANY);
                                }
                            }
                            setState(3033);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                    }
                    break;
                    case 3:
                    {
                        setState(3034);
                        pivot_in_clause_element();
                        setState(3039);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la==COMMA) {
                            {
                                {
                                    setState(3035);
                                    match(COMMA);
                                    setState(3036);
                                    pivot_in_clause_element();
                                }
                            }
                            setState(3041);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                    }
                    break;
                }
                setState(3044);
                match(RIGHT_PAREN);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Pivot_in_clause_elementContext extends ParserRuleContext {
        public Pivot_in_clause_elementsContext pivot_in_clause_elements() {
            return getRuleContext(Pivot_in_clause_elementsContext.class,0);
        }
        public Column_aliasContext column_alias() {
            return getRuleContext(Column_aliasContext.class,0);
        }
        public Pivot_in_clause_elementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_pivot_in_clause_element; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPivot_in_clause_element(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPivot_in_clause_element(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPivot_in_clause_element(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Pivot_in_clause_elementContext pivot_in_clause_element() throws RecognitionException {
        Pivot_in_clause_elementContext _localctx = new Pivot_in_clause_elementContext(_ctx, getState());
        enterRule(_localctx, 366, RULE_pivot_in_clause_element);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3046);
                pivot_in_clause_elements();
                setState(3048);
                _la = _input.LA(1);
                if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ALTER) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREADTH) | (1L << BULK) | (1L << BY) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHECK) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DEPTH - 64)) | (1L << (DESC - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (ELSE - 64)) | (1L << (ELSIF - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (END - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EXCEPT - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXCLUSIVE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FETCH - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FOR - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GOTO - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HAVING - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IN - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEX - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERSECT - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTO - 192)) | (1L << (INVALIDATE - 192)) | (1L << (IS - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCK - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUS - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCACHE - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)) | (1L << (NOENTITYESCAPING - 192)) | (1L << (NOMAXVALUE - 192)) | (1L << (NOMINVALUE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NONE - 256)) | (1L << (NOORDER - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NOT - 256)) | (1L << (NOWAIT - 256)) | (1L << (NULL - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OF - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ON - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (OPTION - 256)) | (1L << (OR - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDER - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PIVOT - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (PRIOR - 256)) | (1L << (PROCEDURE - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (REVOKE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SEARCH - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELECT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENCE - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHARE - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (SQL_PERCENT_ROWCOUNT - 320)) | (1L << (STANDALONE - 320)) | (1L << (START - 320)) | (1L << (STARTUP - 320)) | (1L << (STATEMENT - 320)) | (1L << (STATEMENT_ID - 320)) | (1L << (STATIC - 320)) | (1L << (STATISTICS - 320)) | (1L << (STRING - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TABLE - 384)) | (1L << (THE - 384)) | (1L << (THEN - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TO - 384)) | (1L << (TO_CHAR - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUE - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNION - 384)) | (1L << (UNIQUE - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNPIVOT - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATE - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (USING - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VALUES - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHEN - 384)) | (1L << (WHENEVER - 384)) | (1L << (WHERE - 384)) | (1L << (WHILE - 384)) | (1L << (WITH - 384)) | (1L << (WITHIN - 384)) | (1L << (WORK - 384)) | (1L << (WRITE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)) | (1L << (REGR_ - 448)) | (1L << (STDDEV - 448)) | (1L << (VAR_ - 448)) | (1L << (COVAR_ - 448)) | (1L << (NATIONAL_CHAR_STRING_LIT - 448)) | (1L << (CHAR_STRING - 448)) | (1L << (DELIMITED_ID - 448)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
                    {
                        setState(3047);
                        column_alias();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Pivot_in_clause_elementsContext extends ParserRuleContext {
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class,0);
        }
        public Expression_listContext expression_list() {
            return getRuleContext(Expression_listContext.class,0);
        }
        public Pivot_in_clause_elementsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_pivot_in_clause_elements; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPivot_in_clause_elements(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPivot_in_clause_elements(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPivot_in_clause_elements(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Pivot_in_clause_elementsContext pivot_in_clause_elements() throws RecognitionException {
        Pivot_in_clause_elementsContext _localctx = new Pivot_in_clause_elementsContext(_ctx, getState());
        enterRule(_localctx, 368, RULE_pivot_in_clause_elements);
        try {
            setState(3052);
            _errHandler.sync(this);
            switch ( getInterpreter().adaptivePredict(_input,340,_ctx) ) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3050);
                    expression();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3051);
                    expression_list();
                }
                break;
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Unpivot_clauseContext extends ParserRuleContext {
        public TerminalNode UNPIVOT() { return getToken(PlSqlParser.UNPIVOT, 0); }
        public Pivot_for_clauseContext pivot_for_clause() {
            return getRuleContext(Pivot_for_clauseContext.class,0);
        }
        public Unpivot_in_clauseContext unpivot_in_clause() {
            return getRuleContext(Unpivot_in_clauseContext.class,0);
        }
        public List<Column_nameContext> column_name() {
            return getRuleContexts(Column_nameContext.class);
        }
        public Column_nameContext column_name(int i) {
            return getRuleContext(Column_nameContext.class,i);
        }
        public TerminalNode NULLS() { return getToken(PlSqlParser.NULLS, 0); }
        public TerminalNode INCLUDE() { return getToken(PlSqlParser.INCLUDE, 0); }
        public TerminalNode EXCLUDE() { return getToken(PlSqlParser.EXCLUDE, 0); }
        public Unpivot_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_unpivot_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterUnpivot_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitUnpivot_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitUnpivot_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Unpivot_clauseContext unpivot_clause() throws RecognitionException {
        Unpivot_clauseContext _localctx = new Unpivot_clauseContext(_ctx, getState());
        enterRule(_localctx, 370, RULE_unpivot_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3054);
                match(UNPIVOT);
                setState(3057);
                _la = _input.LA(1);
                if (_la==EXCLUDE || _la==INCLUDE) {
                    {
                        setState(3055);
                        _la = _input.LA(1);
                        if ( !(_la==EXCLUDE || _la==INCLUDE) ) {
                            _errHandler.recoverInline(this);
                        } else {
                            consume();
                        }
                        setState(3056);
                        match(NULLS);
                    }
                }

                setState(3059);
                match(LEFT_PAREN);
                setState(3072);
                switch (_input.LA(1)) {
                    case A_LETTER:
                    case ADD:
                    case AFTER:
                    case AGENT:
                    case AGGREGATE:
                    case ALL:
                    case ALTER:
                    case ANALYZE:
                    case AND:
                    case ANY:
                    case ARRAY:
                    case AS:
                    case ASC:
                    case ASSOCIATE:
                    case AT:
                    case ATTRIBUTE:
                    case AUDIT:
                    case AUTHID:
                    case AUTO:
                    case AUTOMATIC:
                    case AUTONOMOUS_TRANSACTION:
                    case BATCH:
                    case BEFORE:
                    case BEGIN:
                    case BETWEEN:
                    case BFILE:
                    case BINARY_DOUBLE:
                    case BINARY_FLOAT:
                    case BINARY_INTEGER:
                    case BLOB:
                    case BLOCK:
                    case BODY:
                    case BOOLEAN:
                    case BOTH:
                    case BREADTH:
                    case BULK:
                    case BY:
                    case BYTE:
                    case C_LETTER:
                    case CACHE:
                    case CALL:
                    case CANONICAL:
                    case CASCADE:
                    case CASE:
                    case CAST:
                    case CHAR:
                    case CHAR_CS:
                    case CHARACTER:
                    case CHECK:
                    case CHR:
                    case CLOB:
                    case CLOSE:
                    case CLUSTER:
                    case COLLECT:
                    case COLUMNS:
                    case COMMENT:
                    case COMMIT:
                    case COMMITTED:
                    case COMPATIBILITY:
                    case COMPILE:
                    case COMPOUND:
                    case CONNECT:
                    case CONNECT_BY_ROOT:
                    case CONSTANT:
                    case CONSTRAINT:
                    case CONSTRAINTS:
                    case CONSTRUCTOR:
                    case CONTENT:
                    case CONTEXT:
                    case CONTINUE:
                    case CONVERT:
                    case CORRUPT_XID:
                    case CORRUPT_XID_ALL:
                    case COST:
                    case COUNT:
                    case CREATE:
                    case CROSS:
                    case CUBE:
                    case CURRENT:
                    case CURRENT_USER:
                    case CURSOR:
                    case CUSTOMDATUM:
                    case CYCLE:
                    case DATA:
                    case DATABASE:
                    case DATE:
                    case DAY:
                    case DB_ROLE_CHANGE:
                    case DBTIMEZONE:
                    case DDL:
                    case DEBUG:
                    case DEC:
                    case DECIMAL:
                    case DECLARE:
                    case DECOMPOSE:
                    case DECREMENT:
                    case DEFAULT:
                    case DEFAULTS:
                    case DEFERRED:
                    case DEFINER:
                    case DELETE:
                    case DEPTH:
                    case DESC:
                    case DETERMINISTIC:
                    case DIMENSION:
                    case DISABLE:
                    case DISASSOCIATE:
                    case DISTINCT:
                    case DOCUMENT:
                    case DOUBLE:
                    case DROP:
                    case DSINTERVAL_UNCONSTRAINED:
                    case EACH:
                    case ELEMENT:
                    case ELSE:
                    case ELSIF:
                    case EMPTY:
                    case ENABLE:
                    case ENCODING:
                    case END:
                    case ENTITYESCAPING:
                    case ERRORS:
                    case ESCAPE:
                    case EXCEPT:
                    case EVALNAME:
                    case EXCEPTION:
                    case EXCEPTION_INIT:
                    case EXCEPTIONS:
                    case EXCLUDE:
                    case EXCLUSIVE:
                    case EXECUTE:
                    case EXISTS:
                    case EXIT:
                    case EXPLAIN:
                    case EXTERNAL:
                    case EXTRACT:
                    case FAILURE:
                    case FALSE:
                    case FETCH:
                    case FINAL:
                    case FIRST:
                    case FIRST_VALUE:
                    case FLOAT:
                    case FOLLOWING:
                    case FOLLOWS:
                    case FOR:
                    case FORALL:
                    case FORCE:
                    case FROM:
                    case FULL:
                    case FUNCTION:
                    case GOTO:
                    case GRANT:
                    case GROUP:
                    case GROUPING:
                    case HASH:
                    case HAVING:
                    case HIDE:
                    case HOUR:
                    case IF:
                    case IGNORE:
                    case IMMEDIATE:
                    case IN:
                    case INCLUDE:
                    case INCLUDING:
                    case INCREMENT:
                    case INDENT:
                    case INDEX:
                    case INDEXED:
                    case INDICATOR:
                    case INDICES:
                    case INFINITE:
                    case INLINE:
                    case INNER:
                    case INOUT:
                    case INSERT:
                    case INSTANTIABLE:
                    case INSTEAD:
                    case INT:
                    case INTEGER:
                    case INTERSECT:
                    case INTERVAL:
                    case INTO:
                    case INVALIDATE:
                    case IS:
                    case ISOLATION:
                    case ITERATE:
                    case JAVA:
                    case JOIN:
                    case KEEP:
                    case LANGUAGE:
                    case LAST:
                    case LAST_VALUE:
                    case LEADING:
                    case LEFT:
                    case LEVEL:
                    case LIBRARY:
                    case LIKE:
                    case LIKE2:
                    case LIKE4:
                    case LIKEC:
                    case LIMIT:
                    case LOCAL:
                    case LOCK:
                    case LOCKED:
                    case LOG:
                    case LOGOFF:
                    case LOGON:
                    case LONG:
                    case LOOP:
                    case MAIN:
                    case MAP:
                    case MATCHED:
                    case MAXVALUE:
                    case MEASURES:
                    case MEMBER:
                    case MERGE:
                    case MINUS:
                    case MINUTE:
                    case MINVALUE:
                    case MLSLABEL:
                    case MODE:
                    case MODEL:
                    case MODIFY:
                    case MONTH:
                    case MULTISET:
                    case NAME:
                    case NAN:
                    case NATURAL:
                    case NATURALN:
                    case NAV:
                    case NCHAR:
                    case NCHAR_CS:
                    case NCLOB:
                    case NESTED:
                    case NEW:
                    case NO:
                    case NOAUDIT:
                    case NOCACHE:
                    case NOCOPY:
                    case NOCYCLE:
                    case NOENTITYESCAPING:
                    case NOMAXVALUE:
                    case NOMINVALUE:
                    case NONE:
                    case NOORDER:
                    case NOSCHEMACHECK:
                    case NOT:
                    case NOWAIT:
                    case NULL:
                    case NULLS:
                    case NUMBER:
                    case NUMERIC:
                    case NVARCHAR2:
                    case OBJECT:
                    case OF:
                    case OFF:
                    case OID:
                    case OLD:
                    case ON:
                    case ONLY:
                    case OPEN:
                    case OPTION:
                    case OR:
                    case ORADATA:
                    case ORDER:
                    case ORDINALITY:
                    case OSERROR:
                    case OUT:
                    case OUTER:
                    case OVER:
                    case OVERRIDING:
                    case PACKAGE:
                    case PARALLEL_ENABLE:
                    case PARAMETERS:
                    case PARENT:
                    case PARTITION:
                    case PASSING:
                    case PATH:
                    case PIPELINED:
                    case PIVOT:
                    case PLAN:
                    case PLS_INTEGER:
                    case POSITIVE:
                    case POSITIVEN:
                    case PRAGMA:
                    case PRECEDING:
                    case PRECISION:
                    case PRESENT:
                    case PRIOR:
                    case PROCEDURE:
                    case RAISE:
                    case RANGE:
                    case RAW:
                    case READ:
                    case REAL:
                    case RECORD:
                    case REF:
                    case REFERENCE:
                    case REFERENCING:
                    case REJECT:
                    case RELIES_ON:
                    case RENAME:
                    case REPLACE:
                    case RESPECT:
                    case RESTRICT_REFERENCES:
                    case RESULT:
                    case RESULT_CACHE:
                    case RETURN:
                    case RETURNING:
                    case REUSE:
                    case REVERSE:
                    case REVOKE:
                    case RIGHT:
                    case ROLLBACK:
                    case ROLLUP:
                    case ROW:
                    case ROWID:
                    case ROWS:
                    case RULES:
                    case SAMPLE:
                    case SAVE:
                    case SAVEPOINT:
                    case SCHEMA:
                    case SCHEMACHECK:
                    case SCN:
                    case SEARCH:
                    case SECOND:
                    case SEED:
                    case SEGMENT:
                    case SELECT:
                    case SELF:
                    case SEQUENCE:
                    case SEQUENTIAL:
                    case SERIALIZABLE:
                    case SERIALLY_REUSABLE:
                    case SERVERERROR:
                    case SESSIONTIMEZONE:
                    case SET:
                    case SETS:
                    case SETTINGS:
                    case SHARE:
                    case SHOW:
                    case SHUTDOWN:
                    case SIBLINGS:
                    case SIGNTYPE:
                    case SIMPLE_INTEGER:
                    case SINGLE:
                    case SIZE:
                    case SKIP_:
                    case SMALLINT:
                    case SNAPSHOT:
                    case SOME:
                    case SPECIFICATION:
                    case SQLDATA:
                    case SQLERROR:
                    case SQL_PERCENT_ROWCOUNT:
                    case STANDALONE:
                    case START:
                    case STARTUP:
                    case STATEMENT:
                    case STATEMENT_ID:
                    case STATIC:
                    case STATISTICS:
                    case STRING:
                    case SUBMULTISET:
                    case SUBPARTITION:
                    case SUBSTITUTABLE:
                    case SUBTYPE:
                    case SUCCESS:
                    case SUSPEND:
                    case TABLE:
                    case THE:
                    case THEN:
                    case TIME:
                    case TIMESTAMP:
                    case TIMESTAMP_LTZ_UNCONSTRAINED:
                    case TIMESTAMP_TZ_UNCONSTRAINED:
                    case TIMESTAMP_UNCONSTRAINED:
                    case TIMEZONE_ABBR:
                    case TIMEZONE_HOUR:
                    case TIMEZONE_MINUTE:
                    case TIMEZONE_REGION:
                    case TO:
                    case TO_CHAR:
                    case TRAILING:
                    case TRANSACTION:
                    case TRANSLATE:
                    case TREAT:
                    case TRIGGER:
                    case TRIM:
                    case TRUE:
                    case TRUNCATE:
                    case TYPE:
                    case UNBOUNDED:
                    case UNDER:
                    case UNION:
                    case UNIQUE:
                    case UNLIMITED:
                    case UNPIVOT:
                    case UNTIL:
                    case UPDATE:
                    case UPDATED:
                    case UPSERT:
                    case UROWID:
                    case USE:
                    case USING:
                    case VALIDATE:
                    case VALUE:
                    case VALUES:
                    case VARCHAR:
                    case VARCHAR2:
                    case VARIABLE:
                    case VARRAY:
                    case VARYING:
                    case VERSION:
                    case VERSIONS:
                    case WAIT:
                    case WARNING:
                    case WELLFORMED:
                    case WHEN:
                    case WHENEVER:
                    case WHERE:
                    case WHILE:
                    case WITH:
                    case WITHIN:
                    case WORK:
                    case WRITE:
                    case XML:
                    case XMLAGG:
                    case XMLATTRIBUTES:
                    case XMLCAST:
                    case XMLCOLATTVAL:
                    case XMLELEMENT:
                    case XMLEXISTS:
                    case XMLFOREST:
                    case XMLNAMESPACES:
                    case XMLPARSE:
                    case XMLPI:
                    case XMLQUERY:
                    case XMLROOT:
                    case XMLSERIALIZE:
                    case XMLTABLE:
                    case YEAR:
                    case YES:
                    case YMINTERVAL_UNCONSTRAINED:
                    case ZONE:
                    case PREDICTION:
                    case PREDICTION_BOUNDS:
                    case PREDICTION_COST:
                    case PREDICTION_DETAILS:
                    case PREDICTION_PROBABILITY:
                    case PREDICTION_SET:
                    case CUME_DIST:
                    case DENSE_RANK:
                    case LISTAGG:
                    case PERCENT_RANK:
                    case PERCENTILE_CONT:
                    case PERCENTILE_DISC:
                    case RANK:
                    case AVG:
                    case CORR:
                    case LAG:
                    case LEAD:
                    case MAX:
                    case MEDIAN:
                    case MIN:
                    case NTILE:
                    case RATIO_TO_REPORT:
                    case ROW_NUMBER:
                    case SUM:
                    case VARIANCE:
                    case REGR_:
                    case STDDEV:
                    case VAR_:
                    case COVAR_:
                    case DELIMITED_ID:
                    case INTRODUCER:
                    case REGULAR_ID:
                    {
                        setState(3060);
                        column_name();
                    }
                    break;
                    case LEFT_PAREN:
                    {
                        setState(3061);
                        match(LEFT_PAREN);
                        setState(3062);
                        column_name();
                        setState(3067);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la==COMMA) {
                            {
                                {
                                    setState(3063);
                                    match(COMMA);
                                    setState(3064);
                                    column_name();
                                }
                            }
                            setState(3069);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                        setState(3070);
                        match(RIGHT_PAREN);
                    }
                    break;
                    default:
                        throw new NoViableAltException(this);
                }
                setState(3074);
                pivot_for_clause();
                setState(3075);
                unpivot_in_clause();
                setState(3076);
                match(RIGHT_PAREN);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Unpivot_in_clauseContext extends ParserRuleContext {
        public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
        public List<Unpivot_in_elementsContext> unpivot_in_elements() {
            return getRuleContexts(Unpivot_in_elementsContext.class);
        }
        public Unpivot_in_elementsContext unpivot_in_elements(int i) {
            return getRuleContext(Unpivot_in_elementsContext.class,i);
        }
        public Unpivot_in_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_unpivot_in_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterUnpivot_in_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitUnpivot_in_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitUnpivot_in_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Unpivot_in_clauseContext unpivot_in_clause() throws RecognitionException {
        Unpivot_in_clauseContext _localctx = new Unpivot_in_clauseContext(_ctx, getState());
        enterRule(_localctx, 372, RULE_unpivot_in_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3078);
                match(IN);
                setState(3079);
                match(LEFT_PAREN);
                setState(3080);
                unpivot_in_elements();
                setState(3085);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==COMMA) {
                    {
                        {
                            setState(3081);
                            match(COMMA);
                            setState(3082);
                            unpivot_in_elements();
                        }
                    }
                    setState(3087);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(3088);
                match(RIGHT_PAREN);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Unpivot_in_elementsContext extends ParserRuleContext {
        public List<Column_nameContext> column_name() {
            return getRuleContexts(Column_nameContext.class);
        }
        public Column_nameContext column_name(int i) {
            return getRuleContext(Column_nameContext.class,i);
        }
        public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
        public List<ConstantContext> constant() {
            return getRuleContexts(ConstantContext.class);
        }
        public ConstantContext constant(int i) {
            return getRuleContext(ConstantContext.class,i);
        }
        public Unpivot_in_elementsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_unpivot_in_elements; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterUnpivot_in_elements(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitUnpivot_in_elements(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitUnpivot_in_elements(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Unpivot_in_elementsContext unpivot_in_elements() throws RecognitionException {
        Unpivot_in_elementsContext _localctx = new Unpivot_in_elementsContext(_ctx, getState());
        enterRule(_localctx, 374, RULE_unpivot_in_elements);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3102);
                switch (_input.LA(1)) {
                    case A_LETTER:
                    case ADD:
                    case AFTER:
                    case AGENT:
                    case AGGREGATE:
                    case ALL:
                    case ALTER:
                    case ANALYZE:
                    case AND:
                    case ANY:
                    case ARRAY:
                    case AS:
                    case ASC:
                    case ASSOCIATE:
                    case AT:
                    case ATTRIBUTE:
                    case AUDIT:
                    case AUTHID:
                    case AUTO:
                    case AUTOMATIC:
                    case AUTONOMOUS_TRANSACTION:
                    case BATCH:
                    case BEFORE:
                    case BEGIN:
                    case BETWEEN:
                    case BFILE:
                    case BINARY_DOUBLE:
                    case BINARY_FLOAT:
                    case BINARY_INTEGER:
                    case BLOB:
                    case BLOCK:
                    case BODY:
                    case BOOLEAN:
                    case BOTH:
                    case BREADTH:
                    case BULK:
                    case BY:
                    case BYTE:
                    case C_LETTER:
                    case CACHE:
                    case CALL:
                    case CANONICAL:
                    case CASCADE:
                    case CASE:
                    case CAST:
                    case CHAR:
                    case CHAR_CS:
                    case CHARACTER:
                    case CHECK:
                    case CHR:
                    case CLOB:
                    case CLOSE:
                    case CLUSTER:
                    case COLLECT:
                    case COLUMNS:
                    case COMMENT:
                    case COMMIT:
                    case COMMITTED:
                    case COMPATIBILITY:
                    case COMPILE:
                    case COMPOUND:
                    case CONNECT:
                    case CONNECT_BY_ROOT:
                    case CONSTANT:
                    case CONSTRAINT:
                    case CONSTRAINTS:
                    case CONSTRUCTOR:
                    case CONTENT:
                    case CONTEXT:
                    case CONTINUE:
                    case CONVERT:
                    case CORRUPT_XID:
                    case CORRUPT_XID_ALL:
                    case COST:
                    case COUNT:
                    case CREATE:
                    case CROSS:
                    case CUBE:
                    case CURRENT:
                    case CURRENT_USER:
                    case CURSOR:
                    case CUSTOMDATUM:
                    case CYCLE:
                    case DATA:
                    case DATABASE:
                    case DATE:
                    case DAY:
                    case DB_ROLE_CHANGE:
                    case DBTIMEZONE:
                    case DDL:
                    case DEBUG:
                    case DEC:
                    case DECIMAL:
                    case DECLARE:
                    case DECOMPOSE:
                    case DECREMENT:
                    case DEFAULT:
                    case DEFAULTS:
                    case DEFERRED:
                    case DEFINER:
                    case DELETE:
                    case DEPTH:
                    case DESC:
                    case DETERMINISTIC:
                    case DIMENSION:
                    case DISABLE:
                    case DISASSOCIATE:
                    case DISTINCT:
                    case DOCUMENT:
                    case DOUBLE:
                    case DROP:
                    case DSINTERVAL_UNCONSTRAINED:
                    case EACH:
                    case ELEMENT:
                    case ELSE:
                    case ELSIF:
                    case EMPTY:
                    case ENABLE:
                    case ENCODING:
                    case END:
                    case ENTITYESCAPING:
                    case ERRORS:
                    case ESCAPE:
                    case EXCEPT:
                    case EVALNAME:
                    case EXCEPTION:
                    case EXCEPTION_INIT:
                    case EXCEPTIONS:
                    case EXCLUDE:
                    case EXCLUSIVE:
                    case EXECUTE:
                    case EXISTS:
                    case EXIT:
                    case EXPLAIN:
                    case EXTERNAL:
                    case EXTRACT:
                    case FAILURE:
                    case FALSE:
                    case FETCH:
                    case FINAL:
                    case FIRST:
                    case FIRST_VALUE:
                    case FLOAT:
                    case FOLLOWING:
                    case FOLLOWS:
                    case FOR:
                    case FORALL:
                    case FORCE:
                    case FROM:
                    case FULL:
                    case FUNCTION:
                    case GOTO:
                    case GRANT:
                    case GROUP:
                    case GROUPING:
                    case HASH:
                    case HAVING:
                    case HIDE:
                    case HOUR:
                    case IF:
                    case IGNORE:
                    case IMMEDIATE:
                    case IN:
                    case INCLUDE:
                    case INCLUDING:
                    case INCREMENT:
                    case INDENT:
                    case INDEX:
                    case INDEXED:
                    case INDICATOR:
                    case INDICES:
                    case INFINITE:
                    case INLINE:
                    case INNER:
                    case INOUT:
                    case INSERT:
                    case INSTANTIABLE:
                    case INSTEAD:
                    case INT:
                    case INTEGER:
                    case INTERSECT:
                    case INTERVAL:
                    case INTO:
                    case INVALIDATE:
                    case IS:
                    case ISOLATION:
                    case ITERATE:
                    case JAVA:
                    case JOIN:
                    case KEEP:
                    case LANGUAGE:
                    case LAST:
                    case LAST_VALUE:
                    case LEADING:
                    case LEFT:
                    case LEVEL:
                    case LIBRARY:
                    case LIKE:
                    case LIKE2:
                    case LIKE4:
                    case LIKEC:
                    case LIMIT:
                    case LOCAL:
                    case LOCK:
                    case LOCKED:
                    case LOG:
                    case LOGOFF:
                    case LOGON:
                    case LONG:
                    case LOOP:
                    case MAIN:
                    case MAP:
                    case MATCHED:
                    case MAXVALUE:
                    case MEASURES:
                    case MEMBER:
                    case MERGE:
                    case MINUS:
                    case MINUTE:
                    case MINVALUE:
                    case MLSLABEL:
                    case MODE:
                    case MODEL:
                    case MODIFY:
                    case MONTH:
                    case MULTISET:
                    case NAME:
                    case NAN:
                    case NATURAL:
                    case NATURALN:
                    case NAV:
                    case NCHAR:
                    case NCHAR_CS:
                    case NCLOB:
                    case NESTED:
                    case NEW:
                    case NO:
                    case NOAUDIT:
                    case NOCACHE:
                    case NOCOPY:
                    case NOCYCLE:
                    case NOENTITYESCAPING:
                    case NOMAXVALUE:
                    case NOMINVALUE:
                    case NONE:
                    case NOORDER:
                    case NOSCHEMACHECK:
                    case NOT:
                    case NOWAIT:
                    case NULL:
                    case NULLS:
                    case NUMBER:
                    case NUMERIC:
                    case NVARCHAR2:
                    case OBJECT:
                    case OF:
                    case OFF:
                    case OID:
                    case OLD:
                    case ON:
                    case ONLY:
                    case OPEN:
                    case OPTION:
                    case OR:
                    case ORADATA:
                    case ORDER:
                    case ORDINALITY:
                    case OSERROR:
                    case OUT:
                    case OUTER:
                    case OVER:
                    case OVERRIDING:
                    case PACKAGE:
                    case PARALLEL_ENABLE:
                    case PARAMETERS:
                    case PARENT:
                    case PARTITION:
                    case PASSING:
                    case PATH:
                    case PIPELINED:
                    case PIVOT:
                    case PLAN:
                    case PLS_INTEGER:
                    case POSITIVE:
                    case POSITIVEN:
                    case PRAGMA:
                    case PRECEDING:
                    case PRECISION:
                    case PRESENT:
                    case PRIOR:
                    case PROCEDURE:
                    case RAISE:
                    case RANGE:
                    case RAW:
                    case READ:
                    case REAL:
                    case RECORD:
                    case REF:
                    case REFERENCE:
                    case REFERENCING:
                    case REJECT:
                    case RELIES_ON:
                    case RENAME:
                    case REPLACE:
                    case RESPECT:
                    case RESTRICT_REFERENCES:
                    case RESULT:
                    case RESULT_CACHE:
                    case RETURN:
                    case RETURNING:
                    case REUSE:
                    case REVERSE:
                    case REVOKE:
                    case RIGHT:
                    case ROLLBACK:
                    case ROLLUP:
                    case ROW:
                    case ROWID:
                    case ROWS:
                    case RULES:
                    case SAMPLE:
                    case SAVE:
                    case SAVEPOINT:
                    case SCHEMA:
                    case SCHEMACHECK:
                    case SCN:
                    case SEARCH:
                    case SECOND:
                    case SEED:
                    case SEGMENT:
                    case SELECT:
                    case SELF:
                    case SEQUENCE:
                    case SEQUENTIAL:
                    case SERIALIZABLE:
                    case SERIALLY_REUSABLE:
                    case SERVERERROR:
                    case SESSIONTIMEZONE:
                    case SET:
                    case SETS:
                    case SETTINGS:
                    case SHARE:
                    case SHOW:
                    case SHUTDOWN:
                    case SIBLINGS:
                    case SIGNTYPE:
                    case SIMPLE_INTEGER:
                    case SINGLE:
                    case SIZE:
                    case SKIP_:
                    case SMALLINT:
                    case SNAPSHOT:
                    case SOME:
                    case SPECIFICATION:
                    case SQLDATA:
                    case SQLERROR:
                    case SQL_PERCENT_ROWCOUNT:
                    case STANDALONE:
                    case START:
                    case STARTUP:
                    case STATEMENT:
                    case STATEMENT_ID:
                    case STATIC:
                    case STATISTICS:
                    case STRING:
                    case SUBMULTISET:
                    case SUBPARTITION:
                    case SUBSTITUTABLE:
                    case SUBTYPE:
                    case SUCCESS:
                    case SUSPEND:
                    case TABLE:
                    case THE:
                    case THEN:
                    case TIME:
                    case TIMESTAMP:
                    case TIMESTAMP_LTZ_UNCONSTRAINED:
                    case TIMESTAMP_TZ_UNCONSTRAINED:
                    case TIMESTAMP_UNCONSTRAINED:
                    case TIMEZONE_ABBR:
                    case TIMEZONE_HOUR:
                    case TIMEZONE_MINUTE:
                    case TIMEZONE_REGION:
                    case TO:
                    case TO_CHAR:
                    case TRAILING:
                    case TRANSACTION:
                    case TRANSLATE:
                    case TREAT:
                    case TRIGGER:
                    case TRIM:
                    case TRUE:
                    case TRUNCATE:
                    case TYPE:
                    case UNBOUNDED:
                    case UNDER:
                    case UNION:
                    case UNIQUE:
                    case UNLIMITED:
                    case UNPIVOT:
                    case UNTIL:
                    case UPDATE:
                    case UPDATED:
                    case UPSERT:
                    case UROWID:
                    case USE:
                    case USING:
                    case VALIDATE:
                    case VALUE:
                    case VALUES:
                    case VARCHAR:
                    case VARCHAR2:
                    case VARIABLE:
                    case VARRAY:
                    case VARYING:
                    case VERSION:
                    case VERSIONS:
                    case WAIT:
                    case WARNING:
                    case WELLFORMED:
                    case WHEN:
                    case WHENEVER:
                    case WHERE:
                    case WHILE:
                    case WITH:
                    case WITHIN:
                    case WORK:
                    case WRITE:
                    case XML:
                    case XMLAGG:
                    case XMLATTRIBUTES:
                    case XMLCAST:
                    case XMLCOLATTVAL:
                    case XMLELEMENT:
                    case XMLEXISTS:
                    case XMLFOREST:
                    case XMLNAMESPACES:
                    case XMLPARSE:
                    case XMLPI:
                    case XMLQUERY:
                    case XMLROOT:
                    case XMLSERIALIZE:
                    case XMLTABLE:
                    case YEAR:
                    case YES:
                    case YMINTERVAL_UNCONSTRAINED:
                    case ZONE:
                    case PREDICTION:
                    case PREDICTION_BOUNDS:
                    case PREDICTION_COST:
                    case PREDICTION_DETAILS:
                    case PREDICTION_PROBABILITY:
                    case PREDICTION_SET:
                    case CUME_DIST:
                    case DENSE_RANK:
                    case LISTAGG:
                    case PERCENT_RANK:
                    case PERCENTILE_CONT:
                    case PERCENTILE_DISC:
                    case RANK:
                    case AVG:
                    case CORR:
                    case LAG:
                    case LEAD:
                    case MAX:
                    case MEDIAN:
                    case MIN:
                    case NTILE:
                    case RATIO_TO_REPORT:
                    case ROW_NUMBER:
                    case SUM:
                    case VARIANCE:
                    case REGR_:
                    case STDDEV:
                    case VAR_:
                    case COVAR_:
                    case DELIMITED_ID:
                    case INTRODUCER:
                    case REGULAR_ID:
                    {
                        setState(3090);
                        column_name();
                    }
                    break;
                    case LEFT_PAREN:
                    {
                        setState(3091);
                        match(LEFT_PAREN);
                        setState(3092);
                        column_name();
                        setState(3097);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la==COMMA) {
                            {
                                {
                                    setState(3093);
                                    match(COMMA);
                                    setState(3094);
                                    column_name();
                                }
                            }
                            setState(3099);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                        setState(3100);
                        match(RIGHT_PAREN);
                    }
                    break;
                    default:
                        throw new NoViableAltException(this);
                }
                setState(3119);
                _la = _input.LA(1);
                if (_la==AS) {
                    {
                        setState(3104);
                        match(AS);
                        setState(3117);
                        switch (_input.LA(1)) {
                            case DATE:
                            case DBTIMEZONE:
                            case DEFAULT:
                            case FALSE:
                            case INTERVAL:
                            case MAXVALUE:
                            case MINVALUE:
                            case NULL:
                            case SESSIONTIMEZONE:
                            case TIMESTAMP:
                            case TRUE:
                            case NATIONAL_CHAR_STRING_LIT:
                            case UNSIGNED_INTEGER:
                            case APPROXIMATE_NUM_LIT:
                            case CHAR_STRING:
                            {
                                setState(3105);
                                constant();
                            }
                            break;
                            case LEFT_PAREN:
                            {
                                setState(3106);
                                match(LEFT_PAREN);
                                setState(3107);
                                constant();
                                setState(3112);
                                _errHandler.sync(this);
                                _la = _input.LA(1);
                                while (_la==COMMA) {
                                    {
                                        {
                                            setState(3108);
                                            match(COMMA);
                                            setState(3109);
                                            constant();
                                        }
                                    }
                                    setState(3114);
                                    _errHandler.sync(this);
                                    _la = _input.LA(1);
                                }
                                setState(3115);
                                match(RIGHT_PAREN);
                            }
                            break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Hierarchical_query_clauseContext extends ParserRuleContext {
        public TerminalNode CONNECT() { return getToken(PlSqlParser.CONNECT, 0); }
        public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
        public ConditionContext condition() {
            return getRuleContext(ConditionContext.class,0);
        }
        public TerminalNode NOCYCLE() { return getToken(PlSqlParser.NOCYCLE, 0); }
        public Start_partContext start_part() {
            return getRuleContext(Start_partContext.class,0);
        }
        public Hierarchical_query_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_hierarchical_query_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterHierarchical_query_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitHierarchical_query_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitHierarchical_query_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Hierarchical_query_clauseContext hierarchical_query_clause() throws RecognitionException {
        Hierarchical_query_clauseContext _localctx = new Hierarchical_query_clauseContext(_ctx, getState());
        enterRule(_localctx, 376, RULE_hierarchical_query_clause);
        try {
            setState(3138);
            switch (_input.LA(1)) {
                case CONNECT:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3121);
                    match(CONNECT);
                    setState(3122);
                    match(BY);
                    setState(3124);
                    _errHandler.sync(this);
                    switch ( getInterpreter().adaptivePredict(_input,350,_ctx) ) {
                        case 1:
                        {
                            setState(3123);
                            match(NOCYCLE);
                        }
                        break;
                    }
                    setState(3126);
                    condition();
                    setState(3128);
                    _errHandler.sync(this);
                    switch ( getInterpreter().adaptivePredict(_input,351,_ctx) ) {
                        case 1:
                        {
                            setState(3127);
                            start_part();
                        }
                        break;
                    }
                }
                break;
                case START:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3130);
                    start_part();
                    setState(3131);
                    match(CONNECT);
                    setState(3132);
                    match(BY);
                    setState(3134);
                    _errHandler.sync(this);
                    switch ( getInterpreter().adaptivePredict(_input,352,_ctx) ) {
                        case 1:
                        {
                            setState(3133);
                            match(NOCYCLE);
                        }
                        break;
                    }
                    setState(3136);
                    condition();
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Start_partContext extends ParserRuleContext {
        public TerminalNode START() { return getToken(PlSqlParser.START, 0); }
        public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
        public ConditionContext condition() {
            return getRuleContext(ConditionContext.class,0);
        }
        public Start_partContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_start_part; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterStart_part(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitStart_part(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitStart_part(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Start_partContext start_part() throws RecognitionException {
        Start_partContext _localctx = new Start_partContext(_ctx, getState());
        enterRule(_localctx, 378, RULE_start_part);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3140);
                match(START);
                setState(3141);
                match(WITH);
                setState(3142);
                condition();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Group_by_clauseContext extends ParserRuleContext {
        public TerminalNode GROUP() { return getToken(PlSqlParser.GROUP, 0); }
        public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
        public List<Group_by_elementsContext> group_by_elements() {
            return getRuleContexts(Group_by_elementsContext.class);
        }
        public Group_by_elementsContext group_by_elements(int i) {
            return getRuleContext(Group_by_elementsContext.class,i);
        }
        public Having_clauseContext having_clause() {
            return getRuleContext(Having_clauseContext.class,0);
        }
        public Group_by_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_group_by_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterGroup_by_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitGroup_by_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitGroup_by_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Group_by_clauseContext group_by_clause() throws RecognitionException {
        Group_by_clauseContext _localctx = new Group_by_clauseContext(_ctx, getState());
        enterRule(_localctx, 380, RULE_group_by_clause);
        try {
            int _alt;
            setState(3170);
            switch (_input.LA(1)) {
                case GROUP:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3144);
                    match(GROUP);
                    setState(3145);
                    match(BY);
                    setState(3146);
                    group_by_elements();
                    setState(3151);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input,354,_ctx);
                    while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
                        if ( _alt==1 ) {
                            {
                                {
                                    setState(3147);
                                    match(COMMA);
                                    setState(3148);
                                    group_by_elements();
                                }
                            }
                        }
                        setState(3153);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input,354,_ctx);
                    }
                    setState(3155);
                    _errHandler.sync(this);
                    switch ( getInterpreter().adaptivePredict(_input,355,_ctx) ) {
                        case 1:
                        {
                            setState(3154);
                            having_clause();
                        }
                        break;
                    }
                }
                break;
                case HAVING:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3157);
                    having_clause();
                    setState(3168);
                    _errHandler.sync(this);
                    switch ( getInterpreter().adaptivePredict(_input,357,_ctx) ) {
                        case 1:
                        {
                            setState(3158);
                            match(GROUP);
                            setState(3159);
                            match(BY);
                            setState(3160);
                            group_by_elements();
                            setState(3165);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input,356,_ctx);
                            while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
                                if ( _alt==1 ) {
                                    {
                                        {
                                            setState(3161);
                                            match(COMMA);
                                            setState(3162);
                                            group_by_elements();
                                        }
                                    }
                                }
                                setState(3167);
                                _errHandler.sync(this);
                                _alt = getInterpreter().adaptivePredict(_input,356,_ctx);
                            }
                        }
                        break;
                    }
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Group_by_elementsContext extends ParserRuleContext {
        public Grouping_sets_clauseContext grouping_sets_clause() {
            return getRuleContext(Grouping_sets_clauseContext.class,0);
        }
        public Rollup_cube_clauseContext rollup_cube_clause() {
            return getRuleContext(Rollup_cube_clauseContext.class,0);
        }
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class,0);
        }
        public Group_by_elementsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_group_by_elements; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterGroup_by_elements(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitGroup_by_elements(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitGroup_by_elements(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Group_by_elementsContext group_by_elements() throws RecognitionException {
        Group_by_elementsContext _localctx = new Group_by_elementsContext(_ctx, getState());
        enterRule(_localctx, 382, RULE_group_by_elements);
        try {
            setState(3175);
            _errHandler.sync(this);
            switch ( getInterpreter().adaptivePredict(_input,359,_ctx) ) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3172);
                    grouping_sets_clause();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3173);
                    rollup_cube_clause();
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(3174);
                    expression();
                }
                break;
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Rollup_cube_clauseContext extends ParserRuleContext {
        public List<Grouping_sets_elementsContext> grouping_sets_elements() {
            return getRuleContexts(Grouping_sets_elementsContext.class);
        }
        public Grouping_sets_elementsContext grouping_sets_elements(int i) {
            return getRuleContext(Grouping_sets_elementsContext.class,i);
        }
        public TerminalNode ROLLUP() { return getToken(PlSqlParser.ROLLUP, 0); }
        public TerminalNode CUBE() { return getToken(PlSqlParser.CUBE, 0); }
        public Rollup_cube_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_rollup_cube_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterRollup_cube_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitRollup_cube_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitRollup_cube_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Rollup_cube_clauseContext rollup_cube_clause() throws RecognitionException {
        Rollup_cube_clauseContext _localctx = new Rollup_cube_clauseContext(_ctx, getState());
        enterRule(_localctx, 384, RULE_rollup_cube_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3177);
                _la = _input.LA(1);
                if ( !(_la==CUBE || _la==ROLLUP) ) {
                    _errHandler.recoverInline(this);
                } else {
                    consume();
                }
                setState(3178);
                match(LEFT_PAREN);
                setState(3179);
                grouping_sets_elements();
                setState(3184);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==COMMA) {
                    {
                        {
                            setState(3180);
                            match(COMMA);
                            setState(3181);
                            grouping_sets_elements();
                        }
                    }
                    setState(3186);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(3187);
                match(RIGHT_PAREN);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Grouping_sets_clauseContext extends ParserRuleContext {
        public TerminalNode GROUPING() { return getToken(PlSqlParser.GROUPING, 0); }
        public TerminalNode SETS() { return getToken(PlSqlParser.SETS, 0); }
        public List<Grouping_sets_elementsContext> grouping_sets_elements() {
            return getRuleContexts(Grouping_sets_elementsContext.class);
        }
        public Grouping_sets_elementsContext grouping_sets_elements(int i) {
            return getRuleContext(Grouping_sets_elementsContext.class,i);
        }
        public Grouping_sets_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_grouping_sets_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterGrouping_sets_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitGrouping_sets_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitGrouping_sets_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Grouping_sets_clauseContext grouping_sets_clause() throws RecognitionException {
        Grouping_sets_clauseContext _localctx = new Grouping_sets_clauseContext(_ctx, getState());
        enterRule(_localctx, 386, RULE_grouping_sets_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3189);
                match(GROUPING);
                setState(3190);
                match(SETS);
                setState(3191);
                match(LEFT_PAREN);
                setState(3192);
                grouping_sets_elements();
                setState(3197);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==COMMA) {
                    {
                        {
                            setState(3193);
                            match(COMMA);
                            setState(3194);
                            grouping_sets_elements();
                        }
                    }
                    setState(3199);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(3200);
                match(RIGHT_PAREN);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Grouping_sets_elementsContext extends ParserRuleContext {
        public Rollup_cube_clauseContext rollup_cube_clause() {
            return getRuleContext(Rollup_cube_clauseContext.class,0);
        }
        public Expression_listContext expression_list() {
            return getRuleContext(Expression_listContext.class,0);
        }
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class,0);
        }
        public Grouping_sets_elementsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_grouping_sets_elements; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterGrouping_sets_elements(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitGrouping_sets_elements(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitGrouping_sets_elements(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Grouping_sets_elementsContext grouping_sets_elements() throws RecognitionException {
        Grouping_sets_elementsContext _localctx = new Grouping_sets_elementsContext(_ctx, getState());
        enterRule(_localctx, 388, RULE_grouping_sets_elements);
        try {
            setState(3205);
            _errHandler.sync(this);
            switch ( getInterpreter().adaptivePredict(_input,362,_ctx) ) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3202);
                    rollup_cube_clause();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3203);
                    expression_list();
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(3204);
                    expression();
                }
                break;
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Having_clauseContext extends ParserRuleContext {
        public TerminalNode HAVING() { return getToken(PlSqlParser.HAVING, 0); }
        public ConditionContext condition() {
            return getRuleContext(ConditionContext.class,0);
        }
        public Having_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_having_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterHaving_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitHaving_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitHaving_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Having_clauseContext having_clause() throws RecognitionException {
        Having_clauseContext _localctx = new Having_clauseContext(_ctx, getState());
        enterRule(_localctx, 390, RULE_having_clause);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3207);
                match(HAVING);
                setState(3208);
                condition();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Model_clauseContext extends ParserRuleContext {
        public TerminalNode MODEL() { return getToken(PlSqlParser.MODEL, 0); }
        public Main_modelContext main_model() {
            return getRuleContext(Main_modelContext.class,0);
        }
        public List<Cell_reference_optionsContext> cell_reference_options() {
            return getRuleContexts(Cell_reference_optionsContext.class);
        }
        public Cell_reference_optionsContext cell_reference_options(int i) {
            return getRuleContext(Cell_reference_optionsContext.class,i);
        }
        public Return_rows_clauseContext return_rows_clause() {
            return getRuleContext(Return_rows_clauseContext.class,0);
        }
        public List<Reference_modelContext> reference_model() {
            return getRuleContexts(Reference_modelContext.class);
        }
        public Reference_modelContext reference_model(int i) {
            return getRuleContext(Reference_modelContext.class,i);
        }
        public Model_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_model_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterModel_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitModel_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitModel_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Model_clauseContext model_clause() throws RecognitionException {
        Model_clauseContext _localctx = new Model_clauseContext(_ctx, getState());
        enterRule(_localctx, 392, RULE_model_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3210);
                match(MODEL);
                setState(3214);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
                    {
                        {
                            setState(3211);
                            cell_reference_options();
                        }
                    }
                    setState(3216);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(3218);
                _la = _input.LA(1);
                if (_la==RETURN) {
                    {
                        setState(3217);
                        return_rows_clause();
                    }
                }

                setState(3223);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==REFERENCE) {
                    {
                        {
                            setState(3220);
                            reference_model();
                        }
                    }
                    setState(3225);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(3226);
                main_model();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Cell_reference_optionsContext extends ParserRuleContext {
        public TerminalNode NAV() { return getToken(PlSqlParser.NAV, 0); }
        public TerminalNode IGNORE() { return getToken(PlSqlParser.IGNORE, 0); }
        public TerminalNode KEEP() { return getToken(PlSqlParser.KEEP, 0); }
        public TerminalNode UNIQUE() { return getToken(PlSqlParser.UNIQUE, 0); }
        public TerminalNode DIMENSION() { return getToken(PlSqlParser.DIMENSION, 0); }
        public TerminalNode SINGLE() { return getToken(PlSqlParser.SINGLE, 0); }
        public TerminalNode REFERENCE() { return getToken(PlSqlParser.REFERENCE, 0); }
        public Cell_reference_optionsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_cell_reference_options; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCell_reference_options(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCell_reference_options(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCell_reference_options(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Cell_reference_optionsContext cell_reference_options() throws RecognitionException {
        Cell_reference_optionsContext _localctx = new Cell_reference_optionsContext(_ctx, getState());
        enterRule(_localctx, 394, RULE_cell_reference_options);
        int _la;
        try {
            setState(3236);
            switch (_input.LA(1)) {
                case IGNORE:
                case KEEP:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3228);
                    _la = _input.LA(1);
                    if ( !(_la==IGNORE || _la==KEEP) ) {
                        _errHandler.recoverInline(this);
                    } else {
                        consume();
                    }
                    setState(3229);
                    match(NAV);
                }
                break;
                case UNIQUE:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3230);
                    match(UNIQUE);
                    setState(3234);
                    switch (_input.LA(1)) {
                        case DIMENSION:
                        {
                            setState(3231);
                            match(DIMENSION);
                        }
                        break;
                        case SINGLE:
                        {
                            setState(3232);
                            match(SINGLE);
                            setState(3233);
                            match(REFERENCE);
                        }
                        break;
                        default:
                            throw new NoViableAltException(this);
                    }
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Return_rows_clauseContext extends ParserRuleContext {
        public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
        public TerminalNode ROWS() { return getToken(PlSqlParser.ROWS, 0); }
        public TerminalNode UPDATED() { return getToken(PlSqlParser.UPDATED, 0); }
        public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
        public Return_rows_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_return_rows_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterReturn_rows_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitReturn_rows_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitReturn_rows_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Return_rows_clauseContext return_rows_clause() throws RecognitionException {
        Return_rows_clauseContext _localctx = new Return_rows_clauseContext(_ctx, getState());
        enterRule(_localctx, 396, RULE_return_rows_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3238);
                match(RETURN);
                setState(3239);
                _la = _input.LA(1);
                if ( !(_la==ALL || _la==UPDATED) ) {
                    _errHandler.recoverInline(this);
                } else {
                    consume();
                }
                setState(3240);
                match(ROWS);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Reference_modelContext extends ParserRuleContext {
        public TerminalNode REFERENCE() { return getToken(PlSqlParser.REFERENCE, 0); }
        public Reference_model_nameContext reference_model_name() {
            return getRuleContext(Reference_model_nameContext.class,0);
        }
        public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
        public SubqueryContext subquery() {
            return getRuleContext(SubqueryContext.class,0);
        }
        public Model_column_clausesContext model_column_clauses() {
            return getRuleContext(Model_column_clausesContext.class,0);
        }
        public List<Cell_reference_optionsContext> cell_reference_options() {
            return getRuleContexts(Cell_reference_optionsContext.class);
        }
        public Cell_reference_optionsContext cell_reference_options(int i) {
            return getRuleContext(Cell_reference_optionsContext.class,i);
        }
        public Reference_modelContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_reference_model; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterReference_model(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitReference_model(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitReference_model(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Reference_modelContext reference_model() throws RecognitionException {
        Reference_modelContext _localctx = new Reference_modelContext(_ctx, getState());
        enterRule(_localctx, 398, RULE_reference_model);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3242);
                match(REFERENCE);
                setState(3243);
                reference_model_name();
                setState(3244);
                match(ON);
                setState(3245);
                match(LEFT_PAREN);
                setState(3246);
                subquery();
                setState(3247);
                match(RIGHT_PAREN);
                setState(3248);
                model_column_clauses();
                setState(3252);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
                    {
                        {
                            setState(3249);
                            cell_reference_options();
                        }
                    }
                    setState(3254);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Main_modelContext extends ParserRuleContext {
        public Model_column_clausesContext model_column_clauses() {
            return getRuleContext(Model_column_clausesContext.class,0);
        }
        public Model_rules_clauseContext model_rules_clause() {
            return getRuleContext(Model_rules_clauseContext.class,0);
        }
        public TerminalNode MAIN() { return getToken(PlSqlParser.MAIN, 0); }
        public Main_model_nameContext main_model_name() {
            return getRuleContext(Main_model_nameContext.class,0);
        }
        public List<Cell_reference_optionsContext> cell_reference_options() {
            return getRuleContexts(Cell_reference_optionsContext.class);
        }
        public Cell_reference_optionsContext cell_reference_options(int i) {
            return getRuleContext(Cell_reference_optionsContext.class,i);
        }
        public Main_modelContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_main_model; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMain_model(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMain_model(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMain_model(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Main_modelContext main_model() throws RecognitionException {
        Main_modelContext _localctx = new Main_modelContext(_ctx, getState());
        enterRule(_localctx, 400, RULE_main_model);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3257);
                _la = _input.LA(1);
                if (_la==MAIN) {
                    {
                        setState(3255);
                        match(MAIN);
                        setState(3256);
                        main_model_name();
                    }
                }

                setState(3259);
                model_column_clauses();
                setState(3263);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
                    {
                        {
                            setState(3260);
                            cell_reference_options();
                        }
                    }
                    setState(3265);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(3266);
                model_rules_clause();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Model_column_clausesContext extends ParserRuleContext {
        public TerminalNode DIMENSION() { return getToken(PlSqlParser.DIMENSION, 0); }
        public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
        public List<Model_column_listContext> model_column_list() {
            return getRuleContexts(Model_column_listContext.class);
        }
        public Model_column_listContext model_column_list(int i) {
            return getRuleContext(Model_column_listContext.class,i);
        }
        public TerminalNode MEASURES() { return getToken(PlSqlParser.MEASURES, 0); }
        public Model_column_partition_partContext model_column_partition_part() {
            return getRuleContext(Model_column_partition_partContext.class,0);
        }
        public Model_column_clausesContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_model_column_clauses; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterModel_column_clauses(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitModel_column_clauses(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitModel_column_clauses(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Model_column_clausesContext model_column_clauses() throws RecognitionException {
        Model_column_clausesContext _localctx = new Model_column_clausesContext(_ctx, getState());
        enterRule(_localctx, 402, RULE_model_column_clauses);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3269);
                _la = _input.LA(1);
                if (_la==PARTITION) {
                    {
                        setState(3268);
                        model_column_partition_part();
                    }
                }

                setState(3271);
                match(DIMENSION);
                setState(3272);
                match(BY);
                setState(3273);
                model_column_list();
                setState(3274);
                match(MEASURES);
                setState(3275);
                model_column_list();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Model_column_partition_partContext extends ParserRuleContext {
        public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
        public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
        public Model_column_listContext model_column_list() {
            return getRuleContext(Model_column_listContext.class,0);
        }
        public Model_column_partition_partContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_model_column_partition_part; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterModel_column_partition_part(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitModel_column_partition_part(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitModel_column_partition_part(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Model_column_partition_partContext model_column_partition_part() throws RecognitionException {
        Model_column_partition_partContext _localctx = new Model_column_partition_partContext(_ctx, getState());
        enterRule(_localctx, 404, RULE_model_column_partition_part);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3277);
                match(PARTITION);
                setState(3278);
                match(BY);
                setState(3279);
                model_column_list();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Model_column_listContext extends ParserRuleContext {
        public List<Model_columnContext> model_column() {
            return getRuleContexts(Model_columnContext.class);
        }
        public Model_columnContext model_column(int i) {
            return getRuleContext(Model_columnContext.class,i);
        }
        public Model_column_listContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_model_column_list; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterModel_column_list(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitModel_column_list(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitModel_column_list(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Model_column_listContext model_column_list() throws RecognitionException {
        Model_column_listContext _localctx = new Model_column_listContext(_ctx, getState());
        enterRule(_localctx, 406, RULE_model_column_list);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3281);
                match(LEFT_PAREN);
                setState(3282);
                model_column();
                setState(3287);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==COMMA) {
                    {
                        {
                            setState(3283);
                            match(COMMA);
                            setState(3284);
                            model_column();
                        }
                    }
                    setState(3289);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(3290);
                match(RIGHT_PAREN);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Model_columnContext extends ParserRuleContext {
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class,0);
        }
        public Table_aliasContext table_alias() {
            return getRuleContext(Table_aliasContext.class,0);
        }
        public Model_columnContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_model_column; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterModel_column(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitModel_column(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitModel_column(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Model_columnContext model_column() throws RecognitionException {
        Model_columnContext _localctx = new Model_columnContext(_ctx, getState());
        enterRule(_localctx, 408, RULE_model_column);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3292);
                expression();
                setState(3294);
                _la = _input.LA(1);
                if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ALTER) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREADTH) | (1L << BULK) | (1L << BY) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHECK) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DEPTH - 64)) | (1L << (DESC - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (ELSE - 64)) | (1L << (ELSIF - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (END - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EXCEPT - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXCLUSIVE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FETCH - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FOR - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GOTO - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HAVING - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IN - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEX - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERSECT - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTO - 192)) | (1L << (INVALIDATE - 192)) | (1L << (IS - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCK - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUS - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCACHE - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)) | (1L << (NOENTITYESCAPING - 192)) | (1L << (NOMAXVALUE - 192)) | (1L << (NOMINVALUE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NONE - 256)) | (1L << (NOORDER - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NOT - 256)) | (1L << (NOWAIT - 256)) | (1L << (NULL - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OF - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ON - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (OPTION - 256)) | (1L << (OR - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDER - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PIVOT - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (PRIOR - 256)) | (1L << (PROCEDURE - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (REVOKE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SEARCH - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELECT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENCE - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHARE - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (SQL_PERCENT_ROWCOUNT - 320)) | (1L << (STANDALONE - 320)) | (1L << (START - 320)) | (1L << (STARTUP - 320)) | (1L << (STATEMENT - 320)) | (1L << (STATEMENT_ID - 320)) | (1L << (STATIC - 320)) | (1L << (STATISTICS - 320)) | (1L << (STRING - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TABLE - 384)) | (1L << (THE - 384)) | (1L << (THEN - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TO - 384)) | (1L << (TO_CHAR - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUE - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNION - 384)) | (1L << (UNIQUE - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNPIVOT - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATE - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (USING - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VALUES - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHEN - 384)) | (1L << (WHENEVER - 384)) | (1L << (WHERE - 384)) | (1L << (WHILE - 384)) | (1L << (WITH - 384)) | (1L << (WITHIN - 384)) | (1L << (WORK - 384)) | (1L << (WRITE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)) | (1L << (REGR_ - 448)) | (1L << (STDDEV - 448)) | (1L << (VAR_ - 448)) | (1L << (COVAR_ - 448)) | (1L << (NATIONAL_CHAR_STRING_LIT - 448)) | (1L << (CHAR_STRING - 448)) | (1L << (DELIMITED_ID - 448)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
                    {
                        setState(3293);
                        table_alias();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Model_rules_clauseContext extends ParserRuleContext {
        public List<Model_rules_elementContext> model_rules_element() {
            return getRuleContexts(Model_rules_elementContext.class);
        }
        public Model_rules_elementContext model_rules_element(int i) {
            return getRuleContext(Model_rules_elementContext.class,i);
        }
        public Model_rules_partContext model_rules_part() {
            return getRuleContext(Model_rules_partContext.class,0);
        }
        public Model_rules_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_model_rules_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterModel_rules_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitModel_rules_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitModel_rules_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Model_rules_clauseContext model_rules_clause() throws RecognitionException {
        Model_rules_clauseContext _localctx = new Model_rules_clauseContext(_ctx, getState());
        enterRule(_localctx, 410, RULE_model_rules_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3297);
                _la = _input.LA(1);
                if (_la==RULES) {
                    {
                        setState(3296);
                        model_rules_part();
                    }
                }

                setState(3299);
                match(LEFT_PAREN);
                setState(3300);
                model_rules_element();
                setState(3305);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==COMMA) {
                    {
                        {
                            setState(3301);
                            match(COMMA);
                            setState(3302);
                            model_rules_element();
                        }
                    }
                    setState(3307);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(3308);
                match(RIGHT_PAREN);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Model_rules_partContext extends ParserRuleContext {
        public TerminalNode RULES() { return getToken(PlSqlParser.RULES, 0); }
        public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
        public TerminalNode UPSERT() { return getToken(PlSqlParser.UPSERT, 0); }
        public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
        public Model_iterate_clauseContext model_iterate_clause() {
            return getRuleContext(Model_iterate_clauseContext.class,0);
        }
        public TerminalNode AUTOMATIC() { return getToken(PlSqlParser.AUTOMATIC, 0); }
        public TerminalNode SEQUENTIAL() { return getToken(PlSqlParser.SEQUENTIAL, 0); }
        public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
        public Model_rules_partContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_model_rules_part; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterModel_rules_part(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitModel_rules_part(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitModel_rules_part(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Model_rules_partContext model_rules_part() throws RecognitionException {
        Model_rules_partContext _localctx = new Model_rules_partContext(_ctx, getState());
        enterRule(_localctx, 412, RULE_model_rules_part);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3310);
                match(RULES);
                setState(3316);
                switch (_input.LA(1)) {
                    case UPDATE:
                    {
                        setState(3311);
                        match(UPDATE);
                    }
                    break;
                    case UPSERT:
                    {
                        setState(3312);
                        match(UPSERT);
                        setState(3314);
                        _la = _input.LA(1);
                        if (_la==ALL) {
                            {
                                setState(3313);
                                match(ALL);
                            }
                        }

                    }
                    break;
                    case AUTOMATIC:
                    case ITERATE:
                    case SEQUENTIAL:
                    case LEFT_PAREN:
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
                setState(3320);
                _la = _input.LA(1);
                if (_la==AUTOMATIC || _la==SEQUENTIAL) {
                    {
                        setState(3318);
                        _la = _input.LA(1);
                        if ( !(_la==AUTOMATIC || _la==SEQUENTIAL) ) {
                            _errHandler.recoverInline(this);
                        } else {
                            consume();
                        }
                        setState(3319);
                        match(ORDER);
                    }
                }

                setState(3323);
                _la = _input.LA(1);
                if (_la==ITERATE) {
                    {
                        setState(3322);
                        model_iterate_clause();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Model_rules_elementContext extends ParserRuleContext {
        public Cell_assignmentContext cell_assignment() {
            return getRuleContext(Cell_assignmentContext.class,0);
        }
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class,0);
        }
        public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
        public TerminalNode UPSERT() { return getToken(PlSqlParser.UPSERT, 0); }
        public Order_by_clauseContext order_by_clause() {
            return getRuleContext(Order_by_clauseContext.class,0);
        }
        public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
        public Model_rules_elementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_model_rules_element; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterModel_rules_element(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitModel_rules_element(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitModel_rules_element(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Model_rules_elementContext model_rules_element() throws RecognitionException {
        Model_rules_elementContext _localctx = new Model_rules_elementContext(_ctx, getState());
        enterRule(_localctx, 414, RULE_model_rules_element);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3330);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,381,_ctx) ) {
                    case 1:
                    {
                        setState(3325);
                        match(UPDATE);
                    }
                    break;
                    case 2:
                    {
                        setState(3326);
                        match(UPSERT);
                        setState(3328);
                        _errHandler.sync(this);
                        switch ( getInterpreter().adaptivePredict(_input,380,_ctx) ) {
                            case 1:
                            {
                                setState(3327);
                                match(ALL);
                            }
                            break;
                        }
                    }
                    break;
                }
                setState(3332);
                cell_assignment();
                setState(3334);
                _la = _input.LA(1);
                if (_la==ORDER) {
                    {
                        setState(3333);
                        order_by_clause();
                    }
                }

                setState(3336);
                match(EQUALS_OP);
                setState(3337);
                expression();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Cell_assignmentContext extends ParserRuleContext {
        public Model_expressionContext model_expression() {
            return getRuleContext(Model_expressionContext.class,0);
        }
        public Cell_assignmentContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_cell_assignment; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCell_assignment(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCell_assignment(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCell_assignment(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Cell_assignmentContext cell_assignment() throws RecognitionException {
        Cell_assignmentContext _localctx = new Cell_assignmentContext(_ctx, getState());
        enterRule(_localctx, 416, RULE_cell_assignment);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3339);
                model_expression();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Model_iterate_clauseContext extends ParserRuleContext {
        public TerminalNode ITERATE() { return getToken(PlSqlParser.ITERATE, 0); }
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class,0);
        }
        public Until_partContext until_part() {
            return getRuleContext(Until_partContext.class,0);
        }
        public Model_iterate_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_model_iterate_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterModel_iterate_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitModel_iterate_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitModel_iterate_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Model_iterate_clauseContext model_iterate_clause() throws RecognitionException {
        Model_iterate_clauseContext _localctx = new Model_iterate_clauseContext(_ctx, getState());
        enterRule(_localctx, 418, RULE_model_iterate_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3341);
                match(ITERATE);
                setState(3342);
                match(LEFT_PAREN);
                setState(3343);
                expression();
                setState(3344);
                match(RIGHT_PAREN);
                setState(3346);
                _la = _input.LA(1);
                if (_la==UNTIL) {
                    {
                        setState(3345);
                        until_part();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Until_partContext extends ParserRuleContext {
        public TerminalNode UNTIL() { return getToken(PlSqlParser.UNTIL, 0); }
        public ConditionContext condition() {
            return getRuleContext(ConditionContext.class,0);
        }
        public Until_partContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_until_part; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterUntil_part(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitUntil_part(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitUntil_part(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Until_partContext until_part() throws RecognitionException {
        Until_partContext _localctx = new Until_partContext(_ctx, getState());
        enterRule(_localctx, 420, RULE_until_part);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3348);
                match(UNTIL);
                setState(3349);
                match(LEFT_PAREN);
                setState(3350);
                condition();
                setState(3351);
                match(RIGHT_PAREN);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Order_by_clauseContext extends ParserRuleContext {
        public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
        public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
        public List<Order_by_elementsContext> order_by_elements() {
            return getRuleContexts(Order_by_elementsContext.class);
        }
        public Order_by_elementsContext order_by_elements(int i) {
            return getRuleContext(Order_by_elementsContext.class,i);
        }
        public TerminalNode SIBLINGS() { return getToken(PlSqlParser.SIBLINGS, 0); }
        public Order_by_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_order_by_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterOrder_by_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitOrder_by_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitOrder_by_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Order_by_clauseContext order_by_clause() throws RecognitionException {
        Order_by_clauseContext _localctx = new Order_by_clauseContext(_ctx, getState());
        enterRule(_localctx, 422, RULE_order_by_clause);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(3353);
                match(ORDER);
                setState(3355);
                _la = _input.LA(1);
                if (_la==SIBLINGS) {
                    {
                        setState(3354);
                        match(SIBLINGS);
                    }
                }

                setState(3357);
                match(BY);
                setState(3358);
                order_by_elements();
                setState(3363);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input,385,_ctx);
                while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
                    if ( _alt==1 ) {
                        {
                            {
                                setState(3359);
                                match(COMMA);
                                setState(3360);
                                order_by_elements();
                            }
                        }
                    }
                    setState(3365);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input,385,_ctx);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Order_by_elementsContext extends ParserRuleContext {
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class,0);
        }
        public TerminalNode NULLS() { return getToken(PlSqlParser.NULLS, 0); }
        public TerminalNode ASC() { return getToken(PlSqlParser.ASC, 0); }
        public TerminalNode DESC() { return getToken(PlSqlParser.DESC, 0); }
        public TerminalNode FIRST() { return getToken(PlSqlParser.FIRST, 0); }
        public TerminalNode LAST() { return getToken(PlSqlParser.LAST, 0); }
        public Order_by_elementsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_order_by_elements; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterOrder_by_elements(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitOrder_by_elements(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitOrder_by_elements(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Order_by_elementsContext order_by_elements() throws RecognitionException {
        Order_by_elementsContext _localctx = new Order_by_elementsContext(_ctx, getState());
        enterRule(_localctx, 424, RULE_order_by_elements);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3366);
                expression();
                setState(3368);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,386,_ctx) ) {
                    case 1:
                    {
                        setState(3367);
                        _la = _input.LA(1);
                        if ( !(_la==ASC || _la==DESC) ) {
                            _errHandler.recoverInline(this);
                        } else {
                            consume();
                        }
                    }
                    break;
                }
                setState(3372);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,387,_ctx) ) {
                    case 1:
                    {
                        setState(3370);
                        match(NULLS);
                        setState(3371);
                        _la = _input.LA(1);
                        if ( !(_la==FIRST || _la==LAST) ) {
                            _errHandler.recoverInline(this);
                        } else {
                            consume();
                        }
                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class For_update_clauseContext extends ParserRuleContext {
        public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
        public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
        public For_update_of_partContext for_update_of_part() {
            return getRuleContext(For_update_of_partContext.class,0);
        }
        public For_update_optionsContext for_update_options() {
            return getRuleContext(For_update_optionsContext.class,0);
        }
        public For_update_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_for_update_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFor_update_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFor_update_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFor_update_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final For_update_clauseContext for_update_clause() throws RecognitionException {
        For_update_clauseContext _localctx = new For_update_clauseContext(_ctx, getState());
        enterRule(_localctx, 426, RULE_for_update_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3374);
                match(FOR);
                setState(3375);
                match(UPDATE);
                setState(3377);
                _la = _input.LA(1);
                if (_la==OF) {
                    {
                        setState(3376);
                        for_update_of_part();
                    }
                }

                setState(3380);
                _la = _input.LA(1);
                if (_la==NOWAIT || _la==SKIP_ || _la==WAIT) {
                    {
                        setState(3379);
                        for_update_options();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class For_update_of_partContext extends ParserRuleContext {
        public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
        public List<Column_nameContext> column_name() {
            return getRuleContexts(Column_nameContext.class);
        }
        public Column_nameContext column_name(int i) {
            return getRuleContext(Column_nameContext.class,i);
        }
        public For_update_of_partContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_for_update_of_part; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFor_update_of_part(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFor_update_of_part(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFor_update_of_part(this);
            else return visitor.visitChildren(this);
        }
    }

    public final For_update_of_partContext for_update_of_part() throws RecognitionException {
        For_update_of_partContext _localctx = new For_update_of_partContext(_ctx, getState());
        enterRule(_localctx, 428, RULE_for_update_of_part);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3382);
                match(OF);
                setState(3383);
                column_name();
                setState(3388);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==COMMA) {
                    {
                        {
                            setState(3384);
                            match(COMMA);
                            setState(3385);
                            column_name();
                        }
                    }
                    setState(3390);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class For_update_optionsContext extends ParserRuleContext {
        public TerminalNode SKIP_() { return getToken(PlSqlParser.SKIP_, 0); }
        public TerminalNode LOCKED() { return getToken(PlSqlParser.LOCKED, 0); }
        public TerminalNode NOWAIT() { return getToken(PlSqlParser.NOWAIT, 0); }
        public TerminalNode WAIT() { return getToken(PlSqlParser.WAIT, 0); }
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class,0);
        }
        public For_update_optionsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_for_update_options; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFor_update_options(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFor_update_options(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFor_update_options(this);
            else return visitor.visitChildren(this);
        }
    }

    public final For_update_optionsContext for_update_options() throws RecognitionException {
        For_update_optionsContext _localctx = new For_update_optionsContext(_ctx, getState());
        enterRule(_localctx, 430, RULE_for_update_options);
        try {
            setState(3396);
            switch (_input.LA(1)) {
                case SKIP_:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3391);
                    match(SKIP_);
                    setState(3392);
                    match(LOCKED);
                }
                break;
                case NOWAIT:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3393);
                    match(NOWAIT);
                }
                break;
                case WAIT:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(3394);
                    match(WAIT);
                    setState(3395);
                    expression();
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Update_statementContext extends ParserRuleContext {
        public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
        public General_table_refContext general_table_ref() {
            return getRuleContext(General_table_refContext.class,0);
        }
        public Update_set_clauseContext update_set_clause() {
            return getRuleContext(Update_set_clauseContext.class,0);
        }
        public Where_clauseContext where_clause() {
            return getRuleContext(Where_clauseContext.class,0);
        }
        public Static_returning_clauseContext static_returning_clause() {
            return getRuleContext(Static_returning_clauseContext.class,0);
        }
        public Error_logging_clauseContext error_logging_clause() {
            return getRuleContext(Error_logging_clauseContext.class,0);
        }
        public Update_statementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_update_statement; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterUpdate_statement(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitUpdate_statement(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitUpdate_statement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Update_statementContext update_statement() throws RecognitionException {
        Update_statementContext _localctx = new Update_statementContext(_ctx, getState());
        enterRule(_localctx, 432, RULE_update_statement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3398);
                match(UPDATE);
                setState(3399);
                general_table_ref();
                setState(3400);
                update_set_clause();
                setState(3402);
                _la = _input.LA(1);
                if (_la==WHERE) {
                    {
                        setState(3401);
                        where_clause();
                    }
                }

                setState(3405);
                _la = _input.LA(1);
                if (_la==RETURN || _la==RETURNING) {
                    {
                        setState(3404);
                        static_returning_clause();
                    }
                }

                setState(3408);
                _la = _input.LA(1);
                if (_la==LOG) {
                    {
                        setState(3407);
                        error_logging_clause();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Update_set_clauseContext extends ParserRuleContext {
        public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
        public List<Column_based_update_set_clauseContext> column_based_update_set_clause() {
            return getRuleContexts(Column_based_update_set_clauseContext.class);
        }
        public Column_based_update_set_clauseContext column_based_update_set_clause(int i) {
            return getRuleContext(Column_based_update_set_clauseContext.class,i);
        }
        public TerminalNode VALUE() { return getToken(PlSqlParser.VALUE, 0); }
        public IdContext id() {
            return getRuleContext(IdContext.class,0);
        }
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class,0);
        }
        public Update_set_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_update_set_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterUpdate_set_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitUpdate_set_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitUpdate_set_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Update_set_clauseContext update_set_clause() throws RecognitionException {
        Update_set_clauseContext _localctx = new Update_set_clauseContext(_ctx, getState());
        enterRule(_localctx, 434, RULE_update_set_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3410);
                match(SET);
                setState(3426);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,396,_ctx) ) {
                    case 1:
                    {
                        setState(3411);
                        column_based_update_set_clause();
                        setState(3416);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la==COMMA) {
                            {
                                {
                                    setState(3412);
                                    match(COMMA);
                                    setState(3413);
                                    column_based_update_set_clause();
                                }
                            }
                            setState(3418);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                    }
                    break;
                    case 2:
                    {
                        setState(3419);
                        match(VALUE);
                        setState(3420);
                        match(LEFT_PAREN);
                        setState(3421);
                        id();
                        setState(3422);
                        match(RIGHT_PAREN);
                        setState(3423);
                        match(EQUALS_OP);
                        setState(3424);
                        expression();
                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Column_based_update_set_clauseContext extends ParserRuleContext {
        public List<Column_nameContext> column_name() {
            return getRuleContexts(Column_nameContext.class);
        }
        public Column_nameContext column_name(int i) {
            return getRuleContext(Column_nameContext.class,i);
        }
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class,0);
        }
        public SubqueryContext subquery() {
            return getRuleContext(SubqueryContext.class,0);
        }
        public Column_based_update_set_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_column_based_update_set_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterColumn_based_update_set_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitColumn_based_update_set_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitColumn_based_update_set_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Column_based_update_set_clauseContext column_based_update_set_clause() throws RecognitionException {
        Column_based_update_set_clauseContext _localctx = new Column_based_update_set_clauseContext(_ctx, getState());
        enterRule(_localctx, 436, RULE_column_based_update_set_clause);
        int _la;
        try {
            setState(3445);
            switch (_input.LA(1)) {
                case A_LETTER:
                case ADD:
                case AFTER:
                case AGENT:
                case AGGREGATE:
                case ALL:
                case ALTER:
                case ANALYZE:
                case AND:
                case ANY:
                case ARRAY:
                case AS:
                case ASC:
                case ASSOCIATE:
                case AT:
                case ATTRIBUTE:
                case AUDIT:
                case AUTHID:
                case AUTO:
                case AUTOMATIC:
                case AUTONOMOUS_TRANSACTION:
                case BATCH:
                case BEFORE:
                case BEGIN:
                case BETWEEN:
                case BFILE:
                case BINARY_DOUBLE:
                case BINARY_FLOAT:
                case BINARY_INTEGER:
                case BLOB:
                case BLOCK:
                case BODY:
                case BOOLEAN:
                case BOTH:
                case BREADTH:
                case BULK:
                case BY:
                case BYTE:
                case C_LETTER:
                case CACHE:
                case CALL:
                case CANONICAL:
                case CASCADE:
                case CASE:
                case CAST:
                case CHAR:
                case CHAR_CS:
                case CHARACTER:
                case CHECK:
                case CHR:
                case CLOB:
                case CLOSE:
                case CLUSTER:
                case COLLECT:
                case COLUMNS:
                case COMMENT:
                case COMMIT:
                case COMMITTED:
                case COMPATIBILITY:
                case COMPILE:
                case COMPOUND:
                case CONNECT:
                case CONNECT_BY_ROOT:
                case CONSTANT:
                case CONSTRAINT:
                case CONSTRAINTS:
                case CONSTRUCTOR:
                case CONTENT:
                case CONTEXT:
                case CONTINUE:
                case CONVERT:
                case CORRUPT_XID:
                case CORRUPT_XID_ALL:
                case COST:
                case COUNT:
                case CREATE:
                case CROSS:
                case CUBE:
                case CURRENT:
                case CURRENT_USER:
                case CURSOR:
                case CUSTOMDATUM:
                case CYCLE:
                case DATA:
                case DATABASE:
                case DATE:
                case DAY:
                case DB_ROLE_CHANGE:
                case DBTIMEZONE:
                case DDL:
                case DEBUG:
                case DEC:
                case DECIMAL:
                case DECLARE:
                case DECOMPOSE:
                case DECREMENT:
                case DEFAULT:
                case DEFAULTS:
                case DEFERRED:
                case DEFINER:
                case DELETE:
                case DEPTH:
                case DESC:
                case DETERMINISTIC:
                case DIMENSION:
                case DISABLE:
                case DISASSOCIATE:
                case DISTINCT:
                case DOCUMENT:
                case DOUBLE:
                case DROP:
                case DSINTERVAL_UNCONSTRAINED:
                case EACH:
                case ELEMENT:
                case ELSE:
                case ELSIF:
                case EMPTY:
                case ENABLE:
                case ENCODING:
                case END:
                case ENTITYESCAPING:
                case ERRORS:
                case ESCAPE:
                case EXCEPT:
                case EVALNAME:
                case EXCEPTION:
                case EXCEPTION_INIT:
                case EXCEPTIONS:
                case EXCLUDE:
                case EXCLUSIVE:
                case EXECUTE:
                case EXISTS:
                case EXIT:
                case EXPLAIN:
                case EXTERNAL:
                case EXTRACT:
                case FAILURE:
                case FALSE:
                case FETCH:
                case FINAL:
                case FIRST:
                case FIRST_VALUE:
                case FLOAT:
                case FOLLOWING:
                case FOLLOWS:
                case FOR:
                case FORALL:
                case FORCE:
                case FROM:
                case FULL:
                case FUNCTION:
                case GOTO:
                case GRANT:
                case GROUP:
                case GROUPING:
                case HASH:
                case HAVING:
                case HIDE:
                case HOUR:
                case IF:
                case IGNORE:
                case IMMEDIATE:
                case IN:
                case INCLUDE:
                case INCLUDING:
                case INCREMENT:
                case INDENT:
                case INDEX:
                case INDEXED:
                case INDICATOR:
                case INDICES:
                case INFINITE:
                case INLINE:
                case INNER:
                case INOUT:
                case INSERT:
                case INSTANTIABLE:
                case INSTEAD:
                case INT:
                case INTEGER:
                case INTERSECT:
                case INTERVAL:
                case INTO:
                case INVALIDATE:
                case IS:
                case ISOLATION:
                case ITERATE:
                case JAVA:
                case JOIN:
                case KEEP:
                case LANGUAGE:
                case LAST:
                case LAST_VALUE:
                case LEADING:
                case LEFT:
                case LEVEL:
                case LIBRARY:
                case LIKE:
                case LIKE2:
                case LIKE4:
                case LIKEC:
                case LIMIT:
                case LOCAL:
                case LOCK:
                case LOCKED:
                case LOG:
                case LOGOFF:
                case LOGON:
                case LONG:
                case LOOP:
                case MAIN:
                case MAP:
                case MATCHED:
                case MAXVALUE:
                case MEASURES:
                case MEMBER:
                case MERGE:
                case MINUS:
                case MINUTE:
                case MINVALUE:
                case MLSLABEL:
                case MODE:
                case MODEL:
                case MODIFY:
                case MONTH:
                case MULTISET:
                case NAME:
                case NAN:
                case NATURAL:
                case NATURALN:
                case NAV:
                case NCHAR:
                case NCHAR_CS:
                case NCLOB:
                case NESTED:
                case NEW:
                case NO:
                case NOAUDIT:
                case NOCACHE:
                case NOCOPY:
                case NOCYCLE:
                case NOENTITYESCAPING:
                case NOMAXVALUE:
                case NOMINVALUE:
                case NONE:
                case NOORDER:
                case NOSCHEMACHECK:
                case NOT:
                case NOWAIT:
                case NULL:
                case NULLS:
                case NUMBER:
                case NUMERIC:
                case NVARCHAR2:
                case OBJECT:
                case OF:
                case OFF:
                case OID:
                case OLD:
                case ON:
                case ONLY:
                case OPEN:
                case OPTION:
                case OR:
                case ORADATA:
                case ORDER:
                case ORDINALITY:
                case OSERROR:
                case OUT:
                case OUTER:
                case OVER:
                case OVERRIDING:
                case PACKAGE:
                case PARALLEL_ENABLE:
                case PARAMETERS:
                case PARENT:
                case PARTITION:
                case PASSING:
                case PATH:
                case PIPELINED:
                case PIVOT:
                case PLAN:
                case PLS_INTEGER:
                case POSITIVE:
                case POSITIVEN:
                case PRAGMA:
                case PRECEDING:
                case PRECISION:
                case PRESENT:
                case PRIOR:
                case PROCEDURE:
                case RAISE:
                case RANGE:
                case RAW:
                case READ:
                case REAL:
                case RECORD:
                case REF:
                case REFERENCE:
                case REFERENCING:
                case REJECT:
                case RELIES_ON:
                case RENAME:
                case REPLACE:
                case RESPECT:
                case RESTRICT_REFERENCES:
                case RESULT:
                case RESULT_CACHE:
                case RETURN:
                case RETURNING:
                case REUSE:
                case REVERSE:
                case REVOKE:
                case RIGHT:
                case ROLLBACK:
                case ROLLUP:
                case ROW:
                case ROWID:
                case ROWS:
                case RULES:
                case SAMPLE:
                case SAVE:
                case SAVEPOINT:
                case SCHEMA:
                case SCHEMACHECK:
                case SCN:
                case SEARCH:
                case SECOND:
                case SEED:
                case SEGMENT:
                case SELECT:
                case SELF:
                case SEQUENCE:
                case SEQUENTIAL:
                case SERIALIZABLE:
                case SERIALLY_REUSABLE:
                case SERVERERROR:
                case SESSIONTIMEZONE:
                case SET:
                case SETS:
                case SETTINGS:
                case SHARE:
                case SHOW:
                case SHUTDOWN:
                case SIBLINGS:
                case SIGNTYPE:
                case SIMPLE_INTEGER:
                case SINGLE:
                case SIZE:
                case SKIP_:
                case SMALLINT:
                case SNAPSHOT:
                case SOME:
                case SPECIFICATION:
                case SQLDATA:
                case SQLERROR:
                case SQL_PERCENT_ROWCOUNT:
                case STANDALONE:
                case START:
                case STARTUP:
                case STATEMENT:
                case STATEMENT_ID:
                case STATIC:
                case STATISTICS:
                case STRING:
                case SUBMULTISET:
                case SUBPARTITION:
                case SUBSTITUTABLE:
                case SUBTYPE:
                case SUCCESS:
                case SUSPEND:
                case TABLE:
                case THE:
                case THEN:
                case TIME:
                case TIMESTAMP:
                case TIMESTAMP_LTZ_UNCONSTRAINED:
                case TIMESTAMP_TZ_UNCONSTRAINED:
                case TIMESTAMP_UNCONSTRAINED:
                case TIMEZONE_ABBR:
                case TIMEZONE_HOUR:
                case TIMEZONE_MINUTE:
                case TIMEZONE_REGION:
                case TO:
                case TO_CHAR:
                case TRAILING:
                case TRANSACTION:
                case TRANSLATE:
                case TREAT:
                case TRIGGER:
                case TRIM:
                case TRUE:
                case TRUNCATE:
                case TYPE:
                case UNBOUNDED:
                case UNDER:
                case UNION:
                case UNIQUE:
                case UNLIMITED:
                case UNPIVOT:
                case UNTIL:
                case UPDATE:
                case UPDATED:
                case UPSERT:
                case UROWID:
                case USE:
                case USING:
                case VALIDATE:
                case VALUE:
                case VALUES:
                case VARCHAR:
                case VARCHAR2:
                case VARIABLE:
                case VARRAY:
                case VARYING:
                case VERSION:
                case VERSIONS:
                case WAIT:
                case WARNING:
                case WELLFORMED:
                case WHEN:
                case WHENEVER:
                case WHERE:
                case WHILE:
                case WITH:
                case WITHIN:
                case WORK:
                case WRITE:
                case XML:
                case XMLAGG:
                case XMLATTRIBUTES:
                case XMLCAST:
                case XMLCOLATTVAL:
                case XMLELEMENT:
                case XMLEXISTS:
                case XMLFOREST:
                case XMLNAMESPACES:
                case XMLPARSE:
                case XMLPI:
                case XMLQUERY:
                case XMLROOT:
                case XMLSERIALIZE:
                case XMLTABLE:
                case YEAR:
                case YES:
                case YMINTERVAL_UNCONSTRAINED:
                case ZONE:
                case PREDICTION:
                case PREDICTION_BOUNDS:
                case PREDICTION_COST:
                case PREDICTION_DETAILS:
                case PREDICTION_PROBABILITY:
                case PREDICTION_SET:
                case CUME_DIST:
                case DENSE_RANK:
                case LISTAGG:
                case PERCENT_RANK:
                case PERCENTILE_CONT:
                case PERCENTILE_DISC:
                case RANK:
                case AVG:
                case CORR:
                case LAG:
                case LEAD:
                case MAX:
                case MEDIAN:
                case MIN:
                case NTILE:
                case RATIO_TO_REPORT:
                case ROW_NUMBER:
                case SUM:
                case VARIANCE:
                case REGR_:
                case STDDEV:
                case VAR_:
                case COVAR_:
                case DELIMITED_ID:
                case INTRODUCER:
                case REGULAR_ID:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3428);
                    column_name();
                    setState(3429);
                    match(EQUALS_OP);
                    setState(3430);
                    expression();
                }
                break;
                case LEFT_PAREN:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3432);
                    match(LEFT_PAREN);
                    setState(3433);
                    column_name();
                    setState(3438);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    while (_la==COMMA) {
                        {
                            {
                                setState(3434);
                                match(COMMA);
                                setState(3435);
                                column_name();
                            }
                        }
                        setState(3440);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                    }
                    setState(3441);
                    match(RIGHT_PAREN);
                    setState(3442);
                    match(EQUALS_OP);
                    setState(3443);
                    subquery();
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Delete_statementContext extends ParserRuleContext {
        public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
        public General_table_refContext general_table_ref() {
            return getRuleContext(General_table_refContext.class,0);
        }
        public TerminalNode FROM() { return getToken(PlSqlParser.FROM, 0); }
        public Where_clauseContext where_clause() {
            return getRuleContext(Where_clauseContext.class,0);
        }
        public Static_returning_clauseContext static_returning_clause() {
            return getRuleContext(Static_returning_clauseContext.class,0);
        }
        public Error_logging_clauseContext error_logging_clause() {
            return getRuleContext(Error_logging_clauseContext.class,0);
        }
        public Delete_statementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_delete_statement; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDelete_statement(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDelete_statement(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDelete_statement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Delete_statementContext delete_statement() throws RecognitionException {
        Delete_statementContext _localctx = new Delete_statementContext(_ctx, getState());
        enterRule(_localctx, 438, RULE_delete_statement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3447);
                match(DELETE);
                setState(3449);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,399,_ctx) ) {
                    case 1:
                    {
                        setState(3448);
                        match(FROM);
                    }
                    break;
                }
                setState(3451);
                general_table_ref();
                setState(3453);
                _la = _input.LA(1);
                if (_la==WHERE) {
                    {
                        setState(3452);
                        where_clause();
                    }
                }

                setState(3456);
                _la = _input.LA(1);
                if (_la==RETURN || _la==RETURNING) {
                    {
                        setState(3455);
                        static_returning_clause();
                    }
                }

                setState(3459);
                _la = _input.LA(1);
                if (_la==LOG) {
                    {
                        setState(3458);
                        error_logging_clause();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Insert_statementContext extends ParserRuleContext {
        public TerminalNode INSERT() { return getToken(PlSqlParser.INSERT, 0); }
        public Single_table_insertContext single_table_insert() {
            return getRuleContext(Single_table_insertContext.class,0);
        }
        public Multi_table_insertContext multi_table_insert() {
            return getRuleContext(Multi_table_insertContext.class,0);
        }
        public Insert_statementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_insert_statement; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterInsert_statement(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitInsert_statement(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitInsert_statement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Insert_statementContext insert_statement() throws RecognitionException {
        Insert_statementContext _localctx = new Insert_statementContext(_ctx, getState());
        enterRule(_localctx, 440, RULE_insert_statement);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3461);
                match(INSERT);
                setState(3464);
                switch (_input.LA(1)) {
                    case INTO:
                    {
                        setState(3462);
                        single_table_insert();
                    }
                    break;
                    case ALL:
                    case FIRST:
                    case WHEN:
                    {
                        setState(3463);
                        multi_table_insert();
                    }
                    break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Single_table_insertContext extends ParserRuleContext {
        public Insert_into_clauseContext insert_into_clause() {
            return getRuleContext(Insert_into_clauseContext.class,0);
        }
        public Values_clauseContext values_clause() {
            return getRuleContext(Values_clauseContext.class,0);
        }
        public Select_statementContext select_statement() {
            return getRuleContext(Select_statementContext.class,0);
        }
        public Error_logging_clauseContext error_logging_clause() {
            return getRuleContext(Error_logging_clauseContext.class,0);
        }
        public Static_returning_clauseContext static_returning_clause() {
            return getRuleContext(Static_returning_clauseContext.class,0);
        }
        public Single_table_insertContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_single_table_insert; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSingle_table_insert(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSingle_table_insert(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSingle_table_insert(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Single_table_insertContext single_table_insert() throws RecognitionException {
        Single_table_insertContext _localctx = new Single_table_insertContext(_ctx, getState());
        enterRule(_localctx, 442, RULE_single_table_insert);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3466);
                insert_into_clause();
                setState(3472);
                switch (_input.LA(1)) {
                    case VALUES:
                    {
                        setState(3467);
                        values_clause();
                        setState(3469);
                        _la = _input.LA(1);
                        if (_la==RETURN || _la==RETURNING) {
                            {
                                setState(3468);
                                static_returning_clause();
                            }
                        }

                    }
                    break;
                    case SELECT:
                    case WITH:
                    case LEFT_PAREN:
                    {
                        setState(3471);
                        select_statement();
                    }
                    break;
                    default:
                        throw new NoViableAltException(this);
                }
                setState(3475);
                _la = _input.LA(1);
                if (_la==LOG) {
                    {
                        setState(3474);
                        error_logging_clause();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Multi_table_insertContext extends ParserRuleContext {
        public Select_statementContext select_statement() {
            return getRuleContext(Select_statementContext.class,0);
        }
        public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
        public Conditional_insert_clauseContext conditional_insert_clause() {
            return getRuleContext(Conditional_insert_clauseContext.class,0);
        }
        public List<Multi_table_elementContext> multi_table_element() {
            return getRuleContexts(Multi_table_elementContext.class);
        }
        public Multi_table_elementContext multi_table_element(int i) {
            return getRuleContext(Multi_table_elementContext.class,i);
        }
        public Multi_table_insertContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_multi_table_insert; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMulti_table_insert(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMulti_table_insert(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMulti_table_insert(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Multi_table_insertContext multi_table_insert() throws RecognitionException {
        Multi_table_insertContext _localctx = new Multi_table_insertContext(_ctx, getState());
        enterRule(_localctx, 444, RULE_multi_table_insert);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3484);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,408,_ctx) ) {
                    case 1:
                    {
                        setState(3477);
                        match(ALL);
                        setState(3479);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        do {
                            {
                                {
                                    setState(3478);
                                    multi_table_element();
                                }
                            }
                            setState(3481);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        } while ( _la==INTO );
                    }
                    break;
                    case 2:
                    {
                        setState(3483);
                        conditional_insert_clause();
                    }
                    break;
                }
                setState(3486);
                select_statement();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Multi_table_elementContext extends ParserRuleContext {
        public Insert_into_clauseContext insert_into_clause() {
            return getRuleContext(Insert_into_clauseContext.class,0);
        }
        public Values_clauseContext values_clause() {
            return getRuleContext(Values_clauseContext.class,0);
        }
        public Error_logging_clauseContext error_logging_clause() {
            return getRuleContext(Error_logging_clauseContext.class,0);
        }
        public Multi_table_elementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_multi_table_element; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMulti_table_element(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMulti_table_element(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMulti_table_element(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Multi_table_elementContext multi_table_element() throws RecognitionException {
        Multi_table_elementContext _localctx = new Multi_table_elementContext(_ctx, getState());
        enterRule(_localctx, 446, RULE_multi_table_element);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3488);
                insert_into_clause();
                setState(3490);
                _la = _input.LA(1);
                if (_la==VALUES) {
                    {
                        setState(3489);
                        values_clause();
                    }
                }

                setState(3493);
                _la = _input.LA(1);
                if (_la==LOG) {
                    {
                        setState(3492);
                        error_logging_clause();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Conditional_insert_clauseContext extends ParserRuleContext {
        public List<Conditional_insert_when_partContext> conditional_insert_when_part() {
            return getRuleContexts(Conditional_insert_when_partContext.class);
        }
        public Conditional_insert_when_partContext conditional_insert_when_part(int i) {
            return getRuleContext(Conditional_insert_when_partContext.class,i);
        }
        public Conditional_insert_else_partContext conditional_insert_else_part() {
            return getRuleContext(Conditional_insert_else_partContext.class,0);
        }
        public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
        public TerminalNode FIRST() { return getToken(PlSqlParser.FIRST, 0); }
        public Conditional_insert_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_conditional_insert_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterConditional_insert_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitConditional_insert_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitConditional_insert_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Conditional_insert_clauseContext conditional_insert_clause() throws RecognitionException {
        Conditional_insert_clauseContext _localctx = new Conditional_insert_clauseContext(_ctx, getState());
        enterRule(_localctx, 448, RULE_conditional_insert_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3496);
                _la = _input.LA(1);
                if (_la==ALL || _la==FIRST) {
                    {
                        setState(3495);
                        _la = _input.LA(1);
                        if ( !(_la==ALL || _la==FIRST) ) {
                            _errHandler.recoverInline(this);
                        } else {
                            consume();
                        }
                    }
                }

                setState(3499);
                _errHandler.sync(this);
                _la = _input.LA(1);
                do {
                    {
                        {
                            setState(3498);
                            conditional_insert_when_part();
                        }
                    }
                    setState(3501);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                } while ( _la==WHEN );
                setState(3504);
                _la = _input.LA(1);
                if (_la==ELSE) {
                    {
                        setState(3503);
                        conditional_insert_else_part();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Conditional_insert_when_partContext extends ParserRuleContext {
        public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
        public ConditionContext condition() {
            return getRuleContext(ConditionContext.class,0);
        }
        public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
        public List<Multi_table_elementContext> multi_table_element() {
            return getRuleContexts(Multi_table_elementContext.class);
        }
        public Multi_table_elementContext multi_table_element(int i) {
            return getRuleContext(Multi_table_elementContext.class,i);
        }
        public Conditional_insert_when_partContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_conditional_insert_when_part; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterConditional_insert_when_part(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitConditional_insert_when_part(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitConditional_insert_when_part(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Conditional_insert_when_partContext conditional_insert_when_part() throws RecognitionException {
        Conditional_insert_when_partContext _localctx = new Conditional_insert_when_partContext(_ctx, getState());
        enterRule(_localctx, 450, RULE_conditional_insert_when_part);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3506);
                match(WHEN);
                setState(3507);
                condition();
                setState(3508);
                match(THEN);
                setState(3510);
                _errHandler.sync(this);
                _la = _input.LA(1);
                do {
                    {
                        {
                            setState(3509);
                            multi_table_element();
                        }
                    }
                    setState(3512);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                } while ( _la==INTO );
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Conditional_insert_else_partContext extends ParserRuleContext {
        public TerminalNode ELSE() { return getToken(PlSqlParser.ELSE, 0); }
        public List<Multi_table_elementContext> multi_table_element() {
            return getRuleContexts(Multi_table_elementContext.class);
        }
        public Multi_table_elementContext multi_table_element(int i) {
            return getRuleContext(Multi_table_elementContext.class,i);
        }
        public Conditional_insert_else_partContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_conditional_insert_else_part; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterConditional_insert_else_part(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitConditional_insert_else_part(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitConditional_insert_else_part(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Conditional_insert_else_partContext conditional_insert_else_part() throws RecognitionException {
        Conditional_insert_else_partContext _localctx = new Conditional_insert_else_partContext(_ctx, getState());
        enterRule(_localctx, 452, RULE_conditional_insert_else_part);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3514);
                match(ELSE);
                setState(3516);
                _errHandler.sync(this);
                _la = _input.LA(1);
                do {
                    {
                        {
                            setState(3515);
                            multi_table_element();
                        }
                    }
                    setState(3518);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                } while ( _la==INTO );
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Insert_into_clauseContext extends ParserRuleContext {
        public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
        public General_table_refContext general_table_ref() {
            return getRuleContext(General_table_refContext.class,0);
        }
        public List<Column_nameContext> column_name() {
            return getRuleContexts(Column_nameContext.class);
        }
        public Column_nameContext column_name(int i) {
            return getRuleContext(Column_nameContext.class,i);
        }
        public Insert_into_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_insert_into_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterInsert_into_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitInsert_into_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitInsert_into_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Insert_into_clauseContext insert_into_clause() throws RecognitionException {
        Insert_into_clauseContext _localctx = new Insert_into_clauseContext(_ctx, getState());
        enterRule(_localctx, 454, RULE_insert_into_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3520);
                match(INTO);
                setState(3521);
                general_table_ref();
                setState(3533);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,417,_ctx) ) {
                    case 1:
                    {
                        setState(3522);
                        match(LEFT_PAREN);
                        setState(3523);
                        column_name();
                        setState(3528);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la==COMMA) {
                            {
                                {
                                    setState(3524);
                                    match(COMMA);
                                    setState(3525);
                                    column_name();
                                }
                            }
                            setState(3530);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                        setState(3531);
                        match(RIGHT_PAREN);
                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Values_clauseContext extends ParserRuleContext {
        public TerminalNode VALUES() { return getToken(PlSqlParser.VALUES, 0); }
        public Expression_listContext expression_list() {
            return getRuleContext(Expression_listContext.class,0);
        }
        public Record_nameContext record_name() {
            return getRuleContext(Record_nameContext.class,0);
        }
        public Collection_assoc_expressionContext collection_assoc_expression() {
            return getRuleContext(Collection_assoc_expressionContext.class,0);
        }
        public Values_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_values_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterValues_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitValues_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitValues_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Values_clauseContext values_clause() throws RecognitionException {
        Values_clauseContext _localctx = new Values_clauseContext(_ctx, getState());
        enterRule(_localctx, 456, RULE_values_clause);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3535);
                match(VALUES);
                setState(3539);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,418,_ctx) ) {
                    case 1:
                    {
                        setState(3536);
                        expression_list();
                    }
                    break;
                    case 2:
                    {
                        setState(3537);
                        record_name();
                    }
                    break;
                    case 3:
                    {
                        setState(3538);
                        collection_assoc_expression();
                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Merge_statementContext extends ParserRuleContext {
        public TerminalNode MERGE() { return getToken(PlSqlParser.MERGE, 0); }
        public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
        public Tableview_nameContext tableview_name() {
            return getRuleContext(Tableview_nameContext.class,0);
        }
        public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
        public Selected_tableviewContext selected_tableview() {
            return getRuleContext(Selected_tableviewContext.class,0);
        }
        public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
        public ConditionContext condition() {
            return getRuleContext(ConditionContext.class,0);
        }
        public Table_aliasContext table_alias() {
            return getRuleContext(Table_aliasContext.class,0);
        }
        public Merge_update_clauseContext merge_update_clause() {
            return getRuleContext(Merge_update_clauseContext.class,0);
        }
        public Merge_insert_clauseContext merge_insert_clause() {
            return getRuleContext(Merge_insert_clauseContext.class,0);
        }
        public Error_logging_clauseContext error_logging_clause() {
            return getRuleContext(Error_logging_clauseContext.class,0);
        }
        public Merge_statementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_merge_statement; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMerge_statement(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMerge_statement(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMerge_statement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Merge_statementContext merge_statement() throws RecognitionException {
        Merge_statementContext _localctx = new Merge_statementContext(_ctx, getState());
        enterRule(_localctx, 458, RULE_merge_statement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3541);
                match(MERGE);
                setState(3542);
                match(INTO);
                setState(3543);
                tableview_name();
                setState(3545);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,419,_ctx) ) {
                    case 1:
                    {
                        setState(3544);
                        table_alias();
                    }
                    break;
                }
                setState(3547);
                match(USING);
                setState(3548);
                selected_tableview();
                setState(3549);
                match(ON);
                setState(3550);
                match(LEFT_PAREN);
                setState(3551);
                condition();
                setState(3552);
                match(RIGHT_PAREN);
                setState(3561);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,422,_ctx) ) {
                    case 1:
                    {
                        setState(3553);
                        merge_update_clause();
                        setState(3555);
                        _la = _input.LA(1);
                        if (_la==WHEN) {
                            {
                                setState(3554);
                                merge_insert_clause();
                            }
                        }

                    }
                    break;
                    case 2:
                    {
                        setState(3557);
                        merge_insert_clause();
                        setState(3559);
                        _la = _input.LA(1);
                        if (_la==WHEN) {
                            {
                                setState(3558);
                                merge_update_clause();
                            }
                        }

                    }
                    break;
                }
                setState(3564);
                _la = _input.LA(1);
                if (_la==LOG) {
                    {
                        setState(3563);
                        error_logging_clause();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Merge_update_clauseContext extends ParserRuleContext {
        public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
        public TerminalNode MATCHED() { return getToken(PlSqlParser.MATCHED, 0); }
        public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
        public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
        public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
        public List<Merge_elementContext> merge_element() {
            return getRuleContexts(Merge_elementContext.class);
        }
        public Merge_elementContext merge_element(int i) {
            return getRuleContext(Merge_elementContext.class,i);
        }
        public Where_clauseContext where_clause() {
            return getRuleContext(Where_clauseContext.class,0);
        }
        public Merge_update_delete_partContext merge_update_delete_part() {
            return getRuleContext(Merge_update_delete_partContext.class,0);
        }
        public Merge_update_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_merge_update_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMerge_update_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMerge_update_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMerge_update_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Merge_update_clauseContext merge_update_clause() throws RecognitionException {
        Merge_update_clauseContext _localctx = new Merge_update_clauseContext(_ctx, getState());
        enterRule(_localctx, 460, RULE_merge_update_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3566);
                match(WHEN);
                setState(3567);
                match(MATCHED);
                setState(3568);
                match(THEN);
                setState(3569);
                match(UPDATE);
                setState(3570);
                match(SET);
                setState(3571);
                merge_element();
                setState(3576);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==COMMA) {
                    {
                        {
                            setState(3572);
                            match(COMMA);
                            setState(3573);
                            merge_element();
                        }
                    }
                    setState(3578);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(3580);
                _la = _input.LA(1);
                if (_la==WHERE) {
                    {
                        setState(3579);
                        where_clause();
                    }
                }

                setState(3583);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,426,_ctx) ) {
                    case 1:
                    {
                        setState(3582);
                        merge_update_delete_part();
                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Merge_elementContext extends ParserRuleContext {
        public Column_nameContext column_name() {
            return getRuleContext(Column_nameContext.class,0);
        }
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class,0);
        }
        public Merge_elementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_merge_element; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMerge_element(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMerge_element(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMerge_element(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Merge_elementContext merge_element() throws RecognitionException {
        Merge_elementContext _localctx = new Merge_elementContext(_ctx, getState());
        enterRule(_localctx, 462, RULE_merge_element);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3585);
                column_name();
                setState(3586);
                match(EQUALS_OP);
                setState(3587);
                expression();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Merge_update_delete_partContext extends ParserRuleContext {
        public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
        public Where_clauseContext where_clause() {
            return getRuleContext(Where_clauseContext.class,0);
        }
        public Merge_update_delete_partContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_merge_update_delete_part; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMerge_update_delete_part(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMerge_update_delete_part(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMerge_update_delete_part(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Merge_update_delete_partContext merge_update_delete_part() throws RecognitionException {
        Merge_update_delete_partContext _localctx = new Merge_update_delete_partContext(_ctx, getState());
        enterRule(_localctx, 464, RULE_merge_update_delete_part);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3589);
                match(DELETE);
                setState(3590);
                where_clause();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Merge_insert_clauseContext extends ParserRuleContext {
        public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
        public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
        public TerminalNode MATCHED() { return getToken(PlSqlParser.MATCHED, 0); }
        public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
        public TerminalNode INSERT() { return getToken(PlSqlParser.INSERT, 0); }
        public TerminalNode VALUES() { return getToken(PlSqlParser.VALUES, 0); }
        public Expression_listContext expression_list() {
            return getRuleContext(Expression_listContext.class,0);
        }
        public List<Column_nameContext> column_name() {
            return getRuleContexts(Column_nameContext.class);
        }
        public Column_nameContext column_name(int i) {
            return getRuleContext(Column_nameContext.class,i);
        }
        public Where_clauseContext where_clause() {
            return getRuleContext(Where_clauseContext.class,0);
        }
        public Merge_insert_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_merge_insert_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMerge_insert_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMerge_insert_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMerge_insert_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Merge_insert_clauseContext merge_insert_clause() throws RecognitionException {
        Merge_insert_clauseContext _localctx = new Merge_insert_clauseContext(_ctx, getState());
        enterRule(_localctx, 466, RULE_merge_insert_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3592);
                match(WHEN);
                setState(3593);
                match(NOT);
                setState(3594);
                match(MATCHED);
                setState(3595);
                match(THEN);
                setState(3596);
                match(INSERT);
                setState(3608);
                _la = _input.LA(1);
                if (_la==LEFT_PAREN) {
                    {
                        setState(3597);
                        match(LEFT_PAREN);
                        setState(3598);
                        column_name();
                        setState(3603);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la==COMMA) {
                            {
                                {
                                    setState(3599);
                                    match(COMMA);
                                    setState(3600);
                                    column_name();
                                }
                            }
                            setState(3605);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                        setState(3606);
                        match(RIGHT_PAREN);
                    }
                }

                setState(3610);
                match(VALUES);
                setState(3611);
                expression_list();
                setState(3613);
                _la = _input.LA(1);
                if (_la==WHERE) {
                    {
                        setState(3612);
                        where_clause();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Selected_tableviewContext extends ParserRuleContext {
        public Tableview_nameContext tableview_name() {
            return getRuleContext(Tableview_nameContext.class,0);
        }
        public Select_statementContext select_statement() {
            return getRuleContext(Select_statementContext.class,0);
        }
        public Table_aliasContext table_alias() {
            return getRuleContext(Table_aliasContext.class,0);
        }
        public Selected_tableviewContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_selected_tableview; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSelected_tableview(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSelected_tableview(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSelected_tableview(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Selected_tableviewContext selected_tableview() throws RecognitionException {
        Selected_tableviewContext _localctx = new Selected_tableviewContext(_ctx, getState());
        enterRule(_localctx, 468, RULE_selected_tableview);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3620);
                switch (_input.LA(1)) {
                    case A_LETTER:
                    case ADD:
                    case AFTER:
                    case AGENT:
                    case AGGREGATE:
                    case ALL:
                    case ALTER:
                    case ANALYZE:
                    case AND:
                    case ANY:
                    case ARRAY:
                    case AS:
                    case ASC:
                    case ASSOCIATE:
                    case AT:
                    case ATTRIBUTE:
                    case AUDIT:
                    case AUTHID:
                    case AUTO:
                    case AUTOMATIC:
                    case AUTONOMOUS_TRANSACTION:
                    case BATCH:
                    case BEFORE:
                    case BEGIN:
                    case BETWEEN:
                    case BFILE:
                    case BINARY_DOUBLE:
                    case BINARY_FLOAT:
                    case BINARY_INTEGER:
                    case BLOB:
                    case BLOCK:
                    case BODY:
                    case BOOLEAN:
                    case BOTH:
                    case BREADTH:
                    case BULK:
                    case BY:
                    case BYTE:
                    case C_LETTER:
                    case CACHE:
                    case CALL:
                    case CANONICAL:
                    case CASCADE:
                    case CASE:
                    case CAST:
                    case CHAR:
                    case CHAR_CS:
                    case CHARACTER:
                    case CHECK:
                    case CHR:
                    case CLOB:
                    case CLOSE:
                    case CLUSTER:
                    case COLLECT:
                    case COLUMNS:
                    case COMMENT:
                    case COMMIT:
                    case COMMITTED:
                    case COMPATIBILITY:
                    case COMPILE:
                    case COMPOUND:
                    case CONNECT:
                    case CONNECT_BY_ROOT:
                    case CONSTANT:
                    case CONSTRAINT:
                    case CONSTRAINTS:
                    case CONSTRUCTOR:
                    case CONTENT:
                    case CONTEXT:
                    case CONTINUE:
                    case CONVERT:
                    case CORRUPT_XID:
                    case CORRUPT_XID_ALL:
                    case COST:
                    case COUNT:
                    case CREATE:
                    case CROSS:
                    case CUBE:
                    case CURRENT:
                    case CURRENT_USER:
                    case CURSOR:
                    case CUSTOMDATUM:
                    case CYCLE:
                    case DATA:
                    case DATABASE:
                    case DATE:
                    case DAY:
                    case DB_ROLE_CHANGE:
                    case DBTIMEZONE:
                    case DDL:
                    case DEBUG:
                    case DEC:
                    case DECIMAL:
                    case DECLARE:
                    case DECOMPOSE:
                    case DECREMENT:
                    case DEFAULT:
                    case DEFAULTS:
                    case DEFERRED:
                    case DEFINER:
                    case DELETE:
                    case DEPTH:
                    case DESC:
                    case DETERMINISTIC:
                    case DIMENSION:
                    case DISABLE:
                    case DISASSOCIATE:
                    case DISTINCT:
                    case DOCUMENT:
                    case DOUBLE:
                    case DROP:
                    case DSINTERVAL_UNCONSTRAINED:
                    case EACH:
                    case ELEMENT:
                    case ELSE:
                    case ELSIF:
                    case EMPTY:
                    case ENABLE:
                    case ENCODING:
                    case END:
                    case ENTITYESCAPING:
                    case ERRORS:
                    case ESCAPE:
                    case EXCEPT:
                    case EVALNAME:
                    case EXCEPTION:
                    case EXCEPTION_INIT:
                    case EXCEPTIONS:
                    case EXCLUDE:
                    case EXCLUSIVE:
                    case EXECUTE:
                    case EXISTS:
                    case EXIT:
                    case EXPLAIN:
                    case EXTERNAL:
                    case EXTRACT:
                    case FAILURE:
                    case FALSE:
                    case FETCH:
                    case FINAL:
                    case FIRST:
                    case FIRST_VALUE:
                    case FLOAT:
                    case FOLLOWING:
                    case FOLLOWS:
                    case FOR:
                    case FORALL:
                    case FORCE:
                    case FROM:
                    case FULL:
                    case FUNCTION:
                    case GOTO:
                    case GRANT:
                    case GROUP:
                    case GROUPING:
                    case HASH:
                    case HAVING:
                    case HIDE:
                    case HOUR:
                    case IF:
                    case IGNORE:
                    case IMMEDIATE:
                    case IN:
                    case INCLUDE:
                    case INCLUDING:
                    case INCREMENT:
                    case INDENT:
                    case INDEX:
                    case INDEXED:
                    case INDICATOR:
                    case INDICES:
                    case INFINITE:
                    case INLINE:
                    case INNER:
                    case INOUT:
                    case INSERT:
                    case INSTANTIABLE:
                    case INSTEAD:
                    case INT:
                    case INTEGER:
                    case INTERSECT:
                    case INTERVAL:
                    case INTO:
                    case INVALIDATE:
                    case IS:
                    case ISOLATION:
                    case ITERATE:
                    case JAVA:
                    case JOIN:
                    case KEEP:
                    case LANGUAGE:
                    case LAST:
                    case LAST_VALUE:
                    case LEADING:
                    case LEFT:
                    case LEVEL:
                    case LIBRARY:
                    case LIKE:
                    case LIKE2:
                    case LIKE4:
                    case LIKEC:
                    case LIMIT:
                    case LOCAL:
                    case LOCK:
                    case LOCKED:
                    case LOG:
                    case LOGOFF:
                    case LOGON:
                    case LONG:
                    case LOOP:
                    case MAIN:
                    case MAP:
                    case MATCHED:
                    case MAXVALUE:
                    case MEASURES:
                    case MEMBER:
                    case MERGE:
                    case MINUS:
                    case MINUTE:
                    case MINVALUE:
                    case MLSLABEL:
                    case MODE:
                    case MODEL:
                    case MODIFY:
                    case MONTH:
                    case MULTISET:
                    case NAME:
                    case NAN:
                    case NATURAL:
                    case NATURALN:
                    case NAV:
                    case NCHAR:
                    case NCHAR_CS:
                    case NCLOB:
                    case NESTED:
                    case NEW:
                    case NO:
                    case NOAUDIT:
                    case NOCACHE:
                    case NOCOPY:
                    case NOCYCLE:
                    case NOENTITYESCAPING:
                    case NOMAXVALUE:
                    case NOMINVALUE:
                    case NONE:
                    case NOORDER:
                    case NOSCHEMACHECK:
                    case NOT:
                    case NOWAIT:
                    case NULL:
                    case NULLS:
                    case NUMBER:
                    case NUMERIC:
                    case NVARCHAR2:
                    case OBJECT:
                    case OF:
                    case OFF:
                    case OID:
                    case OLD:
                    case ON:
                    case ONLY:
                    case OPEN:
                    case OPTION:
                    case OR:
                    case ORADATA:
                    case ORDER:
                    case ORDINALITY:
                    case OSERROR:
                    case OUT:
                    case OUTER:
                    case OVER:
                    case OVERRIDING:
                    case PACKAGE:
                    case PARALLEL_ENABLE:
                    case PARAMETERS:
                    case PARENT:
                    case PARTITION:
                    case PASSING:
                    case PATH:
                    case PIPELINED:
                    case PIVOT:
                    case PLAN:
                    case PLS_INTEGER:
                    case POSITIVE:
                    case POSITIVEN:
                    case PRAGMA:
                    case PRECEDING:
                    case PRECISION:
                    case PRESENT:
                    case PRIOR:
                    case PROCEDURE:
                    case RAISE:
                    case RANGE:
                    case RAW:
                    case READ:
                    case REAL:
                    case RECORD:
                    case REF:
                    case REFERENCE:
                    case REFERENCING:
                    case REJECT:
                    case RELIES_ON:
                    case RENAME:
                    case REPLACE:
                    case RESPECT:
                    case RESTRICT_REFERENCES:
                    case RESULT:
                    case RESULT_CACHE:
                    case RETURN:
                    case RETURNING:
                    case REUSE:
                    case REVERSE:
                    case REVOKE:
                    case RIGHT:
                    case ROLLBACK:
                    case ROLLUP:
                    case ROW:
                    case ROWID:
                    case ROWS:
                    case RULES:
                    case SAMPLE:
                    case SAVE:
                    case SAVEPOINT:
                    case SCHEMA:
                    case SCHEMACHECK:
                    case SCN:
                    case SEARCH:
                    case SECOND:
                    case SEED:
                    case SEGMENT:
                    case SELECT:
                    case SELF:
                    case SEQUENCE:
                    case SEQUENTIAL:
                    case SERIALIZABLE:
                    case SERIALLY_REUSABLE:
                    case SERVERERROR:
                    case SESSIONTIMEZONE:
                    case SET:
                    case SETS:
                    case SETTINGS:
                    case SHARE:
                    case SHOW:
                    case SHUTDOWN:
                    case SIBLINGS:
                    case SIGNTYPE:
                    case SIMPLE_INTEGER:
                    case SINGLE:
                    case SIZE:
                    case SKIP_:
                    case SMALLINT:
                    case SNAPSHOT:
                    case SOME:
                    case SPECIFICATION:
                    case SQLDATA:
                    case SQLERROR:
                    case SQL_PERCENT_ROWCOUNT:
                    case STANDALONE:
                    case START:
                    case STARTUP:
                    case STATEMENT:
                    case STATEMENT_ID:
                    case STATIC:
                    case STATISTICS:
                    case STRING:
                    case SUBMULTISET:
                    case SUBPARTITION:
                    case SUBSTITUTABLE:
                    case SUBTYPE:
                    case SUCCESS:
                    case SUSPEND:
                    case TABLE:
                    case THE:
                    case THEN:
                    case TIME:
                    case TIMESTAMP:
                    case TIMESTAMP_LTZ_UNCONSTRAINED:
                    case TIMESTAMP_TZ_UNCONSTRAINED:
                    case TIMESTAMP_UNCONSTRAINED:
                    case TIMEZONE_ABBR:
                    case TIMEZONE_HOUR:
                    case TIMEZONE_MINUTE:
                    case TIMEZONE_REGION:
                    case TO:
                    case TO_CHAR:
                    case TRAILING:
                    case TRANSACTION:
                    case TRANSLATE:
                    case TREAT:
                    case TRIGGER:
                    case TRIM:
                    case TRUE:
                    case TRUNCATE:
                    case TYPE:
                    case UNBOUNDED:
                    case UNDER:
                    case UNION:
                    case UNIQUE:
                    case UNLIMITED:
                    case UNPIVOT:
                    case UNTIL:
                    case UPDATE:
                    case UPDATED:
                    case UPSERT:
                    case UROWID:
                    case USE:
                    case USING:
                    case VALIDATE:
                    case VALUE:
                    case VALUES:
                    case VARCHAR:
                    case VARCHAR2:
                    case VARIABLE:
                    case VARRAY:
                    case VARYING:
                    case VERSION:
                    case VERSIONS:
                    case WAIT:
                    case WARNING:
                    case WELLFORMED:
                    case WHEN:
                    case WHENEVER:
                    case WHERE:
                    case WHILE:
                    case WITH:
                    case WITHIN:
                    case WORK:
                    case WRITE:
                    case XML:
                    case XMLAGG:
                    case XMLATTRIBUTES:
                    case XMLCAST:
                    case XMLCOLATTVAL:
                    case XMLELEMENT:
                    case XMLEXISTS:
                    case XMLFOREST:
                    case XMLNAMESPACES:
                    case XMLPARSE:
                    case XMLPI:
                    case XMLQUERY:
                    case XMLROOT:
                    case XMLSERIALIZE:
                    case XMLTABLE:
                    case YEAR:
                    case YES:
                    case YMINTERVAL_UNCONSTRAINED:
                    case ZONE:
                    case PREDICTION:
                    case PREDICTION_BOUNDS:
                    case PREDICTION_COST:
                    case PREDICTION_DETAILS:
                    case PREDICTION_PROBABILITY:
                    case PREDICTION_SET:
                    case CUME_DIST:
                    case DENSE_RANK:
                    case LISTAGG:
                    case PERCENT_RANK:
                    case PERCENTILE_CONT:
                    case PERCENTILE_DISC:
                    case RANK:
                    case AVG:
                    case CORR:
                    case LAG:
                    case LEAD:
                    case MAX:
                    case MEDIAN:
                    case MIN:
                    case NTILE:
                    case RATIO_TO_REPORT:
                    case ROW_NUMBER:
                    case SUM:
                    case VARIANCE:
                    case REGR_:
                    case STDDEV:
                    case VAR_:
                    case COVAR_:
                    case DELIMITED_ID:
                    case INTRODUCER:
                    case REGULAR_ID:
                    {
                        setState(3615);
                        tableview_name();
                    }
                    break;
                    case LEFT_PAREN:
                    {
                        setState(3616);
                        match(LEFT_PAREN);
                        setState(3617);
                        select_statement();
                        setState(3618);
                        match(RIGHT_PAREN);
                    }
                    break;
                    default:
                        throw new NoViableAltException(this);
                }
                setState(3623);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,431,_ctx) ) {
                    case 1:
                    {
                        setState(3622);
                        table_alias();
                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Lock_table_statementContext extends ParserRuleContext {
        public TerminalNode LOCK() { return getToken(PlSqlParser.LOCK, 0); }
        public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
        public List<Lock_table_elementContext> lock_table_element() {
            return getRuleContexts(Lock_table_elementContext.class);
        }
        public Lock_table_elementContext lock_table_element(int i) {
            return getRuleContext(Lock_table_elementContext.class,i);
        }
        public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
        public Lock_modeContext lock_mode() {
            return getRuleContext(Lock_modeContext.class,0);
        }
        public TerminalNode MODE() { return getToken(PlSqlParser.MODE, 0); }
        public Wait_nowait_partContext wait_nowait_part() {
            return getRuleContext(Wait_nowait_partContext.class,0);
        }
        public Lock_table_statementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_lock_table_statement; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterLock_table_statement(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitLock_table_statement(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitLock_table_statement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Lock_table_statementContext lock_table_statement() throws RecognitionException {
        Lock_table_statementContext _localctx = new Lock_table_statementContext(_ctx, getState());
        enterRule(_localctx, 470, RULE_lock_table_statement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3625);
                match(LOCK);
                setState(3626);
                match(TABLE);
                setState(3627);
                lock_table_element();
                setState(3632);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==COMMA) {
                    {
                        {
                            setState(3628);
                            match(COMMA);
                            setState(3629);
                            lock_table_element();
                        }
                    }
                    setState(3634);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(3635);
                match(IN);
                setState(3636);
                lock_mode();
                setState(3637);
                match(MODE);
                setState(3639);
                _la = _input.LA(1);
                if (_la==NOWAIT || _la==WAIT) {
                    {
                        setState(3638);
                        wait_nowait_part();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Wait_nowait_partContext extends ParserRuleContext {
        public TerminalNode WAIT() { return getToken(PlSqlParser.WAIT, 0); }
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class,0);
        }
        public TerminalNode NOWAIT() { return getToken(PlSqlParser.NOWAIT, 0); }
        public Wait_nowait_partContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_wait_nowait_part; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterWait_nowait_part(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitWait_nowait_part(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitWait_nowait_part(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Wait_nowait_partContext wait_nowait_part() throws RecognitionException {
        Wait_nowait_partContext _localctx = new Wait_nowait_partContext(_ctx, getState());
        enterRule(_localctx, 472, RULE_wait_nowait_part);
        try {
            setState(3644);
            switch (_input.LA(1)) {
                case WAIT:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3641);
                    match(WAIT);
                    setState(3642);
                    expression();
                }
                break;
                case NOWAIT:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3643);
                    match(NOWAIT);
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Lock_table_elementContext extends ParserRuleContext {
        public Tableview_nameContext tableview_name() {
            return getRuleContext(Tableview_nameContext.class,0);
        }
        public Partition_extension_clauseContext partition_extension_clause() {
            return getRuleContext(Partition_extension_clauseContext.class,0);
        }
        public Lock_table_elementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_lock_table_element; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterLock_table_element(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitLock_table_element(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitLock_table_element(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Lock_table_elementContext lock_table_element() throws RecognitionException {
        Lock_table_elementContext _localctx = new Lock_table_elementContext(_ctx, getState());
        enterRule(_localctx, 474, RULE_lock_table_element);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3646);
                tableview_name();
                setState(3648);
                _la = _input.LA(1);
                if (_la==PARTITION || _la==SUBPARTITION) {
                    {
                        setState(3647);
                        partition_extension_clause();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Lock_modeContext extends ParserRuleContext {
        public TerminalNode ROW() { return getToken(PlSqlParser.ROW, 0); }
        public TerminalNode SHARE() { return getToken(PlSqlParser.SHARE, 0); }
        public TerminalNode EXCLUSIVE() { return getToken(PlSqlParser.EXCLUSIVE, 0); }
        public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
        public Lock_modeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_lock_mode; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterLock_mode(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitLock_mode(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitLock_mode(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Lock_modeContext lock_mode() throws RecognitionException {
        Lock_modeContext _localctx = new Lock_modeContext(_ctx, getState());
        enterRule(_localctx, 476, RULE_lock_mode);
        int _la;
        try {
            setState(3662);
            _errHandler.sync(this);
            switch ( getInterpreter().adaptivePredict(_input,437,_ctx) ) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3650);
                    match(ROW);
                    setState(3651);
                    match(SHARE);
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3652);
                    match(ROW);
                    setState(3653);
                    match(EXCLUSIVE);
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(3654);
                    match(SHARE);
                    setState(3656);
                    _la = _input.LA(1);
                    if (_la==UPDATE) {
                        {
                            setState(3655);
                            match(UPDATE);
                        }
                    }

                }
                break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                {
                    setState(3658);
                    match(SHARE);
                    setState(3659);
                    match(ROW);
                    setState(3660);
                    match(EXCLUSIVE);
                }
                break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                {
                    setState(3661);
                    match(EXCLUSIVE);
                }
                break;
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class General_table_refContext extends ParserRuleContext {
        public Dml_table_expression_clauseContext dml_table_expression_clause() {
            return getRuleContext(Dml_table_expression_clauseContext.class,0);
        }
        public TerminalNode ONLY() { return getToken(PlSqlParser.ONLY, 0); }
        public Table_aliasContext table_alias() {
            return getRuleContext(Table_aliasContext.class,0);
        }
        public General_table_refContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_general_table_ref; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterGeneral_table_ref(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitGeneral_table_ref(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitGeneral_table_ref(this);
            else return visitor.visitChildren(this);
        }
    }

    public final General_table_refContext general_table_ref() throws RecognitionException {
        General_table_refContext _localctx = new General_table_refContext(_ctx, getState());
        enterRule(_localctx, 478, RULE_general_table_ref);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3670);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,438,_ctx) ) {
                    case 1:
                    {
                        setState(3664);
                        dml_table_expression_clause();
                    }
                    break;
                    case 2:
                    {
                        setState(3665);
                        match(ONLY);
                        setState(3666);
                        match(LEFT_PAREN);
                        setState(3667);
                        dml_table_expression_clause();
                        setState(3668);
                        match(RIGHT_PAREN);
                    }
                    break;
                }
                setState(3673);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,439,_ctx) ) {
                    case 1:
                    {
                        setState(3672);
                        table_alias();
                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Static_returning_clauseContext extends ParserRuleContext {
        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }
        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class,i);
        }
        public Into_clauseContext into_clause() {
            return getRuleContext(Into_clauseContext.class,0);
        }
        public TerminalNode RETURNING() { return getToken(PlSqlParser.RETURNING, 0); }
        public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
        public Static_returning_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_static_returning_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterStatic_returning_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitStatic_returning_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitStatic_returning_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Static_returning_clauseContext static_returning_clause() throws RecognitionException {
        Static_returning_clauseContext _localctx = new Static_returning_clauseContext(_ctx, getState());
        enterRule(_localctx, 480, RULE_static_returning_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3675);
                _la = _input.LA(1);
                if ( !(_la==RETURN || _la==RETURNING) ) {
                    _errHandler.recoverInline(this);
                } else {
                    consume();
                }
                setState(3676);
                expression();
                setState(3681);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==COMMA) {
                    {
                        {
                            setState(3677);
                            match(COMMA);
                            setState(3678);
                            expression();
                        }
                    }
                    setState(3683);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(3684);
                into_clause();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Error_logging_clauseContext extends ParserRuleContext {
        public TerminalNode LOG() { return getToken(PlSqlParser.LOG, 0); }
        public TerminalNode ERRORS() { return getToken(PlSqlParser.ERRORS, 0); }
        public Error_logging_into_partContext error_logging_into_part() {
            return getRuleContext(Error_logging_into_partContext.class,0);
        }
        public Expression_wrapperContext expression_wrapper() {
            return getRuleContext(Expression_wrapperContext.class,0);
        }
        public Error_logging_reject_partContext error_logging_reject_part() {
            return getRuleContext(Error_logging_reject_partContext.class,0);
        }
        public Error_logging_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_error_logging_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterError_logging_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitError_logging_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitError_logging_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Error_logging_clauseContext error_logging_clause() throws RecognitionException {
        Error_logging_clauseContext _localctx = new Error_logging_clauseContext(_ctx, getState());
        enterRule(_localctx, 482, RULE_error_logging_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3686);
                match(LOG);
                setState(3687);
                match(ERRORS);
                setState(3689);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,441,_ctx) ) {
                    case 1:
                    {
                        setState(3688);
                        error_logging_into_part();
                    }
                    break;
                }
                setState(3692);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,442,_ctx) ) {
                    case 1:
                    {
                        setState(3691);
                        expression_wrapper();
                    }
                    break;
                }
                setState(3695);
                _la = _input.LA(1);
                if (_la==REJECT) {
                    {
                        setState(3694);
                        error_logging_reject_part();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Error_logging_into_partContext extends ParserRuleContext {
        public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
        public Tableview_nameContext tableview_name() {
            return getRuleContext(Tableview_nameContext.class,0);
        }
        public Error_logging_into_partContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_error_logging_into_part; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterError_logging_into_part(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitError_logging_into_part(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitError_logging_into_part(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Error_logging_into_partContext error_logging_into_part() throws RecognitionException {
        Error_logging_into_partContext _localctx = new Error_logging_into_partContext(_ctx, getState());
        enterRule(_localctx, 484, RULE_error_logging_into_part);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3697);
                match(INTO);
                setState(3698);
                tableview_name();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Error_logging_reject_partContext extends ParserRuleContext {
        public TerminalNode REJECT() { return getToken(PlSqlParser.REJECT, 0); }
        public TerminalNode LIMIT() { return getToken(PlSqlParser.LIMIT, 0); }
        public TerminalNode UNLIMITED() { return getToken(PlSqlParser.UNLIMITED, 0); }
        public Expression_wrapperContext expression_wrapper() {
            return getRuleContext(Expression_wrapperContext.class,0);
        }
        public Error_logging_reject_partContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_error_logging_reject_part; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterError_logging_reject_part(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitError_logging_reject_part(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitError_logging_reject_part(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Error_logging_reject_partContext error_logging_reject_part() throws RecognitionException {
        Error_logging_reject_partContext _localctx = new Error_logging_reject_partContext(_ctx, getState());
        enterRule(_localctx, 486, RULE_error_logging_reject_part);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3700);
                match(REJECT);
                setState(3701);
                match(LIMIT);
                setState(3704);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,444,_ctx) ) {
                    case 1:
                    {
                        setState(3702);
                        match(UNLIMITED);
                    }
                    break;
                    case 2:
                    {
                        setState(3703);
                        expression_wrapper();
                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Dml_table_expression_clauseContext extends ParserRuleContext {
        public Table_collection_expressionContext table_collection_expression() {
            return getRuleContext(Table_collection_expressionContext.class,0);
        }
        public Select_statementContext select_statement() {
            return getRuleContext(Select_statementContext.class,0);
        }
        public Subquery_restriction_clauseContext subquery_restriction_clause() {
            return getRuleContext(Subquery_restriction_clauseContext.class,0);
        }
        public Tableview_nameContext tableview_name() {
            return getRuleContext(Tableview_nameContext.class,0);
        }
        public Sample_clauseContext sample_clause() {
            return getRuleContext(Sample_clauseContext.class,0);
        }
        public Dml_table_expression_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_dml_table_expression_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDml_table_expression_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDml_table_expression_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDml_table_expression_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Dml_table_expression_clauseContext dml_table_expression_clause() throws RecognitionException {
        Dml_table_expression_clauseContext _localctx = new Dml_table_expression_clauseContext(_ctx, getState());
        enterRule(_localctx, 488, RULE_dml_table_expression_clause);
        int _la;
        try {
            setState(3718);
            _errHandler.sync(this);
            switch ( getInterpreter().adaptivePredict(_input,447,_ctx) ) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3706);
                    table_collection_expression();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3707);
                    match(LEFT_PAREN);
                    setState(3708);
                    select_statement();
                    setState(3710);
                    _la = _input.LA(1);
                    if (_la==WITH) {
                        {
                            setState(3709);
                            subquery_restriction_clause();
                        }
                    }

                    setState(3712);
                    match(RIGHT_PAREN);
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(3714);
                    tableview_name();
                    setState(3716);
                    _errHandler.sync(this);
                    switch ( getInterpreter().adaptivePredict(_input,446,_ctx) ) {
                        case 1:
                        {
                            setState(3715);
                            sample_clause();
                        }
                        break;
                    }
                }
                break;
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Table_collection_expressionContext extends ParserRuleContext {
        public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
        public TerminalNode THE() { return getToken(PlSqlParser.THE, 0); }
        public SubqueryContext subquery() {
            return getRuleContext(SubqueryContext.class,0);
        }
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class,0);
        }
        public Table_collection_expressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_table_collection_expression; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTable_collection_expression(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTable_collection_expression(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTable_collection_expression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Table_collection_expressionContext table_collection_expression() throws RecognitionException {
        Table_collection_expressionContext _localctx = new Table_collection_expressionContext(_ctx, getState());
        enterRule(_localctx, 490, RULE_table_collection_expression);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3720);
                _la = _input.LA(1);
                if ( !(_la==TABLE || _la==THE) ) {
                    _errHandler.recoverInline(this);
                } else {
                    consume();
                }
                setState(3733);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,449,_ctx) ) {
                    case 1:
                    {
                        setState(3721);
                        match(LEFT_PAREN);
                        setState(3722);
                        subquery();
                        setState(3723);
                        match(RIGHT_PAREN);
                    }
                    break;
                    case 2:
                    {
                        setState(3725);
                        match(LEFT_PAREN);
                        setState(3726);
                        expression();
                        setState(3727);
                        match(RIGHT_PAREN);
                        setState(3731);
                        _errHandler.sync(this);
                        switch ( getInterpreter().adaptivePredict(_input,448,_ctx) ) {
                            case 1:
                            {
                                setState(3728);
                                match(LEFT_PAREN);
                                setState(3729);
                                match(PLUS_SIGN);
                                setState(3730);
                                match(RIGHT_PAREN);
                            }
                            break;
                        }
                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Subquery_restriction_clauseContext extends ParserRuleContext {
        public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
        public TerminalNode READ() { return getToken(PlSqlParser.READ, 0); }
        public TerminalNode ONLY() { return getToken(PlSqlParser.ONLY, 0); }
        public TerminalNode CHECK() { return getToken(PlSqlParser.CHECK, 0); }
        public TerminalNode OPTION() { return getToken(PlSqlParser.OPTION, 0); }
        public TerminalNode CONSTRAINT() { return getToken(PlSqlParser.CONSTRAINT, 0); }
        public Constraint_nameContext constraint_name() {
            return getRuleContext(Constraint_nameContext.class,0);
        }
        public Subquery_restriction_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_subquery_restriction_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSubquery_restriction_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSubquery_restriction_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSubquery_restriction_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Subquery_restriction_clauseContext subquery_restriction_clause() throws RecognitionException {
        Subquery_restriction_clauseContext _localctx = new Subquery_restriction_clauseContext(_ctx, getState());
        enterRule(_localctx, 492, RULE_subquery_restriction_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3735);
                match(WITH);
                setState(3744);
                switch (_input.LA(1)) {
                    case READ:
                    {
                        setState(3736);
                        match(READ);
                        setState(3737);
                        match(ONLY);
                    }
                    break;
                    case CHECK:
                    {
                        setState(3738);
                        match(CHECK);
                        setState(3739);
                        match(OPTION);
                        setState(3742);
                        _la = _input.LA(1);
                        if (_la==CONSTRAINT) {
                            {
                                setState(3740);
                                match(CONSTRAINT);
                                setState(3741);
                                constraint_name();
                            }
                        }

                    }
                    break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Sample_clauseContext extends ParserRuleContext {
        public TerminalNode SAMPLE() { return getToken(PlSqlParser.SAMPLE, 0); }
        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }
        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class,i);
        }
        public TerminalNode BLOCK() { return getToken(PlSqlParser.BLOCK, 0); }
        public Seed_partContext seed_part() {
            return getRuleContext(Seed_partContext.class,0);
        }
        public Sample_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_sample_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSample_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSample_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSample_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Sample_clauseContext sample_clause() throws RecognitionException {
        Sample_clauseContext _localctx = new Sample_clauseContext(_ctx, getState());
        enterRule(_localctx, 494, RULE_sample_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3746);
                match(SAMPLE);
                setState(3748);
                _la = _input.LA(1);
                if (_la==BLOCK) {
                    {
                        setState(3747);
                        match(BLOCK);
                    }
                }

                setState(3750);
                match(LEFT_PAREN);
                setState(3751);
                expression();
                setState(3754);
                _la = _input.LA(1);
                if (_la==COMMA) {
                    {
                        setState(3752);
                        match(COMMA);
                        setState(3753);
                        expression();
                    }
                }

                setState(3756);
                match(RIGHT_PAREN);
                setState(3758);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,454,_ctx) ) {
                    case 1:
                    {
                        setState(3757);
                        seed_part();
                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Seed_partContext extends ParserRuleContext {
        public TerminalNode SEED() { return getToken(PlSqlParser.SEED, 0); }
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class,0);
        }
        public Seed_partContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_seed_part; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSeed_part(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSeed_part(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSeed_part(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Seed_partContext seed_part() throws RecognitionException {
        Seed_partContext _localctx = new Seed_partContext(_ctx, getState());
        enterRule(_localctx, 496, RULE_seed_part);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3760);
                match(SEED);
                setState(3761);
                match(LEFT_PAREN);
                setState(3762);
                expression();
                setState(3763);
                match(RIGHT_PAREN);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Cursor_expressionContext extends ParserRuleContext {
        public TerminalNode CURSOR() { return getToken(PlSqlParser.CURSOR, 0); }
        public SubqueryContext subquery() {
            return getRuleContext(SubqueryContext.class,0);
        }
        public Cursor_nameContext cursor_name() {
            return getRuleContext(Cursor_nameContext.class,0);
        }
        public TerminalNode PERCENT_NOTFOUND() { return getToken(PlSqlParser.PERCENT_NOTFOUND, 0); }
        public TerminalNode PERCENT_FOUND() { return getToken(PlSqlParser.PERCENT_FOUND, 0); }
        public TerminalNode PERCENT_ISOPEN() { return getToken(PlSqlParser.PERCENT_ISOPEN, 0); }
        public TerminalNode PERCENT_ROWCOUNT() { return getToken(PlSqlParser.PERCENT_ROWCOUNT, 0); }
        public Sql_cursor_expressionContext sql_cursor_expression() {
            return getRuleContext(Sql_cursor_expressionContext.class,0);
        }
        public Cursor_expressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_cursor_expression; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCursor_expression(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCursor_expression(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCursor_expression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Cursor_expressionContext cursor_expression() throws RecognitionException {
        Cursor_expressionContext _localctx = new Cursor_expressionContext(_ctx, getState());
        enterRule(_localctx, 498, RULE_cursor_expression);
        try {
            setState(3783);
            _errHandler.sync(this);
            switch ( getInterpreter().adaptivePredict(_input,455,_ctx) ) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3765);
                    match(CURSOR);
                    setState(3766);
                    match(LEFT_PAREN);
                    setState(3767);
                    subquery();
                    setState(3768);
                    match(RIGHT_PAREN);
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3770);
                    cursor_name();
                    setState(3771);
                    match(PERCENT_NOTFOUND);
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(3773);
                    cursor_name();
                    setState(3774);
                    match(PERCENT_FOUND);
                }
                break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                {
                    setState(3776);
                    cursor_name();
                    setState(3777);
                    match(PERCENT_ISOPEN);
                }
                break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                {
                    setState(3779);
                    cursor_name();
                    setState(3780);
                    match(PERCENT_ROWCOUNT);
                }
                break;
                case 6:
                    enterOuterAlt(_localctx, 6);
                {
                    setState(3782);
                    sql_cursor_expression();
                }
                break;
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Sql_cursor_expressionContext extends ParserRuleContext {
        public TerminalNode SQL_PERCENT_ROWCOUNT() { return getToken(PlSqlParser.SQL_PERCENT_ROWCOUNT, 0); }
        public Sql_cursor_expressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_sql_cursor_expression; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSql_cursor_expression(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSql_cursor_expression(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSql_cursor_expression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Sql_cursor_expressionContext sql_cursor_expression() throws RecognitionException {
        Sql_cursor_expressionContext _localctx = new Sql_cursor_expressionContext(_ctx, getState());
        enterRule(_localctx, 500, RULE_sql_cursor_expression);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3785);
                match(SQL_PERCENT_ROWCOUNT);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Collection_assoc_expressionContext extends ParserRuleContext {
        public Collection_nameContext collection_name() {
            return getRuleContext(Collection_nameContext.class,0);
        }
        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }
        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class,i);
        }
        public Variable_nameContext variable_name() {
            return getRuleContext(Variable_nameContext.class,0);
        }
        public Collection_assoc_expressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_collection_assoc_expression; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCollection_assoc_expression(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCollection_assoc_expression(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCollection_assoc_expression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Collection_assoc_expressionContext collection_assoc_expression() throws RecognitionException {
        Collection_assoc_expressionContext _localctx = new Collection_assoc_expressionContext(_ctx, getState());
        enterRule(_localctx, 502, RULE_collection_assoc_expression);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(3787);
                collection_name();
                setState(3794);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input,456,_ctx);
                while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
                    if ( _alt==1 ) {
                        {
                            {
                                setState(3788);
                                match(LEFT_PAREN);
                                setState(3789);
                                expression();
                                setState(3790);
                                match(RIGHT_PAREN);
                            }
                        }
                    }
                    setState(3796);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input,456,_ctx);
                }
                setState(3799);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,457,_ctx) ) {
                    case 1:
                    {
                        setState(3797);
                        match(PERIOD);
                        setState(3798);
                        variable_name();
                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Collection_type_expressionContext extends ParserRuleContext {
        public Collection_assoc_expressionContext collection_assoc_expression() {
            return getRuleContext(Collection_assoc_expressionContext.class,0);
        }
        public TerminalNode FIRST() { return getToken(PlSqlParser.FIRST, 0); }
        public TerminalNode LAST() { return getToken(PlSqlParser.LAST, 0); }
        public TerminalNode EXISTS() { return getToken(PlSqlParser.EXISTS, 0); }
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class,0);
        }
        public TerminalNode PRIOR() { return getToken(PlSqlParser.PRIOR, 0); }
        public TerminalNode NEXT() { return getToken(PlSqlParser.NEXT, 0); }
        public TerminalNode COUNT() { return getToken(PlSqlParser.COUNT, 0); }
        public TerminalNode LIMIT() { return getToken(PlSqlParser.LIMIT, 0); }
        public Collection_type_expressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_collection_type_expression; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCollection_type_expression(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCollection_type_expression(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCollection_type_expression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Collection_type_expressionContext collection_type_expression() throws RecognitionException {
        Collection_type_expressionContext _localctx = new Collection_type_expressionContext(_ctx, getState());
        enterRule(_localctx, 504, RULE_collection_type_expression);
        try {
            setState(3839);
            _errHandler.sync(this);
            switch ( getInterpreter().adaptivePredict(_input,458,_ctx) ) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3801);
                    collection_assoc_expression();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3802);
                    collection_assoc_expression();
                    setState(3803);
                    match(PERIOD);
                    setState(3804);
                    match(FIRST);
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(3806);
                    collection_assoc_expression();
                    setState(3807);
                    match(PERIOD);
                    setState(3808);
                    match(LAST);
                }
                break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                {
                    setState(3810);
                    collection_assoc_expression();
                    setState(3811);
                    match(PERIOD);
                    setState(3812);
                    match(EXISTS);
                    setState(3813);
                    match(LEFT_PAREN);
                    setState(3814);
                    expression();
                    setState(3815);
                    match(RIGHT_PAREN);
                }
                break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                {
                    setState(3817);
                    collection_assoc_expression();
                    setState(3818);
                    match(PERIOD);
                    setState(3819);
                    match(PRIOR);
                    setState(3820);
                    match(LEFT_PAREN);
                    setState(3821);
                    expression();
                    setState(3822);
                    match(RIGHT_PAREN);
                }
                break;
                case 6:
                    enterOuterAlt(_localctx, 6);
                {
                    setState(3824);
                    collection_assoc_expression();
                    setState(3825);
                    match(PERIOD);
                    setState(3826);
                    match(NEXT);
                    setState(3827);
                    match(LEFT_PAREN);
                    setState(3828);
                    expression();
                    setState(3829);
                    match(RIGHT_PAREN);
                }
                break;
                case 7:
                    enterOuterAlt(_localctx, 7);
                {
                    setState(3831);
                    collection_assoc_expression();
                    setState(3832);
                    match(PERIOD);
                    setState(3833);
                    match(COUNT);
                }
                break;
                case 8:
                    enterOuterAlt(_localctx, 8);
                {
                    setState(3835);
                    collection_assoc_expression();
                    setState(3836);
                    match(PERIOD);
                    setState(3837);
                    match(LIMIT);
                }
                break;
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Expression_listContext extends ParserRuleContext {
        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }
        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class,i);
        }
        public Expression_listContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_expression_list; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterExpression_list(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitExpression_list(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitExpression_list(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Expression_listContext expression_list() throws RecognitionException {
        Expression_listContext _localctx = new Expression_listContext(_ctx, getState());
        enterRule(_localctx, 506, RULE_expression_list);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3841);
                match(LEFT_PAREN);
                setState(3843);
                _la = _input.LA(1);
                if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ALTER) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREADTH) | (1L << BULK) | (1L << BY) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHECK) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DEPTH - 64)) | (1L << (DESC - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (ELSE - 64)) | (1L << (ELSIF - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (END - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EXCEPT - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXCLUSIVE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FETCH - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FOR - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GOTO - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HAVING - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IN - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEX - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERSECT - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTO - 192)) | (1L << (INVALIDATE - 192)) | (1L << (IS - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCK - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUS - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MOD - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCACHE - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)) | (1L << (NOENTITYESCAPING - 192)) | (1L << (NOMAXVALUE - 192)) | (1L << (NOMINVALUE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NONE - 256)) | (1L << (NOORDER - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NOT - 256)) | (1L << (NOWAIT - 256)) | (1L << (NULL - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OF - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ON - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (OPTION - 256)) | (1L << (OR - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDER - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PIVOT - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (PRIOR - 256)) | (1L << (PROCEDURE - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (REVOKE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SEARCH - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELECT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENCE - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHARE - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (SQL_PERCENT_ROWCOUNT - 320)) | (1L << (STANDALONE - 320)) | (1L << (START - 320)) | (1L << (STARTUP - 320)) | (1L << (STATEMENT - 320)) | (1L << (STATEMENT_ID - 320)) | (1L << (STATIC - 320)) | (1L << (STATISTICS - 320)) | (1L << (STRING - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TABLE - 384)) | (1L << (THE - 384)) | (1L << (THEN - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TO - 384)) | (1L << (TO_CHAR - 384)) | (1L << (TO_NUMBER - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUE - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNION - 384)) | (1L << (UNIQUE - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNPIVOT - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATE - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (USING - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VALUES - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHEN - 384)) | (1L << (WHENEVER - 384)) | (1L << (WHERE - 384)) | (1L << (WHILE - 384)) | (1L << (WITH - 384)) | (1L << (WITHIN - 384)) | (1L << (WORK - 384)) | (1L << (WRITE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)) | (1L << (REGR_ - 448)) | (1L << (STDDEV - 448)) | (1L << (VAR_ - 448)) | (1L << (COVAR_ - 448)) | (1L << (NATIONAL_CHAR_STRING_LIT - 448)) | (1L << (UNSIGNED_INTEGER - 448)) | (1L << (APPROXIMATE_NUM_LIT - 448)) | (1L << (CHAR_STRING - 448)) | (1L << (DELIMITED_ID - 448)) | (1L << (LEFT_PAREN - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PLUS_SIGN - 512)) | (1L << (MINUS_SIGN - 512)) | (1L << (BINDVAR - 512)) | (1L << (COLON - 512)) | (1L << (INTRODUCER - 512)))) != 0) || _la==REGULAR_ID) {
                    {
                        setState(3842);
                        expression();
                    }
                }

                setState(3849);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==COMMA) {
                    {
                        {
                            setState(3845);
                            match(COMMA);
                            setState(3846);
                            expression();
                        }
                    }
                    setState(3851);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(3852);
                match(RIGHT_PAREN);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class ConditionContext extends ParserRuleContext {
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class,0);
        }
        public ConditionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_condition; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCondition(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCondition(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCondition(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ConditionContext condition() throws RecognitionException {
        ConditionContext _localctx = new ConditionContext(_ctx, getState());
        enterRule(_localctx, 508, RULE_condition);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3854);
                expression();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Condition_wrapperContext extends ParserRuleContext {
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class,0);
        }
        public Condition_wrapperContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_condition_wrapper; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCondition_wrapper(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCondition_wrapper(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCondition_wrapper(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Condition_wrapperContext condition_wrapper() throws RecognitionException {
        Condition_wrapperContext _localctx = new Condition_wrapperContext(_ctx, getState());
        enterRule(_localctx, 510, RULE_condition_wrapper);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3856);
                expression();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class ExpressionContext extends ParserRuleContext {
        public Logical_and_expressionContext logical_and_expression() {
            return getRuleContext(Logical_and_expressionContext.class,0);
        }
        public List<TerminalNode> OR() { return getTokens(PlSqlParser.OR); }
        public TerminalNode OR(int i) {
            return getToken(PlSqlParser.OR, i);
        }
        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }
        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class,i);
        }
        public ExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_expression; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterExpression(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitExpression(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitExpression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ExpressionContext expression() throws RecognitionException {
        ExpressionContext _localctx = new ExpressionContext(_ctx, getState());
        enterRule(_localctx, 512, RULE_expression);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                {
                    setState(3858);
                    logical_and_expression();
                }
                setState(3863);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input,461,_ctx);
                while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
                    if ( _alt==1 ) {
                        {
                            {
                                setState(3859);
                                match(OR);
                                setState(3860);
                                expression();
                            }
                        }
                    }
                    setState(3865);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input,461,_ctx);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Expression_wrapperContext extends ParserRuleContext {
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class,0);
        }
        public Expression_wrapperContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_expression_wrapper; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterExpression_wrapper(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitExpression_wrapper(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitExpression_wrapper(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Expression_wrapperContext expression_wrapper() throws RecognitionException {
        Expression_wrapperContext _localctx = new Expression_wrapperContext(_ctx, getState());
        enterRule(_localctx, 514, RULE_expression_wrapper);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3866);
                expression();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Logical_and_expressionContext extends ParserRuleContext {
        public List<Negated_expressionContext> negated_expression() {
            return getRuleContexts(Negated_expressionContext.class);
        }
        public Negated_expressionContext negated_expression(int i) {
            return getRuleContext(Negated_expressionContext.class,i);
        }
        public List<TerminalNode> AND() { return getTokens(PlSqlParser.AND); }
        public TerminalNode AND(int i) {
            return getToken(PlSqlParser.AND, i);
        }
        public Logical_and_expressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_logical_and_expression; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterLogical_and_expression(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitLogical_and_expression(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitLogical_and_expression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Logical_and_expressionContext logical_and_expression() throws RecognitionException {
        Logical_and_expressionContext _localctx = new Logical_and_expressionContext(_ctx, getState());
        enterRule(_localctx, 516, RULE_logical_and_expression);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(3868);
                negated_expression();
                setState(3873);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input,462,_ctx);
                while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
                    if ( _alt==1 ) {
                        {
                            {
                                setState(3869);
                                match(AND);
                                setState(3870);
                                negated_expression();
                            }
                        }
                    }
                    setState(3875);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input,462,_ctx);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Negated_expressionContext extends ParserRuleContext {
        public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
        public Negated_expressionContext negated_expression() {
            return getRuleContext(Negated_expressionContext.class,0);
        }
        public Equality_expressionContext equality_expression() {
            return getRuleContext(Equality_expressionContext.class,0);
        }
        public Negated_expressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_negated_expression; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterNegated_expression(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitNegated_expression(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitNegated_expression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Negated_expressionContext negated_expression() throws RecognitionException {
        Negated_expressionContext _localctx = new Negated_expressionContext(_ctx, getState());
        enterRule(_localctx, 518, RULE_negated_expression);
        try {
            setState(3879);
            _errHandler.sync(this);
            switch ( getInterpreter().adaptivePredict(_input,463,_ctx) ) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3876);
                    match(NOT);
                    setState(3877);
                    negated_expression();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3878);
                    equality_expression();
                }
                break;
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Equality_expressionContext extends ParserRuleContext {
        public Collection_type_expressionContext collection_type_expression() {
            return getRuleContext(Collection_type_expressionContext.class,0);
        }
        public Multiset_expressionContext multiset_expression() {
            return getRuleContext(Multiset_expressionContext.class,0);
        }
        public List<TerminalNode> IS() { return getTokens(PlSqlParser.IS); }
        public TerminalNode IS(int i) {
            return getToken(PlSqlParser.IS, i);
        }
        public List<TerminalNode> NULL() { return getTokens(PlSqlParser.NULL); }
        public TerminalNode NULL(int i) {
            return getToken(PlSqlParser.NULL, i);
        }
        public List<TerminalNode> NAN() { return getTokens(PlSqlParser.NAN); }
        public TerminalNode NAN(int i) {
            return getToken(PlSqlParser.NAN, i);
        }
        public List<TerminalNode> PRESENT() { return getTokens(PlSqlParser.PRESENT); }
        public TerminalNode PRESENT(int i) {
            return getToken(PlSqlParser.PRESENT, i);
        }
        public List<TerminalNode> INFINITE() { return getTokens(PlSqlParser.INFINITE); }
        public TerminalNode INFINITE(int i) {
            return getToken(PlSqlParser.INFINITE, i);
        }
        public List<TerminalNode> A_LETTER() { return getTokens(PlSqlParser.A_LETTER); }
        public TerminalNode A_LETTER(int i) {
            return getToken(PlSqlParser.A_LETTER, i);
        }
        public List<TerminalNode> SET() { return getTokens(PlSqlParser.SET); }
        public TerminalNode SET(int i) {
            return getToken(PlSqlParser.SET, i);
        }
        public List<TerminalNode> EMPTY() { return getTokens(PlSqlParser.EMPTY); }
        public TerminalNode EMPTY(int i) {
            return getToken(PlSqlParser.EMPTY, i);
        }
        public List<TerminalNode> OF() { return getTokens(PlSqlParser.OF); }
        public TerminalNode OF(int i) {
            return getToken(PlSqlParser.OF, i);
        }
        public List<Type_specContext> type_spec() {
            return getRuleContexts(Type_specContext.class);
        }
        public Type_specContext type_spec(int i) {
            return getRuleContext(Type_specContext.class,i);
        }
        public List<TerminalNode> NOT() { return getTokens(PlSqlParser.NOT); }
        public TerminalNode NOT(int i) {
            return getToken(PlSqlParser.NOT, i);
        }
        public List<TerminalNode> TYPE() { return getTokens(PlSqlParser.TYPE); }
        public TerminalNode TYPE(int i) {
            return getToken(PlSqlParser.TYPE, i);
        }
        public List<TerminalNode> ONLY() { return getTokens(PlSqlParser.ONLY); }
        public TerminalNode ONLY(int i) {
            return getToken(PlSqlParser.ONLY, i);
        }
        public Cursor_expressionContext cursor_expression() {
            return getRuleContext(Cursor_expressionContext.class,0);
        }
        public Equality_expressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_equality_expression; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterEquality_expression(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitEquality_expression(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitEquality_expression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Equality_expressionContext equality_expression() throws RecognitionException {
        Equality_expressionContext _localctx = new Equality_expressionContext(_ctx, getState());
        enterRule(_localctx, 520, RULE_equality_expression);
        int _la;
        try {
            int _alt;
            setState(3920);
            _errHandler.sync(this);
            switch ( getInterpreter().adaptivePredict(_input,470,_ctx) ) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3881);
                    collection_type_expression();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    {
                        setState(3882);
                        multiset_expression();
                        setState(3916);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input,469,_ctx);
                        while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
                            if ( _alt==1 ) {
                                {
                                    {
                                        setState(3883);
                                        match(IS);
                                        setState(3885);
                                        _la = _input.LA(1);
                                        if (_la==NOT) {
                                            {
                                                setState(3884);
                                                match(NOT);
                                            }
                                        }

                                        setState(3912);
                                        switch (_input.LA(1)) {
                                            case NULL:
                                            {
                                                setState(3887);
                                                match(NULL);
                                            }
                                            break;
                                            case NAN:
                                            {
                                                setState(3888);
                                                match(NAN);
                                            }
                                            break;
                                            case PRESENT:
                                            {
                                                setState(3889);
                                                match(PRESENT);
                                            }
                                            break;
                                            case INFINITE:
                                            {
                                                setState(3890);
                                                match(INFINITE);
                                            }
                                            break;
                                            case A_LETTER:
                                            {
                                                setState(3891);
                                                match(A_LETTER);
                                                setState(3892);
                                                match(SET);
                                            }
                                            break;
                                            case EMPTY:
                                            {
                                                setState(3893);
                                                match(EMPTY);
                                            }
                                            break;
                                            case OF:
                                            {
                                                setState(3894);
                                                match(OF);
                                                setState(3896);
                                                _la = _input.LA(1);
                                                if (_la==TYPE) {
                                                    {
                                                        setState(3895);
                                                        match(TYPE);
                                                    }
                                                }

                                                setState(3898);
                                                match(LEFT_PAREN);
                                                setState(3900);
                                                _errHandler.sync(this);
                                                switch ( getInterpreter().adaptivePredict(_input,466,_ctx) ) {
                                                    case 1:
                                                    {
                                                        setState(3899);
                                                        match(ONLY);
                                                    }
                                                    break;
                                                }
                                                setState(3902);
                                                type_spec();
                                                setState(3907);
                                                _errHandler.sync(this);
                                                _la = _input.LA(1);
                                                while (_la==COMMA) {
                                                    {
                                                        {
                                                            setState(3903);
                                                            match(COMMA);
                                                            setState(3904);
                                                            type_spec();
                                                        }
                                                    }
                                                    setState(3909);
                                                    _errHandler.sync(this);
                                                    _la = _input.LA(1);
                                                }
                                                setState(3910);
                                                match(RIGHT_PAREN);
                                            }
                                            break;
                                            default:
                                                throw new NoViableAltException(this);
                                        }
                                    }
                                }
                            }
                            setState(3918);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input,469,_ctx);
                        }
                    }
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(3919);
                    cursor_expression();
                }
                break;
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Multiset_partContext extends ParserRuleContext {
        public Collection_nameContext collection_name() {
            return getRuleContext(Collection_nameContext.class,0);
        }
        public Collection_assoc_expressionContext collection_assoc_expression() {
            return getRuleContext(Collection_assoc_expressionContext.class,0);
        }
        public Function_callContext function_call() {
            return getRuleContext(Function_callContext.class,0);
        }
        public Multiset_partContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_multiset_part; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMultiset_part(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMultiset_part(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMultiset_part(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Multiset_partContext multiset_part() throws RecognitionException {
        Multiset_partContext _localctx = new Multiset_partContext(_ctx, getState());
        enterRule(_localctx, 522, RULE_multiset_part);
        try {
            setState(3925);
            _errHandler.sync(this);
            switch ( getInterpreter().adaptivePredict(_input,471,_ctx) ) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3922);
                    collection_name();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3923);
                    collection_assoc_expression();
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(3924);
                    function_call();
                }
                break;
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Multiset_expressionContext extends ParserRuleContext {
        public List<Multiset_partContext> multiset_part() {
            return getRuleContexts(Multiset_partContext.class);
        }
        public Multiset_partContext multiset_part(int i) {
            return getRuleContext(Multiset_partContext.class,i);
        }
        public List<TerminalNode> MULTISET() { return getTokens(PlSqlParser.MULTISET); }
        public TerminalNode MULTISET(int i) {
            return getToken(PlSqlParser.MULTISET, i);
        }
        public List<TerminalNode> EXCEPT() { return getTokens(PlSqlParser.EXCEPT); }
        public TerminalNode EXCEPT(int i) {
            return getToken(PlSqlParser.EXCEPT, i);
        }
        public List<TerminalNode> INTERSECT() { return getTokens(PlSqlParser.INTERSECT); }
        public TerminalNode INTERSECT(int i) {
            return getToken(PlSqlParser.INTERSECT, i);
        }
        public List<TerminalNode> UNION() { return getTokens(PlSqlParser.UNION); }
        public TerminalNode UNION(int i) {
            return getToken(PlSqlParser.UNION, i);
        }
        public List<TerminalNode> ALL() { return getTokens(PlSqlParser.ALL); }
        public TerminalNode ALL(int i) {
            return getToken(PlSqlParser.ALL, i);
        }
        public List<TerminalNode> DISTINCT() { return getTokens(PlSqlParser.DISTINCT); }
        public TerminalNode DISTINCT(int i) {
            return getToken(PlSqlParser.DISTINCT, i);
        }
        public Relational_expressionContext relational_expression() {
            return getRuleContext(Relational_expressionContext.class,0);
        }
        public Multiset_typeContext multiset_type() {
            return getRuleContext(Multiset_typeContext.class,0);
        }
        public ConcatenationContext concatenation() {
            return getRuleContext(ConcatenationContext.class,0);
        }
        public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
        public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
        public Multiset_expressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_multiset_expression; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMultiset_expression(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMultiset_expression(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMultiset_expression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Multiset_expressionContext multiset_expression() throws RecognitionException {
        Multiset_expressionContext _localctx = new Multiset_expressionContext(_ctx, getState());
        enterRule(_localctx, 524, RULE_multiset_expression);
        int _la;
        try {
            int _alt;
            setState(3950);
            _errHandler.sync(this);
            switch ( getInterpreter().adaptivePredict(_input,477,_ctx) ) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3927);
                    multiset_part();
                    setState(3934);
                    _errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                            {
                                {
                                    setState(3928);
                                    match(MULTISET);
                                    setState(3929);
                                    _la = _input.LA(1);
                                    if ( !(_la==EXCEPT || _la==INTERSECT || _la==UNION) ) {
                                        _errHandler.recoverInline(this);
                                    } else {
                                        consume();
                                    }
                                    setState(3931);
                                    _errHandler.sync(this);
                                    switch ( getInterpreter().adaptivePredict(_input,472,_ctx) ) {
                                        case 1:
                                        {
                                            setState(3930);
                                            _la = _input.LA(1);
                                            if ( !(_la==ALL || _la==DISTINCT) ) {
                                                _errHandler.recoverInline(this);
                                            } else {
                                                consume();
                                            }
                                        }
                                        break;
                                    }
                                    setState(3933);
                                    multiset_part();
                                }
                            }
                            break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        setState(3936);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input,473,_ctx);
                    } while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    {
                        setState(3938);
                        relational_expression();
                        setState(3948);
                        _errHandler.sync(this);
                        switch ( getInterpreter().adaptivePredict(_input,476,_ctx) ) {
                            case 1:
                            {
                                setState(3940);
                                _la = _input.LA(1);
                                if (_la==NOT) {
                                    {
                                        setState(3939);
                                        match(NOT);
                                    }
                                }

                                setState(3942);
                                multiset_type();
                                setState(3944);
                                _errHandler.sync(this);
                                switch ( getInterpreter().adaptivePredict(_input,475,_ctx) ) {
                                    case 1:
                                    {
                                        setState(3943);
                                        match(OF);
                                    }
                                    break;
                                }
                                setState(3946);
                                concatenation();
                            }
                            break;
                        }
                    }
                }
                break;
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Multiset_typeContext extends ParserRuleContext {
        public TerminalNode MEMBER() { return getToken(PlSqlParser.MEMBER, 0); }
        public TerminalNode SUBMULTISET() { return getToken(PlSqlParser.SUBMULTISET, 0); }
        public Multiset_typeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_multiset_type; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMultiset_type(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMultiset_type(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMultiset_type(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Multiset_typeContext multiset_type() throws RecognitionException {
        Multiset_typeContext _localctx = new Multiset_typeContext(_ctx, getState());
        enterRule(_localctx, 526, RULE_multiset_type);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3952);
                _la = _input.LA(1);
                if ( !(_la==MEMBER || _la==SUBMULTISET) ) {
                    _errHandler.recoverInline(this);
                } else {
                    consume();
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Relational_expressionContext extends ParserRuleContext {
        public List<Compound_expressionContext> compound_expression() {
            return getRuleContexts(Compound_expressionContext.class);
        }
        public Compound_expressionContext compound_expression(int i) {
            return getRuleContext(Compound_expressionContext.class,i);
        }
        public List<Not_equal_opContext> not_equal_op() {
            return getRuleContexts(Not_equal_opContext.class);
        }
        public Not_equal_opContext not_equal_op(int i) {
            return getRuleContext(Not_equal_opContext.class,i);
        }
        public List<Less_than_or_equals_opContext> less_than_or_equals_op() {
            return getRuleContexts(Less_than_or_equals_opContext.class);
        }
        public Less_than_or_equals_opContext less_than_or_equals_op(int i) {
            return getRuleContext(Less_than_or_equals_opContext.class,i);
        }
        public List<Greater_than_or_equals_opContext> greater_than_or_equals_op() {
            return getRuleContexts(Greater_than_or_equals_opContext.class);
        }
        public Greater_than_or_equals_opContext greater_than_or_equals_op(int i) {
            return getRuleContext(Greater_than_or_equals_opContext.class,i);
        }
        public Relational_expressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_relational_expression; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterRelational_expression(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitRelational_expression(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitRelational_expression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Relational_expressionContext relational_expression() throws RecognitionException {
        Relational_expressionContext _localctx = new Relational_expressionContext(_ctx, getState());
        enterRule(_localctx, 528, RULE_relational_expression);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(3954);
                compound_expression();
                setState(3966);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input,479,_ctx);
                while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
                    if ( _alt==1 ) {
                        {
                            {
                                setState(3961);
                                _errHandler.sync(this);
                                switch ( getInterpreter().adaptivePredict(_input,478,_ctx) ) {
                                    case 1:
                                    {
                                        setState(3955);
                                        match(EQUALS_OP);
                                    }
                                    break;
                                    case 2:
                                    {
                                        setState(3956);
                                        not_equal_op();
                                    }
                                    break;
                                    case 3:
                                    {
                                        setState(3957);
                                        match(LESS_THAN_OP);
                                    }
                                    break;
                                    case 4:
                                    {
                                        setState(3958);
                                        match(GREATER_THAN_OP);
                                    }
                                    break;
                                    case 5:
                                    {
                                        setState(3959);
                                        less_than_or_equals_op();
                                    }
                                    break;
                                    case 6:
                                    {
                                        setState(3960);
                                        greater_than_or_equals_op();
                                    }
                                    break;
                                }
                                setState(3963);
                                compound_expression();
                            }
                        }
                    }
                    setState(3968);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input,479,_ctx);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Compound_expressionContext extends ParserRuleContext {
        public List<ConcatenationContext> concatenation() {
            return getRuleContexts(ConcatenationContext.class);
        }
        public ConcatenationContext concatenation(int i) {
            return getRuleContext(ConcatenationContext.class,i);
        }
        public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
        public In_elementsContext in_elements() {
            return getRuleContext(In_elementsContext.class,0);
        }
        public TerminalNode BETWEEN() { return getToken(PlSqlParser.BETWEEN, 0); }
        public Between_elementsContext between_elements() {
            return getRuleContext(Between_elementsContext.class,0);
        }
        public Like_typeContext like_type() {
            return getRuleContext(Like_typeContext.class,0);
        }
        public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
        public Like_escape_partContext like_escape_part() {
            return getRuleContext(Like_escape_partContext.class,0);
        }
        public Function_callContext function_call() {
            return getRuleContext(Function_callContext.class,0);
        }
        public Compound_expressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_compound_expression; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCompound_expression(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCompound_expression(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCompound_expression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Compound_expressionContext compound_expression() throws RecognitionException {
        Compound_expressionContext _localctx = new Compound_expressionContext(_ctx, getState());
        enterRule(_localctx, 530, RULE_compound_expression);
        int _la;
        try {
            setState(3987);
            _errHandler.sync(this);
            switch ( getInterpreter().adaptivePredict(_input,484,_ctx) ) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3969);
                    concatenation();
                    setState(3984);
                    _errHandler.sync(this);
                    switch ( getInterpreter().adaptivePredict(_input,483,_ctx) ) {
                        case 1:
                        {
                            setState(3971);
                            _la = _input.LA(1);
                            if (_la==NOT) {
                                {
                                    setState(3970);
                                    match(NOT);
                                }
                            }

                            setState(3982);
                            switch (_input.LA(1)) {
                                case IN:
                                {
                                    setState(3973);
                                    match(IN);
                                    setState(3974);
                                    in_elements();
                                }
                                break;
                                case BETWEEN:
                                {
                                    setState(3975);
                                    match(BETWEEN);
                                    setState(3976);
                                    between_elements();
                                }
                                break;
                                case LIKE:
                                case LIKE2:
                                case LIKE4:
                                case LIKEC:
                                {
                                    setState(3977);
                                    like_type();
                                    setState(3978);
                                    concatenation();
                                    setState(3980);
                                    _errHandler.sync(this);
                                    switch ( getInterpreter().adaptivePredict(_input,481,_ctx) ) {
                                        case 1:
                                        {
                                            setState(3979);
                                            like_escape_part();
                                        }
                                        break;
                                    }
                                }
                                break;
                                default:
                                    throw new NoViableAltException(this);
                            }
                        }
                        break;
                    }
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3986);
                    function_call();
                }
                break;
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Like_typeContext extends ParserRuleContext {
        public TerminalNode LIKE() { return getToken(PlSqlParser.LIKE, 0); }
        public TerminalNode LIKEC() { return getToken(PlSqlParser.LIKEC, 0); }
        public TerminalNode LIKE2() { return getToken(PlSqlParser.LIKE2, 0); }
        public TerminalNode LIKE4() { return getToken(PlSqlParser.LIKE4, 0); }
        public Like_typeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_like_type; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterLike_type(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitLike_type(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitLike_type(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Like_typeContext like_type() throws RecognitionException {
        Like_typeContext _localctx = new Like_typeContext(_ctx, getState());
        enterRule(_localctx, 532, RULE_like_type);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3989);
                _la = _input.LA(1);
                if ( !(((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (LIKE - 207)) | (1L << (LIKE2 - 207)) | (1L << (LIKE4 - 207)) | (1L << (LIKEC - 207)))) != 0)) ) {
                    _errHandler.recoverInline(this);
                } else {
                    consume();
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Like_escape_partContext extends ParserRuleContext {
        public TerminalNode ESCAPE() { return getToken(PlSqlParser.ESCAPE, 0); }
        public ConcatenationContext concatenation() {
            return getRuleContext(ConcatenationContext.class,0);
        }
        public Like_escape_partContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_like_escape_part; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterLike_escape_part(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitLike_escape_part(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitLike_escape_part(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Like_escape_partContext like_escape_part() throws RecognitionException {
        Like_escape_partContext _localctx = new Like_escape_partContext(_ctx, getState());
        enterRule(_localctx, 534, RULE_like_escape_part);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3991);
                match(ESCAPE);
                setState(3992);
                concatenation();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class In_elementsContext extends ParserRuleContext {
        public SubqueryContext subquery() {
            return getRuleContext(SubqueryContext.class,0);
        }
        public List<Concatenation_wrapperContext> concatenation_wrapper() {
            return getRuleContexts(Concatenation_wrapperContext.class);
        }
        public Concatenation_wrapperContext concatenation_wrapper(int i) {
            return getRuleContext(Concatenation_wrapperContext.class,i);
        }
        public ConstantContext constant() {
            return getRuleContext(ConstantContext.class,0);
        }
        public Bind_variableContext bind_variable() {
            return getRuleContext(Bind_variableContext.class,0);
        }
        public General_elementContext general_element() {
            return getRuleContext(General_elementContext.class,0);
        }
        public In_elementsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_in_elements; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterIn_elements(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitIn_elements(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitIn_elements(this);
            else return visitor.visitChildren(this);
        }
    }

    public final In_elementsContext in_elements() throws RecognitionException {
        In_elementsContext _localctx = new In_elementsContext(_ctx, getState());
        enterRule(_localctx, 536, RULE_in_elements);
        int _la;
        try {
            setState(4012);
            _errHandler.sync(this);
            switch ( getInterpreter().adaptivePredict(_input,486,_ctx) ) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3994);
                    match(LEFT_PAREN);
                    setState(3995);
                    subquery();
                    setState(3996);
                    match(RIGHT_PAREN);
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3998);
                    match(LEFT_PAREN);
                    setState(3999);
                    concatenation_wrapper();
                    setState(4004);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    while (_la==COMMA) {
                        {
                            {
                                setState(4000);
                                match(COMMA);
                                setState(4001);
                                concatenation_wrapper();
                            }
                        }
                        setState(4006);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                    }
                    setState(4007);
                    match(RIGHT_PAREN);
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(4009);
                    constant();
                }
                break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                {
                    setState(4010);
                    bind_variable();
                }
                break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                {
                    setState(4011);
                    general_element();
                }
                break;
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Between_elementsContext extends ParserRuleContext {
        public List<ConcatenationContext> concatenation() {
            return getRuleContexts(ConcatenationContext.class);
        }
        public ConcatenationContext concatenation(int i) {
            return getRuleContext(ConcatenationContext.class,i);
        }
        public TerminalNode AND() { return getToken(PlSqlParser.AND, 0); }
        public Between_elementsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_between_elements; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterBetween_elements(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitBetween_elements(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitBetween_elements(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Between_elementsContext between_elements() throws RecognitionException {
        Between_elementsContext _localctx = new Between_elementsContext(_ctx, getState());
        enterRule(_localctx, 538, RULE_between_elements);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4014);
                concatenation();
                setState(4015);
                match(AND);
                setState(4016);
                concatenation();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class ConcatenationContext extends ParserRuleContext {
        public List<Additive_expressionContext> additive_expression() {
            return getRuleContexts(Additive_expressionContext.class);
        }
        public Additive_expressionContext additive_expression(int i) {
            return getRuleContext(Additive_expressionContext.class,i);
        }
        public List<Concatenation_opContext> concatenation_op() {
            return getRuleContexts(Concatenation_opContext.class);
        }
        public Concatenation_opContext concatenation_op(int i) {
            return getRuleContext(Concatenation_opContext.class,i);
        }
        public ConcatenationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_concatenation; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterConcatenation(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitConcatenation(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitConcatenation(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ConcatenationContext concatenation() throws RecognitionException {
        ConcatenationContext _localctx = new ConcatenationContext(_ctx, getState());
        enterRule(_localctx, 540, RULE_concatenation);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(4018);
                additive_expression();
                setState(4024);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input,487,_ctx);
                while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
                    if ( _alt==1 ) {
                        {
                            {
                                setState(4019);
                                concatenation_op();
                                setState(4020);
                                additive_expression();
                            }
                        }
                    }
                    setState(4026);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input,487,_ctx);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Concatenation_wrapperContext extends ParserRuleContext {
        public ConcatenationContext concatenation() {
            return getRuleContext(ConcatenationContext.class,0);
        }
        public Concatenation_wrapperContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_concatenation_wrapper; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterConcatenation_wrapper(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitConcatenation_wrapper(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitConcatenation_wrapper(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Concatenation_wrapperContext concatenation_wrapper() throws RecognitionException {
        Concatenation_wrapperContext _localctx = new Concatenation_wrapperContext(_ctx, getState());
        enterRule(_localctx, 542, RULE_concatenation_wrapper);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4027);
                concatenation();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Additive_expressionContext extends ParserRuleContext {
        public List<Multiply_expressionContext> multiply_expression() {
            return getRuleContexts(Multiply_expressionContext.class);
        }
        public Multiply_expressionContext multiply_expression(int i) {
            return getRuleContext(Multiply_expressionContext.class,i);
        }
        public Additive_expressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_additive_expression; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAdditive_expression(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAdditive_expression(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAdditive_expression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Additive_expressionContext additive_expression() throws RecognitionException {
        Additive_expressionContext _localctx = new Additive_expressionContext(_ctx, getState());
        enterRule(_localctx, 544, RULE_additive_expression);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(4029);
                multiply_expression();
                setState(4034);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input,488,_ctx);
                while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
                    if ( _alt==1 ) {
                        {
                            {
                                setState(4030);
                                _la = _input.LA(1);
                                if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
                                    _errHandler.recoverInline(this);
                                } else {
                                    consume();
                                }
                                setState(4031);
                                multiply_expression();
                            }
                        }
                    }
                    setState(4036);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input,488,_ctx);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Multiply_expressionContext extends ParserRuleContext {
        public List<Datetime_expressionContext> datetime_expression() {
            return getRuleContexts(Datetime_expressionContext.class);
        }
        public Datetime_expressionContext datetime_expression(int i) {
            return getRuleContext(Datetime_expressionContext.class,i);
        }
        public List<TerminalNode> MOD() { return getTokens(PlSqlParser.MOD); }
        public TerminalNode MOD(int i) {
            return getToken(PlSqlParser.MOD, i);
        }
        public Multiply_expressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_multiply_expression; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMultiply_expression(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMultiply_expression(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMultiply_expression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Multiply_expressionContext multiply_expression() throws RecognitionException {
        Multiply_expressionContext _localctx = new Multiply_expressionContext(_ctx, getState());
        enterRule(_localctx, 546, RULE_multiply_expression);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(4037);
                datetime_expression();
                setState(4042);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input,489,_ctx);
                while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
                    if ( _alt==1 ) {
                        {
                            {
                                setState(4038);
                                _la = _input.LA(1);
                                if ( !(_la==MOD || _la==ASTERISK || _la==SOLIDUS) ) {
                                    _errHandler.recoverInline(this);
                                } else {
                                    consume();
                                }
                                setState(4039);
                                datetime_expression();
                            }
                        }
                    }
                    setState(4044);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input,489,_ctx);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Datetime_expressionContext extends ParserRuleContext {
        public Model_expressionContext model_expression() {
            return getRuleContext(Model_expressionContext.class,0);
        }
        public TerminalNode AT() { return getToken(PlSqlParser.AT, 0); }
        public Interval_expressionContext interval_expression() {
            return getRuleContext(Interval_expressionContext.class,0);
        }
        public TerminalNode LOCAL() { return getToken(PlSqlParser.LOCAL, 0); }
        public TerminalNode TIME() { return getToken(PlSqlParser.TIME, 0); }
        public TerminalNode ZONE() { return getToken(PlSqlParser.ZONE, 0); }
        public Concatenation_wrapperContext concatenation_wrapper() {
            return getRuleContext(Concatenation_wrapperContext.class,0);
        }
        public Datetime_expressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_datetime_expression; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDatetime_expression(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDatetime_expression(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDatetime_expression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Datetime_expressionContext datetime_expression() throws RecognitionException {
        Datetime_expressionContext _localctx = new Datetime_expressionContext(_ctx, getState());
        enterRule(_localctx, 548, RULE_datetime_expression);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4045);
                model_expression();
                setState(4054);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,491,_ctx) ) {
                    case 1:
                    {
                        setState(4046);
                        match(AT);
                        setState(4051);
                        switch (_input.LA(1)) {
                            case LOCAL:
                            {
                                setState(4047);
                                match(LOCAL);
                            }
                            break;
                            case TIME:
                            {
                                setState(4048);
                                match(TIME);
                                setState(4049);
                                match(ZONE);
                                setState(4050);
                                concatenation_wrapper();
                            }
                            break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    break;
                    case 2:
                    {
                        setState(4053);
                        interval_expression();
                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Interval_expressionContext extends ParserRuleContext {
        public TerminalNode DAY() { return getToken(PlSqlParser.DAY, 0); }
        public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
        public TerminalNode SECOND() { return getToken(PlSqlParser.SECOND, 0); }
        public List<Concatenation_wrapperContext> concatenation_wrapper() {
            return getRuleContexts(Concatenation_wrapperContext.class);
        }
        public Concatenation_wrapperContext concatenation_wrapper(int i) {
            return getRuleContext(Concatenation_wrapperContext.class,i);
        }
        public TerminalNode YEAR() { return getToken(PlSqlParser.YEAR, 0); }
        public TerminalNode MONTH() { return getToken(PlSqlParser.MONTH, 0); }
        public Interval_expressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_interval_expression; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterInterval_expression(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitInterval_expression(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitInterval_expression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Interval_expressionContext interval_expression() throws RecognitionException {
        Interval_expressionContext _localctx = new Interval_expressionContext(_ctx, getState());
        enterRule(_localctx, 550, RULE_interval_expression);
        int _la;
        try {
            setState(4080);
            switch (_input.LA(1)) {
                case DAY:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(4056);
                    match(DAY);
                    setState(4061);
                    _la = _input.LA(1);
                    if (_la==LEFT_PAREN) {
                        {
                            setState(4057);
                            match(LEFT_PAREN);
                            setState(4058);
                            concatenation_wrapper();
                            setState(4059);
                            match(RIGHT_PAREN);
                        }
                    }

                    setState(4063);
                    match(TO);
                    setState(4064);
                    match(SECOND);
                    setState(4069);
                    _errHandler.sync(this);
                    switch ( getInterpreter().adaptivePredict(_input,493,_ctx) ) {
                        case 1:
                        {
                            setState(4065);
                            match(LEFT_PAREN);
                            setState(4066);
                            concatenation_wrapper();
                            setState(4067);
                            match(RIGHT_PAREN);
                        }
                        break;
                    }
                }
                break;
                case YEAR:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(4071);
                    match(YEAR);
                    setState(4076);
                    _la = _input.LA(1);
                    if (_la==LEFT_PAREN) {
                        {
                            setState(4072);
                            match(LEFT_PAREN);
                            setState(4073);
                            concatenation_wrapper();
                            setState(4074);
                            match(RIGHT_PAREN);
                        }
                    }

                    setState(4078);
                    match(TO);
                    setState(4079);
                    match(MONTH);
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Model_expressionContext extends ParserRuleContext {
        public Unary_expressionContext unary_expression() {
            return getRuleContext(Unary_expressionContext.class,0);
        }
        public Model_expression_elementContext model_expression_element() {
            return getRuleContext(Model_expression_elementContext.class,0);
        }
        public Model_expressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_model_expression; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterModel_expression(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitModel_expression(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitModel_expression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Model_expressionContext model_expression() throws RecognitionException {
        Model_expressionContext _localctx = new Model_expressionContext(_ctx, getState());
        enterRule(_localctx, 552, RULE_model_expression);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4082);
                unary_expression();
                setState(4087);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,496,_ctx) ) {
                    case 1:
                    {
                        setState(4083);
                        match(LEFT_BRACKET);
                        setState(4084);
                        model_expression_element();
                        setState(4085);
                        match(RIGHT_BRACKET);
                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Model_expression_elementContext extends ParserRuleContext {
        public List<TerminalNode> ANY() { return getTokens(PlSqlParser.ANY); }
        public TerminalNode ANY(int i) {
            return getToken(PlSqlParser.ANY, i);
        }
        public List<Condition_wrapperContext> condition_wrapper() {
            return getRuleContexts(Condition_wrapperContext.class);
        }
        public Condition_wrapperContext condition_wrapper(int i) {
            return getRuleContext(Condition_wrapperContext.class,i);
        }
        public List<Single_column_for_loopContext> single_column_for_loop() {
            return getRuleContexts(Single_column_for_loopContext.class);
        }
        public Single_column_for_loopContext single_column_for_loop(int i) {
            return getRuleContext(Single_column_for_loopContext.class,i);
        }
        public Multi_column_for_loopContext multi_column_for_loop() {
            return getRuleContext(Multi_column_for_loopContext.class,0);
        }
        public Model_expression_elementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_model_expression_element; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterModel_expression_element(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitModel_expression_element(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitModel_expression_element(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Model_expression_elementContext model_expression_element() throws RecognitionException {
        Model_expression_elementContext _localctx = new Model_expression_elementContext(_ctx, getState());
        enterRule(_localctx, 554, RULE_model_expression_element);
        int _la;
        try {
            setState(4112);
            _errHandler.sync(this);
            switch ( getInterpreter().adaptivePredict(_input,501,_ctx) ) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(4091);
                    _errHandler.sync(this);
                    switch ( getInterpreter().adaptivePredict(_input,497,_ctx) ) {
                        case 1:
                        {
                            setState(4089);
                            match(ANY);
                        }
                        break;
                        case 2:
                        {
                            setState(4090);
                            condition_wrapper();
                        }
                        break;
                    }
                    setState(4100);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    while (_la==COMMA) {
                        {
                            {
                                setState(4093);
                                match(COMMA);
                                setState(4096);
                                _errHandler.sync(this);
                                switch ( getInterpreter().adaptivePredict(_input,498,_ctx) ) {
                                    case 1:
                                    {
                                        setState(4094);
                                        match(ANY);
                                    }
                                    break;
                                    case 2:
                                    {
                                        setState(4095);
                                        condition_wrapper();
                                    }
                                    break;
                                }
                            }
                        }
                        setState(4102);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                    }
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(4103);
                    single_column_for_loop();
                    setState(4108);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    while (_la==COMMA) {
                        {
                            {
                                setState(4104);
                                match(COMMA);
                                setState(4105);
                                single_column_for_loop();
                            }
                        }
                        setState(4110);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                    }
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(4111);
                    multi_column_for_loop();
                }
                break;
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Single_column_for_loopContext extends ParserRuleContext {
        public ExpressionContext ex1;
        public ExpressionContext ex2;
        public ExpressionContext ex3;
        public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
        public Column_nameContext column_name() {
            return getRuleContext(Column_nameContext.class,0);
        }
        public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
        public Expression_listContext expression_list() {
            return getRuleContext(Expression_listContext.class,0);
        }
        public TerminalNode FROM() { return getToken(PlSqlParser.FROM, 0); }
        public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
        public For_increment_decrement_typeContext for_increment_decrement_type() {
            return getRuleContext(For_increment_decrement_typeContext.class,0);
        }
        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }
        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class,i);
        }
        public For_like_partContext for_like_part() {
            return getRuleContext(For_like_partContext.class,0);
        }
        public Single_column_for_loopContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_single_column_for_loop; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSingle_column_for_loop(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSingle_column_for_loop(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSingle_column_for_loop(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Single_column_for_loopContext single_column_for_loop() throws RecognitionException {
        Single_column_for_loopContext _localctx = new Single_column_for_loopContext(_ctx, getState());
        enterRule(_localctx, 556, RULE_single_column_for_loop);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4114);
                match(FOR);
                setState(4115);
                column_name();
                setState(4128);
                switch (_input.LA(1)) {
                    case IN:
                    {
                        setState(4116);
                        match(IN);
                        setState(4117);
                        expression_list();
                    }
                    break;
                    case FROM:
                    case LIKE:
                    {
                        setState(4119);
                        _la = _input.LA(1);
                        if (_la==LIKE) {
                            {
                                setState(4118);
                                for_like_part();
                            }
                        }

                        setState(4121);
                        match(FROM);
                        setState(4122);
                        ((Single_column_for_loopContext)_localctx).ex1 = expression();
                        setState(4123);
                        match(TO);
                        setState(4124);
                        ((Single_column_for_loopContext)_localctx).ex2 = expression();
                        setState(4125);
                        for_increment_decrement_type();
                        setState(4126);
                        ((Single_column_for_loopContext)_localctx).ex3 = expression();
                    }
                    break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class For_like_partContext extends ParserRuleContext {
        public TerminalNode LIKE() { return getToken(PlSqlParser.LIKE, 0); }
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class,0);
        }
        public For_like_partContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_for_like_part; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFor_like_part(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFor_like_part(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFor_like_part(this);
            else return visitor.visitChildren(this);
        }
    }

    public final For_like_partContext for_like_part() throws RecognitionException {
        For_like_partContext _localctx = new For_like_partContext(_ctx, getState());
        enterRule(_localctx, 558, RULE_for_like_part);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4130);
                match(LIKE);
                setState(4131);
                expression();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class For_increment_decrement_typeContext extends ParserRuleContext {
        public TerminalNode INCREMENT() { return getToken(PlSqlParser.INCREMENT, 0); }
        public TerminalNode DECREMENT() { return getToken(PlSqlParser.DECREMENT, 0); }
        public For_increment_decrement_typeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_for_increment_decrement_type; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFor_increment_decrement_type(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFor_increment_decrement_type(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFor_increment_decrement_type(this);
            else return visitor.visitChildren(this);
        }
    }

    public final For_increment_decrement_typeContext for_increment_decrement_type() throws RecognitionException {
        For_increment_decrement_typeContext _localctx = new For_increment_decrement_typeContext(_ctx, getState());
        enterRule(_localctx, 560, RULE_for_increment_decrement_type);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4133);
                _la = _input.LA(1);
                if ( !(_la==DECREMENT || _la==INCREMENT) ) {
                    _errHandler.recoverInline(this);
                } else {
                    consume();
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Multi_column_for_loopContext extends ParserRuleContext {
        public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
        public List<Column_nameContext> column_name() {
            return getRuleContexts(Column_nameContext.class);
        }
        public Column_nameContext column_name(int i) {
            return getRuleContext(Column_nameContext.class,i);
        }
        public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
        public SubqueryContext subquery() {
            return getRuleContext(SubqueryContext.class,0);
        }
        public List<Expression_listContext> expression_list() {
            return getRuleContexts(Expression_listContext.class);
        }
        public Expression_listContext expression_list(int i) {
            return getRuleContext(Expression_listContext.class,i);
        }
        public Multi_column_for_loopContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_multi_column_for_loop; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMulti_column_for_loop(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMulti_column_for_loop(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMulti_column_for_loop(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Multi_column_for_loopContext multi_column_for_loop() throws RecognitionException {
        Multi_column_for_loopContext _localctx = new Multi_column_for_loopContext(_ctx, getState());
        enterRule(_localctx, 562, RULE_multi_column_for_loop);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4135);
                match(FOR);
                setState(4136);
                match(LEFT_PAREN);
                setState(4137);
                column_name();
                setState(4142);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==COMMA) {
                    {
                        {
                            setState(4138);
                            match(COMMA);
                            setState(4139);
                            column_name();
                        }
                    }
                    setState(4144);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(4145);
                match(RIGHT_PAREN);
                setState(4146);
                match(IN);
                setState(4147);
                match(LEFT_PAREN);
                setState(4160);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,506,_ctx) ) {
                    case 1:
                    {
                        setState(4148);
                        subquery();
                    }
                    break;
                    case 2:
                    {
                        setState(4149);
                        match(LEFT_PAREN);
                        setState(4150);
                        expression_list();
                        setState(4155);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la==COMMA) {
                            {
                                {
                                    setState(4151);
                                    match(COMMA);
                                    setState(4152);
                                    expression_list();
                                }
                            }
                            setState(4157);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                        setState(4158);
                        match(RIGHT_PAREN);
                    }
                    break;
                }
                setState(4162);
                match(RIGHT_PAREN);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Unary_expressionContext extends ParserRuleContext {
        public Unary_expressionContext unary_expression() {
            return getRuleContext(Unary_expressionContext.class,0);
        }
        public TerminalNode PRIOR() { return getToken(PlSqlParser.PRIOR, 0); }
        public TerminalNode CONNECT_BY_ROOT() { return getToken(PlSqlParser.CONNECT_BY_ROOT, 0); }
        public TerminalNode NEW() { return getToken(PlSqlParser.NEW, 0); }
        public TerminalNode DISTINCT() { return getToken(PlSqlParser.DISTINCT, 0); }
        public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
        public Case_statementContext case_statement() {
            return getRuleContext(Case_statementContext.class,0);
        }
        public Quantified_expressionContext quantified_expression() {
            return getRuleContext(Quantified_expressionContext.class,0);
        }
        public Standard_functionContext standard_function() {
            return getRuleContext(Standard_functionContext.class,0);
        }
        public AtomContext atom() {
            return getRuleContext(AtomContext.class,0);
        }
        public Unary_expressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_unary_expression; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterUnary_expression(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitUnary_expression(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitUnary_expression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Unary_expressionContext unary_expression() throws RecognitionException {
        Unary_expressionContext _localctx = new Unary_expressionContext(_ctx, getState());
        enterRule(_localctx, 564, RULE_unary_expression);
        try {
            setState(4182);
            _errHandler.sync(this);
            switch ( getInterpreter().adaptivePredict(_input,507,_ctx) ) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(4164);
                    match(MINUS_SIGN);
                    setState(4165);
                    unary_expression();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(4166);
                    match(PLUS_SIGN);
                    setState(4167);
                    unary_expression();
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(4168);
                    match(PRIOR);
                    setState(4169);
                    unary_expression();
                }
                break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                {
                    setState(4170);
                    match(CONNECT_BY_ROOT);
                    setState(4171);
                    unary_expression();
                }
                break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                {
                    setState(4172);
                    match(NEW);
                    setState(4173);
                    unary_expression();
                }
                break;
                case 6:
                    enterOuterAlt(_localctx, 6);
                {
                    setState(4174);
                    match(DISTINCT);
                    setState(4175);
                    unary_expression();
                }
                break;
                case 7:
                    enterOuterAlt(_localctx, 7);
                {
                    setState(4176);
                    match(ALL);
                    setState(4177);
                    unary_expression();
                }
                break;
                case 8:
                    enterOuterAlt(_localctx, 8);
                {
                    setState(4178);
                    case_statement();
                }
                break;
                case 9:
                    enterOuterAlt(_localctx, 9);
                {
                    setState(4179);
                    quantified_expression();
                }
                break;
                case 10:
                    enterOuterAlt(_localctx, 10);
                {
                    setState(4180);
                    standard_function();
                }
                break;
                case 11:
                    enterOuterAlt(_localctx, 11);
                {
                    setState(4181);
                    atom();
                }
                break;
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Case_statementContext extends ParserRuleContext {
        public Searched_case_statementContext searched_case_statement() {
            return getRuleContext(Searched_case_statementContext.class,0);
        }
        public Simple_case_statementContext simple_case_statement() {
            return getRuleContext(Simple_case_statementContext.class,0);
        }
        public Case_statementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_case_statement; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCase_statement(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCase_statement(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCase_statement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Case_statementContext case_statement() throws RecognitionException {
        Case_statementContext _localctx = new Case_statementContext(_ctx, getState());
        enterRule(_localctx, 566, RULE_case_statement);
        try {
            setState(4186);
            _errHandler.sync(this);
            switch ( getInterpreter().adaptivePredict(_input,508,_ctx) ) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(4184);
                    searched_case_statement();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(4185);
                    simple_case_statement();
                }
                break;
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Simple_case_statementContext extends ParserRuleContext {
        public Token ck1;
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class,0);
        }
        public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
        public List<TerminalNode> CASE() { return getTokens(PlSqlParser.CASE); }
        public TerminalNode CASE(int i) {
            return getToken(PlSqlParser.CASE, i);
        }
        public List<Label_nameContext> label_name() {
            return getRuleContexts(Label_nameContext.class);
        }
        public Label_nameContext label_name(int i) {
            return getRuleContext(Label_nameContext.class,i);
        }
        public List<Simple_case_when_partContext> simple_case_when_part() {
            return getRuleContexts(Simple_case_when_partContext.class);
        }
        public Simple_case_when_partContext simple_case_when_part(int i) {
            return getRuleContext(Simple_case_when_partContext.class,i);
        }
        public Case_else_partContext case_else_part() {
            return getRuleContext(Case_else_partContext.class,0);
        }
        public Simple_case_statementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_simple_case_statement; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSimple_case_statement(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSimple_case_statement(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSimple_case_statement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Simple_case_statementContext simple_case_statement() throws RecognitionException {
        Simple_case_statementContext _localctx = new Simple_case_statementContext(_ctx, getState());
        enterRule(_localctx, 568, RULE_simple_case_statement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4189);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,509,_ctx) ) {
                    case 1:
                    {
                        setState(4188);
                        label_name();
                    }
                    break;
                }
                setState(4191);
                ((Simple_case_statementContext)_localctx).ck1 = match(CASE);
                setState(4192);
                expression();
                setState(4194);
                _errHandler.sync(this);
                _la = _input.LA(1);
                do {
                    {
                        {
                            setState(4193);
                            simple_case_when_part();
                        }
                    }
                    setState(4196);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                } while ( _la==WHEN );
                setState(4199);
                _la = _input.LA(1);
                if (_la==ELSE) {
                    {
                        setState(4198);
                        case_else_part();
                    }
                }

                setState(4201);
                match(END);
                setState(4203);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,512,_ctx) ) {
                    case 1:
                    {
                        setState(4202);
                        match(CASE);
                    }
                    break;
                }
                setState(4206);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,513,_ctx) ) {
                    case 1:
                    {
                        setState(4205);
                        label_name();
                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Simple_case_when_partContext extends ParserRuleContext {
        public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
        public List<Expression_wrapperContext> expression_wrapper() {
            return getRuleContexts(Expression_wrapperContext.class);
        }
        public Expression_wrapperContext expression_wrapper(int i) {
            return getRuleContext(Expression_wrapperContext.class,i);
        }
        public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
        public Seq_of_statementsContext seq_of_statements() {
            return getRuleContext(Seq_of_statementsContext.class,0);
        }
        public Simple_case_when_partContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_simple_case_when_part; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSimple_case_when_part(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSimple_case_when_part(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSimple_case_when_part(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Simple_case_when_partContext simple_case_when_part() throws RecognitionException {
        Simple_case_when_partContext _localctx = new Simple_case_when_partContext(_ctx, getState());
        enterRule(_localctx, 570, RULE_simple_case_when_part);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4208);
                match(WHEN);
                setState(4209);
                expression_wrapper();
                setState(4210);
                match(THEN);
                setState(4213);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,514,_ctx) ) {
                    case 1:
                    {
                        setState(4211);
                        seq_of_statements();
                    }
                    break;
                    case 2:
                    {
                        setState(4212);
                        expression_wrapper();
                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Searched_case_statementContext extends ParserRuleContext {
        public Token ck1;
        public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
        public List<TerminalNode> CASE() { return getTokens(PlSqlParser.CASE); }
        public TerminalNode CASE(int i) {
            return getToken(PlSqlParser.CASE, i);
        }
        public List<Label_nameContext> label_name() {
            return getRuleContexts(Label_nameContext.class);
        }
        public Label_nameContext label_name(int i) {
            return getRuleContext(Label_nameContext.class,i);
        }
        public List<Searched_case_when_partContext> searched_case_when_part() {
            return getRuleContexts(Searched_case_when_partContext.class);
        }
        public Searched_case_when_partContext searched_case_when_part(int i) {
            return getRuleContext(Searched_case_when_partContext.class,i);
        }
        public Case_else_partContext case_else_part() {
            return getRuleContext(Case_else_partContext.class,0);
        }
        public Searched_case_statementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_searched_case_statement; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSearched_case_statement(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSearched_case_statement(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSearched_case_statement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Searched_case_statementContext searched_case_statement() throws RecognitionException {
        Searched_case_statementContext _localctx = new Searched_case_statementContext(_ctx, getState());
        enterRule(_localctx, 572, RULE_searched_case_statement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4216);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,515,_ctx) ) {
                    case 1:
                    {
                        setState(4215);
                        label_name();
                    }
                    break;
                }
                setState(4218);
                ((Searched_case_statementContext)_localctx).ck1 = match(CASE);
                setState(4220);
                _errHandler.sync(this);
                _la = _input.LA(1);
                do {
                    {
                        {
                            setState(4219);
                            searched_case_when_part();
                        }
                    }
                    setState(4222);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                } while ( _la==WHEN );
                setState(4225);
                _la = _input.LA(1);
                if (_la==ELSE) {
                    {
                        setState(4224);
                        case_else_part();
                    }
                }

                setState(4227);
                match(END);
                setState(4229);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,518,_ctx) ) {
                    case 1:
                    {
                        setState(4228);
                        match(CASE);
                    }
                    break;
                }
                setState(4232);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,519,_ctx) ) {
                    case 1:
                    {
                        setState(4231);
                        label_name();
                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Searched_case_when_partContext extends ParserRuleContext {
        public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
        public Condition_wrapperContext condition_wrapper() {
            return getRuleContext(Condition_wrapperContext.class,0);
        }
        public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
        public Seq_of_statementsContext seq_of_statements() {
            return getRuleContext(Seq_of_statementsContext.class,0);
        }
        public Expression_wrapperContext expression_wrapper() {
            return getRuleContext(Expression_wrapperContext.class,0);
        }
        public Searched_case_when_partContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_searched_case_when_part; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSearched_case_when_part(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSearched_case_when_part(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSearched_case_when_part(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Searched_case_when_partContext searched_case_when_part() throws RecognitionException {
        Searched_case_when_partContext _localctx = new Searched_case_when_partContext(_ctx, getState());
        enterRule(_localctx, 574, RULE_searched_case_when_part);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4234);
                match(WHEN);
                setState(4235);
                condition_wrapper();
                setState(4236);
                match(THEN);
                setState(4239);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,520,_ctx) ) {
                    case 1:
                    {
                        setState(4237);
                        seq_of_statements();
                    }
                    break;
                    case 2:
                    {
                        setState(4238);
                        expression_wrapper();
                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Case_else_partContext extends ParserRuleContext {
        public TerminalNode ELSE() { return getToken(PlSqlParser.ELSE, 0); }
        public Seq_of_statementsContext seq_of_statements() {
            return getRuleContext(Seq_of_statementsContext.class,0);
        }
        public Expression_wrapperContext expression_wrapper() {
            return getRuleContext(Expression_wrapperContext.class,0);
        }
        public Case_else_partContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_case_else_part; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCase_else_part(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCase_else_part(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCase_else_part(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Case_else_partContext case_else_part() throws RecognitionException {
        Case_else_partContext _localctx = new Case_else_partContext(_ctx, getState());
        enterRule(_localctx, 576, RULE_case_else_part);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4241);
                match(ELSE);
                setState(4244);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,521,_ctx) ) {
                    case 1:
                    {
                        setState(4242);
                        seq_of_statements();
                    }
                    break;
                    case 2:
                    {
                        setState(4243);
                        expression_wrapper();
                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class AtomContext extends ParserRuleContext {
        public Table_elementContext table_element() {
            return getRuleContext(Table_elementContext.class,0);
        }
        public Outer_join_signContext outer_join_sign() {
            return getRuleContext(Outer_join_signContext.class,0);
        }
        public Bind_variableContext bind_variable() {
            return getRuleContext(Bind_variableContext.class,0);
        }
        public ConstantContext constant() {
            return getRuleContext(ConstantContext.class,0);
        }
        public General_elementContext general_element() {
            return getRuleContext(General_elementContext.class,0);
        }
        public SubqueryContext subquery() {
            return getRuleContext(SubqueryContext.class,0);
        }
        public Expression_or_vectorContext expression_or_vector() {
            return getRuleContext(Expression_or_vectorContext.class,0);
        }
        public List<Subquery_operation_partContext> subquery_operation_part() {
            return getRuleContexts(Subquery_operation_partContext.class);
        }
        public Subquery_operation_partContext subquery_operation_part(int i) {
            return getRuleContext(Subquery_operation_partContext.class,i);
        }
        public Collection_type_expressionContext collection_type_expression() {
            return getRuleContext(Collection_type_expressionContext.class,0);
        }
        public AtomContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_atom; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAtom(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAtom(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAtom(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AtomContext atom() throws RecognitionException {
        AtomContext _localctx = new AtomContext(_ctx, getState());
        enterRule(_localctx, 578, RULE_atom);
        try {
            int _alt;
            setState(4267);
            _errHandler.sync(this);
            switch ( getInterpreter().adaptivePredict(_input,524,_ctx) ) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(4246);
                    table_element();
                    setState(4247);
                    outer_join_sign();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(4249);
                    bind_variable();
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(4250);
                    constant();
                }
                break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                {
                    setState(4251);
                    general_element();
                }
                break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                {
                    setState(4252);
                    match(LEFT_PAREN);
                    setState(4264);
                    _errHandler.sync(this);
                    switch ( getInterpreter().adaptivePredict(_input,523,_ctx) ) {
                        case 1:
                        {
                            setState(4253);
                            subquery();
                            setState(4254);
                            match(RIGHT_PAREN);
                            setState(4258);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input,522,_ctx);
                            while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
                                if ( _alt==1 ) {
                                    {
                                        {
                                            setState(4255);
                                            subquery_operation_part();
                                        }
                                    }
                                }
                                setState(4260);
                                _errHandler.sync(this);
                                _alt = getInterpreter().adaptivePredict(_input,522,_ctx);
                            }
                        }
                        break;
                        case 2:
                        {
                            setState(4261);
                            expression_or_vector();
                            setState(4262);
                            match(RIGHT_PAREN);
                        }
                        break;
                    }
                }
                break;
                case 6:
                    enterOuterAlt(_localctx, 6);
                {
                    setState(4266);
                    collection_type_expression();
                }
                break;
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Expression_or_vectorContext extends ParserRuleContext {
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class,0);
        }
        public Vector_exprContext vector_expr() {
            return getRuleContext(Vector_exprContext.class,0);
        }
        public Expression_or_vectorContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_expression_or_vector; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterExpression_or_vector(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitExpression_or_vector(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitExpression_or_vector(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Expression_or_vectorContext expression_or_vector() throws RecognitionException {
        Expression_or_vectorContext _localctx = new Expression_or_vectorContext(_ctx, getState());
        enterRule(_localctx, 580, RULE_expression_or_vector);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4269);
                expression();
                setState(4271);
                _la = _input.LA(1);
                if (_la==COMMA) {
                    {
                        setState(4270);
                        vector_expr();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Vector_exprContext extends ParserRuleContext {
        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }
        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class,i);
        }
        public Vector_exprContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_vector_expr; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterVector_expr(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitVector_expr(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitVector_expr(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Vector_exprContext vector_expr() throws RecognitionException {
        Vector_exprContext _localctx = new Vector_exprContext(_ctx, getState());
        enterRule(_localctx, 582, RULE_vector_expr);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4273);
                match(COMMA);
                setState(4274);
                expression();
                setState(4279);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==COMMA) {
                    {
                        {
                            setState(4275);
                            match(COMMA);
                            setState(4276);
                            expression();
                        }
                    }
                    setState(4281);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Quantified_expressionContext extends ParserRuleContext {
        public TerminalNode SOME() { return getToken(PlSqlParser.SOME, 0); }
        public TerminalNode EXISTS() { return getToken(PlSqlParser.EXISTS, 0); }
        public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
        public TerminalNode ANY() { return getToken(PlSqlParser.ANY, 0); }
        public SubqueryContext subquery() {
            return getRuleContext(SubqueryContext.class,0);
        }
        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }
        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class,i);
        }
        public Quantified_expressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_quantified_expression; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterQuantified_expression(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitQuantified_expression(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitQuantified_expression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Quantified_expressionContext quantified_expression() throws RecognitionException {
        Quantified_expressionContext _localctx = new Quantified_expressionContext(_ctx, getState());
        enterRule(_localctx, 584, RULE_quantified_expression);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4282);
                _la = _input.LA(1);
                if ( !(_la==ALL || _la==ANY || _la==EXISTS || _la==SOME) ) {
                    _errHandler.recoverInline(this);
                } else {
                    consume();
                }
                setState(4298);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,528,_ctx) ) {
                    case 1:
                    {
                        setState(4283);
                        match(LEFT_PAREN);
                        setState(4284);
                        subquery();
                        setState(4285);
                        match(RIGHT_PAREN);
                    }
                    break;
                    case 2:
                    {
                        setState(4287);
                        match(LEFT_PAREN);
                        setState(4288);
                        expression();
                        setState(4293);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la==COMMA) {
                            {
                                {
                                    setState(4289);
                                    match(COMMA);
                                    setState(4290);
                                    expression();
                                }
                            }
                            setState(4295);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                        setState(4296);
                        match(RIGHT_PAREN);
                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Plsql_type_conversionContext extends ParserRuleContext {
        public TerminalNode TO_CHAR() { return getToken(PlSqlParser.TO_CHAR, 0); }
        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }
        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class,i);
        }
        public TerminalNode TO_NUMBER() { return getToken(PlSqlParser.TO_NUMBER, 0); }
        public Plsql_type_conversionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_plsql_type_conversion; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPlsql_type_conversion(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPlsql_type_conversion(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPlsql_type_conversion(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Plsql_type_conversionContext plsql_type_conversion() throws RecognitionException {
        Plsql_type_conversionContext _localctx = new Plsql_type_conversionContext(_ctx, getState());
        enterRule(_localctx, 586, RULE_plsql_type_conversion);
        int _la;
        try {
            setState(4324);
            switch (_input.LA(1)) {
                case TO_CHAR:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(4300);
                    match(TO_CHAR);
                    setState(4301);
                    match(LEFT_PAREN);
                    setState(4302);
                    expression();
                    setState(4307);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    while (_la==COMMA) {
                        {
                            {
                                setState(4303);
                                match(COMMA);
                                setState(4304);
                                expression();
                            }
                        }
                        setState(4309);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                    }
                    setState(4310);
                    match(RIGHT_PAREN);
                }
                break;
                case TO_NUMBER:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(4312);
                    match(TO_NUMBER);
                    setState(4313);
                    match(LEFT_PAREN);
                    setState(4314);
                    expression();
                    setState(4319);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    while (_la==COMMA) {
                        {
                            {
                                setState(4315);
                                match(COMMA);
                                setState(4316);
                                expression();
                            }
                        }
                        setState(4321);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                    }
                    setState(4322);
                    match(RIGHT_PAREN);
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Sql_type_conversionContext extends ParserRuleContext {
        public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
        public Type_specContext type_spec() {
            return getRuleContext(Type_specContext.class,0);
        }
        public TerminalNode CAST() { return getToken(PlSqlParser.CAST, 0); }
        public TerminalNode XMLCAST() { return getToken(PlSqlParser.XMLCAST, 0); }
        public TerminalNode MULTISET() { return getToken(PlSqlParser.MULTISET, 0); }
        public SubqueryContext subquery() {
            return getRuleContext(SubqueryContext.class,0);
        }
        public Concatenation_wrapperContext concatenation_wrapper() {
            return getRuleContext(Concatenation_wrapperContext.class,0);
        }
        public Plsql_type_conversionContext plsql_type_conversion() {
            return getRuleContext(Plsql_type_conversionContext.class,0);
        }
        public Sql_type_conversionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_sql_type_conversion; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSql_type_conversion(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSql_type_conversion(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSql_type_conversion(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Sql_type_conversionContext sql_type_conversion() throws RecognitionException {
        Sql_type_conversionContext _localctx = new Sql_type_conversionContext(_ctx, getState());
        enterRule(_localctx, 588, RULE_sql_type_conversion);
        int _la;
        try {
            setState(4341);
            switch (_input.LA(1)) {
                case CAST:
                case XMLCAST:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(4326);
                    _la = _input.LA(1);
                    if ( !(_la==CAST || _la==XMLCAST) ) {
                        _errHandler.recoverInline(this);
                    } else {
                        consume();
                    }
                    setState(4327);
                    match(LEFT_PAREN);
                    setState(4334);
                    _errHandler.sync(this);
                    switch ( getInterpreter().adaptivePredict(_input,532,_ctx) ) {
                        case 1:
                        {
                            setState(4328);
                            match(MULTISET);
                            setState(4329);
                            match(LEFT_PAREN);
                            setState(4330);
                            subquery();
                            setState(4331);
                            match(RIGHT_PAREN);
                        }
                        break;
                        case 2:
                        {
                            setState(4333);
                            concatenation_wrapper();
                        }
                        break;
                    }
                    setState(4336);
                    match(AS);
                    setState(4337);
                    type_spec();
                    setState(4338);
                    match(RIGHT_PAREN);
                }
                break;
                case TO_CHAR:
                case TO_NUMBER:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(4340);
                    plsql_type_conversion();
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Xml_table_columnsContext extends ParserRuleContext {
        public TerminalNode COLUMNS() { return getToken(PlSqlParser.COLUMNS, 0); }
        public List<Xml_table_columnContext> xml_table_column() {
            return getRuleContexts(Xml_table_columnContext.class);
        }
        public Xml_table_columnContext xml_table_column(int i) {
            return getRuleContext(Xml_table_columnContext.class,i);
        }
        public Xml_table_columnsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_xml_table_columns; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterXml_table_columns(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitXml_table_columns(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitXml_table_columns(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Xml_table_columnsContext xml_table_columns() throws RecognitionException {
        Xml_table_columnsContext _localctx = new Xml_table_columnsContext(_ctx, getState());
        enterRule(_localctx, 590, RULE_xml_table_columns);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4343);
                match(COLUMNS);
                setState(4344);
                xml_table_column();
                setState(4349);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==COMMA) {
                    {
                        {
                            setState(4345);
                            match(COMMA);
                            setState(4346);
                            xml_table_column();
                        }
                    }
                    setState(4351);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Xml_tableContext extends ParserRuleContext {
        public TerminalNode XMLTABLE() { return getToken(PlSqlParser.XMLTABLE, 0); }
        public Concatenation_wrapperContext concatenation_wrapper() {
            return getRuleContext(Concatenation_wrapperContext.class,0);
        }
        public Xml_namespaces_clauseContext xml_namespaces_clause() {
            return getRuleContext(Xml_namespaces_clauseContext.class,0);
        }
        public Xml_passing_clauseContext xml_passing_clause() {
            return getRuleContext(Xml_passing_clauseContext.class,0);
        }
        public Xml_table_columnsContext xml_table_columns() {
            return getRuleContext(Xml_table_columnsContext.class,0);
        }
        public General_element_partContext general_element_part() {
            return getRuleContext(General_element_partContext.class,0);
        }
        public Xml_tableContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_xml_table; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterXml_table(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitXml_table(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitXml_table(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Xml_tableContext xml_table() throws RecognitionException {
        Xml_tableContext _localctx = new Xml_tableContext(_ctx, getState());
        enterRule(_localctx, 592, RULE_xml_table);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4352);
                match(XMLTABLE);
                setState(4353);
                match(LEFT_PAREN);
                setState(4357);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,535,_ctx) ) {
                    case 1:
                    {
                        setState(4354);
                        xml_namespaces_clause();
                        setState(4355);
                        match(COMMA);
                    }
                    break;
                }
                setState(4359);
                concatenation_wrapper();
                setState(4361);
                _la = _input.LA(1);
                if (_la==PASSING) {
                    {
                        setState(4360);
                        xml_passing_clause();
                    }
                }

                setState(4364);
                _la = _input.LA(1);
                if (_la==COLUMNS) {
                    {
                        setState(4363);
                        xml_table_columns();
                    }
                }

                setState(4366);
                match(RIGHT_PAREN);
                setState(4369);
                _la = _input.LA(1);
                if (_la==PERIOD) {
                    {
                        setState(4367);
                        match(PERIOD);
                        setState(4368);
                        general_element_part();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Standard_functionContext extends ParserRuleContext {
        public Over_clause_keywordContext over_clause_keyword() {
            return getRuleContext(Over_clause_keywordContext.class,0);
        }
        public Function_argument_analyticContext function_argument_analytic() {
            return getRuleContext(Function_argument_analyticContext.class,0);
        }
        public Over_clauseContext over_clause() {
            return getRuleContext(Over_clauseContext.class,0);
        }
        public Regular_idContext regular_id() {
            return getRuleContext(Regular_idContext.class,0);
        }
        public Function_argument_modelingContext function_argument_modeling() {
            return getRuleContext(Function_argument_modelingContext.class,0);
        }
        public Using_clauseContext using_clause() {
            return getRuleContext(Using_clauseContext.class,0);
        }
        public TerminalNode COUNT() { return getToken(PlSqlParser.COUNT, 0); }
        public List<Concatenation_wrapperContext> concatenation_wrapper() {
            return getRuleContexts(Concatenation_wrapperContext.class);
        }
        public Concatenation_wrapperContext concatenation_wrapper(int i) {
            return getRuleContext(Concatenation_wrapperContext.class,i);
        }
        public TerminalNode DISTINCT() { return getToken(PlSqlParser.DISTINCT, 0); }
        public TerminalNode UNIQUE() { return getToken(PlSqlParser.UNIQUE, 0); }
        public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
        public Sql_type_conversionContext sql_type_conversion() {
            return getRuleContext(Sql_type_conversionContext.class,0);
        }
        public TerminalNode CHR() { return getToken(PlSqlParser.CHR, 0); }
        public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
        public TerminalNode NCHAR_CS() { return getToken(PlSqlParser.NCHAR_CS, 0); }
        public TerminalNode COLLECT() { return getToken(PlSqlParser.COLLECT, 0); }
        public Collect_order_by_partContext collect_order_by_part() {
            return getRuleContext(Collect_order_by_partContext.class,0);
        }
        public Within_or_over_clause_keywordContext within_or_over_clause_keyword() {
            return getRuleContext(Within_or_over_clause_keywordContext.class,0);
        }
        public Function_argumentContext function_argument() {
            return getRuleContext(Function_argumentContext.class,0);
        }
        public List<Within_or_over_partContext> within_or_over_part() {
            return getRuleContexts(Within_or_over_partContext.class);
        }
        public Within_or_over_partContext within_or_over_part(int i) {
            return getRuleContext(Within_or_over_partContext.class,i);
        }
        public TerminalNode DECOMPOSE() { return getToken(PlSqlParser.DECOMPOSE, 0); }
        public TerminalNode CANONICAL() { return getToken(PlSqlParser.CANONICAL, 0); }
        public TerminalNode COMPATIBILITY() { return getToken(PlSqlParser.COMPATIBILITY, 0); }
        public TerminalNode EXTRACT() { return getToken(PlSqlParser.EXTRACT, 0); }
        public TerminalNode FROM() { return getToken(PlSqlParser.FROM, 0); }
        public TerminalNode FIRST_VALUE() { return getToken(PlSqlParser.FIRST_VALUE, 0); }
        public TerminalNode LAST_VALUE() { return getToken(PlSqlParser.LAST_VALUE, 0); }
        public Respect_or_ignore_nullsContext respect_or_ignore_nulls() {
            return getRuleContext(Respect_or_ignore_nullsContext.class,0);
        }
        public Standard_prediction_function_keywordContext standard_prediction_function_keyword() {
            return getRuleContext(Standard_prediction_function_keywordContext.class,0);
        }
        public List<Expression_wrapperContext> expression_wrapper() {
            return getRuleContexts(Expression_wrapperContext.class);
        }
        public Expression_wrapperContext expression_wrapper(int i) {
            return getRuleContext(Expression_wrapperContext.class,i);
        }
        public Cost_matrix_clauseContext cost_matrix_clause() {
            return getRuleContext(Cost_matrix_clauseContext.class,0);
        }
        public TerminalNode MOD() { return getToken(PlSqlParser.MOD, 0); }
        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }
        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class,i);
        }
        public TerminalNode TRANSLATE() { return getToken(PlSqlParser.TRANSLATE, 0); }
        public TerminalNode CHAR_CS() { return getToken(PlSqlParser.CHAR_CS, 0); }
        public TerminalNode TREAT() { return getToken(PlSqlParser.TREAT, 0); }
        public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
        public Type_specContext type_spec() {
            return getRuleContext(Type_specContext.class,0);
        }
        public TerminalNode REF() { return getToken(PlSqlParser.REF, 0); }
        public TerminalNode TRIM() { return getToken(PlSqlParser.TRIM, 0); }
        public TerminalNode LEADING() { return getToken(PlSqlParser.LEADING, 0); }
        public TerminalNode TRAILING() { return getToken(PlSqlParser.TRAILING, 0); }
        public TerminalNode BOTH() { return getToken(PlSqlParser.BOTH, 0); }
        public TerminalNode XMLAGG() { return getToken(PlSqlParser.XMLAGG, 0); }
        public Order_by_clauseContext order_by_clause() {
            return getRuleContext(Order_by_clauseContext.class,0);
        }
        public General_element_partContext general_element_part() {
            return getRuleContext(General_element_partContext.class,0);
        }
        public List<Xml_multiuse_expression_elementContext> xml_multiuse_expression_element() {
            return getRuleContexts(Xml_multiuse_expression_elementContext.class);
        }
        public Xml_multiuse_expression_elementContext xml_multiuse_expression_element(int i) {
            return getRuleContext(Xml_multiuse_expression_elementContext.class,i);
        }
        public TerminalNode XMLCOLATTVAL() { return getToken(PlSqlParser.XMLCOLATTVAL, 0); }
        public TerminalNode XMLFOREST() { return getToken(PlSqlParser.XMLFOREST, 0); }
        public TerminalNode XMLELEMENT() { return getToken(PlSqlParser.XMLELEMENT, 0); }
        public Xml_attributes_clauseContext xml_attributes_clause() {
            return getRuleContext(Xml_attributes_clauseContext.class,0);
        }
        public TerminalNode ENTITYESCAPING() { return getToken(PlSqlParser.ENTITYESCAPING, 0); }
        public TerminalNode NOENTITYESCAPING() { return getToken(PlSqlParser.NOENTITYESCAPING, 0); }
        public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
        public TerminalNode EVALNAME() { return getToken(PlSqlParser.EVALNAME, 0); }
        public List<Column_aliasContext> column_alias() {
            return getRuleContexts(Column_aliasContext.class);
        }
        public Column_aliasContext column_alias(int i) {
            return getRuleContext(Column_aliasContext.class,i);
        }
        public TerminalNode XMLEXISTS() { return getToken(PlSqlParser.XMLEXISTS, 0); }
        public Xml_passing_clauseContext xml_passing_clause() {
            return getRuleContext(Xml_passing_clauseContext.class,0);
        }
        public TerminalNode XMLPARSE() { return getToken(PlSqlParser.XMLPARSE, 0); }
        public TerminalNode DOCUMENT() { return getToken(PlSqlParser.DOCUMENT, 0); }
        public TerminalNode CONTENT() { return getToken(PlSqlParser.CONTENT, 0); }
        public TerminalNode WELLFORMED() { return getToken(PlSqlParser.WELLFORMED, 0); }
        public TerminalNode XMLPI() { return getToken(PlSqlParser.XMLPI, 0); }
        public IdContext id() {
            return getRuleContext(IdContext.class,0);
        }
        public TerminalNode XMLQUERY() { return getToken(PlSqlParser.XMLQUERY, 0); }
        public TerminalNode RETURNING() { return getToken(PlSqlParser.RETURNING, 0); }
        public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
        public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
        public TerminalNode EMPTY() { return getToken(PlSqlParser.EMPTY, 0); }
        public TerminalNode XMLROOT() { return getToken(PlSqlParser.XMLROOT, 0); }
        public Xmlroot_param_version_partContext xmlroot_param_version_part() {
            return getRuleContext(Xmlroot_param_version_partContext.class,0);
        }
        public Xmlroot_param_standalone_partContext xmlroot_param_standalone_part() {
            return getRuleContext(Xmlroot_param_standalone_partContext.class,0);
        }
        public TerminalNode XMLSERIALIZE() { return getToken(PlSqlParser.XMLSERIALIZE, 0); }
        public Xmlserialize_param_enconding_partContext xmlserialize_param_enconding_part() {
            return getRuleContext(Xmlserialize_param_enconding_partContext.class,0);
        }
        public Xmlserialize_param_version_partContext xmlserialize_param_version_part() {
            return getRuleContext(Xmlserialize_param_version_partContext.class,0);
        }
        public Xmlserialize_param_ident_partContext xmlserialize_param_ident_part() {
            return getRuleContext(Xmlserialize_param_ident_partContext.class,0);
        }
        public TerminalNode DEFAULTS() { return getToken(PlSqlParser.DEFAULTS, 0); }
        public TerminalNode HIDE() { return getToken(PlSqlParser.HIDE, 0); }
        public TerminalNode SHOW() { return getToken(PlSqlParser.SHOW, 0); }
        public Xml_tableContext xml_table() {
            return getRuleContext(Xml_tableContext.class,0);
        }
        public Standard_functionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_standard_function; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterStandard_function(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitStandard_function(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitStandard_function(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Standard_functionContext standard_function() throws RecognitionException {
        Standard_functionContext _localctx = new Standard_functionContext(_ctx, getState());
        enterRule(_localctx, 594, RULE_standard_function);
        int _la;
        try {
            int _alt;
            setState(4659);
            _errHandler.sync(this);
            switch ( getInterpreter().adaptivePredict(_input,586,_ctx) ) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(4371);
                    over_clause_keyword();
                    setState(4372);
                    function_argument_analytic();
                    setState(4374);
                    _errHandler.sync(this);
                    switch ( getInterpreter().adaptivePredict(_input,539,_ctx) ) {
                        case 1:
                        {
                            setState(4373);
                            over_clause();
                        }
                        break;
                    }
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(4376);
                    regular_id();
                    setState(4377);
                    function_argument_modeling();
                    setState(4379);
                    _errHandler.sync(this);
                    switch ( getInterpreter().adaptivePredict(_input,540,_ctx) ) {
                        case 1:
                        {
                            setState(4378);
                            using_clause();
                        }
                        break;
                    }
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(4381);
                    match(COUNT);
                    setState(4382);
                    match(LEFT_PAREN);
                    setState(4388);
                    switch (_input.LA(1)) {
                        case ASTERISK:
                        {
                            setState(4383);
                            match(ASTERISK);
                        }
                        break;
                        case A_LETTER:
                        case ADD:
                        case AFTER:
                        case AGENT:
                        case AGGREGATE:
                        case ALL:
                        case ALTER:
                        case ANALYZE:
                        case AND:
                        case ANY:
                        case ARRAY:
                        case AS:
                        case ASC:
                        case ASSOCIATE:
                        case AT:
                        case ATTRIBUTE:
                        case AUDIT:
                        case AUTHID:
                        case AUTO:
                        case AUTOMATIC:
                        case AUTONOMOUS_TRANSACTION:
                        case BATCH:
                        case BEFORE:
                        case BEGIN:
                        case BETWEEN:
                        case BFILE:
                        case BINARY_DOUBLE:
                        case BINARY_FLOAT:
                        case BINARY_INTEGER:
                        case BLOB:
                        case BLOCK:
                        case BODY:
                        case BOOLEAN:
                        case BOTH:
                        case BREADTH:
                        case BULK:
                        case BY:
                        case BYTE:
                        case C_LETTER:
                        case CACHE:
                        case CALL:
                        case CANONICAL:
                        case CASCADE:
                        case CASE:
                        case CAST:
                        case CHAR:
                        case CHAR_CS:
                        case CHARACTER:
                        case CHECK:
                        case CHR:
                        case CLOB:
                        case CLOSE:
                        case CLUSTER:
                        case COLLECT:
                        case COLUMNS:
                        case COMMENT:
                        case COMMIT:
                        case COMMITTED:
                        case COMPATIBILITY:
                        case COMPILE:
                        case COMPOUND:
                        case CONNECT:
                        case CONNECT_BY_ROOT:
                        case CONSTANT:
                        case CONSTRAINT:
                        case CONSTRAINTS:
                        case CONSTRUCTOR:
                        case CONTENT:
                        case CONTEXT:
                        case CONTINUE:
                        case CONVERT:
                        case CORRUPT_XID:
                        case CORRUPT_XID_ALL:
                        case COST:
                        case COUNT:
                        case CREATE:
                        case CROSS:
                        case CUBE:
                        case CURRENT:
                        case CURRENT_USER:
                        case CURSOR:
                        case CUSTOMDATUM:
                        case CYCLE:
                        case DATA:
                        case DATABASE:
                        case DATE:
                        case DAY:
                        case DB_ROLE_CHANGE:
                        case DBTIMEZONE:
                        case DDL:
                        case DEBUG:
                        case DEC:
                        case DECIMAL:
                        case DECLARE:
                        case DECOMPOSE:
                        case DECREMENT:
                        case DEFAULT:
                        case DEFAULTS:
                        case DEFERRED:
                        case DEFINER:
                        case DELETE:
                        case DEPTH:
                        case DESC:
                        case DETERMINISTIC:
                        case DIMENSION:
                        case DISABLE:
                        case DISASSOCIATE:
                        case DISTINCT:
                        case DOCUMENT:
                        case DOUBLE:
                        case DROP:
                        case DSINTERVAL_UNCONSTRAINED:
                        case EACH:
                        case ELEMENT:
                        case ELSE:
                        case ELSIF:
                        case EMPTY:
                        case ENABLE:
                        case ENCODING:
                        case END:
                        case ENTITYESCAPING:
                        case ERRORS:
                        case ESCAPE:
                        case EXCEPT:
                        case EVALNAME:
                        case EXCEPTION:
                        case EXCEPTION_INIT:
                        case EXCEPTIONS:
                        case EXCLUDE:
                        case EXCLUSIVE:
                        case EXECUTE:
                        case EXISTS:
                        case EXIT:
                        case EXPLAIN:
                        case EXTERNAL:
                        case EXTRACT:
                        case FAILURE:
                        case FALSE:
                        case FETCH:
                        case FINAL:
                        case FIRST:
                        case FIRST_VALUE:
                        case FLOAT:
                        case FOLLOWING:
                        case FOLLOWS:
                        case FOR:
                        case FORALL:
                        case FORCE:
                        case FROM:
                        case FULL:
                        case FUNCTION:
                        case GOTO:
                        case GRANT:
                        case GROUP:
                        case GROUPING:
                        case HASH:
                        case HAVING:
                        case HIDE:
                        case HOUR:
                        case IF:
                        case IGNORE:
                        case IMMEDIATE:
                        case IN:
                        case INCLUDE:
                        case INCLUDING:
                        case INCREMENT:
                        case INDENT:
                        case INDEX:
                        case INDEXED:
                        case INDICATOR:
                        case INDICES:
                        case INFINITE:
                        case INLINE:
                        case INNER:
                        case INOUT:
                        case INSERT:
                        case INSTANTIABLE:
                        case INSTEAD:
                        case INT:
                        case INTEGER:
                        case INTERSECT:
                        case INTERVAL:
                        case INTO:
                        case INVALIDATE:
                        case IS:
                        case ISOLATION:
                        case ITERATE:
                        case JAVA:
                        case JOIN:
                        case KEEP:
                        case LANGUAGE:
                        case LAST:
                        case LAST_VALUE:
                        case LEADING:
                        case LEFT:
                        case LEVEL:
                        case LIBRARY:
                        case LIKE:
                        case LIKE2:
                        case LIKE4:
                        case LIKEC:
                        case LIMIT:
                        case LOCAL:
                        case LOCK:
                        case LOCKED:
                        case LOG:
                        case LOGOFF:
                        case LOGON:
                        case LONG:
                        case LOOP:
                        case MAIN:
                        case MAP:
                        case MATCHED:
                        case MAXVALUE:
                        case MEASURES:
                        case MEMBER:
                        case MERGE:
                        case MINUS:
                        case MINUTE:
                        case MINVALUE:
                        case MLSLABEL:
                        case MOD:
                        case MODE:
                        case MODEL:
                        case MODIFY:
                        case MONTH:
                        case MULTISET:
                        case NAME:
                        case NAN:
                        case NATURAL:
                        case NATURALN:
                        case NAV:
                        case NCHAR:
                        case NCHAR_CS:
                        case NCLOB:
                        case NESTED:
                        case NEW:
                        case NO:
                        case NOAUDIT:
                        case NOCACHE:
                        case NOCOPY:
                        case NOCYCLE:
                        case NOENTITYESCAPING:
                        case NOMAXVALUE:
                        case NOMINVALUE:
                        case NONE:
                        case NOORDER:
                        case NOSCHEMACHECK:
                        case NOT:
                        case NOWAIT:
                        case NULL:
                        case NULLS:
                        case NUMBER:
                        case NUMERIC:
                        case NVARCHAR2:
                        case OBJECT:
                        case OF:
                        case OFF:
                        case OID:
                        case OLD:
                        case ON:
                        case ONLY:
                        case OPEN:
                        case OPTION:
                        case OR:
                        case ORADATA:
                        case ORDER:
                        case ORDINALITY:
                        case OSERROR:
                        case OUT:
                        case OUTER:
                        case OVER:
                        case OVERRIDING:
                        case PACKAGE:
                        case PARALLEL_ENABLE:
                        case PARAMETERS:
                        case PARENT:
                        case PARTITION:
                        case PASSING:
                        case PATH:
                        case PIPELINED:
                        case PIVOT:
                        case PLAN:
                        case PLS_INTEGER:
                        case POSITIVE:
                        case POSITIVEN:
                        case PRAGMA:
                        case PRECEDING:
                        case PRECISION:
                        case PRESENT:
                        case PRIOR:
                        case PROCEDURE:
                        case RAISE:
                        case RANGE:
                        case RAW:
                        case READ:
                        case REAL:
                        case RECORD:
                        case REF:
                        case REFERENCE:
                        case REFERENCING:
                        case REJECT:
                        case RELIES_ON:
                        case RENAME:
                        case REPLACE:
                        case RESPECT:
                        case RESTRICT_REFERENCES:
                        case RESULT:
                        case RESULT_CACHE:
                        case RETURN:
                        case RETURNING:
                        case REUSE:
                        case REVERSE:
                        case REVOKE:
                        case RIGHT:
                        case ROLLBACK:
                        case ROLLUP:
                        case ROW:
                        case ROWID:
                        case ROWS:
                        case RULES:
                        case SAMPLE:
                        case SAVE:
                        case SAVEPOINT:
                        case SCHEMA:
                        case SCHEMACHECK:
                        case SCN:
                        case SEARCH:
                        case SECOND:
                        case SEED:
                        case SEGMENT:
                        case SELECT:
                        case SELF:
                        case SEQUENCE:
                        case SEQUENTIAL:
                        case SERIALIZABLE:
                        case SERIALLY_REUSABLE:
                        case SERVERERROR:
                        case SESSIONTIMEZONE:
                        case SET:
                        case SETS:
                        case SETTINGS:
                        case SHARE:
                        case SHOW:
                        case SHUTDOWN:
                        case SIBLINGS:
                        case SIGNTYPE:
                        case SIMPLE_INTEGER:
                        case SINGLE:
                        case SIZE:
                        case SKIP_:
                        case SMALLINT:
                        case SNAPSHOT:
                        case SOME:
                        case SPECIFICATION:
                        case SQLDATA:
                        case SQLERROR:
                        case SQL_PERCENT_ROWCOUNT:
                        case STANDALONE:
                        case START:
                        case STARTUP:
                        case STATEMENT:
                        case STATEMENT_ID:
                        case STATIC:
                        case STATISTICS:
                        case STRING:
                        case SUBMULTISET:
                        case SUBPARTITION:
                        case SUBSTITUTABLE:
                        case SUBTYPE:
                        case SUCCESS:
                        case SUSPEND:
                        case TABLE:
                        case THE:
                        case THEN:
                        case TIME:
                        case TIMESTAMP:
                        case TIMESTAMP_LTZ_UNCONSTRAINED:
                        case TIMESTAMP_TZ_UNCONSTRAINED:
                        case TIMESTAMP_UNCONSTRAINED:
                        case TIMEZONE_ABBR:
                        case TIMEZONE_HOUR:
                        case TIMEZONE_MINUTE:
                        case TIMEZONE_REGION:
                        case TO:
                        case TO_CHAR:
                        case TO_NUMBER:
                        case TRAILING:
                        case TRANSACTION:
                        case TRANSLATE:
                        case TREAT:
                        case TRIGGER:
                        case TRIM:
                        case TRUE:
                        case TRUNCATE:
                        case TYPE:
                        case UNBOUNDED:
                        case UNDER:
                        case UNION:
                        case UNIQUE:
                        case UNLIMITED:
                        case UNPIVOT:
                        case UNTIL:
                        case UPDATE:
                        case UPDATED:
                        case UPSERT:
                        case UROWID:
                        case USE:
                        case USING:
                        case VALIDATE:
                        case VALUE:
                        case VALUES:
                        case VARCHAR:
                        case VARCHAR2:
                        case VARIABLE:
                        case VARRAY:
                        case VARYING:
                        case VERSION:
                        case VERSIONS:
                        case WAIT:
                        case WARNING:
                        case WELLFORMED:
                        case WHEN:
                        case WHENEVER:
                        case WHERE:
                        case WHILE:
                        case WITH:
                        case WITHIN:
                        case WORK:
                        case WRITE:
                        case XML:
                        case XMLAGG:
                        case XMLATTRIBUTES:
                        case XMLCAST:
                        case XMLCOLATTVAL:
                        case XMLELEMENT:
                        case XMLEXISTS:
                        case XMLFOREST:
                        case XMLNAMESPACES:
                        case XMLPARSE:
                        case XMLPI:
                        case XMLQUERY:
                        case XMLROOT:
                        case XMLSERIALIZE:
                        case XMLTABLE:
                        case YEAR:
                        case YES:
                        case YMINTERVAL_UNCONSTRAINED:
                        case ZONE:
                        case PREDICTION:
                        case PREDICTION_BOUNDS:
                        case PREDICTION_COST:
                        case PREDICTION_DETAILS:
                        case PREDICTION_PROBABILITY:
                        case PREDICTION_SET:
                        case CUME_DIST:
                        case DENSE_RANK:
                        case LISTAGG:
                        case PERCENT_RANK:
                        case PERCENTILE_CONT:
                        case PERCENTILE_DISC:
                        case RANK:
                        case AVG:
                        case CORR:
                        case LAG:
                        case LEAD:
                        case MAX:
                        case MEDIAN:
                        case MIN:
                        case NTILE:
                        case RATIO_TO_REPORT:
                        case ROW_NUMBER:
                        case SUM:
                        case VARIANCE:
                        case REGR_:
                        case STDDEV:
                        case VAR_:
                        case COVAR_:
                        case NATIONAL_CHAR_STRING_LIT:
                        case UNSIGNED_INTEGER:
                        case APPROXIMATE_NUM_LIT:
                        case CHAR_STRING:
                        case DELIMITED_ID:
                        case LEFT_PAREN:
                        case PLUS_SIGN:
                        case MINUS_SIGN:
                        case BINDVAR:
                        case COLON:
                        case INTRODUCER:
                        case REGULAR_ID:
                        {
                            setState(4385);
                            _errHandler.sync(this);
                            switch ( getInterpreter().adaptivePredict(_input,541,_ctx) ) {
                                case 1:
                                {
                                    setState(4384);
                                    _la = _input.LA(1);
                                    if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
                                        _errHandler.recoverInline(this);
                                    } else {
                                        consume();
                                    }
                                }
                                break;
                            }
                            setState(4387);
                            concatenation_wrapper();
                        }
                        break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    setState(4390);
                    match(RIGHT_PAREN);
                    setState(4392);
                    _errHandler.sync(this);
                    switch ( getInterpreter().adaptivePredict(_input,543,_ctx) ) {
                        case 1:
                        {
                            setState(4391);
                            over_clause();
                        }
                        break;
                    }
                }
                break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                {
                    setState(4394);
                    sql_type_conversion();
                }
                break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                {
                    setState(4395);
                    match(CHR);
                    setState(4396);
                    match(LEFT_PAREN);
                    setState(4397);
                    concatenation_wrapper();
                    setState(4398);
                    match(USING);
                    setState(4399);
                    match(NCHAR_CS);
                    setState(4400);
                    match(RIGHT_PAREN);
                }
                break;
                case 6:
                    enterOuterAlt(_localctx, 6);
                {
                    setState(4402);
                    match(COLLECT);
                    setState(4403);
                    match(LEFT_PAREN);
                    setState(4405);
                    _errHandler.sync(this);
                    switch ( getInterpreter().adaptivePredict(_input,544,_ctx) ) {
                        case 1:
                        {
                            setState(4404);
                            _la = _input.LA(1);
                            if ( !(_la==DISTINCT || _la==UNIQUE) ) {
                                _errHandler.recoverInline(this);
                            } else {
                                consume();
                            }
                        }
                        break;
                    }
                    setState(4407);
                    concatenation_wrapper();
                    setState(4409);
                    _la = _input.LA(1);
                    if (_la==ORDER) {
                        {
                            setState(4408);
                            collect_order_by_part();
                        }
                    }

                    setState(4411);
                    match(RIGHT_PAREN);
                }
                break;
                case 7:
                    enterOuterAlt(_localctx, 7);
                {
                    setState(4413);
                    within_or_over_clause_keyword();
                    setState(4414);
                    function_argument();
                    setState(4416);
                    _errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                            {
                                {
                                    setState(4415);
                                    within_or_over_part();
                                }
                            }
                            break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        setState(4418);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input,546,_ctx);
                    } while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
                }
                break;
                case 8:
                    enterOuterAlt(_localctx, 8);
                {
                    setState(4420);
                    match(DECOMPOSE);
                    setState(4421);
                    match(LEFT_PAREN);
                    setState(4422);
                    concatenation_wrapper();
                    setState(4424);
                    _la = _input.LA(1);
                    if (_la==CANONICAL || _la==COMPATIBILITY) {
                        {
                            setState(4423);
                            _la = _input.LA(1);
                            if ( !(_la==CANONICAL || _la==COMPATIBILITY) ) {
                                _errHandler.recoverInline(this);
                            } else {
                                consume();
                            }
                        }
                    }

                    setState(4426);
                    match(RIGHT_PAREN);
                }
                break;
                case 9:
                    enterOuterAlt(_localctx, 9);
                {
                    setState(4428);
                    match(EXTRACT);
                    setState(4429);
                    match(LEFT_PAREN);
                    setState(4430);
                    regular_id();
                    setState(4431);
                    match(FROM);
                    setState(4432);
                    concatenation_wrapper();
                    setState(4433);
                    match(RIGHT_PAREN);
                }
                break;
                case 10:
                    enterOuterAlt(_localctx, 10);
                {
                    setState(4435);
                    _la = _input.LA(1);
                    if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
                        _errHandler.recoverInline(this);
                    } else {
                        consume();
                    }
                    setState(4436);
                    function_argument_analytic();
                    setState(4438);
                    _la = _input.LA(1);
                    if (_la==IGNORE || _la==RESPECT) {
                        {
                            setState(4437);
                            respect_or_ignore_nulls();
                        }
                    }

                    setState(4440);
                    over_clause();
                }
                break;
                case 11:
                    enterOuterAlt(_localctx, 11);
                {
                    setState(4442);
                    standard_prediction_function_keyword();
                    setState(4443);
                    match(LEFT_PAREN);
                    setState(4444);
                    expression_wrapper();
                    setState(4449);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    while (_la==COMMA) {
                        {
                            {
                                setState(4445);
                                match(COMMA);
                                setState(4446);
                                expression_wrapper();
                            }
                        }
                        setState(4451);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                    }
                    setState(4453);
                    _la = _input.LA(1);
                    if (_la==COST) {
                        {
                            setState(4452);
                            cost_matrix_clause();
                        }
                    }

                    setState(4456);
                    _la = _input.LA(1);
                    if (_la==USING) {
                        {
                            setState(4455);
                            using_clause();
                        }
                    }

                    setState(4458);
                    match(RIGHT_PAREN);
                }
                break;
                case 12:
                    enterOuterAlt(_localctx, 12);
                {
                    setState(4460);
                    match(MOD);
                    setState(4461);
                    match(LEFT_PAREN);
                    setState(4462);
                    expression();
                    setState(4463);
                    match(COMMA);
                    setState(4464);
                    expression();
                    setState(4465);
                    match(RIGHT_PAREN);
                }
                break;
                case 13:
                    enterOuterAlt(_localctx, 13);
                {
                    setState(4467);
                    match(TRANSLATE);
                    setState(4468);
                    match(LEFT_PAREN);
                    setState(4469);
                    expression_wrapper();
                    setState(4472);
                    _la = _input.LA(1);
                    if (_la==USING) {
                        {
                            setState(4470);
                            match(USING);
                            setState(4471);
                            _la = _input.LA(1);
                            if ( !(_la==CHAR_CS || _la==NCHAR_CS) ) {
                                _errHandler.recoverInline(this);
                            } else {
                                consume();
                            }
                        }
                    }

                    setState(4478);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    while (_la==COMMA) {
                        {
                            {
                                setState(4474);
                                match(COMMA);
                                setState(4475);
                                expression_wrapper();
                            }
                        }
                        setState(4480);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                    }
                    setState(4481);
                    match(RIGHT_PAREN);
                }
                break;
                case 14:
                    enterOuterAlt(_localctx, 14);
                {
                    setState(4483);
                    match(TREAT);
                    setState(4484);
                    match(LEFT_PAREN);
                    setState(4485);
                    expression_wrapper();
                    setState(4486);
                    match(AS);
                    setState(4488);
                    _errHandler.sync(this);
                    switch ( getInterpreter().adaptivePredict(_input,554,_ctx) ) {
                        case 1:
                        {
                            setState(4487);
                            match(REF);
                        }
                        break;
                    }
                    setState(4490);
                    type_spec();
                    setState(4491);
                    match(RIGHT_PAREN);
                }
                break;
                case 15:
                    enterOuterAlt(_localctx, 15);
                {
                    setState(4493);
                    match(TRIM);
                    setState(4494);
                    match(LEFT_PAREN);
                    setState(4502);
                    _errHandler.sync(this);
                    switch ( getInterpreter().adaptivePredict(_input,557,_ctx) ) {
                        case 1:
                        {
                            setState(4496);
                            _errHandler.sync(this);
                            switch ( getInterpreter().adaptivePredict(_input,555,_ctx) ) {
                                case 1:
                                {
                                    setState(4495);
                                    _la = _input.LA(1);
                                    if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
                                        _errHandler.recoverInline(this);
                                    } else {
                                        consume();
                                    }
                                }
                                break;
                            }
                            setState(4499);
                            _errHandler.sync(this);
                            switch ( getInterpreter().adaptivePredict(_input,556,_ctx) ) {
                                case 1:
                                {
                                    setState(4498);
                                    expression_wrapper();
                                }
                                break;
                            }
                            setState(4501);
                            match(FROM);
                        }
                        break;
                    }
                    setState(4504);
                    expression_wrapper();
                    setState(4505);
                    match(RIGHT_PAREN);
                }
                break;
                case 16:
                    enterOuterAlt(_localctx, 16);
                {
                    setState(4507);
                    match(XMLAGG);
                    setState(4508);
                    match(LEFT_PAREN);
                    setState(4509);
                    expression_wrapper();
                    setState(4511);
                    _la = _input.LA(1);
                    if (_la==ORDER) {
                        {
                            setState(4510);
                            order_by_clause();
                        }
                    }

                    setState(4513);
                    match(RIGHT_PAREN);
                    setState(4516);
                    _la = _input.LA(1);
                    if (_la==PERIOD) {
                        {
                            setState(4514);
                            match(PERIOD);
                            setState(4515);
                            general_element_part();
                        }
                    }

                }
                break;
                case 17:
                    enterOuterAlt(_localctx, 17);
                {
                    setState(4518);
                    _la = _input.LA(1);
                    if ( !(_la==XMLCOLATTVAL || _la==XMLFOREST) ) {
                        _errHandler.recoverInline(this);
                    } else {
                        consume();
                    }
                    setState(4519);
                    match(LEFT_PAREN);
                    setState(4520);
                    xml_multiuse_expression_element();
                    setState(4525);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    while (_la==COMMA) {
                        {
                            {
                                setState(4521);
                                match(COMMA);
                                setState(4522);
                                xml_multiuse_expression_element();
                            }
                        }
                        setState(4527);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                    }
                    setState(4528);
                    match(RIGHT_PAREN);
                    setState(4531);
                    _la = _input.LA(1);
                    if (_la==PERIOD) {
                        {
                            setState(4529);
                            match(PERIOD);
                            setState(4530);
                            general_element_part();
                        }
                    }

                }
                break;
                case 18:
                    enterOuterAlt(_localctx, 18);
                {
                    setState(4533);
                    match(XMLELEMENT);
                    setState(4534);
                    match(LEFT_PAREN);
                    setState(4536);
                    _errHandler.sync(this);
                    switch ( getInterpreter().adaptivePredict(_input,562,_ctx) ) {
                        case 1:
                        {
                            setState(4535);
                            _la = _input.LA(1);
                            if ( !(_la==ENTITYESCAPING || _la==NOENTITYESCAPING) ) {
                                _errHandler.recoverInline(this);
                            } else {
                                consume();
                            }
                        }
                        break;
                    }
                    setState(4539);
                    _errHandler.sync(this);
                    switch ( getInterpreter().adaptivePredict(_input,563,_ctx) ) {
                        case 1:
                        {
                            setState(4538);
                            _la = _input.LA(1);
                            if ( !(_la==EVALNAME || _la==NAME) ) {
                                _errHandler.recoverInline(this);
                            } else {
                                consume();
                            }
                        }
                        break;
                    }
                    setState(4541);
                    expression_wrapper();
                    setState(4544);
                    _errHandler.sync(this);
                    switch ( getInterpreter().adaptivePredict(_input,564,_ctx) ) {
                        case 1:
                        {
                            setState(4542);
                            match(COMMA);
                            setState(4543);
                            xml_attributes_clause();
                        }
                        break;
                    }
                    setState(4553);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    while (_la==COMMA) {
                        {
                            {
                                setState(4546);
                                match(COMMA);
                                setState(4547);
                                expression_wrapper();
                                setState(4549);
                                _la = _input.LA(1);
                                if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ALTER) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREADTH) | (1L << BULK) | (1L << BY) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHECK) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DEPTH - 64)) | (1L << (DESC - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (ELSE - 64)) | (1L << (ELSIF - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (END - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EXCEPT - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXCLUSIVE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FETCH - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FOR - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GOTO - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HAVING - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IN - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEX - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERSECT - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTO - 192)) | (1L << (INVALIDATE - 192)) | (1L << (IS - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCK - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUS - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCACHE - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)) | (1L << (NOENTITYESCAPING - 192)) | (1L << (NOMAXVALUE - 192)) | (1L << (NOMINVALUE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NONE - 256)) | (1L << (NOORDER - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NOT - 256)) | (1L << (NOWAIT - 256)) | (1L << (NULL - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OF - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ON - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (OPTION - 256)) | (1L << (OR - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDER - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PIVOT - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (PRIOR - 256)) | (1L << (PROCEDURE - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (REVOKE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SEARCH - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELECT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENCE - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHARE - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (SQL_PERCENT_ROWCOUNT - 320)) | (1L << (STANDALONE - 320)) | (1L << (START - 320)) | (1L << (STARTUP - 320)) | (1L << (STATEMENT - 320)) | (1L << (STATEMENT_ID - 320)) | (1L << (STATIC - 320)) | (1L << (STATISTICS - 320)) | (1L << (STRING - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TABLE - 384)) | (1L << (THE - 384)) | (1L << (THEN - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TO - 384)) | (1L << (TO_CHAR - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUE - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNION - 384)) | (1L << (UNIQUE - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNPIVOT - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATE - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (USING - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VALUES - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHEN - 384)) | (1L << (WHENEVER - 384)) | (1L << (WHERE - 384)) | (1L << (WHILE - 384)) | (1L << (WITH - 384)) | (1L << (WITHIN - 384)) | (1L << (WORK - 384)) | (1L << (WRITE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)) | (1L << (REGR_ - 448)) | (1L << (STDDEV - 448)) | (1L << (VAR_ - 448)) | (1L << (COVAR_ - 448)) | (1L << (NATIONAL_CHAR_STRING_LIT - 448)) | (1L << (CHAR_STRING - 448)) | (1L << (DELIMITED_ID - 448)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
                                    {
                                        setState(4548);
                                        column_alias();
                                    }
                                }

                            }
                        }
                        setState(4555);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                    }
                    setState(4556);
                    match(RIGHT_PAREN);
                    setState(4559);
                    _la = _input.LA(1);
                    if (_la==PERIOD) {
                        {
                            setState(4557);
                            match(PERIOD);
                            setState(4558);
                            general_element_part();
                        }
                    }

                }
                break;
                case 19:
                    enterOuterAlt(_localctx, 19);
                {
                    setState(4561);
                    match(XMLEXISTS);
                    setState(4562);
                    match(LEFT_PAREN);
                    setState(4563);
                    expression_wrapper();
                    setState(4565);
                    _la = _input.LA(1);
                    if (_la==PASSING) {
                        {
                            setState(4564);
                            xml_passing_clause();
                        }
                    }

                    setState(4567);
                    match(RIGHT_PAREN);
                }
                break;
                case 20:
                    enterOuterAlt(_localctx, 20);
                {
                    setState(4569);
                    match(XMLPARSE);
                    setState(4570);
                    match(LEFT_PAREN);
                    setState(4571);
                    _la = _input.LA(1);
                    if ( !(_la==CONTENT || _la==DOCUMENT) ) {
                        _errHandler.recoverInline(this);
                    } else {
                        consume();
                    }
                    setState(4572);
                    concatenation_wrapper();
                    setState(4574);
                    _la = _input.LA(1);
                    if (_la==WELLFORMED) {
                        {
                            setState(4573);
                            match(WELLFORMED);
                        }
                    }

                    setState(4576);
                    match(RIGHT_PAREN);
                    setState(4579);
                    _la = _input.LA(1);
                    if (_la==PERIOD) {
                        {
                            setState(4577);
                            match(PERIOD);
                            setState(4578);
                            general_element_part();
                        }
                    }

                }
                break;
                case 21:
                    enterOuterAlt(_localctx, 21);
                {
                    setState(4581);
                    match(XMLPI);
                    setState(4582);
                    match(LEFT_PAREN);
                    setState(4587);
                    switch (_input.LA(1)) {
                        case NAME:
                        {
                            setState(4583);
                            match(NAME);
                            setState(4584);
                            id();
                        }
                        break;
                        case EVALNAME:
                        {
                            setState(4585);
                            match(EVALNAME);
                            setState(4586);
                            concatenation_wrapper();
                        }
                        break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    setState(4591);
                    _la = _input.LA(1);
                    if (_la==COMMA) {
                        {
                            setState(4589);
                            match(COMMA);
                            setState(4590);
                            concatenation_wrapper();
                        }
                    }

                    setState(4593);
                    match(RIGHT_PAREN);
                    setState(4596);
                    _la = _input.LA(1);
                    if (_la==PERIOD) {
                        {
                            setState(4594);
                            match(PERIOD);
                            setState(4595);
                            general_element_part();
                        }
                    }

                }
                break;
                case 22:
                    enterOuterAlt(_localctx, 22);
                {
                    setState(4598);
                    match(XMLQUERY);
                    setState(4599);
                    match(LEFT_PAREN);
                    setState(4600);
                    concatenation_wrapper();
                    setState(4602);
                    _la = _input.LA(1);
                    if (_la==PASSING) {
                        {
                            setState(4601);
                            xml_passing_clause();
                        }
                    }

                    setState(4604);
                    match(RETURNING);
                    setState(4605);
                    match(CONTENT);
                    setState(4609);
                    _la = _input.LA(1);
                    if (_la==NULL) {
                        {
                            setState(4606);
                            match(NULL);
                            setState(4607);
                            match(ON);
                            setState(4608);
                            match(EMPTY);
                        }
                    }

                    setState(4611);
                    match(RIGHT_PAREN);
                    setState(4614);
                    _la = _input.LA(1);
                    if (_la==PERIOD) {
                        {
                            setState(4612);
                            match(PERIOD);
                            setState(4613);
                            general_element_part();
                        }
                    }

                }
                break;
                case 23:
                    enterOuterAlt(_localctx, 23);
                {
                    setState(4616);
                    match(XMLROOT);
                    setState(4617);
                    match(LEFT_PAREN);
                    setState(4618);
                    concatenation_wrapper();
                    setState(4621);
                    _errHandler.sync(this);
                    switch ( getInterpreter().adaptivePredict(_input,577,_ctx) ) {
                        case 1:
                        {
                            setState(4619);
                            match(COMMA);
                            setState(4620);
                            xmlroot_param_version_part();
                        }
                        break;
                    }
                    setState(4625);
                    _la = _input.LA(1);
                    if (_la==COMMA) {
                        {
                            setState(4623);
                            match(COMMA);
                            setState(4624);
                            xmlroot_param_standalone_part();
                        }
                    }

                    setState(4627);
                    match(RIGHT_PAREN);
                    setState(4630);
                    _la = _input.LA(1);
                    if (_la==PERIOD) {
                        {
                            setState(4628);
                            match(PERIOD);
                            setState(4629);
                            general_element_part();
                        }
                    }

                }
                break;
                case 24:
                    enterOuterAlt(_localctx, 24);
                {
                    setState(4632);
                    match(XMLSERIALIZE);
                    setState(4633);
                    match(LEFT_PAREN);
                    setState(4634);
                    _la = _input.LA(1);
                    if ( !(_la==CONTENT || _la==DOCUMENT) ) {
                        _errHandler.recoverInline(this);
                    } else {
                        consume();
                    }
                    setState(4635);
                    concatenation_wrapper();
                    setState(4638);
                    _la = _input.LA(1);
                    if (_la==AS) {
                        {
                            setState(4636);
                            match(AS);
                            setState(4637);
                            type_spec();
                        }
                    }

                    setState(4641);
                    _la = _input.LA(1);
                    if (_la==ENCODING) {
                        {
                            setState(4640);
                            xmlserialize_param_enconding_part();
                        }
                    }

                    setState(4644);
                    _la = _input.LA(1);
                    if (_la==VERSION) {
                        {
                            setState(4643);
                            xmlserialize_param_version_part();
                        }
                    }

                    setState(4647);
                    _la = _input.LA(1);
                    if (_la==INDENT || _la==NO) {
                        {
                            setState(4646);
                            xmlserialize_param_ident_part();
                        }
                    }

                    setState(4651);
                    _la = _input.LA(1);
                    if (_la==HIDE || _la==SHOW) {
                        {
                            setState(4649);
                            _la = _input.LA(1);
                            if ( !(_la==HIDE || _la==SHOW) ) {
                                _errHandler.recoverInline(this);
                            } else {
                                consume();
                            }
                            setState(4650);
                            match(DEFAULTS);
                        }
                    }

                    setState(4653);
                    match(RIGHT_PAREN);
                    setState(4656);
                    _la = _input.LA(1);
                    if (_la==PERIOD) {
                        {
                            setState(4654);
                            match(PERIOD);
                            setState(4655);
                            general_element_part();
                        }
                    }

                }
                break;
                case 25:
                    enterOuterAlt(_localctx, 25);
                {
                    setState(4658);
                    xml_table();
                }
                break;
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Over_clause_keywordContext extends ParserRuleContext {
        public TerminalNode AVG() { return getToken(PlSqlParser.AVG, 0); }
        public TerminalNode CORR() { return getToken(PlSqlParser.CORR, 0); }
        public TerminalNode LAG() { return getToken(PlSqlParser.LAG, 0); }
        public TerminalNode LEAD() { return getToken(PlSqlParser.LEAD, 0); }
        public TerminalNode MAX() { return getToken(PlSqlParser.MAX, 0); }
        public TerminalNode MEDIAN() { return getToken(PlSqlParser.MEDIAN, 0); }
        public TerminalNode MIN() { return getToken(PlSqlParser.MIN, 0); }
        public TerminalNode NTILE() { return getToken(PlSqlParser.NTILE, 0); }
        public TerminalNode RATIO_TO_REPORT() { return getToken(PlSqlParser.RATIO_TO_REPORT, 0); }
        public TerminalNode ROW_NUMBER() { return getToken(PlSqlParser.ROW_NUMBER, 0); }
        public TerminalNode SUM() { return getToken(PlSqlParser.SUM, 0); }
        public TerminalNode VARIANCE() { return getToken(PlSqlParser.VARIANCE, 0); }
        public TerminalNode REGR_() { return getToken(PlSqlParser.REGR_, 0); }
        public TerminalNode STDDEV() { return getToken(PlSqlParser.STDDEV, 0); }
        public TerminalNode VAR_() { return getToken(PlSqlParser.VAR_, 0); }
        public TerminalNode COVAR_() { return getToken(PlSqlParser.COVAR_, 0); }
        public Over_clause_keywordContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_over_clause_keyword; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterOver_clause_keyword(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitOver_clause_keyword(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitOver_clause_keyword(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Over_clause_keywordContext over_clause_keyword() throws RecognitionException {
        Over_clause_keywordContext _localctx = new Over_clause_keywordContext(_ctx, getState());
        enterRule(_localctx, 596, RULE_over_clause_keyword);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4661);
                _la = _input.LA(1);
                if ( !(((((_la - 480)) & ~0x3f) == 0 && ((1L << (_la - 480)) & ((1L << (AVG - 480)) | (1L << (CORR - 480)) | (1L << (LAG - 480)) | (1L << (LEAD - 480)) | (1L << (MAX - 480)) | (1L << (MEDIAN - 480)) | (1L << (MIN - 480)) | (1L << (NTILE - 480)) | (1L << (RATIO_TO_REPORT - 480)) | (1L << (ROW_NUMBER - 480)) | (1L << (SUM - 480)) | (1L << (VARIANCE - 480)) | (1L << (REGR_ - 480)) | (1L << (STDDEV - 480)) | (1L << (VAR_ - 480)) | (1L << (COVAR_ - 480)))) != 0)) ) {
                    _errHandler.recoverInline(this);
                } else {
                    consume();
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Within_or_over_clause_keywordContext extends ParserRuleContext {
        public TerminalNode CUME_DIST() { return getToken(PlSqlParser.CUME_DIST, 0); }
        public TerminalNode DENSE_RANK() { return getToken(PlSqlParser.DENSE_RANK, 0); }
        public TerminalNode LISTAGG() { return getToken(PlSqlParser.LISTAGG, 0); }
        public TerminalNode PERCENT_RANK() { return getToken(PlSqlParser.PERCENT_RANK, 0); }
        public TerminalNode PERCENTILE_CONT() { return getToken(PlSqlParser.PERCENTILE_CONT, 0); }
        public TerminalNode PERCENTILE_DISC() { return getToken(PlSqlParser.PERCENTILE_DISC, 0); }
        public TerminalNode RANK() { return getToken(PlSqlParser.RANK, 0); }
        public Within_or_over_clause_keywordContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_within_or_over_clause_keyword; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterWithin_or_over_clause_keyword(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitWithin_or_over_clause_keyword(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitWithin_or_over_clause_keyword(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Within_or_over_clause_keywordContext within_or_over_clause_keyword() throws RecognitionException {
        Within_or_over_clause_keywordContext _localctx = new Within_or_over_clause_keywordContext(_ctx, getState());
        enterRule(_localctx, 598, RULE_within_or_over_clause_keyword);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4663);
                _la = _input.LA(1);
                if ( !(((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & ((1L << (CUME_DIST - 473)) | (1L << (DENSE_RANK - 473)) | (1L << (LISTAGG - 473)) | (1L << (PERCENT_RANK - 473)) | (1L << (PERCENTILE_CONT - 473)) | (1L << (PERCENTILE_DISC - 473)) | (1L << (RANK - 473)))) != 0)) ) {
                    _errHandler.recoverInline(this);
                } else {
                    consume();
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Standard_prediction_function_keywordContext extends ParserRuleContext {
        public TerminalNode PREDICTION() { return getToken(PlSqlParser.PREDICTION, 0); }
        public TerminalNode PREDICTION_BOUNDS() { return getToken(PlSqlParser.PREDICTION_BOUNDS, 0); }
        public TerminalNode PREDICTION_COST() { return getToken(PlSqlParser.PREDICTION_COST, 0); }
        public TerminalNode PREDICTION_DETAILS() { return getToken(PlSqlParser.PREDICTION_DETAILS, 0); }
        public TerminalNode PREDICTION_PROBABILITY() { return getToken(PlSqlParser.PREDICTION_PROBABILITY, 0); }
        public TerminalNode PREDICTION_SET() { return getToken(PlSqlParser.PREDICTION_SET, 0); }
        public Standard_prediction_function_keywordContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_standard_prediction_function_keyword; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterStandard_prediction_function_keyword(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitStandard_prediction_function_keyword(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitStandard_prediction_function_keyword(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Standard_prediction_function_keywordContext standard_prediction_function_keyword() throws RecognitionException {
        Standard_prediction_function_keywordContext _localctx = new Standard_prediction_function_keywordContext(_ctx, getState());
        enterRule(_localctx, 600, RULE_standard_prediction_function_keyword);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4665);
                _la = _input.LA(1);
                if ( !(((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (PREDICTION - 467)) | (1L << (PREDICTION_BOUNDS - 467)) | (1L << (PREDICTION_COST - 467)) | (1L << (PREDICTION_DETAILS - 467)) | (1L << (PREDICTION_PROBABILITY - 467)) | (1L << (PREDICTION_SET - 467)))) != 0)) ) {
                    _errHandler.recoverInline(this);
                } else {
                    consume();
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Over_clauseContext extends ParserRuleContext {
        public TerminalNode OVER() { return getToken(PlSqlParser.OVER, 0); }
        public Query_partition_clauseContext query_partition_clause() {
            return getRuleContext(Query_partition_clauseContext.class,0);
        }
        public Order_by_clauseContext order_by_clause() {
            return getRuleContext(Order_by_clauseContext.class,0);
        }
        public Windowing_clauseContext windowing_clause() {
            return getRuleContext(Windowing_clauseContext.class,0);
        }
        public Over_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_over_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterOver_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitOver_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitOver_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Over_clauseContext over_clause() throws RecognitionException {
        Over_clauseContext _localctx = new Over_clauseContext(_ctx, getState());
        enterRule(_localctx, 602, RULE_over_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4667);
                match(OVER);
                setState(4668);
                match(LEFT_PAREN);
                setState(4670);
                _la = _input.LA(1);
                if (_la==PARTITION) {
                    {
                        setState(4669);
                        query_partition_clause();
                    }
                }

                setState(4676);
                _la = _input.LA(1);
                if (_la==ORDER) {
                    {
                        setState(4672);
                        order_by_clause();
                        setState(4674);
                        _la = _input.LA(1);
                        if (_la==RANGE || _la==ROWS) {
                            {
                                setState(4673);
                                windowing_clause();
                            }
                        }

                    }
                }

                setState(4678);
                match(RIGHT_PAREN);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Windowing_clauseContext extends ParserRuleContext {
        public Windowing_typeContext windowing_type() {
            return getRuleContext(Windowing_typeContext.class,0);
        }
        public TerminalNode BETWEEN() { return getToken(PlSqlParser.BETWEEN, 0); }
        public List<Windowing_elementsContext> windowing_elements() {
            return getRuleContexts(Windowing_elementsContext.class);
        }
        public Windowing_elementsContext windowing_elements(int i) {
            return getRuleContext(Windowing_elementsContext.class,i);
        }
        public TerminalNode AND() { return getToken(PlSqlParser.AND, 0); }
        public Windowing_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_windowing_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterWindowing_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitWindowing_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitWindowing_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Windowing_clauseContext windowing_clause() throws RecognitionException {
        Windowing_clauseContext _localctx = new Windowing_clauseContext(_ctx, getState());
        enterRule(_localctx, 604, RULE_windowing_clause);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4680);
                windowing_type();
                setState(4687);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,590,_ctx) ) {
                    case 1:
                    {
                        setState(4681);
                        match(BETWEEN);
                        setState(4682);
                        windowing_elements();
                        setState(4683);
                        match(AND);
                        setState(4684);
                        windowing_elements();
                    }
                    break;
                    case 2:
                    {
                        setState(4686);
                        windowing_elements();
                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Windowing_typeContext extends ParserRuleContext {
        public TerminalNode ROWS() { return getToken(PlSqlParser.ROWS, 0); }
        public TerminalNode RANGE() { return getToken(PlSqlParser.RANGE, 0); }
        public Windowing_typeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_windowing_type; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterWindowing_type(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitWindowing_type(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitWindowing_type(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Windowing_typeContext windowing_type() throws RecognitionException {
        Windowing_typeContext _localctx = new Windowing_typeContext(_ctx, getState());
        enterRule(_localctx, 606, RULE_windowing_type);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4689);
                _la = _input.LA(1);
                if ( !(_la==RANGE || _la==ROWS) ) {
                    _errHandler.recoverInline(this);
                } else {
                    consume();
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Windowing_elementsContext extends ParserRuleContext {
        public TerminalNode UNBOUNDED() { return getToken(PlSqlParser.UNBOUNDED, 0); }
        public TerminalNode PRECEDING() { return getToken(PlSqlParser.PRECEDING, 0); }
        public TerminalNode CURRENT() { return getToken(PlSqlParser.CURRENT, 0); }
        public TerminalNode ROW() { return getToken(PlSqlParser.ROW, 0); }
        public Concatenation_wrapperContext concatenation_wrapper() {
            return getRuleContext(Concatenation_wrapperContext.class,0);
        }
        public TerminalNode FOLLOWING() { return getToken(PlSqlParser.FOLLOWING, 0); }
        public Windowing_elementsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_windowing_elements; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterWindowing_elements(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitWindowing_elements(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitWindowing_elements(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Windowing_elementsContext windowing_elements() throws RecognitionException {
        Windowing_elementsContext _localctx = new Windowing_elementsContext(_ctx, getState());
        enterRule(_localctx, 608, RULE_windowing_elements);
        int _la;
        try {
            setState(4698);
            _errHandler.sync(this);
            switch ( getInterpreter().adaptivePredict(_input,591,_ctx) ) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(4691);
                    match(UNBOUNDED);
                    setState(4692);
                    match(PRECEDING);
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(4693);
                    match(CURRENT);
                    setState(4694);
                    match(ROW);
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(4695);
                    concatenation_wrapper();
                    setState(4696);
                    _la = _input.LA(1);
                    if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
                        _errHandler.recoverInline(this);
                    } else {
                        consume();
                    }
                }
                break;
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Using_clauseContext extends ParserRuleContext {
        public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
        public List<Using_elementContext> using_element() {
            return getRuleContexts(Using_elementContext.class);
        }
        public Using_elementContext using_element(int i) {
            return getRuleContext(Using_elementContext.class,i);
        }
        public Using_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_using_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterUsing_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitUsing_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitUsing_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Using_clauseContext using_clause() throws RecognitionException {
        Using_clauseContext _localctx = new Using_clauseContext(_ctx, getState());
        enterRule(_localctx, 610, RULE_using_clause);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(4700);
                match(USING);
                setState(4710);
                switch (_input.LA(1)) {
                    case ASTERISK:
                    {
                        setState(4701);
                        match(ASTERISK);
                    }
                    break;
                    case A_LETTER:
                    case ADD:
                    case AFTER:
                    case AGENT:
                    case AGGREGATE:
                    case ALL:
                    case ALTER:
                    case ANALYZE:
                    case AND:
                    case ANY:
                    case ARRAY:
                    case AS:
                    case ASC:
                    case ASSOCIATE:
                    case AT:
                    case ATTRIBUTE:
                    case AUDIT:
                    case AUTHID:
                    case AUTO:
                    case AUTOMATIC:
                    case AUTONOMOUS_TRANSACTION:
                    case BATCH:
                    case BEFORE:
                    case BEGIN:
                    case BETWEEN:
                    case BFILE:
                    case BINARY_DOUBLE:
                    case BINARY_FLOAT:
                    case BINARY_INTEGER:
                    case BLOB:
                    case BLOCK:
                    case BODY:
                    case BOOLEAN:
                    case BOTH:
                    case BREADTH:
                    case BULK:
                    case BY:
                    case BYTE:
                    case C_LETTER:
                    case CACHE:
                    case CALL:
                    case CANONICAL:
                    case CASCADE:
                    case CASE:
                    case CAST:
                    case CHAR:
                    case CHAR_CS:
                    case CHARACTER:
                    case CHECK:
                    case CHR:
                    case CLOB:
                    case CLOSE:
                    case CLUSTER:
                    case COLLECT:
                    case COLUMNS:
                    case COMMENT:
                    case COMMIT:
                    case COMMITTED:
                    case COMPATIBILITY:
                    case COMPILE:
                    case COMPOUND:
                    case CONNECT:
                    case CONNECT_BY_ROOT:
                    case CONSTANT:
                    case CONSTRAINT:
                    case CONSTRAINTS:
                    case CONSTRUCTOR:
                    case CONTENT:
                    case CONTEXT:
                    case CONTINUE:
                    case CONVERT:
                    case CORRUPT_XID:
                    case CORRUPT_XID_ALL:
                    case COST:
                    case COUNT:
                    case CREATE:
                    case CROSS:
                    case CUBE:
                    case CURRENT:
                    case CURRENT_USER:
                    case CURSOR:
                    case CUSTOMDATUM:
                    case CYCLE:
                    case DATA:
                    case DATABASE:
                    case DATE:
                    case DAY:
                    case DB_ROLE_CHANGE:
                    case DBTIMEZONE:
                    case DDL:
                    case DEBUG:
                    case DEC:
                    case DECIMAL:
                    case DECLARE:
                    case DECOMPOSE:
                    case DECREMENT:
                    case DEFAULT:
                    case DEFAULTS:
                    case DEFERRED:
                    case DEFINER:
                    case DELETE:
                    case DEPTH:
                    case DESC:
                    case DETERMINISTIC:
                    case DIMENSION:
                    case DISABLE:
                    case DISASSOCIATE:
                    case DISTINCT:
                    case DOCUMENT:
                    case DOUBLE:
                    case DROP:
                    case DSINTERVAL_UNCONSTRAINED:
                    case EACH:
                    case ELEMENT:
                    case ELSE:
                    case ELSIF:
                    case EMPTY:
                    case ENABLE:
                    case ENCODING:
                    case END:
                    case ENTITYESCAPING:
                    case ERRORS:
                    case ESCAPE:
                    case EXCEPT:
                    case EVALNAME:
                    case EXCEPTION:
                    case EXCEPTION_INIT:
                    case EXCEPTIONS:
                    case EXCLUDE:
                    case EXCLUSIVE:
                    case EXECUTE:
                    case EXISTS:
                    case EXIT:
                    case EXPLAIN:
                    case EXTERNAL:
                    case EXTRACT:
                    case FAILURE:
                    case FALSE:
                    case FETCH:
                    case FINAL:
                    case FIRST:
                    case FIRST_VALUE:
                    case FLOAT:
                    case FOLLOWING:
                    case FOLLOWS:
                    case FOR:
                    case FORALL:
                    case FORCE:
                    case FROM:
                    case FULL:
                    case FUNCTION:
                    case GOTO:
                    case GRANT:
                    case GROUP:
                    case GROUPING:
                    case HASH:
                    case HAVING:
                    case HIDE:
                    case HOUR:
                    case IF:
                    case IGNORE:
                    case IMMEDIATE:
                    case IN:
                    case INCLUDE:
                    case INCLUDING:
                    case INCREMENT:
                    case INDENT:
                    case INDEX:
                    case INDEXED:
                    case INDICATOR:
                    case INDICES:
                    case INFINITE:
                    case INLINE:
                    case INNER:
                    case INOUT:
                    case INSERT:
                    case INSTANTIABLE:
                    case INSTEAD:
                    case INT:
                    case INTEGER:
                    case INTERSECT:
                    case INTERVAL:
                    case INTO:
                    case INVALIDATE:
                    case IS:
                    case ISOLATION:
                    case ITERATE:
                    case JAVA:
                    case JOIN:
                    case KEEP:
                    case LANGUAGE:
                    case LAST:
                    case LAST_VALUE:
                    case LEADING:
                    case LEFT:
                    case LEVEL:
                    case LIBRARY:
                    case LIKE:
                    case LIKE2:
                    case LIKE4:
                    case LIKEC:
                    case LIMIT:
                    case LOCAL:
                    case LOCK:
                    case LOCKED:
                    case LOG:
                    case LOGOFF:
                    case LOGON:
                    case LONG:
                    case LOOP:
                    case MAIN:
                    case MAP:
                    case MATCHED:
                    case MAXVALUE:
                    case MEASURES:
                    case MEMBER:
                    case MERGE:
                    case MINUS:
                    case MINUTE:
                    case MINVALUE:
                    case MLSLABEL:
                    case MOD:
                    case MODE:
                    case MODEL:
                    case MODIFY:
                    case MONTH:
                    case MULTISET:
                    case NAME:
                    case NAN:
                    case NATURAL:
                    case NATURALN:
                    case NAV:
                    case NCHAR:
                    case NCHAR_CS:
                    case NCLOB:
                    case NESTED:
                    case NEW:
                    case NO:
                    case NOAUDIT:
                    case NOCACHE:
                    case NOCOPY:
                    case NOCYCLE:
                    case NOENTITYESCAPING:
                    case NOMAXVALUE:
                    case NOMINVALUE:
                    case NONE:
                    case NOORDER:
                    case NOSCHEMACHECK:
                    case NOT:
                    case NOWAIT:
                    case NULL:
                    case NULLS:
                    case NUMBER:
                    case NUMERIC:
                    case NVARCHAR2:
                    case OBJECT:
                    case OF:
                    case OFF:
                    case OID:
                    case OLD:
                    case ON:
                    case ONLY:
                    case OPEN:
                    case OPTION:
                    case OR:
                    case ORADATA:
                    case ORDER:
                    case ORDINALITY:
                    case OSERROR:
                    case OUT:
                    case OUTER:
                    case OVER:
                    case OVERRIDING:
                    case PACKAGE:
                    case PARALLEL_ENABLE:
                    case PARAMETERS:
                    case PARENT:
                    case PARTITION:
                    case PASSING:
                    case PATH:
                    case PIPELINED:
                    case PIVOT:
                    case PLAN:
                    case PLS_INTEGER:
                    case POSITIVE:
                    case POSITIVEN:
                    case PRAGMA:
                    case PRECEDING:
                    case PRECISION:
                    case PRESENT:
                    case PRIOR:
                    case PROCEDURE:
                    case RAISE:
                    case RANGE:
                    case RAW:
                    case READ:
                    case REAL:
                    case RECORD:
                    case REF:
                    case REFERENCE:
                    case REFERENCING:
                    case REJECT:
                    case RELIES_ON:
                    case RENAME:
                    case REPLACE:
                    case RESPECT:
                    case RESTRICT_REFERENCES:
                    case RESULT:
                    case RESULT_CACHE:
                    case RETURN:
                    case RETURNING:
                    case REUSE:
                    case REVERSE:
                    case REVOKE:
                    case RIGHT:
                    case ROLLBACK:
                    case ROLLUP:
                    case ROW:
                    case ROWID:
                    case ROWS:
                    case RULES:
                    case SAMPLE:
                    case SAVE:
                    case SAVEPOINT:
                    case SCHEMA:
                    case SCHEMACHECK:
                    case SCN:
                    case SEARCH:
                    case SECOND:
                    case SEED:
                    case SEGMENT:
                    case SELECT:
                    case SELF:
                    case SEQUENCE:
                    case SEQUENTIAL:
                    case SERIALIZABLE:
                    case SERIALLY_REUSABLE:
                    case SERVERERROR:
                    case SESSIONTIMEZONE:
                    case SET:
                    case SETS:
                    case SETTINGS:
                    case SHARE:
                    case SHOW:
                    case SHUTDOWN:
                    case SIBLINGS:
                    case SIGNTYPE:
                    case SIMPLE_INTEGER:
                    case SINGLE:
                    case SIZE:
                    case SKIP_:
                    case SMALLINT:
                    case SNAPSHOT:
                    case SOME:
                    case SPECIFICATION:
                    case SQLDATA:
                    case SQLERROR:
                    case SQL_PERCENT_ROWCOUNT:
                    case STANDALONE:
                    case START:
                    case STARTUP:
                    case STATEMENT:
                    case STATEMENT_ID:
                    case STATIC:
                    case STATISTICS:
                    case STRING:
                    case SUBMULTISET:
                    case SUBPARTITION:
                    case SUBSTITUTABLE:
                    case SUBTYPE:
                    case SUCCESS:
                    case SUSPEND:
                    case TABLE:
                    case THE:
                    case THEN:
                    case TIME:
                    case TIMESTAMP:
                    case TIMESTAMP_LTZ_UNCONSTRAINED:
                    case TIMESTAMP_TZ_UNCONSTRAINED:
                    case TIMESTAMP_UNCONSTRAINED:
                    case TIMEZONE_ABBR:
                    case TIMEZONE_HOUR:
                    case TIMEZONE_MINUTE:
                    case TIMEZONE_REGION:
                    case TO:
                    case TO_CHAR:
                    case TO_NUMBER:
                    case TRAILING:
                    case TRANSACTION:
                    case TRANSLATE:
                    case TREAT:
                    case TRIGGER:
                    case TRIM:
                    case TRUE:
                    case TRUNCATE:
                    case TYPE:
                    case UNBOUNDED:
                    case UNDER:
                    case UNION:
                    case UNIQUE:
                    case UNLIMITED:
                    case UNPIVOT:
                    case UNTIL:
                    case UPDATE:
                    case UPDATED:
                    case UPSERT:
                    case UROWID:
                    case USE:
                    case USING:
                    case VALIDATE:
                    case VALUE:
                    case VALUES:
                    case VARCHAR:
                    case VARCHAR2:
                    case VARIABLE:
                    case VARRAY:
                    case VARYING:
                    case VERSION:
                    case VERSIONS:
                    case WAIT:
                    case WARNING:
                    case WELLFORMED:
                    case WHEN:
                    case WHENEVER:
                    case WHERE:
                    case WHILE:
                    case WITH:
                    case WITHIN:
                    case WORK:
                    case WRITE:
                    case XML:
                    case XMLAGG:
                    case XMLATTRIBUTES:
                    case XMLCAST:
                    case XMLCOLATTVAL:
                    case XMLELEMENT:
                    case XMLEXISTS:
                    case XMLFOREST:
                    case XMLNAMESPACES:
                    case XMLPARSE:
                    case XMLPI:
                    case XMLQUERY:
                    case XMLROOT:
                    case XMLSERIALIZE:
                    case XMLTABLE:
                    case YEAR:
                    case YES:
                    case YMINTERVAL_UNCONSTRAINED:
                    case ZONE:
                    case PREDICTION:
                    case PREDICTION_BOUNDS:
                    case PREDICTION_COST:
                    case PREDICTION_DETAILS:
                    case PREDICTION_PROBABILITY:
                    case PREDICTION_SET:
                    case CUME_DIST:
                    case DENSE_RANK:
                    case LISTAGG:
                    case PERCENT_RANK:
                    case PERCENTILE_CONT:
                    case PERCENTILE_DISC:
                    case RANK:
                    case AVG:
                    case CORR:
                    case LAG:
                    case LEAD:
                    case MAX:
                    case MEDIAN:
                    case MIN:
                    case NTILE:
                    case RATIO_TO_REPORT:
                    case ROW_NUMBER:
                    case SUM:
                    case VARIANCE:
                    case REGR_:
                    case STDDEV:
                    case VAR_:
                    case COVAR_:
                    case NATIONAL_CHAR_STRING_LIT:
                    case UNSIGNED_INTEGER:
                    case APPROXIMATE_NUM_LIT:
                    case CHAR_STRING:
                    case DELIMITED_ID:
                    case LEFT_PAREN:
                    case PLUS_SIGN:
                    case MINUS_SIGN:
                    case BINDVAR:
                    case COLON:
                    case INTRODUCER:
                    case REGULAR_ID:
                    {
                        setState(4702);
                        using_element();
                        setState(4707);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input,592,_ctx);
                        while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
                            if ( _alt==1 ) {
                                {
                                    {
                                        setState(4703);
                                        match(COMMA);
                                        setState(4704);
                                        using_element();
                                    }
                                }
                            }
                            setState(4709);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input,592,_ctx);
                        }
                    }
                    break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Using_elementContext extends ParserRuleContext {
        public Select_list_elementsContext select_list_elements() {
            return getRuleContext(Select_list_elementsContext.class,0);
        }
        public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
        public TerminalNode OUT() { return getToken(PlSqlParser.OUT, 0); }
        public Column_aliasContext column_alias() {
            return getRuleContext(Column_aliasContext.class,0);
        }
        public Using_elementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_using_element; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterUsing_element(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitUsing_element(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitUsing_element(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Using_elementContext using_element() throws RecognitionException {
        Using_elementContext _localctx = new Using_elementContext(_ctx, getState());
        enterRule(_localctx, 612, RULE_using_element);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4717);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,595,_ctx) ) {
                    case 1:
                    {
                        setState(4712);
                        match(IN);
                        setState(4714);
                        _errHandler.sync(this);
                        switch ( getInterpreter().adaptivePredict(_input,594,_ctx) ) {
                            case 1:
                            {
                                setState(4713);
                                match(OUT);
                            }
                            break;
                        }
                    }
                    break;
                    case 2:
                    {
                        setState(4716);
                        match(OUT);
                    }
                    break;
                }
                setState(4719);
                select_list_elements();
                setState(4721);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,596,_ctx) ) {
                    case 1:
                    {
                        setState(4720);
                        column_alias();
                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Collect_order_by_partContext extends ParserRuleContext {
        public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
        public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
        public Concatenation_wrapperContext concatenation_wrapper() {
            return getRuleContext(Concatenation_wrapperContext.class,0);
        }
        public Collect_order_by_partContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_collect_order_by_part; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCollect_order_by_part(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCollect_order_by_part(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCollect_order_by_part(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Collect_order_by_partContext collect_order_by_part() throws RecognitionException {
        Collect_order_by_partContext _localctx = new Collect_order_by_partContext(_ctx, getState());
        enterRule(_localctx, 614, RULE_collect_order_by_part);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4723);
                match(ORDER);
                setState(4724);
                match(BY);
                setState(4725);
                concatenation_wrapper();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Within_or_over_partContext extends ParserRuleContext {
        public TerminalNode WITHIN() { return getToken(PlSqlParser.WITHIN, 0); }
        public TerminalNode GROUP() { return getToken(PlSqlParser.GROUP, 0); }
        public Order_by_clauseContext order_by_clause() {
            return getRuleContext(Order_by_clauseContext.class,0);
        }
        public Over_clauseContext over_clause() {
            return getRuleContext(Over_clauseContext.class,0);
        }
        public Within_or_over_partContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_within_or_over_part; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterWithin_or_over_part(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitWithin_or_over_part(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitWithin_or_over_part(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Within_or_over_partContext within_or_over_part() throws RecognitionException {
        Within_or_over_partContext _localctx = new Within_or_over_partContext(_ctx, getState());
        enterRule(_localctx, 616, RULE_within_or_over_part);
        try {
            setState(4734);
            switch (_input.LA(1)) {
                case WITHIN:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(4727);
                    match(WITHIN);
                    setState(4728);
                    match(GROUP);
                    setState(4729);
                    match(LEFT_PAREN);
                    setState(4730);
                    order_by_clause();
                    setState(4731);
                    match(RIGHT_PAREN);
                }
                break;
                case OVER:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(4733);
                    over_clause();
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Cost_matrix_clauseContext extends ParserRuleContext {
        public TerminalNode COST() { return getToken(PlSqlParser.COST, 0); }
        public TerminalNode MODEL() { return getToken(PlSqlParser.MODEL, 0); }
        public List<Cost_class_nameContext> cost_class_name() {
            return getRuleContexts(Cost_class_nameContext.class);
        }
        public Cost_class_nameContext cost_class_name(int i) {
            return getRuleContext(Cost_class_nameContext.class,i);
        }
        public TerminalNode VALUES() { return getToken(PlSqlParser.VALUES, 0); }
        public Expression_listContext expression_list() {
            return getRuleContext(Expression_listContext.class,0);
        }
        public TerminalNode AUTO() { return getToken(PlSqlParser.AUTO, 0); }
        public Cost_matrix_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_cost_matrix_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCost_matrix_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCost_matrix_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCost_matrix_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Cost_matrix_clauseContext cost_matrix_clause() throws RecognitionException {
        Cost_matrix_clauseContext _localctx = new Cost_matrix_clauseContext(_ctx, getState());
        enterRule(_localctx, 618, RULE_cost_matrix_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4736);
                match(COST);
                setState(4754);
                switch (_input.LA(1)) {
                    case MODEL:
                    {
                        setState(4737);
                        match(MODEL);
                        setState(4739);
                        _la = _input.LA(1);
                        if (_la==AUTO) {
                            {
                                setState(4738);
                                match(AUTO);
                            }
                        }

                    }
                    break;
                    case LEFT_PAREN:
                    {
                        setState(4741);
                        match(LEFT_PAREN);
                        setState(4742);
                        cost_class_name();
                        setState(4747);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la==COMMA) {
                            {
                                {
                                    setState(4743);
                                    match(COMMA);
                                    setState(4744);
                                    cost_class_name();
                                }
                            }
                            setState(4749);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                        setState(4750);
                        match(RIGHT_PAREN);
                        setState(4751);
                        match(VALUES);
                        setState(4752);
                        expression_list();
                    }
                    break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Xml_passing_clauseContext extends ParserRuleContext {
        public TerminalNode PASSING() { return getToken(PlSqlParser.PASSING, 0); }
        public List<Expression_wrapperContext> expression_wrapper() {
            return getRuleContexts(Expression_wrapperContext.class);
        }
        public Expression_wrapperContext expression_wrapper(int i) {
            return getRuleContext(Expression_wrapperContext.class,i);
        }
        public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
        public TerminalNode VALUE() { return getToken(PlSqlParser.VALUE, 0); }
        public List<Column_aliasContext> column_alias() {
            return getRuleContexts(Column_aliasContext.class);
        }
        public Column_aliasContext column_alias(int i) {
            return getRuleContext(Column_aliasContext.class,i);
        }
        public Xml_passing_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_xml_passing_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterXml_passing_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitXml_passing_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitXml_passing_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Xml_passing_clauseContext xml_passing_clause() throws RecognitionException {
        Xml_passing_clauseContext _localctx = new Xml_passing_clauseContext(_ctx, getState());
        enterRule(_localctx, 620, RULE_xml_passing_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4756);
                match(PASSING);
                setState(4759);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,601,_ctx) ) {
                    case 1:
                    {
                        setState(4757);
                        match(BY);
                        setState(4758);
                        match(VALUE);
                    }
                    break;
                }
                setState(4761);
                expression_wrapper();
                setState(4763);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,602,_ctx) ) {
                    case 1:
                    {
                        setState(4762);
                        column_alias();
                    }
                    break;
                }
                setState(4772);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==COMMA) {
                    {
                        {
                            setState(4765);
                            match(COMMA);
                            setState(4766);
                            expression_wrapper();
                            setState(4768);
                            _errHandler.sync(this);
                            switch ( getInterpreter().adaptivePredict(_input,603,_ctx) ) {
                                case 1:
                                {
                                    setState(4767);
                                    column_alias();
                                }
                                break;
                            }
                        }
                    }
                    setState(4774);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Xml_attributes_clauseContext extends ParserRuleContext {
        public TerminalNode XMLATTRIBUTES() { return getToken(PlSqlParser.XMLATTRIBUTES, 0); }
        public List<Xml_multiuse_expression_elementContext> xml_multiuse_expression_element() {
            return getRuleContexts(Xml_multiuse_expression_elementContext.class);
        }
        public Xml_multiuse_expression_elementContext xml_multiuse_expression_element(int i) {
            return getRuleContext(Xml_multiuse_expression_elementContext.class,i);
        }
        public TerminalNode ENTITYESCAPING() { return getToken(PlSqlParser.ENTITYESCAPING, 0); }
        public TerminalNode NOENTITYESCAPING() { return getToken(PlSqlParser.NOENTITYESCAPING, 0); }
        public TerminalNode SCHEMACHECK() { return getToken(PlSqlParser.SCHEMACHECK, 0); }
        public TerminalNode NOSCHEMACHECK() { return getToken(PlSqlParser.NOSCHEMACHECK, 0); }
        public Xml_attributes_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_xml_attributes_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterXml_attributes_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitXml_attributes_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitXml_attributes_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Xml_attributes_clauseContext xml_attributes_clause() throws RecognitionException {
        Xml_attributes_clauseContext _localctx = new Xml_attributes_clauseContext(_ctx, getState());
        enterRule(_localctx, 622, RULE_xml_attributes_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4775);
                match(XMLATTRIBUTES);
                setState(4776);
                match(LEFT_PAREN);
                setState(4778);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,605,_ctx) ) {
                    case 1:
                    {
                        setState(4777);
                        _la = _input.LA(1);
                        if ( !(_la==ENTITYESCAPING || _la==NOENTITYESCAPING) ) {
                            _errHandler.recoverInline(this);
                        } else {
                            consume();
                        }
                    }
                    break;
                }
                setState(4781);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,606,_ctx) ) {
                    case 1:
                    {
                        setState(4780);
                        _la = _input.LA(1);
                        if ( !(_la==NOSCHEMACHECK || _la==SCHEMACHECK) ) {
                            _errHandler.recoverInline(this);
                        } else {
                            consume();
                        }
                    }
                    break;
                }
                setState(4783);
                xml_multiuse_expression_element();
                setState(4788);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==COMMA) {
                    {
                        {
                            setState(4784);
                            match(COMMA);
                            setState(4785);
                            xml_multiuse_expression_element();
                        }
                    }
                    setState(4790);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(4791);
                match(RIGHT_PAREN);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Xml_namespaces_clauseContext extends ParserRuleContext {
        public TerminalNode XMLNAMESPACES() { return getToken(PlSqlParser.XMLNAMESPACES, 0); }
        public List<Concatenation_wrapperContext> concatenation_wrapper() {
            return getRuleContexts(Concatenation_wrapperContext.class);
        }
        public Concatenation_wrapperContext concatenation_wrapper(int i) {
            return getRuleContext(Concatenation_wrapperContext.class,i);
        }
        public List<Column_aliasContext> column_alias() {
            return getRuleContexts(Column_aliasContext.class);
        }
        public Column_aliasContext column_alias(int i) {
            return getRuleContext(Column_aliasContext.class,i);
        }
        public Xml_general_default_partContext xml_general_default_part() {
            return getRuleContext(Xml_general_default_partContext.class,0);
        }
        public Xml_namespaces_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_xml_namespaces_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterXml_namespaces_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitXml_namespaces_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitXml_namespaces_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Xml_namespaces_clauseContext xml_namespaces_clause() throws RecognitionException {
        Xml_namespaces_clauseContext _localctx = new Xml_namespaces_clauseContext(_ctx, getState());
        enterRule(_localctx, 624, RULE_xml_namespaces_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4793);
                match(XMLNAMESPACES);
                setState(4794);
                match(LEFT_PAREN);
                setState(4806);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,609,_ctx) ) {
                    case 1:
                    {
                        setState(4795);
                        concatenation_wrapper();
                        setState(4796);
                        column_alias();
                        setState(4803);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la==COMMA) {
                            {
                                {
                                    setState(4797);
                                    match(COMMA);
                                    setState(4798);
                                    concatenation_wrapper();
                                    setState(4799);
                                    column_alias();
                                }
                            }
                            setState(4805);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                    }
                    break;
                }
                setState(4809);
                _la = _input.LA(1);
                if (_la==DEFAULT) {
                    {
                        setState(4808);
                        xml_general_default_part();
                    }
                }

                setState(4811);
                match(RIGHT_PAREN);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Xml_table_columnContext extends ParserRuleContext {
        public Xml_column_nameContext xml_column_name() {
            return getRuleContext(Xml_column_nameContext.class,0);
        }
        public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
        public TerminalNode ORDINALITY() { return getToken(PlSqlParser.ORDINALITY, 0); }
        public Type_specContext type_spec() {
            return getRuleContext(Type_specContext.class,0);
        }
        public TerminalNode PATH() { return getToken(PlSqlParser.PATH, 0); }
        public Concatenation_wrapperContext concatenation_wrapper() {
            return getRuleContext(Concatenation_wrapperContext.class,0);
        }
        public Xml_general_default_partContext xml_general_default_part() {
            return getRuleContext(Xml_general_default_partContext.class,0);
        }
        public Xml_table_columnContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_xml_table_column; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterXml_table_column(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitXml_table_column(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitXml_table_column(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Xml_table_columnContext xml_table_column() throws RecognitionException {
        Xml_table_columnContext _localctx = new Xml_table_columnContext(_ctx, getState());
        enterRule(_localctx, 626, RULE_xml_table_column);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4813);
                xml_column_name();
                setState(4824);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,613,_ctx) ) {
                    case 1:
                    {
                        setState(4814);
                        match(FOR);
                        setState(4815);
                        match(ORDINALITY);
                    }
                    break;
                    case 2:
                    {
                        setState(4816);
                        type_spec();
                        setState(4819);
                        _la = _input.LA(1);
                        if (_la==PATH) {
                            {
                                setState(4817);
                                match(PATH);
                                setState(4818);
                                concatenation_wrapper();
                            }
                        }

                        setState(4822);
                        _la = _input.LA(1);
                        if (_la==DEFAULT) {
                            {
                                setState(4821);
                                xml_general_default_part();
                            }
                        }

                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Xml_general_default_partContext extends ParserRuleContext {
        public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
        public Concatenation_wrapperContext concatenation_wrapper() {
            return getRuleContext(Concatenation_wrapperContext.class,0);
        }
        public Xml_general_default_partContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_xml_general_default_part; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterXml_general_default_part(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitXml_general_default_part(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitXml_general_default_part(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Xml_general_default_partContext xml_general_default_part() throws RecognitionException {
        Xml_general_default_partContext _localctx = new Xml_general_default_partContext(_ctx, getState());
        enterRule(_localctx, 628, RULE_xml_general_default_part);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4826);
                match(DEFAULT);
                setState(4827);
                concatenation_wrapper();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Xml_multiuse_expression_elementContext extends ParserRuleContext {
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class,0);
        }
        public Id_expressionContext id_expression() {
            return getRuleContext(Id_expressionContext.class,0);
        }
        public TerminalNode EVALNAME() { return getToken(PlSqlParser.EVALNAME, 0); }
        public ConcatenationContext concatenation() {
            return getRuleContext(ConcatenationContext.class,0);
        }
        public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
        public Xml_multiuse_expression_elementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_xml_multiuse_expression_element; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterXml_multiuse_expression_element(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitXml_multiuse_expression_element(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitXml_multiuse_expression_element(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Xml_multiuse_expression_elementContext xml_multiuse_expression_element() throws RecognitionException {
        Xml_multiuse_expression_elementContext _localctx = new Xml_multiuse_expression_elementContext(_ctx, getState());
        enterRule(_localctx, 630, RULE_xml_multiuse_expression_element);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4829);
                expression();
                setState(4838);
                _la = _input.LA(1);
                if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ALTER) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREADTH) | (1L << BULK) | (1L << BY) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHECK) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DEPTH - 64)) | (1L << (DESC - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (ELSE - 64)) | (1L << (ELSIF - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (END - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EXCEPT - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXCLUSIVE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FETCH - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FOR - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GOTO - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HAVING - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IN - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEX - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERSECT - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTO - 192)) | (1L << (INVALIDATE - 192)) | (1L << (IS - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCK - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUS - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCACHE - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)) | (1L << (NOENTITYESCAPING - 192)) | (1L << (NOMAXVALUE - 192)) | (1L << (NOMINVALUE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NONE - 256)) | (1L << (NOORDER - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NOT - 256)) | (1L << (NOWAIT - 256)) | (1L << (NULL - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OF - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ON - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (OPTION - 256)) | (1L << (OR - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDER - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PIVOT - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (PRIOR - 256)) | (1L << (PROCEDURE - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (REVOKE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SEARCH - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELECT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENCE - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHARE - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (SQL_PERCENT_ROWCOUNT - 320)) | (1L << (STANDALONE - 320)) | (1L << (START - 320)) | (1L << (STARTUP - 320)) | (1L << (STATEMENT - 320)) | (1L << (STATEMENT_ID - 320)) | (1L << (STATIC - 320)) | (1L << (STATISTICS - 320)) | (1L << (STRING - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TABLE - 384)) | (1L << (THE - 384)) | (1L << (THEN - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TO - 384)) | (1L << (TO_CHAR - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUE - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNION - 384)) | (1L << (UNIQUE - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNPIVOT - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATE - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (USING - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VALUES - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHEN - 384)) | (1L << (WHENEVER - 384)) | (1L << (WHERE - 384)) | (1L << (WHILE - 384)) | (1L << (WITH - 384)) | (1L << (WITHIN - 384)) | (1L << (WORK - 384)) | (1L << (WRITE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)) | (1L << (REGR_ - 448)) | (1L << (STDDEV - 448)) | (1L << (VAR_ - 448)) | (1L << (COVAR_ - 448)) | (1L << (DELIMITED_ID - 448)))) != 0) || _la==REGULAR_ID) {
                    {
                        setState(4831);
                        _errHandler.sync(this);
                        switch ( getInterpreter().adaptivePredict(_input,614,_ctx) ) {
                            case 1:
                            {
                                setState(4830);
                                match(AS);
                            }
                            break;
                        }
                        setState(4836);
                        _errHandler.sync(this);
                        switch ( getInterpreter().adaptivePredict(_input,615,_ctx) ) {
                            case 1:
                            {
                                setState(4833);
                                id_expression();
                            }
                            break;
                            case 2:
                            {
                                setState(4834);
                                match(EVALNAME);
                                setState(4835);
                                concatenation();
                            }
                            break;
                        }
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Xmlroot_param_version_partContext extends ParserRuleContext {
        public TerminalNode VERSION() { return getToken(PlSqlParser.VERSION, 0); }
        public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
        public TerminalNode VALUE() { return getToken(PlSqlParser.VALUE, 0); }
        public Expression_wrapperContext expression_wrapper() {
            return getRuleContext(Expression_wrapperContext.class,0);
        }
        public Xmlroot_param_version_partContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_xmlroot_param_version_part; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterXmlroot_param_version_part(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitXmlroot_param_version_part(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitXmlroot_param_version_part(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Xmlroot_param_version_partContext xmlroot_param_version_part() throws RecognitionException {
        Xmlroot_param_version_partContext _localctx = new Xmlroot_param_version_partContext(_ctx, getState());
        enterRule(_localctx, 632, RULE_xmlroot_param_version_part);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4840);
                match(VERSION);
                setState(4844);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,617,_ctx) ) {
                    case 1:
                    {
                        setState(4841);
                        match(NO);
                        setState(4842);
                        match(VALUE);
                    }
                    break;
                    case 2:
                    {
                        setState(4843);
                        expression_wrapper();
                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Xmlroot_param_standalone_partContext extends ParserRuleContext {
        public TerminalNode STANDALONE() { return getToken(PlSqlParser.STANDALONE, 0); }
        public TerminalNode YES() { return getToken(PlSqlParser.YES, 0); }
        public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
        public TerminalNode VALUE() { return getToken(PlSqlParser.VALUE, 0); }
        public Xmlroot_param_standalone_partContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_xmlroot_param_standalone_part; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterXmlroot_param_standalone_part(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitXmlroot_param_standalone_part(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitXmlroot_param_standalone_part(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Xmlroot_param_standalone_partContext xmlroot_param_standalone_part() throws RecognitionException {
        Xmlroot_param_standalone_partContext _localctx = new Xmlroot_param_standalone_partContext(_ctx, getState());
        enterRule(_localctx, 634, RULE_xmlroot_param_standalone_part);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4846);
                match(STANDALONE);
                setState(4852);
                switch (_input.LA(1)) {
                    case YES:
                    {
                        setState(4847);
                        match(YES);
                    }
                    break;
                    case NO:
                    {
                        setState(4848);
                        match(NO);
                        setState(4850);
                        _la = _input.LA(1);
                        if (_la==VALUE) {
                            {
                                setState(4849);
                                match(VALUE);
                            }
                        }

                    }
                    break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Xmlserialize_param_enconding_partContext extends ParserRuleContext {
        public TerminalNode ENCODING() { return getToken(PlSqlParser.ENCODING, 0); }
        public Concatenation_wrapperContext concatenation_wrapper() {
            return getRuleContext(Concatenation_wrapperContext.class,0);
        }
        public Xmlserialize_param_enconding_partContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_xmlserialize_param_enconding_part; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterXmlserialize_param_enconding_part(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitXmlserialize_param_enconding_part(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitXmlserialize_param_enconding_part(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Xmlserialize_param_enconding_partContext xmlserialize_param_enconding_part() throws RecognitionException {
        Xmlserialize_param_enconding_partContext _localctx = new Xmlserialize_param_enconding_partContext(_ctx, getState());
        enterRule(_localctx, 636, RULE_xmlserialize_param_enconding_part);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4854);
                match(ENCODING);
                setState(4855);
                concatenation_wrapper();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Xmlserialize_param_version_partContext extends ParserRuleContext {
        public TerminalNode VERSION() { return getToken(PlSqlParser.VERSION, 0); }
        public Concatenation_wrapperContext concatenation_wrapper() {
            return getRuleContext(Concatenation_wrapperContext.class,0);
        }
        public Xmlserialize_param_version_partContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_xmlserialize_param_version_part; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterXmlserialize_param_version_part(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitXmlserialize_param_version_part(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitXmlserialize_param_version_part(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Xmlserialize_param_version_partContext xmlserialize_param_version_part() throws RecognitionException {
        Xmlserialize_param_version_partContext _localctx = new Xmlserialize_param_version_partContext(_ctx, getState());
        enterRule(_localctx, 638, RULE_xmlserialize_param_version_part);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4857);
                match(VERSION);
                setState(4858);
                concatenation_wrapper();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Xmlserialize_param_ident_partContext extends ParserRuleContext {
        public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
        public TerminalNode INDENT() { return getToken(PlSqlParser.INDENT, 0); }
        public TerminalNode SIZE() { return getToken(PlSqlParser.SIZE, 0); }
        public Concatenation_wrapperContext concatenation_wrapper() {
            return getRuleContext(Concatenation_wrapperContext.class,0);
        }
        public Xmlserialize_param_ident_partContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_xmlserialize_param_ident_part; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterXmlserialize_param_ident_part(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitXmlserialize_param_ident_part(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitXmlserialize_param_ident_part(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Xmlserialize_param_ident_partContext xmlserialize_param_ident_part() throws RecognitionException {
        Xmlserialize_param_ident_partContext _localctx = new Xmlserialize_param_ident_partContext(_ctx, getState());
        enterRule(_localctx, 640, RULE_xmlserialize_param_ident_part);
        int _la;
        try {
            setState(4868);
            switch (_input.LA(1)) {
                case NO:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(4860);
                    match(NO);
                    setState(4861);
                    match(INDENT);
                }
                break;
                case INDENT:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(4862);
                    match(INDENT);
                    setState(4866);
                    _la = _input.LA(1);
                    if (_la==SIZE) {
                        {
                            setState(4863);
                            match(SIZE);
                            setState(4864);
                            match(EQUALS_OP);
                            setState(4865);
                            concatenation_wrapper();
                        }
                    }

                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Boolean_static_expressionContext extends ParserRuleContext {
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class,0);
        }
        public Boolean_static_expressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_boolean_static_expression; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterBoolean_static_expression(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitBoolean_static_expression(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitBoolean_static_expression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Boolean_static_expressionContext boolean_static_expression() throws RecognitionException {
        Boolean_static_expressionContext _localctx = new Boolean_static_expressionContext(_ctx, getState());
        enterRule(_localctx, 642, RULE_boolean_static_expression);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4870);
                expression();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Preprocessor_internal_statementContext extends ParserRuleContext {
        public List<Declare_specContext> declare_spec() {
            return getRuleContexts(Declare_specContext.class);
        }
        public Declare_specContext declare_spec(int i) {
            return getRuleContext(Declare_specContext.class,i);
        }
        public Seq_of_statementsContext seq_of_statements() {
            return getRuleContext(Seq_of_statementsContext.class,0);
        }
        public Sql_scriptContext sql_script() {
            return getRuleContext(Sql_scriptContext.class,0);
        }
        public Preprocessor_internal_statementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_preprocessor_internal_statement; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPreprocessor_internal_statement(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPreprocessor_internal_statement(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPreprocessor_internal_statement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Preprocessor_internal_statementContext preprocessor_internal_statement() throws RecognitionException {
        Preprocessor_internal_statementContext _localctx = new Preprocessor_internal_statementContext(_ctx, getState());
        enterRule(_localctx, 644, RULE_preprocessor_internal_statement);
        int _la;
        try {
            setState(4879);
            _errHandler.sync(this);
            switch ( getInterpreter().adaptivePredict(_input,623,_ctx) ) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(4873);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    do {
                        {
                            {
                                setState(4872);
                                declare_spec();
                            }
                        }
                        setState(4875);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                    } while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PP_IF) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ALTER) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREADTH) | (1L << BULK) | (1L << BY) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHECK) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DEPTH - 64)) | (1L << (DESC - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (ELSE - 64)) | (1L << (ELSIF - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (END - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EXCEPT - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXCLUSIVE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FETCH - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FOR - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GOTO - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HAVING - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IN - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEX - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERSECT - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTO - 192)) | (1L << (INVALIDATE - 192)) | (1L << (IS - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCK - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUS - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCACHE - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)) | (1L << (NOENTITYESCAPING - 192)) | (1L << (NOMAXVALUE - 192)) | (1L << (NOMINVALUE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NONE - 256)) | (1L << (NOORDER - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NOT - 256)) | (1L << (NOWAIT - 256)) | (1L << (NULL - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OF - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ON - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (OPTION - 256)) | (1L << (OR - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDER - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PIVOT - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (PRIOR - 256)) | (1L << (PROCEDURE - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (REVOKE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SEARCH - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELECT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENCE - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHARE - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (SQL_PERCENT_ROWCOUNT - 320)) | (1L << (STANDALONE - 320)) | (1L << (START - 320)) | (1L << (STARTUP - 320)) | (1L << (STATEMENT - 320)) | (1L << (STATEMENT_ID - 320)) | (1L << (STATIC - 320)) | (1L << (STATISTICS - 320)) | (1L << (STRING - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TABLE - 384)) | (1L << (THE - 384)) | (1L << (THEN - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TO - 384)) | (1L << (TO_CHAR - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUE - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNION - 384)) | (1L << (UNIQUE - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNPIVOT - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATE - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (USING - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VALUES - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHEN - 384)) | (1L << (WHENEVER - 384)) | (1L << (WHERE - 384)) | (1L << (WHILE - 384)) | (1L << (WITH - 384)) | (1L << (WITHIN - 384)) | (1L << (WORK - 384)) | (1L << (WRITE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)) | (1L << (REGR_ - 448)) | (1L << (STDDEV - 448)) | (1L << (VAR_ - 448)) | (1L << (COVAR_ - 448)) | (1L << (DELIMITED_ID - 448)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (BINDVAR - 518)) | (1L << (COLON - 518)) | (1L << (INTRODUCER - 518)))) != 0) || _la==REGULAR_ID );
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(4877);
                    seq_of_statements();
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(4878);
                    sql_script();
                }
                break;
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Preprocessor_statementContext extends ParserRuleContext {
        public TerminalNode PP_IF() { return getToken(PlSqlParser.PP_IF, 0); }
        public List<Boolean_static_expressionContext> boolean_static_expression() {
            return getRuleContexts(Boolean_static_expressionContext.class);
        }
        public Boolean_static_expressionContext boolean_static_expression(int i) {
            return getRuleContext(Boolean_static_expressionContext.class,i);
        }
        public List<TerminalNode> PP_THEN() { return getTokens(PlSqlParser.PP_THEN); }
        public TerminalNode PP_THEN(int i) {
            return getToken(PlSqlParser.PP_THEN, i);
        }
        public List<Preprocessor_internal_statementContext> preprocessor_internal_statement() {
            return getRuleContexts(Preprocessor_internal_statementContext.class);
        }
        public Preprocessor_internal_statementContext preprocessor_internal_statement(int i) {
            return getRuleContext(Preprocessor_internal_statementContext.class,i);
        }
        public TerminalNode PP_END() { return getToken(PlSqlParser.PP_END, 0); }
        public List<TerminalNode> PP_ELSIF() { return getTokens(PlSqlParser.PP_ELSIF); }
        public TerminalNode PP_ELSIF(int i) {
            return getToken(PlSqlParser.PP_ELSIF, i);
        }
        public TerminalNode PP_ELSE() { return getToken(PlSqlParser.PP_ELSE, 0); }
        public Preprocessor_statementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_preprocessor_statement; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPreprocessor_statement(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPreprocessor_statement(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPreprocessor_statement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Preprocessor_statementContext preprocessor_statement() throws RecognitionException {
        Preprocessor_statementContext _localctx = new Preprocessor_statementContext(_ctx, getState());
        enterRule(_localctx, 646, RULE_preprocessor_statement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4881);
                match(PP_IF);
                setState(4882);
                boolean_static_expression();
                setState(4883);
                match(PP_THEN);
                setState(4884);
                preprocessor_internal_statement();
                setState(4892);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==PP_ELSIF) {
                    {
                        {
                            setState(4885);
                            match(PP_ELSIF);
                            setState(4886);
                            boolean_static_expression();
                            setState(4887);
                            match(PP_THEN);
                            setState(4888);
                            preprocessor_internal_statement();
                        }
                    }
                    setState(4894);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(4897);
                _la = _input.LA(1);
                if (_la==PP_ELSE) {
                    {
                        setState(4895);
                        match(PP_ELSE);
                        setState(4896);
                        preprocessor_internal_statement();
                    }
                }

                setState(4899);
                match(PP_END);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Partition_extension_clauseContext extends ParserRuleContext {
        public Expression_listContext expression_list() {
            return getRuleContext(Expression_listContext.class,0);
        }
        public TerminalNode SUBPARTITION() { return getToken(PlSqlParser.SUBPARTITION, 0); }
        public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
        public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
        public Partition_extension_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_partition_extension_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPartition_extension_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPartition_extension_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPartition_extension_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Partition_extension_clauseContext partition_extension_clause() throws RecognitionException {
        Partition_extension_clauseContext _localctx = new Partition_extension_clauseContext(_ctx, getState());
        enterRule(_localctx, 648, RULE_partition_extension_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4901);
                _la = _input.LA(1);
                if ( !(_la==PARTITION || _la==SUBPARTITION) ) {
                    _errHandler.recoverInline(this);
                } else {
                    consume();
                }
                setState(4903);
                _la = _input.LA(1);
                if (_la==FOR) {
                    {
                        setState(4902);
                        match(FOR);
                    }
                }

                setState(4905);
                expression_list();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Column_aliasContext extends ParserRuleContext {
        public IdContext id() {
            return getRuleContext(IdContext.class,0);
        }
        public Alias_quoted_stringContext alias_quoted_string() {
            return getRuleContext(Alias_quoted_stringContext.class,0);
        }
        public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
        public Column_aliasContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_column_alias; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterColumn_alias(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitColumn_alias(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitColumn_alias(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Column_aliasContext column_alias() throws RecognitionException {
        Column_aliasContext _localctx = new Column_aliasContext(_ctx, getState());
        enterRule(_localctx, 650, RULE_column_alias);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4908);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,627,_ctx) ) {
                    case 1:
                    {
                        setState(4907);
                        match(AS);
                    }
                    break;
                }
                setState(4912);
                switch (_input.LA(1)) {
                    case A_LETTER:
                    case ADD:
                    case AFTER:
                    case AGENT:
                    case AGGREGATE:
                    case ALL:
                    case ALTER:
                    case ANALYZE:
                    case AND:
                    case ANY:
                    case ARRAY:
                    case AS:
                    case ASC:
                    case ASSOCIATE:
                    case AT:
                    case ATTRIBUTE:
                    case AUDIT:
                    case AUTHID:
                    case AUTO:
                    case AUTOMATIC:
                    case AUTONOMOUS_TRANSACTION:
                    case BATCH:
                    case BEFORE:
                    case BEGIN:
                    case BETWEEN:
                    case BFILE:
                    case BINARY_DOUBLE:
                    case BINARY_FLOAT:
                    case BINARY_INTEGER:
                    case BLOB:
                    case BLOCK:
                    case BODY:
                    case BOOLEAN:
                    case BOTH:
                    case BREADTH:
                    case BULK:
                    case BY:
                    case BYTE:
                    case C_LETTER:
                    case CACHE:
                    case CALL:
                    case CANONICAL:
                    case CASCADE:
                    case CASE:
                    case CAST:
                    case CHAR:
                    case CHAR_CS:
                    case CHARACTER:
                    case CHECK:
                    case CHR:
                    case CLOB:
                    case CLOSE:
                    case CLUSTER:
                    case COLLECT:
                    case COLUMNS:
                    case COMMENT:
                    case COMMIT:
                    case COMMITTED:
                    case COMPATIBILITY:
                    case COMPILE:
                    case COMPOUND:
                    case CONNECT:
                    case CONNECT_BY_ROOT:
                    case CONSTANT:
                    case CONSTRAINT:
                    case CONSTRAINTS:
                    case CONSTRUCTOR:
                    case CONTENT:
                    case CONTEXT:
                    case CONTINUE:
                    case CONVERT:
                    case CORRUPT_XID:
                    case CORRUPT_XID_ALL:
                    case COST:
                    case COUNT:
                    case CREATE:
                    case CROSS:
                    case CUBE:
                    case CURRENT:
                    case CURRENT_USER:
                    case CURSOR:
                    case CUSTOMDATUM:
                    case CYCLE:
                    case DATA:
                    case DATABASE:
                    case DATE:
                    case DAY:
                    case DB_ROLE_CHANGE:
                    case DBTIMEZONE:
                    case DDL:
                    case DEBUG:
                    case DEC:
                    case DECIMAL:
                    case DECLARE:
                    case DECOMPOSE:
                    case DECREMENT:
                    case DEFAULT:
                    case DEFAULTS:
                    case DEFERRED:
                    case DEFINER:
                    case DELETE:
                    case DEPTH:
                    case DESC:
                    case DETERMINISTIC:
                    case DIMENSION:
                    case DISABLE:
                    case DISASSOCIATE:
                    case DISTINCT:
                    case DOCUMENT:
                    case DOUBLE:
                    case DROP:
                    case DSINTERVAL_UNCONSTRAINED:
                    case EACH:
                    case ELEMENT:
                    case ELSE:
                    case ELSIF:
                    case EMPTY:
                    case ENABLE:
                    case ENCODING:
                    case END:
                    case ENTITYESCAPING:
                    case ERRORS:
                    case ESCAPE:
                    case EXCEPT:
                    case EVALNAME:
                    case EXCEPTION:
                    case EXCEPTION_INIT:
                    case EXCEPTIONS:
                    case EXCLUDE:
                    case EXCLUSIVE:
                    case EXECUTE:
                    case EXISTS:
                    case EXIT:
                    case EXPLAIN:
                    case EXTERNAL:
                    case EXTRACT:
                    case FAILURE:
                    case FALSE:
                    case FETCH:
                    case FINAL:
                    case FIRST:
                    case FIRST_VALUE:
                    case FLOAT:
                    case FOLLOWING:
                    case FOLLOWS:
                    case FOR:
                    case FORALL:
                    case FORCE:
                    case FROM:
                    case FULL:
                    case FUNCTION:
                    case GOTO:
                    case GRANT:
                    case GROUP:
                    case GROUPING:
                    case HASH:
                    case HAVING:
                    case HIDE:
                    case HOUR:
                    case IF:
                    case IGNORE:
                    case IMMEDIATE:
                    case IN:
                    case INCLUDE:
                    case INCLUDING:
                    case INCREMENT:
                    case INDENT:
                    case INDEX:
                    case INDEXED:
                    case INDICATOR:
                    case INDICES:
                    case INFINITE:
                    case INLINE:
                    case INNER:
                    case INOUT:
                    case INSERT:
                    case INSTANTIABLE:
                    case INSTEAD:
                    case INT:
                    case INTEGER:
                    case INTERSECT:
                    case INTERVAL:
                    case INTO:
                    case INVALIDATE:
                    case IS:
                    case ISOLATION:
                    case ITERATE:
                    case JAVA:
                    case JOIN:
                    case KEEP:
                    case LANGUAGE:
                    case LAST:
                    case LAST_VALUE:
                    case LEADING:
                    case LEFT:
                    case LEVEL:
                    case LIBRARY:
                    case LIKE:
                    case LIKE2:
                    case LIKE4:
                    case LIKEC:
                    case LIMIT:
                    case LOCAL:
                    case LOCK:
                    case LOCKED:
                    case LOG:
                    case LOGOFF:
                    case LOGON:
                    case LONG:
                    case LOOP:
                    case MAIN:
                    case MAP:
                    case MATCHED:
                    case MAXVALUE:
                    case MEASURES:
                    case MEMBER:
                    case MERGE:
                    case MINUS:
                    case MINUTE:
                    case MINVALUE:
                    case MLSLABEL:
                    case MODE:
                    case MODEL:
                    case MODIFY:
                    case MONTH:
                    case MULTISET:
                    case NAME:
                    case NAN:
                    case NATURAL:
                    case NATURALN:
                    case NAV:
                    case NCHAR:
                    case NCHAR_CS:
                    case NCLOB:
                    case NESTED:
                    case NEW:
                    case NO:
                    case NOAUDIT:
                    case NOCACHE:
                    case NOCOPY:
                    case NOCYCLE:
                    case NOENTITYESCAPING:
                    case NOMAXVALUE:
                    case NOMINVALUE:
                    case NONE:
                    case NOORDER:
                    case NOSCHEMACHECK:
                    case NOT:
                    case NOWAIT:
                    case NULL:
                    case NULLS:
                    case NUMBER:
                    case NUMERIC:
                    case NVARCHAR2:
                    case OBJECT:
                    case OF:
                    case OFF:
                    case OID:
                    case OLD:
                    case ON:
                    case ONLY:
                    case OPEN:
                    case OPTION:
                    case OR:
                    case ORADATA:
                    case ORDER:
                    case ORDINALITY:
                    case OSERROR:
                    case OUT:
                    case OUTER:
                    case OVER:
                    case OVERRIDING:
                    case PACKAGE:
                    case PARALLEL_ENABLE:
                    case PARAMETERS:
                    case PARENT:
                    case PARTITION:
                    case PASSING:
                    case PATH:
                    case PIPELINED:
                    case PIVOT:
                    case PLAN:
                    case PLS_INTEGER:
                    case POSITIVE:
                    case POSITIVEN:
                    case PRAGMA:
                    case PRECEDING:
                    case PRECISION:
                    case PRESENT:
                    case PRIOR:
                    case PROCEDURE:
                    case RAISE:
                    case RANGE:
                    case RAW:
                    case READ:
                    case REAL:
                    case RECORD:
                    case REF:
                    case REFERENCE:
                    case REFERENCING:
                    case REJECT:
                    case RELIES_ON:
                    case RENAME:
                    case REPLACE:
                    case RESPECT:
                    case RESTRICT_REFERENCES:
                    case RESULT:
                    case RESULT_CACHE:
                    case RETURN:
                    case RETURNING:
                    case REUSE:
                    case REVERSE:
                    case REVOKE:
                    case RIGHT:
                    case ROLLBACK:
                    case ROLLUP:
                    case ROW:
                    case ROWID:
                    case ROWS:
                    case RULES:
                    case SAMPLE:
                    case SAVE:
                    case SAVEPOINT:
                    case SCHEMA:
                    case SCHEMACHECK:
                    case SCN:
                    case SEARCH:
                    case SECOND:
                    case SEED:
                    case SEGMENT:
                    case SELECT:
                    case SELF:
                    case SEQUENCE:
                    case SEQUENTIAL:
                    case SERIALIZABLE:
                    case SERIALLY_REUSABLE:
                    case SERVERERROR:
                    case SESSIONTIMEZONE:
                    case SET:
                    case SETS:
                    case SETTINGS:
                    case SHARE:
                    case SHOW:
                    case SHUTDOWN:
                    case SIBLINGS:
                    case SIGNTYPE:
                    case SIMPLE_INTEGER:
                    case SINGLE:
                    case SIZE:
                    case SKIP_:
                    case SMALLINT:
                    case SNAPSHOT:
                    case SOME:
                    case SPECIFICATION:
                    case SQLDATA:
                    case SQLERROR:
                    case SQL_PERCENT_ROWCOUNT:
                    case STANDALONE:
                    case START:
                    case STARTUP:
                    case STATEMENT:
                    case STATEMENT_ID:
                    case STATIC:
                    case STATISTICS:
                    case STRING:
                    case SUBMULTISET:
                    case SUBPARTITION:
                    case SUBSTITUTABLE:
                    case SUBTYPE:
                    case SUCCESS:
                    case SUSPEND:
                    case TABLE:
                    case THE:
                    case THEN:
                    case TIME:
                    case TIMESTAMP:
                    case TIMESTAMP_LTZ_UNCONSTRAINED:
                    case TIMESTAMP_TZ_UNCONSTRAINED:
                    case TIMESTAMP_UNCONSTRAINED:
                    case TIMEZONE_ABBR:
                    case TIMEZONE_HOUR:
                    case TIMEZONE_MINUTE:
                    case TIMEZONE_REGION:
                    case TO:
                    case TO_CHAR:
                    case TRAILING:
                    case TRANSACTION:
                    case TRANSLATE:
                    case TREAT:
                    case TRIGGER:
                    case TRIM:
                    case TRUE:
                    case TRUNCATE:
                    case TYPE:
                    case UNBOUNDED:
                    case UNDER:
                    case UNION:
                    case UNIQUE:
                    case UNLIMITED:
                    case UNPIVOT:
                    case UNTIL:
                    case UPDATE:
                    case UPDATED:
                    case UPSERT:
                    case UROWID:
                    case USE:
                    case USING:
                    case VALIDATE:
                    case VALUE:
                    case VALUES:
                    case VARCHAR:
                    case VARCHAR2:
                    case VARIABLE:
                    case VARRAY:
                    case VARYING:
                    case VERSION:
                    case VERSIONS:
                    case WAIT:
                    case WARNING:
                    case WELLFORMED:
                    case WHEN:
                    case WHENEVER:
                    case WHERE:
                    case WHILE:
                    case WITH:
                    case WITHIN:
                    case WORK:
                    case WRITE:
                    case XML:
                    case XMLAGG:
                    case XMLATTRIBUTES:
                    case XMLCAST:
                    case XMLCOLATTVAL:
                    case XMLELEMENT:
                    case XMLEXISTS:
                    case XMLFOREST:
                    case XMLNAMESPACES:
                    case XMLPARSE:
                    case XMLPI:
                    case XMLQUERY:
                    case XMLROOT:
                    case XMLSERIALIZE:
                    case XMLTABLE:
                    case YEAR:
                    case YES:
                    case YMINTERVAL_UNCONSTRAINED:
                    case ZONE:
                    case PREDICTION:
                    case PREDICTION_BOUNDS:
                    case PREDICTION_COST:
                    case PREDICTION_DETAILS:
                    case PREDICTION_PROBABILITY:
                    case PREDICTION_SET:
                    case CUME_DIST:
                    case DENSE_RANK:
                    case LISTAGG:
                    case PERCENT_RANK:
                    case PERCENTILE_CONT:
                    case PERCENTILE_DISC:
                    case RANK:
                    case AVG:
                    case CORR:
                    case LAG:
                    case LEAD:
                    case MAX:
                    case MEDIAN:
                    case MIN:
                    case NTILE:
                    case RATIO_TO_REPORT:
                    case ROW_NUMBER:
                    case SUM:
                    case VARIANCE:
                    case REGR_:
                    case STDDEV:
                    case VAR_:
                    case COVAR_:
                    case DELIMITED_ID:
                    case INTRODUCER:
                    case REGULAR_ID:
                    {
                        setState(4910);
                        id();
                    }
                    break;
                    case NATIONAL_CHAR_STRING_LIT:
                    case CHAR_STRING:
                    {
                        setState(4911);
                        alias_quoted_string();
                    }
                    break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Table_aliasContext extends ParserRuleContext {
        public IdContext id() {
            return getRuleContext(IdContext.class,0);
        }
        public Alias_quoted_stringContext alias_quoted_string() {
            return getRuleContext(Alias_quoted_stringContext.class,0);
        }
        public Table_aliasContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_table_alias; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTable_alias(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTable_alias(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTable_alias(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Table_aliasContext table_alias() throws RecognitionException {
        Table_aliasContext _localctx = new Table_aliasContext(_ctx, getState());
        enterRule(_localctx, 652, RULE_table_alias);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4916);
                switch (_input.LA(1)) {
                    case A_LETTER:
                    case ADD:
                    case AFTER:
                    case AGENT:
                    case AGGREGATE:
                    case ALL:
                    case ALTER:
                    case ANALYZE:
                    case AND:
                    case ANY:
                    case ARRAY:
                    case AS:
                    case ASC:
                    case ASSOCIATE:
                    case AT:
                    case ATTRIBUTE:
                    case AUDIT:
                    case AUTHID:
                    case AUTO:
                    case AUTOMATIC:
                    case AUTONOMOUS_TRANSACTION:
                    case BATCH:
                    case BEFORE:
                    case BEGIN:
                    case BETWEEN:
                    case BFILE:
                    case BINARY_DOUBLE:
                    case BINARY_FLOAT:
                    case BINARY_INTEGER:
                    case BLOB:
                    case BLOCK:
                    case BODY:
                    case BOOLEAN:
                    case BOTH:
                    case BREADTH:
                    case BULK:
                    case BY:
                    case BYTE:
                    case C_LETTER:
                    case CACHE:
                    case CALL:
                    case CANONICAL:
                    case CASCADE:
                    case CASE:
                    case CAST:
                    case CHAR:
                    case CHAR_CS:
                    case CHARACTER:
                    case CHECK:
                    case CHR:
                    case CLOB:
                    case CLOSE:
                    case CLUSTER:
                    case COLLECT:
                    case COLUMNS:
                    case COMMENT:
                    case COMMIT:
                    case COMMITTED:
                    case COMPATIBILITY:
                    case COMPILE:
                    case COMPOUND:
                    case CONNECT:
                    case CONNECT_BY_ROOT:
                    case CONSTANT:
                    case CONSTRAINT:
                    case CONSTRAINTS:
                    case CONSTRUCTOR:
                    case CONTENT:
                    case CONTEXT:
                    case CONTINUE:
                    case CONVERT:
                    case CORRUPT_XID:
                    case CORRUPT_XID_ALL:
                    case COST:
                    case COUNT:
                    case CREATE:
                    case CROSS:
                    case CUBE:
                    case CURRENT:
                    case CURRENT_USER:
                    case CURSOR:
                    case CUSTOMDATUM:
                    case CYCLE:
                    case DATA:
                    case DATABASE:
                    case DATE:
                    case DAY:
                    case DB_ROLE_CHANGE:
                    case DBTIMEZONE:
                    case DDL:
                    case DEBUG:
                    case DEC:
                    case DECIMAL:
                    case DECLARE:
                    case DECOMPOSE:
                    case DECREMENT:
                    case DEFAULT:
                    case DEFAULTS:
                    case DEFERRED:
                    case DEFINER:
                    case DELETE:
                    case DEPTH:
                    case DESC:
                    case DETERMINISTIC:
                    case DIMENSION:
                    case DISABLE:
                    case DISASSOCIATE:
                    case DISTINCT:
                    case DOCUMENT:
                    case DOUBLE:
                    case DROP:
                    case DSINTERVAL_UNCONSTRAINED:
                    case EACH:
                    case ELEMENT:
                    case ELSE:
                    case ELSIF:
                    case EMPTY:
                    case ENABLE:
                    case ENCODING:
                    case END:
                    case ENTITYESCAPING:
                    case ERRORS:
                    case ESCAPE:
                    case EXCEPT:
                    case EVALNAME:
                    case EXCEPTION:
                    case EXCEPTION_INIT:
                    case EXCEPTIONS:
                    case EXCLUDE:
                    case EXCLUSIVE:
                    case EXECUTE:
                    case EXISTS:
                    case EXIT:
                    case EXPLAIN:
                    case EXTERNAL:
                    case EXTRACT:
                    case FAILURE:
                    case FALSE:
                    case FETCH:
                    case FINAL:
                    case FIRST:
                    case FIRST_VALUE:
                    case FLOAT:
                    case FOLLOWING:
                    case FOLLOWS:
                    case FOR:
                    case FORALL:
                    case FORCE:
                    case FROM:
                    case FULL:
                    case FUNCTION:
                    case GOTO:
                    case GRANT:
                    case GROUP:
                    case GROUPING:
                    case HASH:
                    case HAVING:
                    case HIDE:
                    case HOUR:
                    case IF:
                    case IGNORE:
                    case IMMEDIATE:
                    case IN:
                    case INCLUDE:
                    case INCLUDING:
                    case INCREMENT:
                    case INDENT:
                    case INDEX:
                    case INDEXED:
                    case INDICATOR:
                    case INDICES:
                    case INFINITE:
                    case INLINE:
                    case INNER:
                    case INOUT:
                    case INSERT:
                    case INSTANTIABLE:
                    case INSTEAD:
                    case INT:
                    case INTEGER:
                    case INTERSECT:
                    case INTERVAL:
                    case INTO:
                    case INVALIDATE:
                    case IS:
                    case ISOLATION:
                    case ITERATE:
                    case JAVA:
                    case JOIN:
                    case KEEP:
                    case LANGUAGE:
                    case LAST:
                    case LAST_VALUE:
                    case LEADING:
                    case LEFT:
                    case LEVEL:
                    case LIBRARY:
                    case LIKE:
                    case LIKE2:
                    case LIKE4:
                    case LIKEC:
                    case LIMIT:
                    case LOCAL:
                    case LOCK:
                    case LOCKED:
                    case LOG:
                    case LOGOFF:
                    case LOGON:
                    case LONG:
                    case LOOP:
                    case MAIN:
                    case MAP:
                    case MATCHED:
                    case MAXVALUE:
                    case MEASURES:
                    case MEMBER:
                    case MERGE:
                    case MINUS:
                    case MINUTE:
                    case MINVALUE:
                    case MLSLABEL:
                    case MODE:
                    case MODEL:
                    case MODIFY:
                    case MONTH:
                    case MULTISET:
                    case NAME:
                    case NAN:
                    case NATURAL:
                    case NATURALN:
                    case NAV:
                    case NCHAR:
                    case NCHAR_CS:
                    case NCLOB:
                    case NESTED:
                    case NEW:
                    case NO:
                    case NOAUDIT:
                    case NOCACHE:
                    case NOCOPY:
                    case NOCYCLE:
                    case NOENTITYESCAPING:
                    case NOMAXVALUE:
                    case NOMINVALUE:
                    case NONE:
                    case NOORDER:
                    case NOSCHEMACHECK:
                    case NOT:
                    case NOWAIT:
                    case NULL:
                    case NULLS:
                    case NUMBER:
                    case NUMERIC:
                    case NVARCHAR2:
                    case OBJECT:
                    case OF:
                    case OFF:
                    case OID:
                    case OLD:
                    case ON:
                    case ONLY:
                    case OPEN:
                    case OPTION:
                    case OR:
                    case ORADATA:
                    case ORDER:
                    case ORDINALITY:
                    case OSERROR:
                    case OUT:
                    case OUTER:
                    case OVER:
                    case OVERRIDING:
                    case PACKAGE:
                    case PARALLEL_ENABLE:
                    case PARAMETERS:
                    case PARENT:
                    case PARTITION:
                    case PASSING:
                    case PATH:
                    case PIPELINED:
                    case PIVOT:
                    case PLAN:
                    case PLS_INTEGER:
                    case POSITIVE:
                    case POSITIVEN:
                    case PRAGMA:
                    case PRECEDING:
                    case PRECISION:
                    case PRESENT:
                    case PRIOR:
                    case PROCEDURE:
                    case RAISE:
                    case RANGE:
                    case RAW:
                    case READ:
                    case REAL:
                    case RECORD:
                    case REF:
                    case REFERENCE:
                    case REFERENCING:
                    case REJECT:
                    case RELIES_ON:
                    case RENAME:
                    case REPLACE:
                    case RESPECT:
                    case RESTRICT_REFERENCES:
                    case RESULT:
                    case RESULT_CACHE:
                    case RETURN:
                    case RETURNING:
                    case REUSE:
                    case REVERSE:
                    case REVOKE:
                    case RIGHT:
                    case ROLLBACK:
                    case ROLLUP:
                    case ROW:
                    case ROWID:
                    case ROWS:
                    case RULES:
                    case SAMPLE:
                    case SAVE:
                    case SAVEPOINT:
                    case SCHEMA:
                    case SCHEMACHECK:
                    case SCN:
                    case SEARCH:
                    case SECOND:
                    case SEED:
                    case SEGMENT:
                    case SELECT:
                    case SELF:
                    case SEQUENCE:
                    case SEQUENTIAL:
                    case SERIALIZABLE:
                    case SERIALLY_REUSABLE:
                    case SERVERERROR:
                    case SESSIONTIMEZONE:
                    case SET:
                    case SETS:
                    case SETTINGS:
                    case SHARE:
                    case SHOW:
                    case SHUTDOWN:
                    case SIBLINGS:
                    case SIGNTYPE:
                    case SIMPLE_INTEGER:
                    case SINGLE:
                    case SIZE:
                    case SKIP_:
                    case SMALLINT:
                    case SNAPSHOT:
                    case SOME:
                    case SPECIFICATION:
                    case SQLDATA:
                    case SQLERROR:
                    case SQL_PERCENT_ROWCOUNT:
                    case STANDALONE:
                    case START:
                    case STARTUP:
                    case STATEMENT:
                    case STATEMENT_ID:
                    case STATIC:
                    case STATISTICS:
                    case STRING:
                    case SUBMULTISET:
                    case SUBPARTITION:
                    case SUBSTITUTABLE:
                    case SUBTYPE:
                    case SUCCESS:
                    case SUSPEND:
                    case TABLE:
                    case THE:
                    case THEN:
                    case TIME:
                    case TIMESTAMP:
                    case TIMESTAMP_LTZ_UNCONSTRAINED:
                    case TIMESTAMP_TZ_UNCONSTRAINED:
                    case TIMESTAMP_UNCONSTRAINED:
                    case TIMEZONE_ABBR:
                    case TIMEZONE_HOUR:
                    case TIMEZONE_MINUTE:
                    case TIMEZONE_REGION:
                    case TO:
                    case TO_CHAR:
                    case TRAILING:
                    case TRANSACTION:
                    case TRANSLATE:
                    case TREAT:
                    case TRIGGER:
                    case TRIM:
                    case TRUE:
                    case TRUNCATE:
                    case TYPE:
                    case UNBOUNDED:
                    case UNDER:
                    case UNION:
                    case UNIQUE:
                    case UNLIMITED:
                    case UNPIVOT:
                    case UNTIL:
                    case UPDATE:
                    case UPDATED:
                    case UPSERT:
                    case UROWID:
                    case USE:
                    case USING:
                    case VALIDATE:
                    case VALUE:
                    case VALUES:
                    case VARCHAR:
                    case VARCHAR2:
                    case VARIABLE:
                    case VARRAY:
                    case VARYING:
                    case VERSION:
                    case VERSIONS:
                    case WAIT:
                    case WARNING:
                    case WELLFORMED:
                    case WHEN:
                    case WHENEVER:
                    case WHERE:
                    case WHILE:
                    case WITH:
                    case WITHIN:
                    case WORK:
                    case WRITE:
                    case XML:
                    case XMLAGG:
                    case XMLATTRIBUTES:
                    case XMLCAST:
                    case XMLCOLATTVAL:
                    case XMLELEMENT:
                    case XMLEXISTS:
                    case XMLFOREST:
                    case XMLNAMESPACES:
                    case XMLPARSE:
                    case XMLPI:
                    case XMLQUERY:
                    case XMLROOT:
                    case XMLSERIALIZE:
                    case XMLTABLE:
                    case YEAR:
                    case YES:
                    case YMINTERVAL_UNCONSTRAINED:
                    case ZONE:
                    case PREDICTION:
                    case PREDICTION_BOUNDS:
                    case PREDICTION_COST:
                    case PREDICTION_DETAILS:
                    case PREDICTION_PROBABILITY:
                    case PREDICTION_SET:
                    case CUME_DIST:
                    case DENSE_RANK:
                    case LISTAGG:
                    case PERCENT_RANK:
                    case PERCENTILE_CONT:
                    case PERCENTILE_DISC:
                    case RANK:
                    case AVG:
                    case CORR:
                    case LAG:
                    case LEAD:
                    case MAX:
                    case MEDIAN:
                    case MIN:
                    case NTILE:
                    case RATIO_TO_REPORT:
                    case ROW_NUMBER:
                    case SUM:
                    case VARIANCE:
                    case REGR_:
                    case STDDEV:
                    case VAR_:
                    case COVAR_:
                    case DELIMITED_ID:
                    case INTRODUCER:
                    case REGULAR_ID:
                    {
                        setState(4914);
                        id();
                    }
                    break;
                    case NATIONAL_CHAR_STRING_LIT:
                    case CHAR_STRING:
                    {
                        setState(4915);
                        alias_quoted_string();
                    }
                    break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Alias_quoted_stringContext extends ParserRuleContext {
        public Quoted_stringContext quoted_string() {
            return getRuleContext(Quoted_stringContext.class,0);
        }
        public Alias_quoted_stringContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_alias_quoted_string; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAlias_quoted_string(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAlias_quoted_string(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAlias_quoted_string(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Alias_quoted_stringContext alias_quoted_string() throws RecognitionException {
        Alias_quoted_stringContext _localctx = new Alias_quoted_stringContext(_ctx, getState());
        enterRule(_localctx, 654, RULE_alias_quoted_string);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4918);
                quoted_string();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Where_clauseContext extends ParserRuleContext {
        public TerminalNode WHERE() { return getToken(PlSqlParser.WHERE, 0); }
        public Current_of_clauseContext current_of_clause() {
            return getRuleContext(Current_of_clauseContext.class,0);
        }
        public Condition_wrapperContext condition_wrapper() {
            return getRuleContext(Condition_wrapperContext.class,0);
        }
        public Where_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_where_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterWhere_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitWhere_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitWhere_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Where_clauseContext where_clause() throws RecognitionException {
        Where_clauseContext _localctx = new Where_clauseContext(_ctx, getState());
        enterRule(_localctx, 656, RULE_where_clause);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4920);
                match(WHERE);
                setState(4923);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,630,_ctx) ) {
                    case 1:
                    {
                        setState(4921);
                        current_of_clause();
                    }
                    break;
                    case 2:
                    {
                        setState(4922);
                        condition_wrapper();
                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Current_of_clauseContext extends ParserRuleContext {
        public TerminalNode CURRENT() { return getToken(PlSqlParser.CURRENT, 0); }
        public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
        public Cursor_nameContext cursor_name() {
            return getRuleContext(Cursor_nameContext.class,0);
        }
        public Current_of_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_current_of_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCurrent_of_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCurrent_of_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCurrent_of_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Current_of_clauseContext current_of_clause() throws RecognitionException {
        Current_of_clauseContext _localctx = new Current_of_clauseContext(_ctx, getState());
        enterRule(_localctx, 658, RULE_current_of_clause);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4925);
                match(CURRENT);
                setState(4926);
                match(OF);
                setState(4927);
                cursor_name();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Into_clause_variableContext extends ParserRuleContext {
        public Variable_nameContext variable_name() {
            return getRuleContext(Variable_nameContext.class,0);
        }
        public Collection_assoc_expressionContext collection_assoc_expression() {
            return getRuleContext(Collection_assoc_expressionContext.class,0);
        }
        public Into_clause_variableContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_into_clause_variable; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterInto_clause_variable(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitInto_clause_variable(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitInto_clause_variable(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Into_clause_variableContext into_clause_variable() throws RecognitionException {
        Into_clause_variableContext _localctx = new Into_clause_variableContext(_ctx, getState());
        enterRule(_localctx, 660, RULE_into_clause_variable);
        try {
            setState(4931);
            _errHandler.sync(this);
            switch ( getInterpreter().adaptivePredict(_input,631,_ctx) ) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(4929);
                    variable_name();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(4930);
                    collection_assoc_expression();
                }
                break;
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Into_clauseContext extends ParserRuleContext {
        public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
        public List<Into_clause_variableContext> into_clause_variable() {
            return getRuleContexts(Into_clause_variableContext.class);
        }
        public Into_clause_variableContext into_clause_variable(int i) {
            return getRuleContext(Into_clause_variableContext.class,i);
        }
        public TerminalNode BULK() { return getToken(PlSqlParser.BULK, 0); }
        public TerminalNode COLLECT() { return getToken(PlSqlParser.COLLECT, 0); }
        public Into_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_into_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterInto_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitInto_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitInto_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Into_clauseContext into_clause() throws RecognitionException {
        Into_clauseContext _localctx = new Into_clauseContext(_ctx, getState());
        enterRule(_localctx, 662, RULE_into_clause);
        int _la;
        try {
            setState(4953);
            switch (_input.LA(1)) {
                case INTO:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(4933);
                    match(INTO);
                    setState(4934);
                    into_clause_variable();
                    setState(4939);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    while (_la==COMMA) {
                        {
                            {
                                setState(4935);
                                match(COMMA);
                                setState(4936);
                                into_clause_variable();
                            }
                        }
                        setState(4941);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                    }
                }
                break;
                case BULK:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(4942);
                    match(BULK);
                    setState(4943);
                    match(COLLECT);
                    setState(4944);
                    match(INTO);
                    setState(4945);
                    into_clause_variable();
                    setState(4950);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    while (_la==COMMA) {
                        {
                            {
                                setState(4946);
                                match(COMMA);
                                setState(4947);
                                into_clause_variable();
                            }
                        }
                        setState(4952);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                    }
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Xml_column_nameContext extends ParserRuleContext {
        public IdContext id() {
            return getRuleContext(IdContext.class,0);
        }
        public Quoted_stringContext quoted_string() {
            return getRuleContext(Quoted_stringContext.class,0);
        }
        public Xml_column_nameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_xml_column_name; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterXml_column_name(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitXml_column_name(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitXml_column_name(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Xml_column_nameContext xml_column_name() throws RecognitionException {
        Xml_column_nameContext _localctx = new Xml_column_nameContext(_ctx, getState());
        enterRule(_localctx, 664, RULE_xml_column_name);
        try {
            setState(4957);
            switch (_input.LA(1)) {
                case A_LETTER:
                case ADD:
                case AFTER:
                case AGENT:
                case AGGREGATE:
                case ALL:
                case ALTER:
                case ANALYZE:
                case AND:
                case ANY:
                case ARRAY:
                case AS:
                case ASC:
                case ASSOCIATE:
                case AT:
                case ATTRIBUTE:
                case AUDIT:
                case AUTHID:
                case AUTO:
                case AUTOMATIC:
                case AUTONOMOUS_TRANSACTION:
                case BATCH:
                case BEFORE:
                case BEGIN:
                case BETWEEN:
                case BFILE:
                case BINARY_DOUBLE:
                case BINARY_FLOAT:
                case BINARY_INTEGER:
                case BLOB:
                case BLOCK:
                case BODY:
                case BOOLEAN:
                case BOTH:
                case BREADTH:
                case BULK:
                case BY:
                case BYTE:
                case C_LETTER:
                case CACHE:
                case CALL:
                case CANONICAL:
                case CASCADE:
                case CASE:
                case CAST:
                case CHAR:
                case CHAR_CS:
                case CHARACTER:
                case CHECK:
                case CHR:
                case CLOB:
                case CLOSE:
                case CLUSTER:
                case COLLECT:
                case COLUMNS:
                case COMMENT:
                case COMMIT:
                case COMMITTED:
                case COMPATIBILITY:
                case COMPILE:
                case COMPOUND:
                case CONNECT:
                case CONNECT_BY_ROOT:
                case CONSTANT:
                case CONSTRAINT:
                case CONSTRAINTS:
                case CONSTRUCTOR:
                case CONTENT:
                case CONTEXT:
                case CONTINUE:
                case CONVERT:
                case CORRUPT_XID:
                case CORRUPT_XID_ALL:
                case COST:
                case COUNT:
                case CREATE:
                case CROSS:
                case CUBE:
                case CURRENT:
                case CURRENT_USER:
                case CURSOR:
                case CUSTOMDATUM:
                case CYCLE:
                case DATA:
                case DATABASE:
                case DATE:
                case DAY:
                case DB_ROLE_CHANGE:
                case DBTIMEZONE:
                case DDL:
                case DEBUG:
                case DEC:
                case DECIMAL:
                case DECLARE:
                case DECOMPOSE:
                case DECREMENT:
                case DEFAULT:
                case DEFAULTS:
                case DEFERRED:
                case DEFINER:
                case DELETE:
                case DEPTH:
                case DESC:
                case DETERMINISTIC:
                case DIMENSION:
                case DISABLE:
                case DISASSOCIATE:
                case DISTINCT:
                case DOCUMENT:
                case DOUBLE:
                case DROP:
                case DSINTERVAL_UNCONSTRAINED:
                case EACH:
                case ELEMENT:
                case ELSE:
                case ELSIF:
                case EMPTY:
                case ENABLE:
                case ENCODING:
                case END:
                case ENTITYESCAPING:
                case ERRORS:
                case ESCAPE:
                case EXCEPT:
                case EVALNAME:
                case EXCEPTION:
                case EXCEPTION_INIT:
                case EXCEPTIONS:
                case EXCLUDE:
                case EXCLUSIVE:
                case EXECUTE:
                case EXISTS:
                case EXIT:
                case EXPLAIN:
                case EXTERNAL:
                case EXTRACT:
                case FAILURE:
                case FALSE:
                case FETCH:
                case FINAL:
                case FIRST:
                case FIRST_VALUE:
                case FLOAT:
                case FOLLOWING:
                case FOLLOWS:
                case FOR:
                case FORALL:
                case FORCE:
                case FROM:
                case FULL:
                case FUNCTION:
                case GOTO:
                case GRANT:
                case GROUP:
                case GROUPING:
                case HASH:
                case HAVING:
                case HIDE:
                case HOUR:
                case IF:
                case IGNORE:
                case IMMEDIATE:
                case IN:
                case INCLUDE:
                case INCLUDING:
                case INCREMENT:
                case INDENT:
                case INDEX:
                case INDEXED:
                case INDICATOR:
                case INDICES:
                case INFINITE:
                case INLINE:
                case INNER:
                case INOUT:
                case INSERT:
                case INSTANTIABLE:
                case INSTEAD:
                case INT:
                case INTEGER:
                case INTERSECT:
                case INTERVAL:
                case INTO:
                case INVALIDATE:
                case IS:
                case ISOLATION:
                case ITERATE:
                case JAVA:
                case JOIN:
                case KEEP:
                case LANGUAGE:
                case LAST:
                case LAST_VALUE:
                case LEADING:
                case LEFT:
                case LEVEL:
                case LIBRARY:
                case LIKE:
                case LIKE2:
                case LIKE4:
                case LIKEC:
                case LIMIT:
                case LOCAL:
                case LOCK:
                case LOCKED:
                case LOG:
                case LOGOFF:
                case LOGON:
                case LONG:
                case LOOP:
                case MAIN:
                case MAP:
                case MATCHED:
                case MAXVALUE:
                case MEASURES:
                case MEMBER:
                case MERGE:
                case MINUS:
                case MINUTE:
                case MINVALUE:
                case MLSLABEL:
                case MODE:
                case MODEL:
                case MODIFY:
                case MONTH:
                case MULTISET:
                case NAME:
                case NAN:
                case NATURAL:
                case NATURALN:
                case NAV:
                case NCHAR:
                case NCHAR_CS:
                case NCLOB:
                case NESTED:
                case NEW:
                case NO:
                case NOAUDIT:
                case NOCACHE:
                case NOCOPY:
                case NOCYCLE:
                case NOENTITYESCAPING:
                case NOMAXVALUE:
                case NOMINVALUE:
                case NONE:
                case NOORDER:
                case NOSCHEMACHECK:
                case NOT:
                case NOWAIT:
                case NULL:
                case NULLS:
                case NUMBER:
                case NUMERIC:
                case NVARCHAR2:
                case OBJECT:
                case OF:
                case OFF:
                case OID:
                case OLD:
                case ON:
                case ONLY:
                case OPEN:
                case OPTION:
                case OR:
                case ORADATA:
                case ORDER:
                case ORDINALITY:
                case OSERROR:
                case OUT:
                case OUTER:
                case OVER:
                case OVERRIDING:
                case PACKAGE:
                case PARALLEL_ENABLE:
                case PARAMETERS:
                case PARENT:
                case PARTITION:
                case PASSING:
                case PATH:
                case PIPELINED:
                case PIVOT:
                case PLAN:
                case PLS_INTEGER:
                case POSITIVE:
                case POSITIVEN:
                case PRAGMA:
                case PRECEDING:
                case PRECISION:
                case PRESENT:
                case PRIOR:
                case PROCEDURE:
                case RAISE:
                case RANGE:
                case RAW:
                case READ:
                case REAL:
                case RECORD:
                case REF:
                case REFERENCE:
                case REFERENCING:
                case REJECT:
                case RELIES_ON:
                case RENAME:
                case REPLACE:
                case RESPECT:
                case RESTRICT_REFERENCES:
                case RESULT:
                case RESULT_CACHE:
                case RETURN:
                case RETURNING:
                case REUSE:
                case REVERSE:
                case REVOKE:
                case RIGHT:
                case ROLLBACK:
                case ROLLUP:
                case ROW:
                case ROWID:
                case ROWS:
                case RULES:
                case SAMPLE:
                case SAVE:
                case SAVEPOINT:
                case SCHEMA:
                case SCHEMACHECK:
                case SCN:
                case SEARCH:
                case SECOND:
                case SEED:
                case SEGMENT:
                case SELECT:
                case SELF:
                case SEQUENCE:
                case SEQUENTIAL:
                case SERIALIZABLE:
                case SERIALLY_REUSABLE:
                case SERVERERROR:
                case SESSIONTIMEZONE:
                case SET:
                case SETS:
                case SETTINGS:
                case SHARE:
                case SHOW:
                case SHUTDOWN:
                case SIBLINGS:
                case SIGNTYPE:
                case SIMPLE_INTEGER:
                case SINGLE:
                case SIZE:
                case SKIP_:
                case SMALLINT:
                case SNAPSHOT:
                case SOME:
                case SPECIFICATION:
                case SQLDATA:
                case SQLERROR:
                case SQL_PERCENT_ROWCOUNT:
                case STANDALONE:
                case START:
                case STARTUP:
                case STATEMENT:
                case STATEMENT_ID:
                case STATIC:
                case STATISTICS:
                case STRING:
                case SUBMULTISET:
                case SUBPARTITION:
                case SUBSTITUTABLE:
                case SUBTYPE:
                case SUCCESS:
                case SUSPEND:
                case TABLE:
                case THE:
                case THEN:
                case TIME:
                case TIMESTAMP:
                case TIMESTAMP_LTZ_UNCONSTRAINED:
                case TIMESTAMP_TZ_UNCONSTRAINED:
                case TIMESTAMP_UNCONSTRAINED:
                case TIMEZONE_ABBR:
                case TIMEZONE_HOUR:
                case TIMEZONE_MINUTE:
                case TIMEZONE_REGION:
                case TO:
                case TO_CHAR:
                case TRAILING:
                case TRANSACTION:
                case TRANSLATE:
                case TREAT:
                case TRIGGER:
                case TRIM:
                case TRUE:
                case TRUNCATE:
                case TYPE:
                case UNBOUNDED:
                case UNDER:
                case UNION:
                case UNIQUE:
                case UNLIMITED:
                case UNPIVOT:
                case UNTIL:
                case UPDATE:
                case UPDATED:
                case UPSERT:
                case UROWID:
                case USE:
                case USING:
                case VALIDATE:
                case VALUE:
                case VALUES:
                case VARCHAR:
                case VARCHAR2:
                case VARIABLE:
                case VARRAY:
                case VARYING:
                case VERSION:
                case VERSIONS:
                case WAIT:
                case WARNING:
                case WELLFORMED:
                case WHEN:
                case WHENEVER:
                case WHERE:
                case WHILE:
                case WITH:
                case WITHIN:
                case WORK:
                case WRITE:
                case XML:
                case XMLAGG:
                case XMLATTRIBUTES:
                case XMLCAST:
                case XMLCOLATTVAL:
                case XMLELEMENT:
                case XMLEXISTS:
                case XMLFOREST:
                case XMLNAMESPACES:
                case XMLPARSE:
                case XMLPI:
                case XMLQUERY:
                case XMLROOT:
                case XMLSERIALIZE:
                case XMLTABLE:
                case YEAR:
                case YES:
                case YMINTERVAL_UNCONSTRAINED:
                case ZONE:
                case PREDICTION:
                case PREDICTION_BOUNDS:
                case PREDICTION_COST:
                case PREDICTION_DETAILS:
                case PREDICTION_PROBABILITY:
                case PREDICTION_SET:
                case CUME_DIST:
                case DENSE_RANK:
                case LISTAGG:
                case PERCENT_RANK:
                case PERCENTILE_CONT:
                case PERCENTILE_DISC:
                case RANK:
                case AVG:
                case CORR:
                case LAG:
                case LEAD:
                case MAX:
                case MEDIAN:
                case MIN:
                case NTILE:
                case RATIO_TO_REPORT:
                case ROW_NUMBER:
                case SUM:
                case VARIANCE:
                case REGR_:
                case STDDEV:
                case VAR_:
                case COVAR_:
                case DELIMITED_ID:
                case INTRODUCER:
                case REGULAR_ID:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(4955);
                    id();
                }
                break;
                case NATIONAL_CHAR_STRING_LIT:
                case CHAR_STRING:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(4956);
                    quoted_string();
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Cost_class_nameContext extends ParserRuleContext {
        public IdContext id() {
            return getRuleContext(IdContext.class,0);
        }
        public Cost_class_nameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_cost_class_name; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCost_class_name(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCost_class_name(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCost_class_name(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Cost_class_nameContext cost_class_name() throws RecognitionException {
        Cost_class_nameContext _localctx = new Cost_class_nameContext(_ctx, getState());
        enterRule(_localctx, 666, RULE_cost_class_name);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4959);
                id();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Attribute_nameContext extends ParserRuleContext {
        public IdContext id() {
            return getRuleContext(IdContext.class,0);
        }
        public Attribute_nameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_attribute_name; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAttribute_name(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAttribute_name(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAttribute_name(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Attribute_nameContext attribute_name() throws RecognitionException {
        Attribute_nameContext _localctx = new Attribute_nameContext(_ctx, getState());
        enterRule(_localctx, 668, RULE_attribute_name);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4961);
                id();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Savepoint_nameContext extends ParserRuleContext {
        public IdContext id() {
            return getRuleContext(IdContext.class,0);
        }
        public Savepoint_nameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_savepoint_name; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSavepoint_name(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSavepoint_name(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSavepoint_name(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Savepoint_nameContext savepoint_name() throws RecognitionException {
        Savepoint_nameContext _localctx = new Savepoint_nameContext(_ctx, getState());
        enterRule(_localctx, 670, RULE_savepoint_name);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4963);
                id();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Rollback_segment_nameContext extends ParserRuleContext {
        public IdContext id() {
            return getRuleContext(IdContext.class,0);
        }
        public Rollback_segment_nameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_rollback_segment_name; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterRollback_segment_name(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitRollback_segment_name(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitRollback_segment_name(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Rollback_segment_nameContext rollback_segment_name() throws RecognitionException {
        Rollback_segment_nameContext _localctx = new Rollback_segment_nameContext(_ctx, getState());
        enterRule(_localctx, 672, RULE_rollback_segment_name);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4965);
                id();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Table_var_nameContext extends ParserRuleContext {
        public IdContext id() {
            return getRuleContext(IdContext.class,0);
        }
        public Table_var_nameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_table_var_name; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTable_var_name(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTable_var_name(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTable_var_name(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Table_var_nameContext table_var_name() throws RecognitionException {
        Table_var_nameContext _localctx = new Table_var_nameContext(_ctx, getState());
        enterRule(_localctx, 674, RULE_table_var_name);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4967);
                id();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Schema_nameContext extends ParserRuleContext {
        public IdContext id() {
            return getRuleContext(IdContext.class,0);
        }
        public Schema_nameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_schema_name; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSchema_name(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSchema_name(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSchema_name(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Schema_nameContext schema_name() throws RecognitionException {
        Schema_nameContext _localctx = new Schema_nameContext(_ctx, getState());
        enterRule(_localctx, 676, RULE_schema_name);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4969);
                id();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Routine_nameContext extends ParserRuleContext {
        public IdContext id() {
            return getRuleContext(IdContext.class,0);
        }
        public List<Id_expressionContext> id_expression() {
            return getRuleContexts(Id_expressionContext.class);
        }
        public Id_expressionContext id_expression(int i) {
            return getRuleContext(Id_expressionContext.class,i);
        }
        public TerminalNode AT_SIGN() { return getToken(PlSqlParser.AT_SIGN, 0); }
        public Link_nameContext link_name() {
            return getRuleContext(Link_nameContext.class,0);
        }
        public Routine_nameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_routine_name; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterRoutine_name(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitRoutine_name(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitRoutine_name(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Routine_nameContext routine_name() throws RecognitionException {
        Routine_nameContext _localctx = new Routine_nameContext(_ctx, getState());
        enterRule(_localctx, 678, RULE_routine_name);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4971);
                id();
                setState(4976);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==PERIOD) {
                    {
                        {
                            setState(4972);
                            match(PERIOD);
                            setState(4973);
                            id_expression();
                        }
                    }
                    setState(4978);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(4981);
                _la = _input.LA(1);
                if (_la==AT_SIGN) {
                    {
                        setState(4979);
                        match(AT_SIGN);
                        setState(4980);
                        link_name();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Package_nameContext extends ParserRuleContext {
        public IdContext id() {
            return getRuleContext(IdContext.class,0);
        }
        public Schema_nameContext schema_name() {
            return getRuleContext(Schema_nameContext.class,0);
        }
        public Package_nameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_package_name; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPackage_name(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPackage_name(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPackage_name(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Package_nameContext package_name() throws RecognitionException {
        Package_nameContext _localctx = new Package_nameContext(_ctx, getState());
        enterRule(_localctx, 680, RULE_package_name);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4986);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,638,_ctx) ) {
                    case 1:
                    {
                        setState(4983);
                        schema_name();
                        setState(4984);
                        match(PERIOD);
                    }
                    break;
                }
                setState(4988);
                id();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Implementation_type_nameContext extends ParserRuleContext {
        public IdContext id() {
            return getRuleContext(IdContext.class,0);
        }
        public Id_expressionContext id_expression() {
            return getRuleContext(Id_expressionContext.class,0);
        }
        public Implementation_type_nameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_implementation_type_name; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterImplementation_type_name(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitImplementation_type_name(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitImplementation_type_name(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Implementation_type_nameContext implementation_type_name() throws RecognitionException {
        Implementation_type_nameContext _localctx = new Implementation_type_nameContext(_ctx, getState());
        enterRule(_localctx, 682, RULE_implementation_type_name);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4990);
                id();
                setState(4993);
                _la = _input.LA(1);
                if (_la==PERIOD) {
                    {
                        setState(4991);
                        match(PERIOD);
                        setState(4992);
                        id_expression();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Parameter_nameContext extends ParserRuleContext {
        public IdContext id() {
            return getRuleContext(IdContext.class,0);
        }
        public Parameter_nameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_parameter_name; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterParameter_name(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitParameter_name(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitParameter_name(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Parameter_nameContext parameter_name() throws RecognitionException {
        Parameter_nameContext _localctx = new Parameter_nameContext(_ctx, getState());
        enterRule(_localctx, 684, RULE_parameter_name);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4995);
                id();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Reference_model_nameContext extends ParserRuleContext {
        public IdContext id() {
            return getRuleContext(IdContext.class,0);
        }
        public Reference_model_nameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_reference_model_name; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterReference_model_name(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitReference_model_name(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitReference_model_name(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Reference_model_nameContext reference_model_name() throws RecognitionException {
        Reference_model_nameContext _localctx = new Reference_model_nameContext(_ctx, getState());
        enterRule(_localctx, 686, RULE_reference_model_name);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4997);
                id();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Main_model_nameContext extends ParserRuleContext {
        public IdContext id() {
            return getRuleContext(IdContext.class,0);
        }
        public Main_model_nameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_main_model_name; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMain_model_name(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMain_model_name(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMain_model_name(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Main_model_nameContext main_model_name() throws RecognitionException {
        Main_model_nameContext _localctx = new Main_model_nameContext(_ctx, getState());
        enterRule(_localctx, 688, RULE_main_model_name);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4999);
                id();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Aggregate_function_nameContext extends ParserRuleContext {
        public IdContext id() {
            return getRuleContext(IdContext.class,0);
        }
        public List<Id_expressionContext> id_expression() {
            return getRuleContexts(Id_expressionContext.class);
        }
        public Id_expressionContext id_expression(int i) {
            return getRuleContext(Id_expressionContext.class,i);
        }
        public Aggregate_function_nameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_aggregate_function_name; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAggregate_function_name(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAggregate_function_name(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAggregate_function_name(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Aggregate_function_nameContext aggregate_function_name() throws RecognitionException {
        Aggregate_function_nameContext _localctx = new Aggregate_function_nameContext(_ctx, getState());
        enterRule(_localctx, 690, RULE_aggregate_function_name);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(5001);
                id();
                setState(5006);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==PERIOD) {
                    {
                        {
                            setState(5002);
                            match(PERIOD);
                            setState(5003);
                            id_expression();
                        }
                    }
                    setState(5008);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Query_nameContext extends ParserRuleContext {
        public IdContext id() {
            return getRuleContext(IdContext.class,0);
        }
        public Query_nameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_query_name; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterQuery_name(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitQuery_name(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitQuery_name(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Query_nameContext query_name() throws RecognitionException {
        Query_nameContext _localctx = new Query_nameContext(_ctx, getState());
        enterRule(_localctx, 692, RULE_query_name);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(5009);
                id();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Constraint_nameContext extends ParserRuleContext {
        public IdContext id() {
            return getRuleContext(IdContext.class,0);
        }
        public List<Id_expressionContext> id_expression() {
            return getRuleContexts(Id_expressionContext.class);
        }
        public Id_expressionContext id_expression(int i) {
            return getRuleContext(Id_expressionContext.class,i);
        }
        public TerminalNode AT_SIGN() { return getToken(PlSqlParser.AT_SIGN, 0); }
        public Link_nameContext link_name() {
            return getRuleContext(Link_nameContext.class,0);
        }
        public Constraint_nameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_constraint_name; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterConstraint_name(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitConstraint_name(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitConstraint_name(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Constraint_nameContext constraint_name() throws RecognitionException {
        Constraint_nameContext _localctx = new Constraint_nameContext(_ctx, getState());
        enterRule(_localctx, 694, RULE_constraint_name);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(5011);
                id();
                setState(5016);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==PERIOD) {
                    {
                        {
                            setState(5012);
                            match(PERIOD);
                            setState(5013);
                            id_expression();
                        }
                    }
                    setState(5018);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(5021);
                _la = _input.LA(1);
                if (_la==AT_SIGN) {
                    {
                        setState(5019);
                        match(AT_SIGN);
                        setState(5020);
                        link_name();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Label_nameContext extends ParserRuleContext {
        public Id_expressionContext id_expression() {
            return getRuleContext(Id_expressionContext.class,0);
        }
        public Label_nameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_label_name; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterLabel_name(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitLabel_name(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitLabel_name(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Label_nameContext label_name() throws RecognitionException {
        Label_nameContext _localctx = new Label_nameContext(_ctx, getState());
        enterRule(_localctx, 696, RULE_label_name);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(5023);
                id_expression();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Type_nameContext extends ParserRuleContext {
        public List<Id_expressionContext> id_expression() {
            return getRuleContexts(Id_expressionContext.class);
        }
        public Id_expressionContext id_expression(int i) {
            return getRuleContext(Id_expressionContext.class,i);
        }
        public Type_nameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_type_name; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterType_name(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitType_name(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitType_name(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Type_nameContext type_name() throws RecognitionException {
        Type_nameContext _localctx = new Type_nameContext(_ctx, getState());
        enterRule(_localctx, 698, RULE_type_name);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(5025);
                id_expression();
                setState(5030);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==PERIOD) {
                    {
                        {
                            setState(5026);
                            match(PERIOD);
                            setState(5027);
                            id_expression();
                        }
                    }
                    setState(5032);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Sequence_nameContext extends ParserRuleContext {
        public List<Id_expressionContext> id_expression() {
            return getRuleContexts(Id_expressionContext.class);
        }
        public Id_expressionContext id_expression(int i) {
            return getRuleContext(Id_expressionContext.class,i);
        }
        public Sequence_nameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_sequence_name; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSequence_name(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSequence_name(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSequence_name(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Sequence_nameContext sequence_name() throws RecognitionException {
        Sequence_nameContext _localctx = new Sequence_nameContext(_ctx, getState());
        enterRule(_localctx, 700, RULE_sequence_name);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(5033);
                id_expression();
                setState(5038);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==PERIOD) {
                    {
                        {
                            setState(5034);
                            match(PERIOD);
                            setState(5035);
                            id_expression();
                        }
                    }
                    setState(5040);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Exception_nameContext extends ParserRuleContext {
        public IdContext id() {
            return getRuleContext(IdContext.class,0);
        }
        public List<Id_expressionContext> id_expression() {
            return getRuleContexts(Id_expressionContext.class);
        }
        public Id_expressionContext id_expression(int i) {
            return getRuleContext(Id_expressionContext.class,i);
        }
        public Exception_nameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_exception_name; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterException_name(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitException_name(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitException_name(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Exception_nameContext exception_name() throws RecognitionException {
        Exception_nameContext _localctx = new Exception_nameContext(_ctx, getState());
        enterRule(_localctx, 702, RULE_exception_name);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(5041);
                id();
                setState(5046);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==PERIOD) {
                    {
                        {
                            setState(5042);
                            match(PERIOD);
                            setState(5043);
                            id_expression();
                        }
                    }
                    setState(5048);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Function_nameContext extends ParserRuleContext {
        public IdContext id() {
            return getRuleContext(IdContext.class,0);
        }
        public Id_expressionContext id_expression() {
            return getRuleContext(Id_expressionContext.class,0);
        }
        public Function_nameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_function_name; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFunction_name(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFunction_name(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFunction_name(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Function_nameContext function_name() throws RecognitionException {
        Function_nameContext _localctx = new Function_nameContext(_ctx, getState());
        enterRule(_localctx, 704, RULE_function_name);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(5049);
                id();
                setState(5052);
                _la = _input.LA(1);
                if (_la==PERIOD) {
                    {
                        setState(5050);
                        match(PERIOD);
                        setState(5051);
                        id_expression();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Procedure_nameContext extends ParserRuleContext {
        public IdContext id() {
            return getRuleContext(IdContext.class,0);
        }
        public Id_expressionContext id_expression() {
            return getRuleContext(Id_expressionContext.class,0);
        }
        public Procedure_nameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_procedure_name; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterProcedure_name(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitProcedure_name(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitProcedure_name(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Procedure_nameContext procedure_name() throws RecognitionException {
        Procedure_nameContext _localctx = new Procedure_nameContext(_ctx, getState());
        enterRule(_localctx, 706, RULE_procedure_name);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(5054);
                id();
                setState(5057);
                _la = _input.LA(1);
                if (_la==PERIOD) {
                    {
                        setState(5055);
                        match(PERIOD);
                        setState(5056);
                        id_expression();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Trigger_nameContext extends ParserRuleContext {
        public IdContext id() {
            return getRuleContext(IdContext.class,0);
        }
        public Id_expressionContext id_expression() {
            return getRuleContext(Id_expressionContext.class,0);
        }
        public Trigger_nameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_trigger_name; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTrigger_name(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTrigger_name(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTrigger_name(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Trigger_nameContext trigger_name() throws RecognitionException {
        Trigger_nameContext _localctx = new Trigger_nameContext(_ctx, getState());
        enterRule(_localctx, 708, RULE_trigger_name);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(5059);
                id();
                setState(5062);
                _la = _input.LA(1);
                if (_la==PERIOD) {
                    {
                        setState(5060);
                        match(PERIOD);
                        setState(5061);
                        id_expression();
                    }
                }

            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Variable_nameContext extends ParserRuleContext {
        public List<Id_expressionContext> id_expression() {
            return getRuleContexts(Id_expressionContext.class);
        }
        public Id_expressionContext id_expression(int i) {
            return getRuleContext(Id_expressionContext.class,i);
        }
        public TerminalNode INTRODUCER() { return getToken(PlSqlParser.INTRODUCER, 0); }
        public Char_set_nameContext char_set_name() {
            return getRuleContext(Char_set_nameContext.class,0);
        }
        public Bind_variableContext bind_variable() {
            return getRuleContext(Bind_variableContext.class,0);
        }
        public Variable_nameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_variable_name; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterVariable_name(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitVariable_name(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitVariable_name(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Variable_nameContext variable_name() throws RecognitionException {
        Variable_nameContext _localctx = new Variable_nameContext(_ctx, getState());
        enterRule(_localctx, 710, RULE_variable_name);
        int _la;
        try {
            setState(5074);
            switch (_input.LA(1)) {
                case A_LETTER:
                case ADD:
                case AFTER:
                case AGENT:
                case AGGREGATE:
                case ALL:
                case ALTER:
                case ANALYZE:
                case AND:
                case ANY:
                case ARRAY:
                case AS:
                case ASC:
                case ASSOCIATE:
                case AT:
                case ATTRIBUTE:
                case AUDIT:
                case AUTHID:
                case AUTO:
                case AUTOMATIC:
                case AUTONOMOUS_TRANSACTION:
                case BATCH:
                case BEFORE:
                case BEGIN:
                case BETWEEN:
                case BFILE:
                case BINARY_DOUBLE:
                case BINARY_FLOAT:
                case BINARY_INTEGER:
                case BLOB:
                case BLOCK:
                case BODY:
                case BOOLEAN:
                case BOTH:
                case BREADTH:
                case BULK:
                case BY:
                case BYTE:
                case C_LETTER:
                case CACHE:
                case CALL:
                case CANONICAL:
                case CASCADE:
                case CASE:
                case CAST:
                case CHAR:
                case CHAR_CS:
                case CHARACTER:
                case CHECK:
                case CHR:
                case CLOB:
                case CLOSE:
                case CLUSTER:
                case COLLECT:
                case COLUMNS:
                case COMMENT:
                case COMMIT:
                case COMMITTED:
                case COMPATIBILITY:
                case COMPILE:
                case COMPOUND:
                case CONNECT:
                case CONNECT_BY_ROOT:
                case CONSTANT:
                case CONSTRAINT:
                case CONSTRAINTS:
                case CONSTRUCTOR:
                case CONTENT:
                case CONTEXT:
                case CONTINUE:
                case CONVERT:
                case CORRUPT_XID:
                case CORRUPT_XID_ALL:
                case COST:
                case COUNT:
                case CREATE:
                case CROSS:
                case CUBE:
                case CURRENT:
                case CURRENT_USER:
                case CURSOR:
                case CUSTOMDATUM:
                case CYCLE:
                case DATA:
                case DATABASE:
                case DATE:
                case DAY:
                case DB_ROLE_CHANGE:
                case DBTIMEZONE:
                case DDL:
                case DEBUG:
                case DEC:
                case DECIMAL:
                case DECLARE:
                case DECOMPOSE:
                case DECREMENT:
                case DEFAULT:
                case DEFAULTS:
                case DEFERRED:
                case DEFINER:
                case DELETE:
                case DEPTH:
                case DESC:
                case DETERMINISTIC:
                case DIMENSION:
                case DISABLE:
                case DISASSOCIATE:
                case DISTINCT:
                case DOCUMENT:
                case DOUBLE:
                case DROP:
                case DSINTERVAL_UNCONSTRAINED:
                case EACH:
                case ELEMENT:
                case ELSE:
                case ELSIF:
                case EMPTY:
                case ENABLE:
                case ENCODING:
                case END:
                case ENTITYESCAPING:
                case ERRORS:
                case ESCAPE:
                case EXCEPT:
                case EVALNAME:
                case EXCEPTION:
                case EXCEPTION_INIT:
                case EXCEPTIONS:
                case EXCLUDE:
                case EXCLUSIVE:
                case EXECUTE:
                case EXISTS:
                case EXIT:
                case EXPLAIN:
                case EXTERNAL:
                case EXTRACT:
                case FAILURE:
                case FALSE:
                case FETCH:
                case FINAL:
                case FIRST:
                case FIRST_VALUE:
                case FLOAT:
                case FOLLOWING:
                case FOLLOWS:
                case FOR:
                case FORALL:
                case FORCE:
                case FROM:
                case FULL:
                case FUNCTION:
                case GOTO:
                case GRANT:
                case GROUP:
                case GROUPING:
                case HASH:
                case HAVING:
                case HIDE:
                case HOUR:
                case IF:
                case IGNORE:
                case IMMEDIATE:
                case IN:
                case INCLUDE:
                case INCLUDING:
                case INCREMENT:
                case INDENT:
                case INDEX:
                case INDEXED:
                case INDICATOR:
                case INDICES:
                case INFINITE:
                case INLINE:
                case INNER:
                case INOUT:
                case INSERT:
                case INSTANTIABLE:
                case INSTEAD:
                case INT:
                case INTEGER:
                case INTERSECT:
                case INTERVAL:
                case INTO:
                case INVALIDATE:
                case IS:
                case ISOLATION:
                case ITERATE:
                case JAVA:
                case JOIN:
                case KEEP:
                case LANGUAGE:
                case LAST:
                case LAST_VALUE:
                case LEADING:
                case LEFT:
                case LEVEL:
                case LIBRARY:
                case LIKE:
                case LIKE2:
                case LIKE4:
                case LIKEC:
                case LIMIT:
                case LOCAL:
                case LOCK:
                case LOCKED:
                case LOG:
                case LOGOFF:
                case LOGON:
                case LONG:
                case LOOP:
                case MAIN:
                case MAP:
                case MATCHED:
                case MAXVALUE:
                case MEASURES:
                case MEMBER:
                case MERGE:
                case MINUS:
                case MINUTE:
                case MINVALUE:
                case MLSLABEL:
                case MODE:
                case MODEL:
                case MODIFY:
                case MONTH:
                case MULTISET:
                case NAME:
                case NAN:
                case NATURAL:
                case NATURALN:
                case NAV:
                case NCHAR:
                case NCHAR_CS:
                case NCLOB:
                case NESTED:
                case NEW:
                case NO:
                case NOAUDIT:
                case NOCACHE:
                case NOCOPY:
                case NOCYCLE:
                case NOENTITYESCAPING:
                case NOMAXVALUE:
                case NOMINVALUE:
                case NONE:
                case NOORDER:
                case NOSCHEMACHECK:
                case NOT:
                case NOWAIT:
                case NULL:
                case NULLS:
                case NUMBER:
                case NUMERIC:
                case NVARCHAR2:
                case OBJECT:
                case OF:
                case OFF:
                case OID:
                case OLD:
                case ON:
                case ONLY:
                case OPEN:
                case OPTION:
                case OR:
                case ORADATA:
                case ORDER:
                case ORDINALITY:
                case OSERROR:
                case OUT:
                case OUTER:
                case OVER:
                case OVERRIDING:
                case PACKAGE:
                case PARALLEL_ENABLE:
                case PARAMETERS:
                case PARENT:
                case PARTITION:
                case PASSING:
                case PATH:
                case PIPELINED:
                case PIVOT:
                case PLAN:
                case PLS_INTEGER:
                case POSITIVE:
                case POSITIVEN:
                case PRAGMA:
                case PRECEDING:
                case PRECISION:
                case PRESENT:
                case PRIOR:
                case PROCEDURE:
                case RAISE:
                case RANGE:
                case RAW:
                case READ:
                case REAL:
                case RECORD:
                case REF:
                case REFERENCE:
                case REFERENCING:
                case REJECT:
                case RELIES_ON:
                case RENAME:
                case REPLACE:
                case RESPECT:
                case RESTRICT_REFERENCES:
                case RESULT:
                case RESULT_CACHE:
                case RETURN:
                case RETURNING:
                case REUSE:
                case REVERSE:
                case REVOKE:
                case RIGHT:
                case ROLLBACK:
                case ROLLUP:
                case ROW:
                case ROWID:
                case ROWS:
                case RULES:
                case SAMPLE:
                case SAVE:
                case SAVEPOINT:
                case SCHEMA:
                case SCHEMACHECK:
                case SCN:
                case SEARCH:
                case SECOND:
                case SEED:
                case SEGMENT:
                case SELECT:
                case SELF:
                case SEQUENCE:
                case SEQUENTIAL:
                case SERIALIZABLE:
                case SERIALLY_REUSABLE:
                case SERVERERROR:
                case SESSIONTIMEZONE:
                case SET:
                case SETS:
                case SETTINGS:
                case SHARE:
                case SHOW:
                case SHUTDOWN:
                case SIBLINGS:
                case SIGNTYPE:
                case SIMPLE_INTEGER:
                case SINGLE:
                case SIZE:
                case SKIP_:
                case SMALLINT:
                case SNAPSHOT:
                case SOME:
                case SPECIFICATION:
                case SQLDATA:
                case SQLERROR:
                case SQL_PERCENT_ROWCOUNT:
                case STANDALONE:
                case START:
                case STARTUP:
                case STATEMENT:
                case STATEMENT_ID:
                case STATIC:
                case STATISTICS:
                case STRING:
                case SUBMULTISET:
                case SUBPARTITION:
                case SUBSTITUTABLE:
                case SUBTYPE:
                case SUCCESS:
                case SUSPEND:
                case TABLE:
                case THE:
                case THEN:
                case TIME:
                case TIMESTAMP:
                case TIMESTAMP_LTZ_UNCONSTRAINED:
                case TIMESTAMP_TZ_UNCONSTRAINED:
                case TIMESTAMP_UNCONSTRAINED:
                case TIMEZONE_ABBR:
                case TIMEZONE_HOUR:
                case TIMEZONE_MINUTE:
                case TIMEZONE_REGION:
                case TO:
                case TO_CHAR:
                case TRAILING:
                case TRANSACTION:
                case TRANSLATE:
                case TREAT:
                case TRIGGER:
                case TRIM:
                case TRUE:
                case TRUNCATE:
                case TYPE:
                case UNBOUNDED:
                case UNDER:
                case UNION:
                case UNIQUE:
                case UNLIMITED:
                case UNPIVOT:
                case UNTIL:
                case UPDATE:
                case UPDATED:
                case UPSERT:
                case UROWID:
                case USE:
                case USING:
                case VALIDATE:
                case VALUE:
                case VALUES:
                case VARCHAR:
                case VARCHAR2:
                case VARIABLE:
                case VARRAY:
                case VARYING:
                case VERSION:
                case VERSIONS:
                case WAIT:
                case WARNING:
                case WELLFORMED:
                case WHEN:
                case WHENEVER:
                case WHERE:
                case WHILE:
                case WITH:
                case WITHIN:
                case WORK:
                case WRITE:
                case XML:
                case XMLAGG:
                case XMLATTRIBUTES:
                case XMLCAST:
                case XMLCOLATTVAL:
                case XMLELEMENT:
                case XMLEXISTS:
                case XMLFOREST:
                case XMLNAMESPACES:
                case XMLPARSE:
                case XMLPI:
                case XMLQUERY:
                case XMLROOT:
                case XMLSERIALIZE:
                case XMLTABLE:
                case YEAR:
                case YES:
                case YMINTERVAL_UNCONSTRAINED:
                case ZONE:
                case PREDICTION:
                case PREDICTION_BOUNDS:
                case PREDICTION_COST:
                case PREDICTION_DETAILS:
                case PREDICTION_PROBABILITY:
                case PREDICTION_SET:
                case CUME_DIST:
                case DENSE_RANK:
                case LISTAGG:
                case PERCENT_RANK:
                case PERCENTILE_CONT:
                case PERCENTILE_DISC:
                case RANK:
                case AVG:
                case CORR:
                case LAG:
                case LEAD:
                case MAX:
                case MEDIAN:
                case MIN:
                case NTILE:
                case RATIO_TO_REPORT:
                case ROW_NUMBER:
                case SUM:
                case VARIANCE:
                case REGR_:
                case STDDEV:
                case VAR_:
                case COVAR_:
                case DELIMITED_ID:
                case INTRODUCER:
                case REGULAR_ID:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(5066);
                    _la = _input.LA(1);
                    if (_la==INTRODUCER) {
                        {
                            setState(5064);
                            match(INTRODUCER);
                            setState(5065);
                            char_set_name();
                        }
                    }

                    setState(5068);
                    id_expression();
                    setState(5071);
                    _errHandler.sync(this);
                    switch ( getInterpreter().adaptivePredict(_input,650,_ctx) ) {
                        case 1:
                        {
                            setState(5069);
                            match(PERIOD);
                            setState(5070);
                            id_expression();
                        }
                        break;
                    }
                }
                break;
                case BINDVAR:
                case COLON:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(5073);
                    bind_variable();
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Index_nameContext extends ParserRuleContext {
        public IdContext id() {
            return getRuleContext(IdContext.class,0);
        }
        public Index_nameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_index_name; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterIndex_name(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitIndex_name(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitIndex_name(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Index_nameContext index_name() throws RecognitionException {
        Index_nameContext _localctx = new Index_nameContext(_ctx, getState());
        enterRule(_localctx, 712, RULE_index_name);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(5076);
                id();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Cursor_nameContext extends ParserRuleContext {
        public IdContext id() {
            return getRuleContext(IdContext.class,0);
        }
        public Bind_variableContext bind_variable() {
            return getRuleContext(Bind_variableContext.class,0);
        }
        public Cursor_nameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_cursor_name; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCursor_name(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCursor_name(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCursor_name(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Cursor_nameContext cursor_name() throws RecognitionException {
        Cursor_nameContext _localctx = new Cursor_nameContext(_ctx, getState());
        enterRule(_localctx, 714, RULE_cursor_name);
        try {
            setState(5080);
            switch (_input.LA(1)) {
                case A_LETTER:
                case ADD:
                case AFTER:
                case AGENT:
                case AGGREGATE:
                case ALL:
                case ALTER:
                case ANALYZE:
                case AND:
                case ANY:
                case ARRAY:
                case AS:
                case ASC:
                case ASSOCIATE:
                case AT:
                case ATTRIBUTE:
                case AUDIT:
                case AUTHID:
                case AUTO:
                case AUTOMATIC:
                case AUTONOMOUS_TRANSACTION:
                case BATCH:
                case BEFORE:
                case BEGIN:
                case BETWEEN:
                case BFILE:
                case BINARY_DOUBLE:
                case BINARY_FLOAT:
                case BINARY_INTEGER:
                case BLOB:
                case BLOCK:
                case BODY:
                case BOOLEAN:
                case BOTH:
                case BREADTH:
                case BULK:
                case BY:
                case BYTE:
                case C_LETTER:
                case CACHE:
                case CALL:
                case CANONICAL:
                case CASCADE:
                case CASE:
                case CAST:
                case CHAR:
                case CHAR_CS:
                case CHARACTER:
                case CHECK:
                case CHR:
                case CLOB:
                case CLOSE:
                case CLUSTER:
                case COLLECT:
                case COLUMNS:
                case COMMENT:
                case COMMIT:
                case COMMITTED:
                case COMPATIBILITY:
                case COMPILE:
                case COMPOUND:
                case CONNECT:
                case CONNECT_BY_ROOT:
                case CONSTANT:
                case CONSTRAINT:
                case CONSTRAINTS:
                case CONSTRUCTOR:
                case CONTENT:
                case CONTEXT:
                case CONTINUE:
                case CONVERT:
                case CORRUPT_XID:
                case CORRUPT_XID_ALL:
                case COST:
                case COUNT:
                case CREATE:
                case CROSS:
                case CUBE:
                case CURRENT:
                case CURRENT_USER:
                case CURSOR:
                case CUSTOMDATUM:
                case CYCLE:
                case DATA:
                case DATABASE:
                case DATE:
                case DAY:
                case DB_ROLE_CHANGE:
                case DBTIMEZONE:
                case DDL:
                case DEBUG:
                case DEC:
                case DECIMAL:
                case DECLARE:
                case DECOMPOSE:
                case DECREMENT:
                case DEFAULT:
                case DEFAULTS:
                case DEFERRED:
                case DEFINER:
                case DELETE:
                case DEPTH:
                case DESC:
                case DETERMINISTIC:
                case DIMENSION:
                case DISABLE:
                case DISASSOCIATE:
                case DISTINCT:
                case DOCUMENT:
                case DOUBLE:
                case DROP:
                case DSINTERVAL_UNCONSTRAINED:
                case EACH:
                case ELEMENT:
                case ELSE:
                case ELSIF:
                case EMPTY:
                case ENABLE:
                case ENCODING:
                case END:
                case ENTITYESCAPING:
                case ERRORS:
                case ESCAPE:
                case EXCEPT:
                case EVALNAME:
                case EXCEPTION:
                case EXCEPTION_INIT:
                case EXCEPTIONS:
                case EXCLUDE:
                case EXCLUSIVE:
                case EXECUTE:
                case EXISTS:
                case EXIT:
                case EXPLAIN:
                case EXTERNAL:
                case EXTRACT:
                case FAILURE:
                case FALSE:
                case FETCH:
                case FINAL:
                case FIRST:
                case FIRST_VALUE:
                case FLOAT:
                case FOLLOWING:
                case FOLLOWS:
                case FOR:
                case FORALL:
                case FORCE:
                case FROM:
                case FULL:
                case FUNCTION:
                case GOTO:
                case GRANT:
                case GROUP:
                case GROUPING:
                case HASH:
                case HAVING:
                case HIDE:
                case HOUR:
                case IF:
                case IGNORE:
                case IMMEDIATE:
                case IN:
                case INCLUDE:
                case INCLUDING:
                case INCREMENT:
                case INDENT:
                case INDEX:
                case INDEXED:
                case INDICATOR:
                case INDICES:
                case INFINITE:
                case INLINE:
                case INNER:
                case INOUT:
                case INSERT:
                case INSTANTIABLE:
                case INSTEAD:
                case INT:
                case INTEGER:
                case INTERSECT:
                case INTERVAL:
                case INTO:
                case INVALIDATE:
                case IS:
                case ISOLATION:
                case ITERATE:
                case JAVA:
                case JOIN:
                case KEEP:
                case LANGUAGE:
                case LAST:
                case LAST_VALUE:
                case LEADING:
                case LEFT:
                case LEVEL:
                case LIBRARY:
                case LIKE:
                case LIKE2:
                case LIKE4:
                case LIKEC:
                case LIMIT:
                case LOCAL:
                case LOCK:
                case LOCKED:
                case LOG:
                case LOGOFF:
                case LOGON:
                case LONG:
                case LOOP:
                case MAIN:
                case MAP:
                case MATCHED:
                case MAXVALUE:
                case MEASURES:
                case MEMBER:
                case MERGE:
                case MINUS:
                case MINUTE:
                case MINVALUE:
                case MLSLABEL:
                case MODE:
                case MODEL:
                case MODIFY:
                case MONTH:
                case MULTISET:
                case NAME:
                case NAN:
                case NATURAL:
                case NATURALN:
                case NAV:
                case NCHAR:
                case NCHAR_CS:
                case NCLOB:
                case NESTED:
                case NEW:
                case NO:
                case NOAUDIT:
                case NOCACHE:
                case NOCOPY:
                case NOCYCLE:
                case NOENTITYESCAPING:
                case NOMAXVALUE:
                case NOMINVALUE:
                case NONE:
                case NOORDER:
                case NOSCHEMACHECK:
                case NOT:
                case NOWAIT:
                case NULL:
                case NULLS:
                case NUMBER:
                case NUMERIC:
                case NVARCHAR2:
                case OBJECT:
                case OF:
                case OFF:
                case OID:
                case OLD:
                case ON:
                case ONLY:
                case OPEN:
                case OPTION:
                case OR:
                case ORADATA:
                case ORDER:
                case ORDINALITY:
                case OSERROR:
                case OUT:
                case OUTER:
                case OVER:
                case OVERRIDING:
                case PACKAGE:
                case PARALLEL_ENABLE:
                case PARAMETERS:
                case PARENT:
                case PARTITION:
                case PASSING:
                case PATH:
                case PIPELINED:
                case PIVOT:
                case PLAN:
                case PLS_INTEGER:
                case POSITIVE:
                case POSITIVEN:
                case PRAGMA:
                case PRECEDING:
                case PRECISION:
                case PRESENT:
                case PRIOR:
                case PROCEDURE:
                case RAISE:
                case RANGE:
                case RAW:
                case READ:
                case REAL:
                case RECORD:
                case REF:
                case REFERENCE:
                case REFERENCING:
                case REJECT:
                case RELIES_ON:
                case RENAME:
                case REPLACE:
                case RESPECT:
                case RESTRICT_REFERENCES:
                case RESULT:
                case RESULT_CACHE:
                case RETURN:
                case RETURNING:
                case REUSE:
                case REVERSE:
                case REVOKE:
                case RIGHT:
                case ROLLBACK:
                case ROLLUP:
                case ROW:
                case ROWID:
                case ROWS:
                case RULES:
                case SAMPLE:
                case SAVE:
                case SAVEPOINT:
                case SCHEMA:
                case SCHEMACHECK:
                case SCN:
                case SEARCH:
                case SECOND:
                case SEED:
                case SEGMENT:
                case SELECT:
                case SELF:
                case SEQUENCE:
                case SEQUENTIAL:
                case SERIALIZABLE:
                case SERIALLY_REUSABLE:
                case SERVERERROR:
                case SESSIONTIMEZONE:
                case SET:
                case SETS:
                case SETTINGS:
                case SHARE:
                case SHOW:
                case SHUTDOWN:
                case SIBLINGS:
                case SIGNTYPE:
                case SIMPLE_INTEGER:
                case SINGLE:
                case SIZE:
                case SKIP_:
                case SMALLINT:
                case SNAPSHOT:
                case SOME:
                case SPECIFICATION:
                case SQLDATA:
                case SQLERROR:
                case SQL_PERCENT_ROWCOUNT:
                case STANDALONE:
                case START:
                case STARTUP:
                case STATEMENT:
                case STATEMENT_ID:
                case STATIC:
                case STATISTICS:
                case STRING:
                case SUBMULTISET:
                case SUBPARTITION:
                case SUBSTITUTABLE:
                case SUBTYPE:
                case SUCCESS:
                case SUSPEND:
                case TABLE:
                case THE:
                case THEN:
                case TIME:
                case TIMESTAMP:
                case TIMESTAMP_LTZ_UNCONSTRAINED:
                case TIMESTAMP_TZ_UNCONSTRAINED:
                case TIMESTAMP_UNCONSTRAINED:
                case TIMEZONE_ABBR:
                case TIMEZONE_HOUR:
                case TIMEZONE_MINUTE:
                case TIMEZONE_REGION:
                case TO:
                case TO_CHAR:
                case TRAILING:
                case TRANSACTION:
                case TRANSLATE:
                case TREAT:
                case TRIGGER:
                case TRIM:
                case TRUE:
                case TRUNCATE:
                case TYPE:
                case UNBOUNDED:
                case UNDER:
                case UNION:
                case UNIQUE:
                case UNLIMITED:
                case UNPIVOT:
                case UNTIL:
                case UPDATE:
                case UPDATED:
                case UPSERT:
                case UROWID:
                case USE:
                case USING:
                case VALIDATE:
                case VALUE:
                case VALUES:
                case VARCHAR:
                case VARCHAR2:
                case VARIABLE:
                case VARRAY:
                case VARYING:
                case VERSION:
                case VERSIONS:
                case WAIT:
                case WARNING:
                case WELLFORMED:
                case WHEN:
                case WHENEVER:
                case WHERE:
                case WHILE:
                case WITH:
                case WITHIN:
                case WORK:
                case WRITE:
                case XML:
                case XMLAGG:
                case XMLATTRIBUTES:
                case XMLCAST:
                case XMLCOLATTVAL:
                case XMLELEMENT:
                case XMLEXISTS:
                case XMLFOREST:
                case XMLNAMESPACES:
                case XMLPARSE:
                case XMLPI:
                case XMLQUERY:
                case XMLROOT:
                case XMLSERIALIZE:
                case XMLTABLE:
                case YEAR:
                case YES:
                case YMINTERVAL_UNCONSTRAINED:
                case ZONE:
                case PREDICTION:
                case PREDICTION_BOUNDS:
                case PREDICTION_COST:
                case PREDICTION_DETAILS:
                case PREDICTION_PROBABILITY:
                case PREDICTION_SET:
                case CUME_DIST:
                case DENSE_RANK:
                case LISTAGG:
                case PERCENT_RANK:
                case PERCENTILE_CONT:
                case PERCENTILE_DISC:
                case RANK:
                case AVG:
                case CORR:
                case LAG:
                case LEAD:
                case MAX:
                case MEDIAN:
                case MIN:
                case NTILE:
                case RATIO_TO_REPORT:
                case ROW_NUMBER:
                case SUM:
                case VARIANCE:
                case REGR_:
                case STDDEV:
                case VAR_:
                case COVAR_:
                case DELIMITED_ID:
                case INTRODUCER:
                case REGULAR_ID:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(5078);
                    id();
                }
                break;
                case BINDVAR:
                case COLON:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(5079);
                    bind_variable();
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Record_nameContext extends ParserRuleContext {
        public IdContext id() {
            return getRuleContext(IdContext.class,0);
        }
        public Bind_variableContext bind_variable() {
            return getRuleContext(Bind_variableContext.class,0);
        }
        public Record_nameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_record_name; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterRecord_name(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitRecord_name(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitRecord_name(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Record_nameContext record_name() throws RecognitionException {
        Record_nameContext _localctx = new Record_nameContext(_ctx, getState());
        enterRule(_localctx, 716, RULE_record_name);
        try {
            setState(5084);
            switch (_input.LA(1)) {
                case A_LETTER:
                case ADD:
                case AFTER:
                case AGENT:
                case AGGREGATE:
                case ALL:
                case ALTER:
                case ANALYZE:
                case AND:
                case ANY:
                case ARRAY:
                case AS:
                case ASC:
                case ASSOCIATE:
                case AT:
                case ATTRIBUTE:
                case AUDIT:
                case AUTHID:
                case AUTO:
                case AUTOMATIC:
                case AUTONOMOUS_TRANSACTION:
                case BATCH:
                case BEFORE:
                case BEGIN:
                case BETWEEN:
                case BFILE:
                case BINARY_DOUBLE:
                case BINARY_FLOAT:
                case BINARY_INTEGER:
                case BLOB:
                case BLOCK:
                case BODY:
                case BOOLEAN:
                case BOTH:
                case BREADTH:
                case BULK:
                case BY:
                case BYTE:
                case C_LETTER:
                case CACHE:
                case CALL:
                case CANONICAL:
                case CASCADE:
                case CASE:
                case CAST:
                case CHAR:
                case CHAR_CS:
                case CHARACTER:
                case CHECK:
                case CHR:
                case CLOB:
                case CLOSE:
                case CLUSTER:
                case COLLECT:
                case COLUMNS:
                case COMMENT:
                case COMMIT:
                case COMMITTED:
                case COMPATIBILITY:
                case COMPILE:
                case COMPOUND:
                case CONNECT:
                case CONNECT_BY_ROOT:
                case CONSTANT:
                case CONSTRAINT:
                case CONSTRAINTS:
                case CONSTRUCTOR:
                case CONTENT:
                case CONTEXT:
                case CONTINUE:
                case CONVERT:
                case CORRUPT_XID:
                case CORRUPT_XID_ALL:
                case COST:
                case COUNT:
                case CREATE:
                case CROSS:
                case CUBE:
                case CURRENT:
                case CURRENT_USER:
                case CURSOR:
                case CUSTOMDATUM:
                case CYCLE:
                case DATA:
                case DATABASE:
                case DATE:
                case DAY:
                case DB_ROLE_CHANGE:
                case DBTIMEZONE:
                case DDL:
                case DEBUG:
                case DEC:
                case DECIMAL:
                case DECLARE:
                case DECOMPOSE:
                case DECREMENT:
                case DEFAULT:
                case DEFAULTS:
                case DEFERRED:
                case DEFINER:
                case DELETE:
                case DEPTH:
                case DESC:
                case DETERMINISTIC:
                case DIMENSION:
                case DISABLE:
                case DISASSOCIATE:
                case DISTINCT:
                case DOCUMENT:
                case DOUBLE:
                case DROP:
                case DSINTERVAL_UNCONSTRAINED:
                case EACH:
                case ELEMENT:
                case ELSE:
                case ELSIF:
                case EMPTY:
                case ENABLE:
                case ENCODING:
                case END:
                case ENTITYESCAPING:
                case ERRORS:
                case ESCAPE:
                case EXCEPT:
                case EVALNAME:
                case EXCEPTION:
                case EXCEPTION_INIT:
                case EXCEPTIONS:
                case EXCLUDE:
                case EXCLUSIVE:
                case EXECUTE:
                case EXISTS:
                case EXIT:
                case EXPLAIN:
                case EXTERNAL:
                case EXTRACT:
                case FAILURE:
                case FALSE:
                case FETCH:
                case FINAL:
                case FIRST:
                case FIRST_VALUE:
                case FLOAT:
                case FOLLOWING:
                case FOLLOWS:
                case FOR:
                case FORALL:
                case FORCE:
                case FROM:
                case FULL:
                case FUNCTION:
                case GOTO:
                case GRANT:
                case GROUP:
                case GROUPING:
                case HASH:
                case HAVING:
                case HIDE:
                case HOUR:
                case IF:
                case IGNORE:
                case IMMEDIATE:
                case IN:
                case INCLUDE:
                case INCLUDING:
                case INCREMENT:
                case INDENT:
                case INDEX:
                case INDEXED:
                case INDICATOR:
                case INDICES:
                case INFINITE:
                case INLINE:
                case INNER:
                case INOUT:
                case INSERT:
                case INSTANTIABLE:
                case INSTEAD:
                case INT:
                case INTEGER:
                case INTERSECT:
                case INTERVAL:
                case INTO:
                case INVALIDATE:
                case IS:
                case ISOLATION:
                case ITERATE:
                case JAVA:
                case JOIN:
                case KEEP:
                case LANGUAGE:
                case LAST:
                case LAST_VALUE:
                case LEADING:
                case LEFT:
                case LEVEL:
                case LIBRARY:
                case LIKE:
                case LIKE2:
                case LIKE4:
                case LIKEC:
                case LIMIT:
                case LOCAL:
                case LOCK:
                case LOCKED:
                case LOG:
                case LOGOFF:
                case LOGON:
                case LONG:
                case LOOP:
                case MAIN:
                case MAP:
                case MATCHED:
                case MAXVALUE:
                case MEASURES:
                case MEMBER:
                case MERGE:
                case MINUS:
                case MINUTE:
                case MINVALUE:
                case MLSLABEL:
                case MODE:
                case MODEL:
                case MODIFY:
                case MONTH:
                case MULTISET:
                case NAME:
                case NAN:
                case NATURAL:
                case NATURALN:
                case NAV:
                case NCHAR:
                case NCHAR_CS:
                case NCLOB:
                case NESTED:
                case NEW:
                case NO:
                case NOAUDIT:
                case NOCACHE:
                case NOCOPY:
                case NOCYCLE:
                case NOENTITYESCAPING:
                case NOMAXVALUE:
                case NOMINVALUE:
                case NONE:
                case NOORDER:
                case NOSCHEMACHECK:
                case NOT:
                case NOWAIT:
                case NULL:
                case NULLS:
                case NUMBER:
                case NUMERIC:
                case NVARCHAR2:
                case OBJECT:
                case OF:
                case OFF:
                case OID:
                case OLD:
                case ON:
                case ONLY:
                case OPEN:
                case OPTION:
                case OR:
                case ORADATA:
                case ORDER:
                case ORDINALITY:
                case OSERROR:
                case OUT:
                case OUTER:
                case OVER:
                case OVERRIDING:
                case PACKAGE:
                case PARALLEL_ENABLE:
                case PARAMETERS:
                case PARENT:
                case PARTITION:
                case PASSING:
                case PATH:
                case PIPELINED:
                case PIVOT:
                case PLAN:
                case PLS_INTEGER:
                case POSITIVE:
                case POSITIVEN:
                case PRAGMA:
                case PRECEDING:
                case PRECISION:
                case PRESENT:
                case PRIOR:
                case PROCEDURE:
                case RAISE:
                case RANGE:
                case RAW:
                case READ:
                case REAL:
                case RECORD:
                case REF:
                case REFERENCE:
                case REFERENCING:
                case REJECT:
                case RELIES_ON:
                case RENAME:
                case REPLACE:
                case RESPECT:
                case RESTRICT_REFERENCES:
                case RESULT:
                case RESULT_CACHE:
                case RETURN:
                case RETURNING:
                case REUSE:
                case REVERSE:
                case REVOKE:
                case RIGHT:
                case ROLLBACK:
                case ROLLUP:
                case ROW:
                case ROWID:
                case ROWS:
                case RULES:
                case SAMPLE:
                case SAVE:
                case SAVEPOINT:
                case SCHEMA:
                case SCHEMACHECK:
                case SCN:
                case SEARCH:
                case SECOND:
                case SEED:
                case SEGMENT:
                case SELECT:
                case SELF:
                case SEQUENCE:
                case SEQUENTIAL:
                case SERIALIZABLE:
                case SERIALLY_REUSABLE:
                case SERVERERROR:
                case SESSIONTIMEZONE:
                case SET:
                case SETS:
                case SETTINGS:
                case SHARE:
                case SHOW:
                case SHUTDOWN:
                case SIBLINGS:
                case SIGNTYPE:
                case SIMPLE_INTEGER:
                case SINGLE:
                case SIZE:
                case SKIP_:
                case SMALLINT:
                case SNAPSHOT:
                case SOME:
                case SPECIFICATION:
                case SQLDATA:
                case SQLERROR:
                case SQL_PERCENT_ROWCOUNT:
                case STANDALONE:
                case START:
                case STARTUP:
                case STATEMENT:
                case STATEMENT_ID:
                case STATIC:
                case STATISTICS:
                case STRING:
                case SUBMULTISET:
                case SUBPARTITION:
                case SUBSTITUTABLE:
                case SUBTYPE:
                case SUCCESS:
                case SUSPEND:
                case TABLE:
                case THE:
                case THEN:
                case TIME:
                case TIMESTAMP:
                case TIMESTAMP_LTZ_UNCONSTRAINED:
                case TIMESTAMP_TZ_UNCONSTRAINED:
                case TIMESTAMP_UNCONSTRAINED:
                case TIMEZONE_ABBR:
                case TIMEZONE_HOUR:
                case TIMEZONE_MINUTE:
                case TIMEZONE_REGION:
                case TO:
                case TO_CHAR:
                case TRAILING:
                case TRANSACTION:
                case TRANSLATE:
                case TREAT:
                case TRIGGER:
                case TRIM:
                case TRUE:
                case TRUNCATE:
                case TYPE:
                case UNBOUNDED:
                case UNDER:
                case UNION:
                case UNIQUE:
                case UNLIMITED:
                case UNPIVOT:
                case UNTIL:
                case UPDATE:
                case UPDATED:
                case UPSERT:
                case UROWID:
                case USE:
                case USING:
                case VALIDATE:
                case VALUE:
                case VALUES:
                case VARCHAR:
                case VARCHAR2:
                case VARIABLE:
                case VARRAY:
                case VARYING:
                case VERSION:
                case VERSIONS:
                case WAIT:
                case WARNING:
                case WELLFORMED:
                case WHEN:
                case WHENEVER:
                case WHERE:
                case WHILE:
                case WITH:
                case WITHIN:
                case WORK:
                case WRITE:
                case XML:
                case XMLAGG:
                case XMLATTRIBUTES:
                case XMLCAST:
                case XMLCOLATTVAL:
                case XMLELEMENT:
                case XMLEXISTS:
                case XMLFOREST:
                case XMLNAMESPACES:
                case XMLPARSE:
                case XMLPI:
                case XMLQUERY:
                case XMLROOT:
                case XMLSERIALIZE:
                case XMLTABLE:
                case YEAR:
                case YES:
                case YMINTERVAL_UNCONSTRAINED:
                case ZONE:
                case PREDICTION:
                case PREDICTION_BOUNDS:
                case PREDICTION_COST:
                case PREDICTION_DETAILS:
                case PREDICTION_PROBABILITY:
                case PREDICTION_SET:
                case CUME_DIST:
                case DENSE_RANK:
                case LISTAGG:
                case PERCENT_RANK:
                case PERCENTILE_CONT:
                case PERCENTILE_DISC:
                case RANK:
                case AVG:
                case CORR:
                case LAG:
                case LEAD:
                case MAX:
                case MEDIAN:
                case MIN:
                case NTILE:
                case RATIO_TO_REPORT:
                case ROW_NUMBER:
                case SUM:
                case VARIANCE:
                case REGR_:
                case STDDEV:
                case VAR_:
                case COVAR_:
                case DELIMITED_ID:
                case INTRODUCER:
                case REGULAR_ID:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(5082);
                    id();
                }
                break;
                case BINDVAR:
                case COLON:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(5083);
                    bind_variable();
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Collection_nameContext extends ParserRuleContext {
        public IdContext id() {
            return getRuleContext(IdContext.class,0);
        }
        public Id_expressionContext id_expression() {
            return getRuleContext(Id_expressionContext.class,0);
        }
        public Collection_nameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_collection_name; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCollection_name(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCollection_name(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCollection_name(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Collection_nameContext collection_name() throws RecognitionException {
        Collection_nameContext _localctx = new Collection_nameContext(_ctx, getState());
        enterRule(_localctx, 718, RULE_collection_name);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(5086);
                id();
                setState(5089);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,654,_ctx) ) {
                    case 1:
                    {
                        setState(5087);
                        match(PERIOD);
                        setState(5088);
                        id_expression();
                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Link_nameContext extends ParserRuleContext {
        public List<IdContext> id() {
            return getRuleContexts(IdContext.class);
        }
        public IdContext id(int i) {
            return getRuleContext(IdContext.class,i);
        }
        public Link_nameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_link_name; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterLink_name(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitLink_name(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitLink_name(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Link_nameContext link_name() throws RecognitionException {
        Link_nameContext _localctx = new Link_nameContext(_ctx, getState());
        enterRule(_localctx, 720, RULE_link_name);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(5091);
                id();
                setState(5096);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input,655,_ctx);
                while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
                    if ( _alt==1 ) {
                        {
                            {
                                setState(5092);
                                match(PERIOD);
                                setState(5093);
                                id();
                            }
                        }
                    }
                    setState(5098);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input,655,_ctx);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Column_nameContext extends ParserRuleContext {
        public IdContext id() {
            return getRuleContext(IdContext.class,0);
        }
        public List<Id_expressionContext> id_expression() {
            return getRuleContexts(Id_expressionContext.class);
        }
        public Id_expressionContext id_expression(int i) {
            return getRuleContext(Id_expressionContext.class,i);
        }
        public Column_nameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_column_name; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterColumn_name(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitColumn_name(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitColumn_name(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Column_nameContext column_name() throws RecognitionException {
        Column_nameContext _localctx = new Column_nameContext(_ctx, getState());
        enterRule(_localctx, 722, RULE_column_name);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(5099);
                id();
                setState(5104);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==PERIOD) {
                    {
                        {
                            setState(5100);
                            match(PERIOD);
                            setState(5101);
                            id_expression();
                        }
                    }
                    setState(5106);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Tableview_nameContext extends ParserRuleContext {
        public IdContext id() {
            return getRuleContext(IdContext.class,0);
        }
        public Id_expressionContext id_expression() {
            return getRuleContext(Id_expressionContext.class,0);
        }
        public TerminalNode AT_SIGN() { return getToken(PlSqlParser.AT_SIGN, 0); }
        public Link_nameContext link_name() {
            return getRuleContext(Link_nameContext.class,0);
        }
        public Partition_extension_clauseContext partition_extension_clause() {
            return getRuleContext(Partition_extension_clauseContext.class,0);
        }
        public Tableview_nameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_tableview_name; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTableview_name(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTableview_name(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTableview_name(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Tableview_nameContext tableview_name() throws RecognitionException {
        Tableview_nameContext _localctx = new Tableview_nameContext(_ctx, getState());
        enterRule(_localctx, 724, RULE_tableview_name);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(5107);
                id();
                setState(5110);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,657,_ctx) ) {
                    case 1:
                    {
                        setState(5108);
                        match(PERIOD);
                        setState(5109);
                        id_expression();
                    }
                    break;
                }
                setState(5115);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,658,_ctx) ) {
                    case 1:
                    {
                        setState(5112);
                        match(AT_SIGN);
                        setState(5113);
                        link_name();
                    }
                    break;
                    case 2:
                    {
                        setState(5114);
                        partition_extension_clause();
                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Char_set_nameContext extends ParserRuleContext {
        public List<Id_expressionContext> id_expression() {
            return getRuleContexts(Id_expressionContext.class);
        }
        public Id_expressionContext id_expression(int i) {
            return getRuleContext(Id_expressionContext.class,i);
        }
        public Char_set_nameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_char_set_name; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterChar_set_name(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitChar_set_name(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitChar_set_name(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Char_set_nameContext char_set_name() throws RecognitionException {
        Char_set_nameContext _localctx = new Char_set_nameContext(_ctx, getState());
        enterRule(_localctx, 726, RULE_char_set_name);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(5117);
                id_expression();
                setState(5122);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==PERIOD) {
                    {
                        {
                            setState(5118);
                            match(PERIOD);
                            setState(5119);
                            id_expression();
                        }
                    }
                    setState(5124);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Keep_clauseContext extends ParserRuleContext {
        public TerminalNode KEEP() { return getToken(PlSqlParser.KEEP, 0); }
        public TerminalNode DENSE_RANK() { return getToken(PlSqlParser.DENSE_RANK, 0); }
        public Order_by_clauseContext order_by_clause() {
            return getRuleContext(Order_by_clauseContext.class,0);
        }
        public TerminalNode FIRST() { return getToken(PlSqlParser.FIRST, 0); }
        public TerminalNode LAST() { return getToken(PlSqlParser.LAST, 0); }
        public Over_clauseContext over_clause() {
            return getRuleContext(Over_clauseContext.class,0);
        }
        public Keep_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_keep_clause; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterKeep_clause(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitKeep_clause(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitKeep_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Keep_clauseContext keep_clause() throws RecognitionException {
        Keep_clauseContext _localctx = new Keep_clauseContext(_ctx, getState());
        enterRule(_localctx, 728, RULE_keep_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(5125);
                match(KEEP);
                setState(5126);
                match(LEFT_PAREN);
                setState(5127);
                match(DENSE_RANK);
                setState(5128);
                _la = _input.LA(1);
                if ( !(_la==FIRST || _la==LAST) ) {
                    _errHandler.recoverInline(this);
                } else {
                    consume();
                }
                setState(5129);
                order_by_clause();
                setState(5130);
                match(RIGHT_PAREN);
                setState(5132);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,660,_ctx) ) {
                    case 1:
                    {
                        setState(5131);
                        over_clause();
                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Function_argumentContext extends ParserRuleContext {
        public List<ArgumentContext> argument() {
            return getRuleContexts(ArgumentContext.class);
        }
        public ArgumentContext argument(int i) {
            return getRuleContext(ArgumentContext.class,i);
        }
        public Keep_clauseContext keep_clause() {
            return getRuleContext(Keep_clauseContext.class,0);
        }
        public Function_argumentContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_function_argument; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFunction_argument(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFunction_argument(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFunction_argument(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Function_argumentContext function_argument() throws RecognitionException {
        Function_argumentContext _localctx = new Function_argumentContext(_ctx, getState());
        enterRule(_localctx, 730, RULE_function_argument);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(5134);
                match(LEFT_PAREN);
                setState(5136);
                _la = _input.LA(1);
                if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ALTER) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREADTH) | (1L << BULK) | (1L << BY) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHECK) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DEPTH - 64)) | (1L << (DESC - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (ELSE - 64)) | (1L << (ELSIF - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (END - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EXCEPT - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXCLUSIVE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FETCH - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FOR - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GOTO - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HAVING - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IN - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEX - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERSECT - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTO - 192)) | (1L << (INVALIDATE - 192)) | (1L << (IS - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCK - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUS - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MOD - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCACHE - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)) | (1L << (NOENTITYESCAPING - 192)) | (1L << (NOMAXVALUE - 192)) | (1L << (NOMINVALUE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NONE - 256)) | (1L << (NOORDER - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NOT - 256)) | (1L << (NOWAIT - 256)) | (1L << (NULL - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OF - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ON - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (OPTION - 256)) | (1L << (OR - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDER - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PIVOT - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (PRIOR - 256)) | (1L << (PROCEDURE - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (REVOKE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SEARCH - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELECT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENCE - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHARE - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (SQL_PERCENT_ROWCOUNT - 320)) | (1L << (STANDALONE - 320)) | (1L << (START - 320)) | (1L << (STARTUP - 320)) | (1L << (STATEMENT - 320)) | (1L << (STATEMENT_ID - 320)) | (1L << (STATIC - 320)) | (1L << (STATISTICS - 320)) | (1L << (STRING - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TABLE - 384)) | (1L << (THE - 384)) | (1L << (THEN - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TO - 384)) | (1L << (TO_CHAR - 384)) | (1L << (TO_NUMBER - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUE - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNION - 384)) | (1L << (UNIQUE - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNPIVOT - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATE - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (USING - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VALUES - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHEN - 384)) | (1L << (WHENEVER - 384)) | (1L << (WHERE - 384)) | (1L << (WHILE - 384)) | (1L << (WITH - 384)) | (1L << (WITHIN - 384)) | (1L << (WORK - 384)) | (1L << (WRITE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)) | (1L << (REGR_ - 448)) | (1L << (STDDEV - 448)) | (1L << (VAR_ - 448)) | (1L << (COVAR_ - 448)) | (1L << (NATIONAL_CHAR_STRING_LIT - 448)) | (1L << (UNSIGNED_INTEGER - 448)) | (1L << (APPROXIMATE_NUM_LIT - 448)) | (1L << (CHAR_STRING - 448)) | (1L << (DELIMITED_ID - 448)) | (1L << (LEFT_PAREN - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PLUS_SIGN - 512)) | (1L << (MINUS_SIGN - 512)) | (1L << (BINDVAR - 512)) | (1L << (COLON - 512)) | (1L << (INTRODUCER - 512)))) != 0) || _la==REGULAR_ID) {
                    {
                        setState(5135);
                        argument();
                    }
                }

                setState(5142);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==COMMA) {
                    {
                        {
                            setState(5138);
                            match(COMMA);
                            setState(5139);
                            argument();
                        }
                    }
                    setState(5144);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(5145);
                match(RIGHT_PAREN);
                setState(5147);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,663,_ctx) ) {
                    case 1:
                    {
                        setState(5146);
                        keep_clause();
                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Function_argument_analyticContext extends ParserRuleContext {
        public List<ArgumentContext> argument() {
            return getRuleContexts(ArgumentContext.class);
        }
        public ArgumentContext argument(int i) {
            return getRuleContext(ArgumentContext.class,i);
        }
        public Keep_clauseContext keep_clause() {
            return getRuleContext(Keep_clauseContext.class,0);
        }
        public List<Respect_or_ignore_nullsContext> respect_or_ignore_nulls() {
            return getRuleContexts(Respect_or_ignore_nullsContext.class);
        }
        public Respect_or_ignore_nullsContext respect_or_ignore_nulls(int i) {
            return getRuleContext(Respect_or_ignore_nullsContext.class,i);
        }
        public Function_argument_analyticContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_function_argument_analytic; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFunction_argument_analytic(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFunction_argument_analytic(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFunction_argument_analytic(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Function_argument_analyticContext function_argument_analytic() throws RecognitionException {
        Function_argument_analyticContext _localctx = new Function_argument_analyticContext(_ctx, getState());
        enterRule(_localctx, 732, RULE_function_argument_analytic);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(5149);
                match(LEFT_PAREN);
                setState(5154);
                _la = _input.LA(1);
                if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ALTER) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREADTH) | (1L << BULK) | (1L << BY) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHECK) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DEPTH - 64)) | (1L << (DESC - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (ELSE - 64)) | (1L << (ELSIF - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (END - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EXCEPT - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXCLUSIVE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FETCH - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FOR - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GOTO - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HAVING - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IN - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEX - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERSECT - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTO - 192)) | (1L << (INVALIDATE - 192)) | (1L << (IS - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCK - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUS - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MOD - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCACHE - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)) | (1L << (NOENTITYESCAPING - 192)) | (1L << (NOMAXVALUE - 192)) | (1L << (NOMINVALUE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NONE - 256)) | (1L << (NOORDER - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NOT - 256)) | (1L << (NOWAIT - 256)) | (1L << (NULL - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OF - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ON - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (OPTION - 256)) | (1L << (OR - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDER - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PIVOT - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (PRIOR - 256)) | (1L << (PROCEDURE - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (REVOKE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SEARCH - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELECT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENCE - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHARE - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (SQL_PERCENT_ROWCOUNT - 320)) | (1L << (STANDALONE - 320)) | (1L << (START - 320)) | (1L << (STARTUP - 320)) | (1L << (STATEMENT - 320)) | (1L << (STATEMENT_ID - 320)) | (1L << (STATIC - 320)) | (1L << (STATISTICS - 320)) | (1L << (STRING - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TABLE - 384)) | (1L << (THE - 384)) | (1L << (THEN - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TO - 384)) | (1L << (TO_CHAR - 384)) | (1L << (TO_NUMBER - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUE - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNION - 384)) | (1L << (UNIQUE - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNPIVOT - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATE - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (USING - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VALUES - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHEN - 384)) | (1L << (WHENEVER - 384)) | (1L << (WHERE - 384)) | (1L << (WHILE - 384)) | (1L << (WITH - 384)) | (1L << (WITHIN - 384)) | (1L << (WORK - 384)) | (1L << (WRITE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)) | (1L << (REGR_ - 448)) | (1L << (STDDEV - 448)) | (1L << (VAR_ - 448)) | (1L << (COVAR_ - 448)) | (1L << (NATIONAL_CHAR_STRING_LIT - 448)) | (1L << (UNSIGNED_INTEGER - 448)) | (1L << (APPROXIMATE_NUM_LIT - 448)) | (1L << (CHAR_STRING - 448)) | (1L << (DELIMITED_ID - 448)) | (1L << (LEFT_PAREN - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PLUS_SIGN - 512)) | (1L << (MINUS_SIGN - 512)) | (1L << (BINDVAR - 512)) | (1L << (COLON - 512)) | (1L << (INTRODUCER - 512)))) != 0) || _la==REGULAR_ID) {
                    {
                        setState(5150);
                        argument();
                        setState(5152);
                        _la = _input.LA(1);
                        if (_la==IGNORE || _la==RESPECT) {
                            {
                                setState(5151);
                                respect_or_ignore_nulls();
                            }
                        }

                    }
                }

                setState(5163);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==COMMA) {
                    {
                        {
                            setState(5156);
                            match(COMMA);
                            setState(5157);
                            argument();
                            setState(5159);
                            _la = _input.LA(1);
                            if (_la==IGNORE || _la==RESPECT) {
                                {
                                    setState(5158);
                                    respect_or_ignore_nulls();
                                }
                            }

                        }
                    }
                    setState(5165);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(5166);
                match(RIGHT_PAREN);
                setState(5168);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,668,_ctx) ) {
                    case 1:
                    {
                        setState(5167);
                        keep_clause();
                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Function_argument_modelingContext extends ParserRuleContext {
        public Column_nameContext column_name() {
            return getRuleContext(Column_nameContext.class,0);
        }
        public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
        public Tableview_nameContext tableview_name() {
            return getRuleContext(Tableview_nameContext.class,0);
        }
        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }
        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class,i);
        }
        public Keep_clauseContext keep_clause() {
            return getRuleContext(Keep_clauseContext.class,0);
        }
        public List<NumericContext> numeric() {
            return getRuleContexts(NumericContext.class);
        }
        public NumericContext numeric(int i) {
            return getRuleContext(NumericContext.class,i);
        }
        public List<TerminalNode> NULL() { return getTokens(PlSqlParser.NULL); }
        public TerminalNode NULL(int i) {
            return getToken(PlSqlParser.NULL, i);
        }
        public List<Column_aliasContext> column_alias() {
            return getRuleContexts(Column_aliasContext.class);
        }
        public Column_aliasContext column_alias(int i) {
            return getRuleContext(Column_aliasContext.class,i);
        }
        public Function_argument_modelingContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_function_argument_modeling; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFunction_argument_modeling(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFunction_argument_modeling(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFunction_argument_modeling(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Function_argument_modelingContext function_argument_modeling() throws RecognitionException {
        Function_argument_modelingContext _localctx = new Function_argument_modelingContext(_ctx, getState());
        enterRule(_localctx, 734, RULE_function_argument_modeling);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(5170);
                match(LEFT_PAREN);
                setState(5171);
                column_name();
                setState(5184);
                _la = _input.LA(1);
                if (_la==COMMA) {
                    {
                        setState(5172);
                        match(COMMA);
                        setState(5175);
                        switch (_input.LA(1)) {
                            case UNSIGNED_INTEGER:
                            case APPROXIMATE_NUM_LIT:
                            {
                                setState(5173);
                                numeric();
                            }
                            break;
                            case NULL:
                            {
                                setState(5174);
                                match(NULL);
                            }
                            break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        setState(5182);
                        _la = _input.LA(1);
                        if (_la==COMMA) {
                            {
                                setState(5177);
                                match(COMMA);
                                setState(5180);
                                switch (_input.LA(1)) {
                                    case UNSIGNED_INTEGER:
                                    case APPROXIMATE_NUM_LIT:
                                    {
                                        setState(5178);
                                        numeric();
                                    }
                                    break;
                                    case NULL:
                                    {
                                        setState(5179);
                                        match(NULL);
                                    }
                                    break;
                                    default:
                                        throw new NoViableAltException(this);
                                }
                            }
                        }

                    }
                }

                setState(5186);
                match(USING);
                setState(5206);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,676,_ctx) ) {
                    case 1:
                    {
                        setState(5187);
                        tableview_name();
                        setState(5188);
                        match(PERIOD);
                        setState(5189);
                        match(ASTERISK);
                    }
                    break;
                    case 2:
                    {
                        setState(5191);
                        match(ASTERISK);
                    }
                    break;
                    case 3:
                    {
                        setState(5192);
                        expression();
                        setState(5194);
                        _la = _input.LA(1);
                        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ALTER) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREADTH) | (1L << BULK) | (1L << BY) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHECK) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DEPTH - 64)) | (1L << (DESC - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (ELSE - 64)) | (1L << (ELSIF - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (END - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EXCEPT - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXCLUSIVE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FETCH - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FOR - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GOTO - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HAVING - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IN - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEX - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERSECT - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTO - 192)) | (1L << (INVALIDATE - 192)) | (1L << (IS - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCK - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUS - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCACHE - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)) | (1L << (NOENTITYESCAPING - 192)) | (1L << (NOMAXVALUE - 192)) | (1L << (NOMINVALUE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NONE - 256)) | (1L << (NOORDER - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NOT - 256)) | (1L << (NOWAIT - 256)) | (1L << (NULL - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OF - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ON - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (OPTION - 256)) | (1L << (OR - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDER - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PIVOT - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (PRIOR - 256)) | (1L << (PROCEDURE - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (REVOKE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SEARCH - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELECT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENCE - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHARE - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (SQL_PERCENT_ROWCOUNT - 320)) | (1L << (STANDALONE - 320)) | (1L << (START - 320)) | (1L << (STARTUP - 320)) | (1L << (STATEMENT - 320)) | (1L << (STATEMENT_ID - 320)) | (1L << (STATIC - 320)) | (1L << (STATISTICS - 320)) | (1L << (STRING - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TABLE - 384)) | (1L << (THE - 384)) | (1L << (THEN - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TO - 384)) | (1L << (TO_CHAR - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUE - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNION - 384)) | (1L << (UNIQUE - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNPIVOT - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATE - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (USING - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VALUES - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHEN - 384)) | (1L << (WHENEVER - 384)) | (1L << (WHERE - 384)) | (1L << (WHILE - 384)) | (1L << (WITH - 384)) | (1L << (WITHIN - 384)) | (1L << (WORK - 384)) | (1L << (WRITE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)) | (1L << (REGR_ - 448)) | (1L << (STDDEV - 448)) | (1L << (VAR_ - 448)) | (1L << (COVAR_ - 448)) | (1L << (NATIONAL_CHAR_STRING_LIT - 448)) | (1L << (CHAR_STRING - 448)) | (1L << (DELIMITED_ID - 448)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
                            {
                                setState(5193);
                                column_alias();
                            }
                        }

                        setState(5203);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la==COMMA) {
                            {
                                {
                                    setState(5196);
                                    match(COMMA);
                                    setState(5197);
                                    expression();
                                    setState(5199);
                                    _la = _input.LA(1);
                                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ALTER) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREADTH) | (1L << BULK) | (1L << BY) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHECK) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DEPTH - 64)) | (1L << (DESC - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (ELSE - 64)) | (1L << (ELSIF - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (END - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EXCEPT - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXCLUSIVE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FETCH - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FOR - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GOTO - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HAVING - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IN - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEX - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERSECT - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTO - 192)) | (1L << (INVALIDATE - 192)) | (1L << (IS - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCK - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUS - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCACHE - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)) | (1L << (NOENTITYESCAPING - 192)) | (1L << (NOMAXVALUE - 192)) | (1L << (NOMINVALUE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NONE - 256)) | (1L << (NOORDER - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NOT - 256)) | (1L << (NOWAIT - 256)) | (1L << (NULL - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OF - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ON - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (OPTION - 256)) | (1L << (OR - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDER - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PIVOT - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (PRIOR - 256)) | (1L << (PROCEDURE - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (REVOKE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SEARCH - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELECT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENCE - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHARE - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (SQL_PERCENT_ROWCOUNT - 320)) | (1L << (STANDALONE - 320)) | (1L << (START - 320)) | (1L << (STARTUP - 320)) | (1L << (STATEMENT - 320)) | (1L << (STATEMENT_ID - 320)) | (1L << (STATIC - 320)) | (1L << (STATISTICS - 320)) | (1L << (STRING - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TABLE - 384)) | (1L << (THE - 384)) | (1L << (THEN - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TO - 384)) | (1L << (TO_CHAR - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUE - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNION - 384)) | (1L << (UNIQUE - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNPIVOT - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATE - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (USING - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VALUES - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHEN - 384)) | (1L << (WHENEVER - 384)) | (1L << (WHERE - 384)) | (1L << (WHILE - 384)) | (1L << (WITH - 384)) | (1L << (WITHIN - 384)) | (1L << (WORK - 384)) | (1L << (WRITE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)) | (1L << (REGR_ - 448)) | (1L << (STDDEV - 448)) | (1L << (VAR_ - 448)) | (1L << (COVAR_ - 448)) | (1L << (NATIONAL_CHAR_STRING_LIT - 448)) | (1L << (CHAR_STRING - 448)) | (1L << (DELIMITED_ID - 448)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
                                        {
                                            setState(5198);
                                            column_alias();
                                        }
                                    }

                                }
                            }
                            setState(5205);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                    }
                    break;
                }
                setState(5208);
                match(RIGHT_PAREN);
                setState(5210);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,677,_ctx) ) {
                    case 1:
                    {
                        setState(5209);
                        keep_clause();
                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Respect_or_ignore_nullsContext extends ParserRuleContext {
        public TerminalNode NULLS() { return getToken(PlSqlParser.NULLS, 0); }
        public TerminalNode RESPECT() { return getToken(PlSqlParser.RESPECT, 0); }
        public TerminalNode IGNORE() { return getToken(PlSqlParser.IGNORE, 0); }
        public Respect_or_ignore_nullsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_respect_or_ignore_nulls; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterRespect_or_ignore_nulls(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitRespect_or_ignore_nulls(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitRespect_or_ignore_nulls(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Respect_or_ignore_nullsContext respect_or_ignore_nulls() throws RecognitionException {
        Respect_or_ignore_nullsContext _localctx = new Respect_or_ignore_nullsContext(_ctx, getState());
        enterRule(_localctx, 736, RULE_respect_or_ignore_nulls);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(5212);
                _la = _input.LA(1);
                if ( !(_la==IGNORE || _la==RESPECT) ) {
                    _errHandler.recoverInline(this);
                } else {
                    consume();
                }
                setState(5213);
                match(NULLS);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class ArgumentContext extends ParserRuleContext {
        public Expression_wrapperContext expression_wrapper() {
            return getRuleContext(Expression_wrapperContext.class,0);
        }
        public IdContext id() {
            return getRuleContext(IdContext.class,0);
        }
        public TerminalNode ASSOCIATION_OPERATOR() { return getToken(PlSqlParser.ASSOCIATION_OPERATOR, 0); }
        public ArgumentContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_argument; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterArgument(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitArgument(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitArgument(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ArgumentContext argument() throws RecognitionException {
        ArgumentContext _localctx = new ArgumentContext(_ctx, getState());
        enterRule(_localctx, 738, RULE_argument);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(5218);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,678,_ctx) ) {
                    case 1:
                    {
                        setState(5215);
                        id();
                        setState(5216);
                        match(ASSOCIATION_OPERATOR);
                    }
                    break;
                }
                setState(5220);
                expression_wrapper();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Type_specContext extends ParserRuleContext {
        public DatatypeContext datatype() {
            return getRuleContext(DatatypeContext.class,0);
        }
        public Type_nameContext type_name() {
            return getRuleContext(Type_nameContext.class,0);
        }
        public TerminalNode REF() { return getToken(PlSqlParser.REF, 0); }
        public TerminalNode AT_SIGN() { return getToken(PlSqlParser.AT_SIGN, 0); }
        public Link_nameContext link_name() {
            return getRuleContext(Link_nameContext.class,0);
        }
        public TerminalNode PERCENT_ROWTYPE() { return getToken(PlSqlParser.PERCENT_ROWTYPE, 0); }
        public TerminalNode PERCENT_TYPE() { return getToken(PlSqlParser.PERCENT_TYPE, 0); }
        public Type_specContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_type_spec; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterType_spec(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitType_spec(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitType_spec(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Type_specContext type_spec() throws RecognitionException {
        Type_specContext _localctx = new Type_specContext(_ctx, getState());
        enterRule(_localctx, 740, RULE_type_spec);
        int _la;
        try {
            setState(5234);
            _errHandler.sync(this);
            switch ( getInterpreter().adaptivePredict(_input,682,_ctx) ) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(5222);
                    datatype();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(5224);
                    _errHandler.sync(this);
                    switch ( getInterpreter().adaptivePredict(_input,679,_ctx) ) {
                        case 1:
                        {
                            setState(5223);
                            match(REF);
                        }
                        break;
                    }
                    setState(5226);
                    type_name();
                    setState(5229);
                    _la = _input.LA(1);
                    if (_la==AT_SIGN) {
                        {
                            setState(5227);
                            match(AT_SIGN);
                            setState(5228);
                            link_name();
                        }
                    }

                    setState(5232);
                    _la = _input.LA(1);
                    if (_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) {
                        {
                            setState(5231);
                            _la = _input.LA(1);
                            if ( !(_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) ) {
                                _errHandler.recoverInline(this);
                            } else {
                                consume();
                            }
                        }
                    }

                }
                break;
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class DatatypeContext extends ParserRuleContext {
        public Native_datatype_elementContext native_datatype_element() {
            return getRuleContext(Native_datatype_elementContext.class,0);
        }
        public Precision_partContext precision_part() {
            return getRuleContext(Precision_partContext.class,0);
        }
        public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
        public TerminalNode TIME() { return getToken(PlSqlParser.TIME, 0); }
        public TerminalNode ZONE() { return getToken(PlSqlParser.ZONE, 0); }
        public TerminalNode LOCAL() { return getToken(PlSqlParser.LOCAL, 0); }
        public TerminalNode INTERVAL() { return getToken(PlSqlParser.INTERVAL, 0); }
        public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
        public TerminalNode YEAR() { return getToken(PlSqlParser.YEAR, 0); }
        public TerminalNode DAY() { return getToken(PlSqlParser.DAY, 0); }
        public TerminalNode MONTH() { return getToken(PlSqlParser.MONTH, 0); }
        public TerminalNode SECOND() { return getToken(PlSqlParser.SECOND, 0); }
        public List<Expression_wrapperContext> expression_wrapper() {
            return getRuleContexts(Expression_wrapperContext.class);
        }
        public Expression_wrapperContext expression_wrapper(int i) {
            return getRuleContext(Expression_wrapperContext.class,i);
        }
        public DatatypeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_datatype; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDatatype(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDatatype(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDatatype(this);
            else return visitor.visitChildren(this);
        }
    }

    public final DatatypeContext datatype() throws RecognitionException {
        DatatypeContext _localctx = new DatatypeContext(_ctx, getState());
        enterRule(_localctx, 742, RULE_datatype);
        int _la;
        try {
            setState(5264);
            switch (_input.LA(1)) {
                case BFILE:
                case BINARY_DOUBLE:
                case BINARY_FLOAT:
                case BINARY_INTEGER:
                case BLOB:
                case BOOLEAN:
                case CHAR:
                case CHARACTER:
                case CLOB:
                case DATE:
                case DAY:
                case DEC:
                case DECIMAL:
                case DOUBLE:
                case DSINTERVAL_UNCONSTRAINED:
                case FLOAT:
                case HOUR:
                case INT:
                case INTEGER:
                case LONG:
                case MINUTE:
                case MLSLABEL:
                case MONTH:
                case NATURAL:
                case NATURALN:
                case NCHAR:
                case NCLOB:
                case NUMBER:
                case NUMERIC:
                case NVARCHAR2:
                case PLS_INTEGER:
                case POSITIVE:
                case POSITIVEN:
                case RAW:
                case REAL:
                case ROWID:
                case SECOND:
                case SIGNTYPE:
                case SIMPLE_INTEGER:
                case SMALLINT:
                case STRING:
                case TIMESTAMP:
                case TIMESTAMP_LTZ_UNCONSTRAINED:
                case TIMESTAMP_TZ_UNCONSTRAINED:
                case TIMESTAMP_UNCONSTRAINED:
                case TIMEZONE_ABBR:
                case TIMEZONE_HOUR:
                case TIMEZONE_MINUTE:
                case TIMEZONE_REGION:
                case UROWID:
                case VARCHAR:
                case VARCHAR2:
                case YEAR:
                case YMINTERVAL_UNCONSTRAINED:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(5236);
                    native_datatype_element();
                    setState(5238);
                    _errHandler.sync(this);
                    switch ( getInterpreter().adaptivePredict(_input,683,_ctx) ) {
                        case 1:
                        {
                            setState(5237);
                            precision_part();
                        }
                        break;
                    }
                    setState(5246);
                    _la = _input.LA(1);
                    if (_la==WITH) {
                        {
                            setState(5240);
                            match(WITH);
                            setState(5242);
                            _la = _input.LA(1);
                            if (_la==LOCAL) {
                                {
                                    setState(5241);
                                    match(LOCAL);
                                }
                            }

                            setState(5244);
                            match(TIME);
                            setState(5245);
                            match(ZONE);
                        }
                    }

                }
                break;
                case INTERVAL:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(5248);
                    match(INTERVAL);
                    setState(5249);
                    _la = _input.LA(1);
                    if ( !(_la==DAY || _la==YEAR) ) {
                        _errHandler.recoverInline(this);
                    } else {
                        consume();
                    }
                    setState(5254);
                    _la = _input.LA(1);
                    if (_la==LEFT_PAREN) {
                        {
                            setState(5250);
                            match(LEFT_PAREN);
                            setState(5251);
                            expression_wrapper();
                            setState(5252);
                            match(RIGHT_PAREN);
                        }
                    }

                    setState(5256);
                    match(TO);
                    setState(5257);
                    _la = _input.LA(1);
                    if ( !(_la==MONTH || _la==SECOND) ) {
                        _errHandler.recoverInline(this);
                    } else {
                        consume();
                    }
                    setState(5262);
                    _errHandler.sync(this);
                    switch ( getInterpreter().adaptivePredict(_input,687,_ctx) ) {
                        case 1:
                        {
                            setState(5258);
                            match(LEFT_PAREN);
                            setState(5259);
                            expression_wrapper();
                            setState(5260);
                            match(RIGHT_PAREN);
                        }
                        break;
                    }
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Precision_partContext extends ParserRuleContext {
        public List<NumericContext> numeric() {
            return getRuleContexts(NumericContext.class);
        }
        public NumericContext numeric(int i) {
            return getRuleContext(NumericContext.class,i);
        }
        public TerminalNode CHAR() { return getToken(PlSqlParser.CHAR, 0); }
        public TerminalNode BYTE() { return getToken(PlSqlParser.BYTE, 0); }
        public Precision_partContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_precision_part; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPrecision_part(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPrecision_part(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPrecision_part(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Precision_partContext precision_part() throws RecognitionException {
        Precision_partContext _localctx = new Precision_partContext(_ctx, getState());
        enterRule(_localctx, 744, RULE_precision_part);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(5266);
                match(LEFT_PAREN);
                setState(5267);
                numeric();
                setState(5270);
                _la = _input.LA(1);
                if (_la==COMMA) {
                    {
                        setState(5268);
                        match(COMMA);
                        setState(5269);
                        numeric();
                    }
                }

                setState(5273);
                _la = _input.LA(1);
                if (_la==BYTE || _la==CHAR) {
                    {
                        setState(5272);
                        _la = _input.LA(1);
                        if ( !(_la==BYTE || _la==CHAR) ) {
                            _errHandler.recoverInline(this);
                        } else {
                            consume();
                        }
                    }
                }

                setState(5275);
                match(RIGHT_PAREN);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Native_datatype_elementContext extends ParserRuleContext {
        public TerminalNode BINARY_INTEGER() { return getToken(PlSqlParser.BINARY_INTEGER, 0); }
        public TerminalNode PLS_INTEGER() { return getToken(PlSqlParser.PLS_INTEGER, 0); }
        public TerminalNode NATURAL() { return getToken(PlSqlParser.NATURAL, 0); }
        public TerminalNode BINARY_FLOAT() { return getToken(PlSqlParser.BINARY_FLOAT, 0); }
        public TerminalNode BINARY_DOUBLE() { return getToken(PlSqlParser.BINARY_DOUBLE, 0); }
        public TerminalNode NATURALN() { return getToken(PlSqlParser.NATURALN, 0); }
        public TerminalNode POSITIVE() { return getToken(PlSqlParser.POSITIVE, 0); }
        public TerminalNode POSITIVEN() { return getToken(PlSqlParser.POSITIVEN, 0); }
        public TerminalNode SIGNTYPE() { return getToken(PlSqlParser.SIGNTYPE, 0); }
        public TerminalNode SIMPLE_INTEGER() { return getToken(PlSqlParser.SIMPLE_INTEGER, 0); }
        public TerminalNode NVARCHAR2() { return getToken(PlSqlParser.NVARCHAR2, 0); }
        public TerminalNode DEC() { return getToken(PlSqlParser.DEC, 0); }
        public TerminalNode INTEGER() { return getToken(PlSqlParser.INTEGER, 0); }
        public TerminalNode INT() { return getToken(PlSqlParser.INT, 0); }
        public TerminalNode NUMERIC() { return getToken(PlSqlParser.NUMERIC, 0); }
        public TerminalNode SMALLINT() { return getToken(PlSqlParser.SMALLINT, 0); }
        public TerminalNode NUMBER() { return getToken(PlSqlParser.NUMBER, 0); }
        public TerminalNode DECIMAL() { return getToken(PlSqlParser.DECIMAL, 0); }
        public TerminalNode DOUBLE() { return getToken(PlSqlParser.DOUBLE, 0); }
        public TerminalNode PRECISION() { return getToken(PlSqlParser.PRECISION, 0); }
        public TerminalNode FLOAT() { return getToken(PlSqlParser.FLOAT, 0); }
        public TerminalNode REAL() { return getToken(PlSqlParser.REAL, 0); }
        public TerminalNode NCHAR() { return getToken(PlSqlParser.NCHAR, 0); }
        public TerminalNode LONG() { return getToken(PlSqlParser.LONG, 0); }
        public TerminalNode RAW() { return getToken(PlSqlParser.RAW, 0); }
        public TerminalNode CHAR() { return getToken(PlSqlParser.CHAR, 0); }
        public TerminalNode CHARACTER() { return getToken(PlSqlParser.CHARACTER, 0); }
        public TerminalNode VARCHAR2() { return getToken(PlSqlParser.VARCHAR2, 0); }
        public TerminalNode VARCHAR() { return getToken(PlSqlParser.VARCHAR, 0); }
        public TerminalNode STRING() { return getToken(PlSqlParser.STRING, 0); }
        public TerminalNode BOOLEAN() { return getToken(PlSqlParser.BOOLEAN, 0); }
        public TerminalNode DATE() { return getToken(PlSqlParser.DATE, 0); }
        public TerminalNode ROWID() { return getToken(PlSqlParser.ROWID, 0); }
        public TerminalNode UROWID() { return getToken(PlSqlParser.UROWID, 0); }
        public TerminalNode YEAR() { return getToken(PlSqlParser.YEAR, 0); }
        public TerminalNode MONTH() { return getToken(PlSqlParser.MONTH, 0); }
        public TerminalNode DAY() { return getToken(PlSqlParser.DAY, 0); }
        public TerminalNode HOUR() { return getToken(PlSqlParser.HOUR, 0); }
        public TerminalNode MINUTE() { return getToken(PlSqlParser.MINUTE, 0); }
        public TerminalNode SECOND() { return getToken(PlSqlParser.SECOND, 0); }
        public TerminalNode TIMEZONE_HOUR() { return getToken(PlSqlParser.TIMEZONE_HOUR, 0); }
        public TerminalNode TIMEZONE_MINUTE() { return getToken(PlSqlParser.TIMEZONE_MINUTE, 0); }
        public TerminalNode TIMEZONE_REGION() { return getToken(PlSqlParser.TIMEZONE_REGION, 0); }
        public TerminalNode TIMEZONE_ABBR() { return getToken(PlSqlParser.TIMEZONE_ABBR, 0); }
        public TerminalNode TIMESTAMP() { return getToken(PlSqlParser.TIMESTAMP, 0); }
        public TerminalNode TIMESTAMP_UNCONSTRAINED() { return getToken(PlSqlParser.TIMESTAMP_UNCONSTRAINED, 0); }
        public TerminalNode TIMESTAMP_TZ_UNCONSTRAINED() { return getToken(PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, 0); }
        public TerminalNode TIMESTAMP_LTZ_UNCONSTRAINED() { return getToken(PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0); }
        public TerminalNode YMINTERVAL_UNCONSTRAINED() { return getToken(PlSqlParser.YMINTERVAL_UNCONSTRAINED, 0); }
        public TerminalNode DSINTERVAL_UNCONSTRAINED() { return getToken(PlSqlParser.DSINTERVAL_UNCONSTRAINED, 0); }
        public TerminalNode BFILE() { return getToken(PlSqlParser.BFILE, 0); }
        public TerminalNode BLOB() { return getToken(PlSqlParser.BLOB, 0); }
        public TerminalNode CLOB() { return getToken(PlSqlParser.CLOB, 0); }
        public TerminalNode NCLOB() { return getToken(PlSqlParser.NCLOB, 0); }
        public TerminalNode MLSLABEL() { return getToken(PlSqlParser.MLSLABEL, 0); }
        public Native_datatype_elementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_native_datatype_element; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterNative_datatype_element(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitNative_datatype_element(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitNative_datatype_element(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Native_datatype_elementContext native_datatype_element() throws RecognitionException {
        Native_datatype_elementContext _localctx = new Native_datatype_elementContext(_ctx, getState());
        enterRule(_localctx, 746, RULE_native_datatype_element);
        int _la;
        try {
            setState(5337);
            switch (_input.LA(1)) {
                case BINARY_INTEGER:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(5277);
                    match(BINARY_INTEGER);
                }
                break;
                case PLS_INTEGER:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(5278);
                    match(PLS_INTEGER);
                }
                break;
                case NATURAL:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(5279);
                    match(NATURAL);
                }
                break;
                case BINARY_FLOAT:
                    enterOuterAlt(_localctx, 4);
                {
                    setState(5280);
                    match(BINARY_FLOAT);
                }
                break;
                case BINARY_DOUBLE:
                    enterOuterAlt(_localctx, 5);
                {
                    setState(5281);
                    match(BINARY_DOUBLE);
                }
                break;
                case NATURALN:
                    enterOuterAlt(_localctx, 6);
                {
                    setState(5282);
                    match(NATURALN);
                }
                break;
                case POSITIVE:
                    enterOuterAlt(_localctx, 7);
                {
                    setState(5283);
                    match(POSITIVE);
                }
                break;
                case POSITIVEN:
                    enterOuterAlt(_localctx, 8);
                {
                    setState(5284);
                    match(POSITIVEN);
                }
                break;
                case SIGNTYPE:
                    enterOuterAlt(_localctx, 9);
                {
                    setState(5285);
                    match(SIGNTYPE);
                }
                break;
                case SIMPLE_INTEGER:
                    enterOuterAlt(_localctx, 10);
                {
                    setState(5286);
                    match(SIMPLE_INTEGER);
                }
                break;
                case NVARCHAR2:
                    enterOuterAlt(_localctx, 11);
                {
                    setState(5287);
                    match(NVARCHAR2);
                }
                break;
                case DEC:
                    enterOuterAlt(_localctx, 12);
                {
                    setState(5288);
                    match(DEC);
                }
                break;
                case INTEGER:
                    enterOuterAlt(_localctx, 13);
                {
                    setState(5289);
                    match(INTEGER);
                }
                break;
                case INT:
                    enterOuterAlt(_localctx, 14);
                {
                    setState(5290);
                    match(INT);
                }
                break;
                case NUMERIC:
                    enterOuterAlt(_localctx, 15);
                {
                    setState(5291);
                    match(NUMERIC);
                }
                break;
                case SMALLINT:
                    enterOuterAlt(_localctx, 16);
                {
                    setState(5292);
                    match(SMALLINT);
                }
                break;
                case NUMBER:
                    enterOuterAlt(_localctx, 17);
                {
                    setState(5293);
                    match(NUMBER);
                }
                break;
                case DECIMAL:
                    enterOuterAlt(_localctx, 18);
                {
                    setState(5294);
                    match(DECIMAL);
                }
                break;
                case DOUBLE:
                    enterOuterAlt(_localctx, 19);
                {
                    setState(5295);
                    match(DOUBLE);
                    setState(5297);
                    _la = _input.LA(1);
                    if (_la==PRECISION) {
                        {
                            setState(5296);
                            match(PRECISION);
                        }
                    }

                }
                break;
                case FLOAT:
                    enterOuterAlt(_localctx, 20);
                {
                    setState(5299);
                    match(FLOAT);
                }
                break;
                case REAL:
                    enterOuterAlt(_localctx, 21);
                {
                    setState(5300);
                    match(REAL);
                }
                break;
                case NCHAR:
                    enterOuterAlt(_localctx, 22);
                {
                    setState(5301);
                    match(NCHAR);
                }
                break;
                case LONG:
                    enterOuterAlt(_localctx, 23);
                {
                    setState(5302);
                    match(LONG);
                    setState(5304);
                    _la = _input.LA(1);
                    if (_la==RAW) {
                        {
                            setState(5303);
                            match(RAW);
                        }
                    }

                }
                break;
                case CHAR:
                    enterOuterAlt(_localctx, 24);
                {
                    setState(5306);
                    match(CHAR);
                }
                break;
                case CHARACTER:
                    enterOuterAlt(_localctx, 25);
                {
                    setState(5307);
                    match(CHARACTER);
                }
                break;
                case VARCHAR2:
                    enterOuterAlt(_localctx, 26);
                {
                    setState(5308);
                    match(VARCHAR2);
                }
                break;
                case VARCHAR:
                    enterOuterAlt(_localctx, 27);
                {
                    setState(5309);
                    match(VARCHAR);
                }
                break;
                case STRING:
                    enterOuterAlt(_localctx, 28);
                {
                    setState(5310);
                    match(STRING);
                }
                break;
                case RAW:
                    enterOuterAlt(_localctx, 29);
                {
                    setState(5311);
                    match(RAW);
                }
                break;
                case BOOLEAN:
                    enterOuterAlt(_localctx, 30);
                {
                    setState(5312);
                    match(BOOLEAN);
                }
                break;
                case DATE:
                    enterOuterAlt(_localctx, 31);
                {
                    setState(5313);
                    match(DATE);
                }
                break;
                case ROWID:
                    enterOuterAlt(_localctx, 32);
                {
                    setState(5314);
                    match(ROWID);
                }
                break;
                case UROWID:
                    enterOuterAlt(_localctx, 33);
                {
                    setState(5315);
                    match(UROWID);
                }
                break;
                case YEAR:
                    enterOuterAlt(_localctx, 34);
                {
                    setState(5316);
                    match(YEAR);
                }
                break;
                case MONTH:
                    enterOuterAlt(_localctx, 35);
                {
                    setState(5317);
                    match(MONTH);
                }
                break;
                case DAY:
                    enterOuterAlt(_localctx, 36);
                {
                    setState(5318);
                    match(DAY);
                }
                break;
                case HOUR:
                    enterOuterAlt(_localctx, 37);
                {
                    setState(5319);
                    match(HOUR);
                }
                break;
                case MINUTE:
                    enterOuterAlt(_localctx, 38);
                {
                    setState(5320);
                    match(MINUTE);
                }
                break;
                case SECOND:
                    enterOuterAlt(_localctx, 39);
                {
                    setState(5321);
                    match(SECOND);
                }
                break;
                case TIMEZONE_HOUR:
                    enterOuterAlt(_localctx, 40);
                {
                    setState(5322);
                    match(TIMEZONE_HOUR);
                }
                break;
                case TIMEZONE_MINUTE:
                    enterOuterAlt(_localctx, 41);
                {
                    setState(5323);
                    match(TIMEZONE_MINUTE);
                }
                break;
                case TIMEZONE_REGION:
                    enterOuterAlt(_localctx, 42);
                {
                    setState(5324);
                    match(TIMEZONE_REGION);
                }
                break;
                case TIMEZONE_ABBR:
                    enterOuterAlt(_localctx, 43);
                {
                    setState(5325);
                    match(TIMEZONE_ABBR);
                }
                break;
                case TIMESTAMP:
                    enterOuterAlt(_localctx, 44);
                {
                    setState(5326);
                    match(TIMESTAMP);
                }
                break;
                case TIMESTAMP_UNCONSTRAINED:
                    enterOuterAlt(_localctx, 45);
                {
                    setState(5327);
                    match(TIMESTAMP_UNCONSTRAINED);
                }
                break;
                case TIMESTAMP_TZ_UNCONSTRAINED:
                    enterOuterAlt(_localctx, 46);
                {
                    setState(5328);
                    match(TIMESTAMP_TZ_UNCONSTRAINED);
                }
                break;
                case TIMESTAMP_LTZ_UNCONSTRAINED:
                    enterOuterAlt(_localctx, 47);
                {
                    setState(5329);
                    match(TIMESTAMP_LTZ_UNCONSTRAINED);
                }
                break;
                case YMINTERVAL_UNCONSTRAINED:
                    enterOuterAlt(_localctx, 48);
                {
                    setState(5330);
                    match(YMINTERVAL_UNCONSTRAINED);
                }
                break;
                case DSINTERVAL_UNCONSTRAINED:
                    enterOuterAlt(_localctx, 49);
                {
                    setState(5331);
                    match(DSINTERVAL_UNCONSTRAINED);
                }
                break;
                case BFILE:
                    enterOuterAlt(_localctx, 50);
                {
                    setState(5332);
                    match(BFILE);
                }
                break;
                case BLOB:
                    enterOuterAlt(_localctx, 51);
                {
                    setState(5333);
                    match(BLOB);
                }
                break;
                case CLOB:
                    enterOuterAlt(_localctx, 52);
                {
                    setState(5334);
                    match(CLOB);
                }
                break;
                case NCLOB:
                    enterOuterAlt(_localctx, 53);
                {
                    setState(5335);
                    match(NCLOB);
                }
                break;
                case MLSLABEL:
                    enterOuterAlt(_localctx, 54);
                {
                    setState(5336);
                    match(MLSLABEL);
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Bind_variableContext extends ParserRuleContext {
        public List<TerminalNode> BINDVAR() { return getTokens(PlSqlParser.BINDVAR); }
        public TerminalNode BINDVAR(int i) {
            return getToken(PlSqlParser.BINDVAR, i);
        }
        public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(PlSqlParser.UNSIGNED_INTEGER); }
        public TerminalNode UNSIGNED_INTEGER(int i) {
            return getToken(PlSqlParser.UNSIGNED_INTEGER, i);
        }
        public List<General_element_partContext> general_element_part() {
            return getRuleContexts(General_element_partContext.class);
        }
        public General_element_partContext general_element_part(int i) {
            return getRuleContext(General_element_partContext.class,i);
        }
        public TerminalNode INDICATOR() { return getToken(PlSqlParser.INDICATOR, 0); }
        public Bind_variableContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_bind_variable; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterBind_variable(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitBind_variable(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitBind_variable(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Bind_variableContext bind_variable() throws RecognitionException {
        Bind_variableContext _localctx = new Bind_variableContext(_ctx, getState());
        enterRule(_localctx, 748, RULE_bind_variable);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(5342);
                switch (_input.LA(1)) {
                    case BINDVAR:
                    {
                        setState(5339);
                        match(BINDVAR);
                    }
                    break;
                    case COLON:
                    {
                        setState(5340);
                        match(COLON);
                        setState(5341);
                        match(UNSIGNED_INTEGER);
                    }
                    break;
                    default:
                        throw new NoViableAltException(this);
                }
                setState(5352);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,697,_ctx) ) {
                    case 1:
                    {
                        setState(5345);
                        _la = _input.LA(1);
                        if (_la==INDICATOR) {
                            {
                                setState(5344);
                                match(INDICATOR);
                            }
                        }

                        setState(5350);
                        switch (_input.LA(1)) {
                            case BINDVAR:
                            {
                                setState(5347);
                                match(BINDVAR);
                            }
                            break;
                            case COLON:
                            {
                                setState(5348);
                                match(COLON);
                                setState(5349);
                                match(UNSIGNED_INTEGER);
                            }
                            break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    break;
                }
                setState(5358);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input,698,_ctx);
                while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
                    if ( _alt==1 ) {
                        {
                            {
                                setState(5354);
                                match(PERIOD);
                                setState(5355);
                                general_element_part();
                            }
                        }
                    }
                    setState(5360);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input,698,_ctx);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class General_elementContext extends ParserRuleContext {
        public List<General_element_partContext> general_element_part() {
            return getRuleContexts(General_element_partContext.class);
        }
        public General_element_partContext general_element_part(int i) {
            return getRuleContext(General_element_partContext.class,i);
        }
        public General_elementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_general_element; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterGeneral_element(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitGeneral_element(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitGeneral_element(this);
            else return visitor.visitChildren(this);
        }
    }

    public final General_elementContext general_element() throws RecognitionException {
        General_elementContext _localctx = new General_elementContext(_ctx, getState());
        enterRule(_localctx, 750, RULE_general_element);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(5361);
                general_element_part();
                setState(5366);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==PERIOD) {
                    {
                        {
                            setState(5362);
                            match(PERIOD);
                            setState(5363);
                            general_element_part();
                        }
                    }
                    setState(5368);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class General_element_partContext extends ParserRuleContext {
        public List<Id_expressionContext> id_expression() {
            return getRuleContexts(Id_expressionContext.class);
        }
        public Id_expressionContext id_expression(int i) {
            return getRuleContext(Id_expressionContext.class,i);
        }
        public TerminalNode INTRODUCER() { return getToken(PlSqlParser.INTRODUCER, 0); }
        public Char_set_nameContext char_set_name() {
            return getRuleContext(Char_set_nameContext.class,0);
        }
        public Function_argumentContext function_argument() {
            return getRuleContext(Function_argumentContext.class,0);
        }
        public General_element_partContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_general_element_part; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterGeneral_element_part(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitGeneral_element_part(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitGeneral_element_part(this);
            else return visitor.visitChildren(this);
        }
    }

    public final General_element_partContext general_element_part() throws RecognitionException {
        General_element_partContext _localctx = new General_element_partContext(_ctx, getState());
        enterRule(_localctx, 752, RULE_general_element_part);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(5371);
                _la = _input.LA(1);
                if (_la==INTRODUCER) {
                    {
                        setState(5369);
                        match(INTRODUCER);
                        setState(5370);
                        char_set_name();
                    }
                }

                setState(5373);
                id_expression();
                setState(5378);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input,701,_ctx);
                while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
                    if ( _alt==1 ) {
                        {
                            {
                                setState(5374);
                                match(PERIOD);
                                setState(5375);
                                id_expression();
                            }
                        }
                    }
                    setState(5380);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input,701,_ctx);
                }
                setState(5382);
                _errHandler.sync(this);
                switch ( getInterpreter().adaptivePredict(_input,702,_ctx) ) {
                    case 1:
                    {
                        setState(5381);
                        function_argument();
                    }
                    break;
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Table_elementContext extends ParserRuleContext {
        public List<Id_expressionContext> id_expression() {
            return getRuleContexts(Id_expressionContext.class);
        }
        public Id_expressionContext id_expression(int i) {
            return getRuleContext(Id_expressionContext.class,i);
        }
        public TerminalNode INTRODUCER() { return getToken(PlSqlParser.INTRODUCER, 0); }
        public Char_set_nameContext char_set_name() {
            return getRuleContext(Char_set_nameContext.class,0);
        }
        public Table_elementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_table_element; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTable_element(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTable_element(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTable_element(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Table_elementContext table_element() throws RecognitionException {
        Table_elementContext _localctx = new Table_elementContext(_ctx, getState());
        enterRule(_localctx, 754, RULE_table_element);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(5386);
                _la = _input.LA(1);
                if (_la==INTRODUCER) {
                    {
                        setState(5384);
                        match(INTRODUCER);
                        setState(5385);
                        char_set_name();
                    }
                }

                setState(5388);
                id_expression();
                setState(5393);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la==PERIOD) {
                    {
                        {
                            setState(5389);
                            match(PERIOD);
                            setState(5390);
                            id_expression();
                        }
                    }
                    setState(5395);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class ConstantContext extends ParserRuleContext {
        public TerminalNode TIMESTAMP() { return getToken(PlSqlParser.TIMESTAMP, 0); }
        public List<Quoted_stringContext> quoted_string() {
            return getRuleContexts(Quoted_stringContext.class);
        }
        public Quoted_stringContext quoted_string(int i) {
            return getRuleContext(Quoted_stringContext.class,i);
        }
        public List<Bind_variableContext> bind_variable() {
            return getRuleContexts(Bind_variableContext.class);
        }
        public Bind_variableContext bind_variable(int i) {
            return getRuleContext(Bind_variableContext.class,i);
        }
        public TerminalNode AT() { return getToken(PlSqlParser.AT, 0); }
        public TerminalNode TIME() { return getToken(PlSqlParser.TIME, 0); }
        public TerminalNode ZONE() { return getToken(PlSqlParser.ZONE, 0); }
        public TerminalNode INTERVAL() { return getToken(PlSqlParser.INTERVAL, 0); }
        public List<TerminalNode> DAY() { return getTokens(PlSqlParser.DAY); }
        public TerminalNode DAY(int i) {
            return getToken(PlSqlParser.DAY, i);
        }
        public List<TerminalNode> HOUR() { return getTokens(PlSqlParser.HOUR); }
        public TerminalNode HOUR(int i) {
            return getToken(PlSqlParser.HOUR, i);
        }
        public List<TerminalNode> MINUTE() { return getTokens(PlSqlParser.MINUTE); }
        public TerminalNode MINUTE(int i) {
            return getToken(PlSqlParser.MINUTE, i);
        }
        public List<TerminalNode> SECOND() { return getTokens(PlSqlParser.SECOND); }
        public TerminalNode SECOND(int i) {
            return getToken(PlSqlParser.SECOND, i);
        }
        public General_element_partContext general_element_part() {
            return getRuleContext(General_element_partContext.class,0);
        }
        public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
        public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(PlSqlParser.UNSIGNED_INTEGER); }
        public TerminalNode UNSIGNED_INTEGER(int i) {
            return getToken(PlSqlParser.UNSIGNED_INTEGER, i);
        }
        public NumericContext numeric() {
            return getRuleContext(NumericContext.class,0);
        }
        public TerminalNode DATE() { return getToken(PlSqlParser.DATE, 0); }
        public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
        public TerminalNode TRUE() { return getToken(PlSqlParser.TRUE, 0); }
        public TerminalNode FALSE() { return getToken(PlSqlParser.FALSE, 0); }
        public TerminalNode DBTIMEZONE() { return getToken(PlSqlParser.DBTIMEZONE, 0); }
        public TerminalNode SESSIONTIMEZONE() { return getToken(PlSqlParser.SESSIONTIMEZONE, 0); }
        public TerminalNode MINVALUE() { return getToken(PlSqlParser.MINVALUE, 0); }
        public TerminalNode MAXVALUE() { return getToken(PlSqlParser.MAXVALUE, 0); }
        public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
        public ConstantContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_constant; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterConstant(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitConstant(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitConstant(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ConstantContext constant() throws RecognitionException {
        ConstantContext _localctx = new ConstantContext(_ctx, getState());
        enterRule(_localctx, 756, RULE_constant);
        int _la;
        try {
            setState(5458);
            switch (_input.LA(1)) {
                case TIMESTAMP:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(5396);
                    match(TIMESTAMP);
                    setState(5399);
                    switch (_input.LA(1)) {
                        case NATIONAL_CHAR_STRING_LIT:
                        case CHAR_STRING:
                        {
                            setState(5397);
                            quoted_string();
                        }
                        break;
                        case BINDVAR:
                        case COLON:
                        {
                            setState(5398);
                            bind_variable();
                        }
                        break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    setState(5405);
                    _errHandler.sync(this);
                    switch ( getInterpreter().adaptivePredict(_input,706,_ctx) ) {
                        case 1:
                        {
                            setState(5401);
                            match(AT);
                            setState(5402);
                            match(TIME);
                            setState(5403);
                            match(ZONE);
                            setState(5404);
                            quoted_string();
                        }
                        break;
                    }
                }
                break;
                case INTERVAL:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(5407);
                    match(INTERVAL);
                    setState(5411);
                    switch (_input.LA(1)) {
                        case NATIONAL_CHAR_STRING_LIT:
                        case CHAR_STRING:
                        {
                            setState(5408);
                            quoted_string();
                        }
                        break;
                        case BINDVAR:
                        case COLON:
                        {
                            setState(5409);
                            bind_variable();
                        }
                        break;
                        case A_LETTER:
                        case ADD:
                        case AFTER:
                        case AGENT:
                        case AGGREGATE:
                        case ALL:
                        case ALTER:
                        case ANALYZE:
                        case AND:
                        case ANY:
                        case ARRAY:
                        case AS:
                        case ASC:
                        case ASSOCIATE:
                        case AT:
                        case ATTRIBUTE:
                        case AUDIT:
                        case AUTHID:
                        case AUTO:
                        case AUTOMATIC:
                        case AUTONOMOUS_TRANSACTION:
                        case BATCH:
                        case BEFORE:
                        case BEGIN:
                        case BETWEEN:
                        case BFILE:
                        case BINARY_DOUBLE:
                        case BINARY_FLOAT:
                        case BINARY_INTEGER:
                        case BLOB:
                        case BLOCK:
                        case BODY:
                        case BOOLEAN:
                        case BOTH:
                        case BREADTH:
                        case BULK:
                        case BY:
                        case BYTE:
                        case C_LETTER:
                        case CACHE:
                        case CALL:
                        case CANONICAL:
                        case CASCADE:
                        case CASE:
                        case CAST:
                        case CHAR:
                        case CHAR_CS:
                        case CHARACTER:
                        case CHECK:
                        case CHR:
                        case CLOB:
                        case CLOSE:
                        case CLUSTER:
                        case COLLECT:
                        case COLUMNS:
                        case COMMENT:
                        case COMMIT:
                        case COMMITTED:
                        case COMPATIBILITY:
                        case COMPILE:
                        case COMPOUND:
                        case CONNECT:
                        case CONNECT_BY_ROOT:
                        case CONSTANT:
                        case CONSTRAINT:
                        case CONSTRAINTS:
                        case CONSTRUCTOR:
                        case CONTENT:
                        case CONTEXT:
                        case CONTINUE:
                        case CONVERT:
                        case CORRUPT_XID:
                        case CORRUPT_XID_ALL:
                        case COST:
                        case COUNT:
                        case CREATE:
                        case CROSS:
                        case CUBE:
                        case CURRENT:
                        case CURRENT_USER:
                        case CURSOR:
                        case CUSTOMDATUM:
                        case CYCLE:
                        case DATA:
                        case DATABASE:
                        case DATE:
                        case DAY:
                        case DB_ROLE_CHANGE:
                        case DBTIMEZONE:
                        case DDL:
                        case DEBUG:
                        case DEC:
                        case DECIMAL:
                        case DECLARE:
                        case DECOMPOSE:
                        case DECREMENT:
                        case DEFAULT:
                        case DEFAULTS:
                        case DEFERRED:
                        case DEFINER:
                        case DELETE:
                        case DEPTH:
                        case DESC:
                        case DETERMINISTIC:
                        case DIMENSION:
                        case DISABLE:
                        case DISASSOCIATE:
                        case DISTINCT:
                        case DOCUMENT:
                        case DOUBLE:
                        case DROP:
                        case DSINTERVAL_UNCONSTRAINED:
                        case EACH:
                        case ELEMENT:
                        case ELSE:
                        case ELSIF:
                        case EMPTY:
                        case ENABLE:
                        case ENCODING:
                        case END:
                        case ENTITYESCAPING:
                        case ERRORS:
                        case ESCAPE:
                        case EXCEPT:
                        case EVALNAME:
                        case EXCEPTION:
                        case EXCEPTION_INIT:
                        case EXCEPTIONS:
                        case EXCLUDE:
                        case EXCLUSIVE:
                        case EXECUTE:
                        case EXISTS:
                        case EXIT:
                        case EXPLAIN:
                        case EXTERNAL:
                        case EXTRACT:
                        case FAILURE:
                        case FALSE:
                        case FETCH:
                        case FINAL:
                        case FIRST:
                        case FIRST_VALUE:
                        case FLOAT:
                        case FOLLOWING:
                        case FOLLOWS:
                        case FOR:
                        case FORALL:
                        case FORCE:
                        case FROM:
                        case FULL:
                        case FUNCTION:
                        case GOTO:
                        case GRANT:
                        case GROUP:
                        case GROUPING:
                        case HASH:
                        case HAVING:
                        case HIDE:
                        case HOUR:
                        case IF:
                        case IGNORE:
                        case IMMEDIATE:
                        case IN:
                        case INCLUDE:
                        case INCLUDING:
                        case INCREMENT:
                        case INDENT:
                        case INDEX:
                        case INDEXED:
                        case INDICATOR:
                        case INDICES:
                        case INFINITE:
                        case INLINE:
                        case INNER:
                        case INOUT:
                        case INSERT:
                        case INSTANTIABLE:
                        case INSTEAD:
                        case INT:
                        case INTEGER:
                        case INTERSECT:
                        case INTERVAL:
                        case INTO:
                        case INVALIDATE:
                        case IS:
                        case ISOLATION:
                        case ITERATE:
                        case JAVA:
                        case JOIN:
                        case KEEP:
                        case LANGUAGE:
                        case LAST:
                        case LAST_VALUE:
                        case LEADING:
                        case LEFT:
                        case LEVEL:
                        case LIBRARY:
                        case LIKE:
                        case LIKE2:
                        case LIKE4:
                        case LIKEC:
                        case LIMIT:
                        case LOCAL:
                        case LOCK:
                        case LOCKED:
                        case LOG:
                        case LOGOFF:
                        case LOGON:
                        case LONG:
                        case LOOP:
                        case MAIN:
                        case MAP:
                        case MATCHED:
                        case MAXVALUE:
                        case MEASURES:
                        case MEMBER:
                        case MERGE:
                        case MINUS:
                        case MINUTE:
                        case MINVALUE:
                        case MLSLABEL:
                        case MODE:
                        case MODEL:
                        case MODIFY:
                        case MONTH:
                        case MULTISET:
                        case NAME:
                        case NAN:
                        case NATURAL:
                        case NATURALN:
                        case NAV:
                        case NCHAR:
                        case NCHAR_CS:
                        case NCLOB:
                        case NESTED:
                        case NEW:
                        case NO:
                        case NOAUDIT:
                        case NOCACHE:
                        case NOCOPY:
                        case NOCYCLE:
                        case NOENTITYESCAPING:
                        case NOMAXVALUE:
                        case NOMINVALUE:
                        case NONE:
                        case NOORDER:
                        case NOSCHEMACHECK:
                        case NOT:
                        case NOWAIT:
                        case NULL:
                        case NULLS:
                        case NUMBER:
                        case NUMERIC:
                        case NVARCHAR2:
                        case OBJECT:
                        case OF:
                        case OFF:
                        case OID:
                        case OLD:
                        case ON:
                        case ONLY:
                        case OPEN:
                        case OPTION:
                        case OR:
                        case ORADATA:
                        case ORDER:
                        case ORDINALITY:
                        case OSERROR:
                        case OUT:
                        case OUTER:
                        case OVER:
                        case OVERRIDING:
                        case PACKAGE:
                        case PARALLEL_ENABLE:
                        case PARAMETERS:
                        case PARENT:
                        case PARTITION:
                        case PASSING:
                        case PATH:
                        case PIPELINED:
                        case PIVOT:
                        case PLAN:
                        case PLS_INTEGER:
                        case POSITIVE:
                        case POSITIVEN:
                        case PRAGMA:
                        case PRECEDING:
                        case PRECISION:
                        case PRESENT:
                        case PRIOR:
                        case PROCEDURE:
                        case RAISE:
                        case RANGE:
                        case RAW:
                        case READ:
                        case REAL:
                        case RECORD:
                        case REF:
                        case REFERENCE:
                        case REFERENCING:
                        case REJECT:
                        case RELIES_ON:
                        case RENAME:
                        case REPLACE:
                        case RESPECT:
                        case RESTRICT_REFERENCES:
                        case RESULT:
                        case RESULT_CACHE:
                        case RETURN:
                        case RETURNING:
                        case REUSE:
                        case REVERSE:
                        case REVOKE:
                        case RIGHT:
                        case ROLLBACK:
                        case ROLLUP:
                        case ROW:
                        case ROWID:
                        case ROWS:
                        case RULES:
                        case SAMPLE:
                        case SAVE:
                        case SAVEPOINT:
                        case SCHEMA:
                        case SCHEMACHECK:
                        case SCN:
                        case SEARCH:
                        case SECOND:
                        case SEED:
                        case SEGMENT:
                        case SELECT:
                        case SELF:
                        case SEQUENCE:
                        case SEQUENTIAL:
                        case SERIALIZABLE:
                        case SERIALLY_REUSABLE:
                        case SERVERERROR:
                        case SESSIONTIMEZONE:
                        case SET:
                        case SETS:
                        case SETTINGS:
                        case SHARE:
                        case SHOW:
                        case SHUTDOWN:
                        case SIBLINGS:
                        case SIGNTYPE:
                        case SIMPLE_INTEGER:
                        case SINGLE:
                        case SIZE:
                        case SKIP_:
                        case SMALLINT:
                        case SNAPSHOT:
                        case SOME:
                        case SPECIFICATION:
                        case SQLDATA:
                        case SQLERROR:
                        case SQL_PERCENT_ROWCOUNT:
                        case STANDALONE:
                        case START:
                        case STARTUP:
                        case STATEMENT:
                        case STATEMENT_ID:
                        case STATIC:
                        case STATISTICS:
                        case STRING:
                        case SUBMULTISET:
                        case SUBPARTITION:
                        case SUBSTITUTABLE:
                        case SUBTYPE:
                        case SUCCESS:
                        case SUSPEND:
                        case TABLE:
                        case THE:
                        case THEN:
                        case TIME:
                        case TIMESTAMP:
                        case TIMESTAMP_LTZ_UNCONSTRAINED:
                        case TIMESTAMP_TZ_UNCONSTRAINED:
                        case TIMESTAMP_UNCONSTRAINED:
                        case TIMEZONE_ABBR:
                        case TIMEZONE_HOUR:
                        case TIMEZONE_MINUTE:
                        case TIMEZONE_REGION:
                        case TO:
                        case TO_CHAR:
                        case TRAILING:
                        case TRANSACTION:
                        case TRANSLATE:
                        case TREAT:
                        case TRIGGER:
                        case TRIM:
                        case TRUE:
                        case TRUNCATE:
                        case TYPE:
                        case UNBOUNDED:
                        case UNDER:
                        case UNION:
                        case UNIQUE:
                        case UNLIMITED:
                        case UNPIVOT:
                        case UNTIL:
                        case UPDATE:
                        case UPDATED:
                        case UPSERT:
                        case UROWID:
                        case USE:
                        case USING:
                        case VALIDATE:
                        case VALUE:
                        case VALUES:
                        case VARCHAR:
                        case VARCHAR2:
                        case VARIABLE:
                        case VARRAY:
                        case VARYING:
                        case VERSION:
                        case VERSIONS:
                        case WAIT:
                        case WARNING:
                        case WELLFORMED:
                        case WHEN:
                        case WHENEVER:
                        case WHERE:
                        case WHILE:
                        case WITH:
                        case WITHIN:
                        case WORK:
                        case WRITE:
                        case XML:
                        case XMLAGG:
                        case XMLATTRIBUTES:
                        case XMLCAST:
                        case XMLCOLATTVAL:
                        case XMLELEMENT:
                        case XMLEXISTS:
                        case XMLFOREST:
                        case XMLNAMESPACES:
                        case XMLPARSE:
                        case XMLPI:
                        case XMLQUERY:
                        case XMLROOT:
                        case XMLSERIALIZE:
                        case XMLTABLE:
                        case YEAR:
                        case YES:
                        case YMINTERVAL_UNCONSTRAINED:
                        case ZONE:
                        case PREDICTION:
                        case PREDICTION_BOUNDS:
                        case PREDICTION_COST:
                        case PREDICTION_DETAILS:
                        case PREDICTION_PROBABILITY:
                        case PREDICTION_SET:
                        case CUME_DIST:
                        case DENSE_RANK:
                        case LISTAGG:
                        case PERCENT_RANK:
                        case PERCENTILE_CONT:
                        case PERCENTILE_DISC:
                        case RANK:
                        case AVG:
                        case CORR:
                        case LAG:
                        case LEAD:
                        case MAX:
                        case MEDIAN:
                        case MIN:
                        case NTILE:
                        case RATIO_TO_REPORT:
                        case ROW_NUMBER:
                        case SUM:
                        case VARIANCE:
                        case REGR_:
                        case STDDEV:
                        case VAR_:
                        case COVAR_:
                        case DELIMITED_ID:
                        case INTRODUCER:
                        case REGULAR_ID:
                        {
                            setState(5410);
                            general_element_part();
                        }
                        break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    setState(5413);
                    _la = _input.LA(1);
                    if ( !(_la==DAY || _la==HOUR || _la==MINUTE || _la==SECOND) ) {
                        _errHandler.recoverInline(this);
                    } else {
                        consume();
                    }
                    setState(5427);
                    _errHandler.sync(this);
                    switch ( getInterpreter().adaptivePredict(_input,711,_ctx) ) {
                        case 1:
                        {
                            setState(5414);
                            match(LEFT_PAREN);
                            setState(5417);
                            switch (_input.LA(1)) {
                                case UNSIGNED_INTEGER:
                                {
                                    setState(5415);
                                    match(UNSIGNED_INTEGER);
                                }
                                break;
                                case BINDVAR:
                                case COLON:
                                {
                                    setState(5416);
                                    bind_variable();
                                }
                                break;
                                default:
                                    throw new NoViableAltException(this);
                            }
                            setState(5424);
                            _la = _input.LA(1);
                            if (_la==COMMA) {
                                {
                                    setState(5419);
                                    match(COMMA);
                                    setState(5422);
                                    switch (_input.LA(1)) {
                                        case UNSIGNED_INTEGER:
                                        {
                                            setState(5420);
                                            match(UNSIGNED_INTEGER);
                                        }
                                        break;
                                        case BINDVAR:
                                        case COLON:
                                        {
                                            setState(5421);
                                            bind_variable();
                                        }
                                        break;
                                        default:
                                            throw new NoViableAltException(this);
                                    }
                                }
                            }

                            setState(5426);
                            match(RIGHT_PAREN);
                        }
                        break;
                    }
                    setState(5444);
                    _errHandler.sync(this);
                    switch ( getInterpreter().adaptivePredict(_input,715,_ctx) ) {
                        case 1:
                        {
                            setState(5429);
                            match(TO);
                            setState(5442);
                            switch (_input.LA(1)) {
                                case DAY:
                                {
                                    setState(5430);
                                    match(DAY);
                                }
                                break;
                                case HOUR:
                                {
                                    setState(5431);
                                    match(HOUR);
                                }
                                break;
                                case MINUTE:
                                {
                                    setState(5432);
                                    match(MINUTE);
                                }
                                break;
                                case SECOND:
                                {
                                    setState(5433);
                                    match(SECOND);
                                    setState(5440);
                                    _errHandler.sync(this);
                                    switch ( getInterpreter().adaptivePredict(_input,713,_ctx) ) {
                                        case 1:
                                        {
                                            setState(5434);
                                            match(LEFT_PAREN);
                                            setState(5437);
                                            switch (_input.LA(1)) {
                                                case UNSIGNED_INTEGER:
                                                {
                                                    setState(5435);
                                                    match(UNSIGNED_INTEGER);
                                                }
                                                break;
                                                case BINDVAR:
                                                case COLON:
                                                {
                                                    setState(5436);
                                                    bind_variable();
                                                }
                                                break;
                                                default:
                                                    throw new NoViableAltException(this);
                                            }
                                            setState(5439);
                                            match(RIGHT_PAREN);
                                        }
                                        break;
                                    }
                                }
                                break;
                                default:
                                    throw new NoViableAltException(this);
                            }
                        }
                        break;
                    }
                }
                break;
                case UNSIGNED_INTEGER:
                case APPROXIMATE_NUM_LIT:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(5446);
                    numeric();
                }
                break;
                case DATE:
                    enterOuterAlt(_localctx, 4);
                {
                    setState(5447);
                    match(DATE);
                    setState(5448);
                    quoted_string();
                }
                break;
                case NATIONAL_CHAR_STRING_LIT:
                case CHAR_STRING:
                    enterOuterAlt(_localctx, 5);
                {
                    setState(5449);
                    quoted_string();
                }
                break;
                case NULL:
                    enterOuterAlt(_localctx, 6);
                {
                    setState(5450);
                    match(NULL);
                }
                break;
                case TRUE:
                    enterOuterAlt(_localctx, 7);
                {
                    setState(5451);
                    match(TRUE);
                }
                break;
                case FALSE:
                    enterOuterAlt(_localctx, 8);
                {
                    setState(5452);
                    match(FALSE);
                }
                break;
                case DBTIMEZONE:
                    enterOuterAlt(_localctx, 9);
                {
                    setState(5453);
                    match(DBTIMEZONE);
                }
                break;
                case SESSIONTIMEZONE:
                    enterOuterAlt(_localctx, 10);
                {
                    setState(5454);
                    match(SESSIONTIMEZONE);
                }
                break;
                case MINVALUE:
                    enterOuterAlt(_localctx, 11);
                {
                    setState(5455);
                    match(MINVALUE);
                }
                break;
                case MAXVALUE:
                    enterOuterAlt(_localctx, 12);
                {
                    setState(5456);
                    match(MAXVALUE);
                }
                break;
                case DEFAULT:
                    enterOuterAlt(_localctx, 13);
                {
                    setState(5457);
                    match(DEFAULT);
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class NumericContext extends ParserRuleContext {
        public TerminalNode UNSIGNED_INTEGER() { return getToken(PlSqlParser.UNSIGNED_INTEGER, 0); }
        public TerminalNode APPROXIMATE_NUM_LIT() { return getToken(PlSqlParser.APPROXIMATE_NUM_LIT, 0); }
        public NumericContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_numeric; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterNumeric(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitNumeric(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitNumeric(this);
            else return visitor.visitChildren(this);
        }
    }

    public final NumericContext numeric() throws RecognitionException {
        NumericContext _localctx = new NumericContext(_ctx, getState());
        enterRule(_localctx, 758, RULE_numeric);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(5460);
                _la = _input.LA(1);
                if ( !(_la==UNSIGNED_INTEGER || _la==APPROXIMATE_NUM_LIT) ) {
                    _errHandler.recoverInline(this);
                } else {
                    consume();
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Quoted_stringContext extends ParserRuleContext {
        public TerminalNode CHAR_STRING() { return getToken(PlSqlParser.CHAR_STRING, 0); }
        public TerminalNode NATIONAL_CHAR_STRING_LIT() { return getToken(PlSqlParser.NATIONAL_CHAR_STRING_LIT, 0); }
        public Quoted_stringContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_quoted_string; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterQuoted_string(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitQuoted_string(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitQuoted_string(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Quoted_stringContext quoted_string() throws RecognitionException {
        Quoted_stringContext _localctx = new Quoted_stringContext(_ctx, getState());
        enterRule(_localctx, 760, RULE_quoted_string);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(5462);
                _la = _input.LA(1);
                if ( !(_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) ) {
                    _errHandler.recoverInline(this);
                } else {
                    consume();
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class IdContext extends ParserRuleContext {
        public Id_expressionContext id_expression() {
            return getRuleContext(Id_expressionContext.class,0);
        }
        public TerminalNode INTRODUCER() { return getToken(PlSqlParser.INTRODUCER, 0); }
        public Char_set_nameContext char_set_name() {
            return getRuleContext(Char_set_nameContext.class,0);
        }
        public IdContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_id; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterId(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitId(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitId(this);
            else return visitor.visitChildren(this);
        }
    }

    public final IdContext id() throws RecognitionException {
        IdContext _localctx = new IdContext(_ctx, getState());
        enterRule(_localctx, 762, RULE_id);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(5466);
                _la = _input.LA(1);
                if (_la==INTRODUCER) {
                    {
                        setState(5464);
                        match(INTRODUCER);
                        setState(5465);
                        char_set_name();
                    }
                }

                setState(5468);
                id_expression();
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Id_expressionContext extends ParserRuleContext {
        public Regular_idContext regular_id() {
            return getRuleContext(Regular_idContext.class,0);
        }
        public TerminalNode DELIMITED_ID() { return getToken(PlSqlParser.DELIMITED_ID, 0); }
        public Id_expressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_id_expression; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterId_expression(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitId_expression(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitId_expression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Id_expressionContext id_expression() throws RecognitionException {
        Id_expressionContext _localctx = new Id_expressionContext(_ctx, getState());
        enterRule(_localctx, 764, RULE_id_expression);
        try {
            setState(5472);
            switch (_input.LA(1)) {
                case A_LETTER:
                case ADD:
                case AFTER:
                case AGENT:
                case AGGREGATE:
                case ALL:
                case ALTER:
                case ANALYZE:
                case AND:
                case ANY:
                case ARRAY:
                case AS:
                case ASC:
                case ASSOCIATE:
                case AT:
                case ATTRIBUTE:
                case AUDIT:
                case AUTHID:
                case AUTO:
                case AUTOMATIC:
                case AUTONOMOUS_TRANSACTION:
                case BATCH:
                case BEFORE:
                case BEGIN:
                case BETWEEN:
                case BFILE:
                case BINARY_DOUBLE:
                case BINARY_FLOAT:
                case BINARY_INTEGER:
                case BLOB:
                case BLOCK:
                case BODY:
                case BOOLEAN:
                case BOTH:
                case BREADTH:
                case BULK:
                case BY:
                case BYTE:
                case C_LETTER:
                case CACHE:
                case CALL:
                case CANONICAL:
                case CASCADE:
                case CASE:
                case CAST:
                case CHAR:
                case CHAR_CS:
                case CHARACTER:
                case CHECK:
                case CHR:
                case CLOB:
                case CLOSE:
                case CLUSTER:
                case COLLECT:
                case COLUMNS:
                case COMMENT:
                case COMMIT:
                case COMMITTED:
                case COMPATIBILITY:
                case COMPILE:
                case COMPOUND:
                case CONNECT:
                case CONNECT_BY_ROOT:
                case CONSTANT:
                case CONSTRAINT:
                case CONSTRAINTS:
                case CONSTRUCTOR:
                case CONTENT:
                case CONTEXT:
                case CONTINUE:
                case CONVERT:
                case CORRUPT_XID:
                case CORRUPT_XID_ALL:
                case COST:
                case COUNT:
                case CREATE:
                case CROSS:
                case CUBE:
                case CURRENT:
                case CURRENT_USER:
                case CURSOR:
                case CUSTOMDATUM:
                case CYCLE:
                case DATA:
                case DATABASE:
                case DATE:
                case DAY:
                case DB_ROLE_CHANGE:
                case DBTIMEZONE:
                case DDL:
                case DEBUG:
                case DEC:
                case DECIMAL:
                case DECLARE:
                case DECOMPOSE:
                case DECREMENT:
                case DEFAULT:
                case DEFAULTS:
                case DEFERRED:
                case DEFINER:
                case DELETE:
                case DEPTH:
                case DESC:
                case DETERMINISTIC:
                case DIMENSION:
                case DISABLE:
                case DISASSOCIATE:
                case DISTINCT:
                case DOCUMENT:
                case DOUBLE:
                case DROP:
                case DSINTERVAL_UNCONSTRAINED:
                case EACH:
                case ELEMENT:
                case ELSE:
                case ELSIF:
                case EMPTY:
                case ENABLE:
                case ENCODING:
                case END:
                case ENTITYESCAPING:
                case ERRORS:
                case ESCAPE:
                case EXCEPT:
                case EVALNAME:
                case EXCEPTION:
                case EXCEPTION_INIT:
                case EXCEPTIONS:
                case EXCLUDE:
                case EXCLUSIVE:
                case EXECUTE:
                case EXISTS:
                case EXIT:
                case EXPLAIN:
                case EXTERNAL:
                case EXTRACT:
                case FAILURE:
                case FALSE:
                case FETCH:
                case FINAL:
                case FIRST:
                case FIRST_VALUE:
                case FLOAT:
                case FOLLOWING:
                case FOLLOWS:
                case FOR:
                case FORALL:
                case FORCE:
                case FROM:
                case FULL:
                case FUNCTION:
                case GOTO:
                case GRANT:
                case GROUP:
                case GROUPING:
                case HASH:
                case HAVING:
                case HIDE:
                case HOUR:
                case IF:
                case IGNORE:
                case IMMEDIATE:
                case IN:
                case INCLUDE:
                case INCLUDING:
                case INCREMENT:
                case INDENT:
                case INDEX:
                case INDEXED:
                case INDICATOR:
                case INDICES:
                case INFINITE:
                case INLINE:
                case INNER:
                case INOUT:
                case INSERT:
                case INSTANTIABLE:
                case INSTEAD:
                case INT:
                case INTEGER:
                case INTERSECT:
                case INTERVAL:
                case INTO:
                case INVALIDATE:
                case IS:
                case ISOLATION:
                case ITERATE:
                case JAVA:
                case JOIN:
                case KEEP:
                case LANGUAGE:
                case LAST:
                case LAST_VALUE:
                case LEADING:
                case LEFT:
                case LEVEL:
                case LIBRARY:
                case LIKE:
                case LIKE2:
                case LIKE4:
                case LIKEC:
                case LIMIT:
                case LOCAL:
                case LOCK:
                case LOCKED:
                case LOG:
                case LOGOFF:
                case LOGON:
                case LONG:
                case LOOP:
                case MAIN:
                case MAP:
                case MATCHED:
                case MAXVALUE:
                case MEASURES:
                case MEMBER:
                case MERGE:
                case MINUS:
                case MINUTE:
                case MINVALUE:
                case MLSLABEL:
                case MODE:
                case MODEL:
                case MODIFY:
                case MONTH:
                case MULTISET:
                case NAME:
                case NAN:
                case NATURAL:
                case NATURALN:
                case NAV:
                case NCHAR:
                case NCHAR_CS:
                case NCLOB:
                case NESTED:
                case NEW:
                case NO:
                case NOAUDIT:
                case NOCACHE:
                case NOCOPY:
                case NOCYCLE:
                case NOENTITYESCAPING:
                case NOMAXVALUE:
                case NOMINVALUE:
                case NONE:
                case NOORDER:
                case NOSCHEMACHECK:
                case NOT:
                case NOWAIT:
                case NULL:
                case NULLS:
                case NUMBER:
                case NUMERIC:
                case NVARCHAR2:
                case OBJECT:
                case OF:
                case OFF:
                case OID:
                case OLD:
                case ON:
                case ONLY:
                case OPEN:
                case OPTION:
                case OR:
                case ORADATA:
                case ORDER:
                case ORDINALITY:
                case OSERROR:
                case OUT:
                case OUTER:
                case OVER:
                case OVERRIDING:
                case PACKAGE:
                case PARALLEL_ENABLE:
                case PARAMETERS:
                case PARENT:
                case PARTITION:
                case PASSING:
                case PATH:
                case PIPELINED:
                case PIVOT:
                case PLAN:
                case PLS_INTEGER:
                case POSITIVE:
                case POSITIVEN:
                case PRAGMA:
                case PRECEDING:
                case PRECISION:
                case PRESENT:
                case PRIOR:
                case PROCEDURE:
                case RAISE:
                case RANGE:
                case RAW:
                case READ:
                case REAL:
                case RECORD:
                case REF:
                case REFERENCE:
                case REFERENCING:
                case REJECT:
                case RELIES_ON:
                case RENAME:
                case REPLACE:
                case RESPECT:
                case RESTRICT_REFERENCES:
                case RESULT:
                case RESULT_CACHE:
                case RETURN:
                case RETURNING:
                case REUSE:
                case REVERSE:
                case REVOKE:
                case RIGHT:
                case ROLLBACK:
                case ROLLUP:
                case ROW:
                case ROWID:
                case ROWS:
                case RULES:
                case SAMPLE:
                case SAVE:
                case SAVEPOINT:
                case SCHEMA:
                case SCHEMACHECK:
                case SCN:
                case SEARCH:
                case SECOND:
                case SEED:
                case SEGMENT:
                case SELECT:
                case SELF:
                case SEQUENCE:
                case SEQUENTIAL:
                case SERIALIZABLE:
                case SERIALLY_REUSABLE:
                case SERVERERROR:
                case SESSIONTIMEZONE:
                case SET:
                case SETS:
                case SETTINGS:
                case SHARE:
                case SHOW:
                case SHUTDOWN:
                case SIBLINGS:
                case SIGNTYPE:
                case SIMPLE_INTEGER:
                case SINGLE:
                case SIZE:
                case SKIP_:
                case SMALLINT:
                case SNAPSHOT:
                case SOME:
                case SPECIFICATION:
                case SQLDATA:
                case SQLERROR:
                case SQL_PERCENT_ROWCOUNT:
                case STANDALONE:
                case START:
                case STARTUP:
                case STATEMENT:
                case STATEMENT_ID:
                case STATIC:
                case STATISTICS:
                case STRING:
                case SUBMULTISET:
                case SUBPARTITION:
                case SUBSTITUTABLE:
                case SUBTYPE:
                case SUCCESS:
                case SUSPEND:
                case TABLE:
                case THE:
                case THEN:
                case TIME:
                case TIMESTAMP:
                case TIMESTAMP_LTZ_UNCONSTRAINED:
                case TIMESTAMP_TZ_UNCONSTRAINED:
                case TIMESTAMP_UNCONSTRAINED:
                case TIMEZONE_ABBR:
                case TIMEZONE_HOUR:
                case TIMEZONE_MINUTE:
                case TIMEZONE_REGION:
                case TO:
                case TO_CHAR:
                case TRAILING:
                case TRANSACTION:
                case TRANSLATE:
                case TREAT:
                case TRIGGER:
                case TRIM:
                case TRUE:
                case TRUNCATE:
                case TYPE:
                case UNBOUNDED:
                case UNDER:
                case UNION:
                case UNIQUE:
                case UNLIMITED:
                case UNPIVOT:
                case UNTIL:
                case UPDATE:
                case UPDATED:
                case UPSERT:
                case UROWID:
                case USE:
                case USING:
                case VALIDATE:
                case VALUE:
                case VALUES:
                case VARCHAR:
                case VARCHAR2:
                case VARIABLE:
                case VARRAY:
                case VARYING:
                case VERSION:
                case VERSIONS:
                case WAIT:
                case WARNING:
                case WELLFORMED:
                case WHEN:
                case WHENEVER:
                case WHERE:
                case WHILE:
                case WITH:
                case WITHIN:
                case WORK:
                case WRITE:
                case XML:
                case XMLAGG:
                case XMLATTRIBUTES:
                case XMLCAST:
                case XMLCOLATTVAL:
                case XMLELEMENT:
                case XMLEXISTS:
                case XMLFOREST:
                case XMLNAMESPACES:
                case XMLPARSE:
                case XMLPI:
                case XMLQUERY:
                case XMLROOT:
                case XMLSERIALIZE:
                case XMLTABLE:
                case YEAR:
                case YES:
                case YMINTERVAL_UNCONSTRAINED:
                case ZONE:
                case PREDICTION:
                case PREDICTION_BOUNDS:
                case PREDICTION_COST:
                case PREDICTION_DETAILS:
                case PREDICTION_PROBABILITY:
                case PREDICTION_SET:
                case CUME_DIST:
                case DENSE_RANK:
                case LISTAGG:
                case PERCENT_RANK:
                case PERCENTILE_CONT:
                case PERCENTILE_DISC:
                case RANK:
                case AVG:
                case CORR:
                case LAG:
                case LEAD:
                case MAX:
                case MEDIAN:
                case MIN:
                case NTILE:
                case RATIO_TO_REPORT:
                case ROW_NUMBER:
                case SUM:
                case VARIANCE:
                case REGR_:
                case STDDEV:
                case VAR_:
                case COVAR_:
                case REGULAR_ID:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(5470);
                    regular_id();
                }
                break;
                case DELIMITED_ID:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(5471);
                    match(DELIMITED_ID);
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Not_equal_opContext extends ParserRuleContext {
        public TerminalNode NOT_EQUAL_OP() { return getToken(PlSqlParser.NOT_EQUAL_OP, 0); }
        public Not_equal_opContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_not_equal_op; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterNot_equal_op(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitNot_equal_op(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitNot_equal_op(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Not_equal_opContext not_equal_op() throws RecognitionException {
        Not_equal_opContext _localctx = new Not_equal_opContext(_ctx, getState());
        enterRule(_localctx, 766, RULE_not_equal_op);
        try {
            setState(5481);
            switch (_input.LA(1)) {
                case NOT_EQUAL_OP:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(5474);
                    match(NOT_EQUAL_OP);
                }
                break;
                case LESS_THAN_OP:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(5475);
                    match(LESS_THAN_OP);
                    setState(5476);
                    match(GREATER_THAN_OP);
                }
                break;
                case EXCLAMATION_OPERATOR_PART:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(5477);
                    match(EXCLAMATION_OPERATOR_PART);
                    setState(5478);
                    match(EQUALS_OP);
                }
                break;
                case CARRET_OPERATOR_PART:
                    enterOuterAlt(_localctx, 4);
                {
                    setState(5479);
                    match(CARRET_OPERATOR_PART);
                    setState(5480);
                    match(EQUALS_OP);
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Greater_than_or_equals_opContext extends ParserRuleContext {
        public Greater_than_or_equals_opContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_greater_than_or_equals_op; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterGreater_than_or_equals_op(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitGreater_than_or_equals_op(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitGreater_than_or_equals_op(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Greater_than_or_equals_opContext greater_than_or_equals_op() throws RecognitionException {
        Greater_than_or_equals_opContext _localctx = new Greater_than_or_equals_opContext(_ctx, getState());
        enterRule(_localctx, 768, RULE_greater_than_or_equals_op);
        try {
            setState(5486);
            switch (_input.LA(1)) {
                case GREATER_THAN_OR_EQUALS_OP:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(5483);
                    match(GREATER_THAN_OR_EQUALS_OP);
                }
                break;
                case GREATER_THAN_OP:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(5484);
                    match(GREATER_THAN_OP);
                    setState(5485);
                    match(EQUALS_OP);
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Less_than_or_equals_opContext extends ParserRuleContext {
        public Less_than_or_equals_opContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_less_than_or_equals_op; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterLess_than_or_equals_op(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitLess_than_or_equals_op(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitLess_than_or_equals_op(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Less_than_or_equals_opContext less_than_or_equals_op() throws RecognitionException {
        Less_than_or_equals_opContext _localctx = new Less_than_or_equals_opContext(_ctx, getState());
        enterRule(_localctx, 770, RULE_less_than_or_equals_op);
        try {
            setState(5491);
            switch (_input.LA(1)) {
                case LESS_THAN_OR_EQUALS_OP:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(5488);
                    match(LESS_THAN_OR_EQUALS_OP);
                }
                break;
                case LESS_THAN_OP:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(5489);
                    match(LESS_THAN_OP);
                    setState(5490);
                    match(EQUALS_OP);
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Concatenation_opContext extends ParserRuleContext {
        public Concatenation_opContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_concatenation_op; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterConcatenation_op(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitConcatenation_op(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitConcatenation_op(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Concatenation_opContext concatenation_op() throws RecognitionException {
        Concatenation_opContext _localctx = new Concatenation_opContext(_ctx, getState());
        enterRule(_localctx, 772, RULE_concatenation_op);
        try {
            setState(5496);
            switch (_input.LA(1)) {
                case CONCATENATION_OP:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(5493);
                    match(CONCATENATION_OP);
                }
                break;
                case VERTICAL_BAR:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(5494);
                    match(VERTICAL_BAR);
                    setState(5495);
                    match(VERTICAL_BAR);
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Outer_join_signContext extends ParserRuleContext {
        public Outer_join_signContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_outer_join_sign; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterOuter_join_sign(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitOuter_join_sign(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitOuter_join_sign(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Outer_join_signContext outer_join_sign() throws RecognitionException {
        Outer_join_signContext _localctx = new Outer_join_signContext(_ctx, getState());
        enterRule(_localctx, 774, RULE_outer_join_sign);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(5498);
                match(LEFT_PAREN);
                setState(5499);
                match(PLUS_SIGN);
                setState(5500);
                match(RIGHT_PAREN);
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    public static class Regular_idContext extends ParserRuleContext {
        public TerminalNode REGULAR_ID() { return getToken(PlSqlParser.REGULAR_ID, 0); }
        public TerminalNode A_LETTER() { return getToken(PlSqlParser.A_LETTER, 0); }
        public TerminalNode ADD() { return getToken(PlSqlParser.ADD, 0); }
        public TerminalNode AFTER() { return getToken(PlSqlParser.AFTER, 0); }
        public TerminalNode AGENT() { return getToken(PlSqlParser.AGENT, 0); }
        public TerminalNode AGGREGATE() { return getToken(PlSqlParser.AGGREGATE, 0); }
        public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
        public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
        public TerminalNode ANALYZE() { return getToken(PlSqlParser.ANALYZE, 0); }
        public TerminalNode AND() { return getToken(PlSqlParser.AND, 0); }
        public TerminalNode ANY() { return getToken(PlSqlParser.ANY, 0); }
        public TerminalNode ARRAY() { return getToken(PlSqlParser.ARRAY, 0); }
        public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
        public TerminalNode ASC() { return getToken(PlSqlParser.ASC, 0); }
        public TerminalNode ASSOCIATE() { return getToken(PlSqlParser.ASSOCIATE, 0); }
        public TerminalNode AT() { return getToken(PlSqlParser.AT, 0); }
        public TerminalNode ATTRIBUTE() { return getToken(PlSqlParser.ATTRIBUTE, 0); }
        public TerminalNode AUDIT() { return getToken(PlSqlParser.AUDIT, 0); }
        public TerminalNode AUTHID() { return getToken(PlSqlParser.AUTHID, 0); }
        public TerminalNode AUTO() { return getToken(PlSqlParser.AUTO, 0); }
        public TerminalNode AUTOMATIC() { return getToken(PlSqlParser.AUTOMATIC, 0); }
        public TerminalNode AUTONOMOUS_TRANSACTION() { return getToken(PlSqlParser.AUTONOMOUS_TRANSACTION, 0); }
        public TerminalNode BATCH() { return getToken(PlSqlParser.BATCH, 0); }
        public TerminalNode BEFORE() { return getToken(PlSqlParser.BEFORE, 0); }
        public TerminalNode BEGIN() { return getToken(PlSqlParser.BEGIN, 0); }
        public TerminalNode BETWEEN() { return getToken(PlSqlParser.BETWEEN, 0); }
        public TerminalNode BFILE() { return getToken(PlSqlParser.BFILE, 0); }
        public TerminalNode BINARY_DOUBLE() { return getToken(PlSqlParser.BINARY_DOUBLE, 0); }
        public TerminalNode BINARY_FLOAT() { return getToken(PlSqlParser.BINARY_FLOAT, 0); }
        public TerminalNode BINARY_INTEGER() { return getToken(PlSqlParser.BINARY_INTEGER, 0); }
        public TerminalNode BLOB() { return getToken(PlSqlParser.BLOB, 0); }
        public TerminalNode BLOCK() { return getToken(PlSqlParser.BLOCK, 0); }
        public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
        public TerminalNode BOOLEAN() { return getToken(PlSqlParser.BOOLEAN, 0); }
        public TerminalNode BOTH() { return getToken(PlSqlParser.BOTH, 0); }
        public TerminalNode BREADTH() { return getToken(PlSqlParser.BREADTH, 0); }
        public TerminalNode BULK() { return getToken(PlSqlParser.BULK, 0); }
        public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
        public TerminalNode BYTE() { return getToken(PlSqlParser.BYTE, 0); }
        public TerminalNode C_LETTER() { return getToken(PlSqlParser.C_LETTER, 0); }
        public TerminalNode CACHE() { return getToken(PlSqlParser.CACHE, 0); }
        public TerminalNode CALL() { return getToken(PlSqlParser.CALL, 0); }
        public TerminalNode CANONICAL() { return getToken(PlSqlParser.CANONICAL, 0); }
        public TerminalNode CASCADE() { return getToken(PlSqlParser.CASCADE, 0); }
        public TerminalNode CASE() { return getToken(PlSqlParser.CASE, 0); }
        public TerminalNode CAST() { return getToken(PlSqlParser.CAST, 0); }
        public TerminalNode CHAR() { return getToken(PlSqlParser.CHAR, 0); }
        public TerminalNode CHAR_CS() { return getToken(PlSqlParser.CHAR_CS, 0); }
        public TerminalNode CHARACTER() { return getToken(PlSqlParser.CHARACTER, 0); }
        public TerminalNode CHECK() { return getToken(PlSqlParser.CHECK, 0); }
        public TerminalNode CHR() { return getToken(PlSqlParser.CHR, 0); }
        public TerminalNode CLOB() { return getToken(PlSqlParser.CLOB, 0); }
        public TerminalNode CLOSE() { return getToken(PlSqlParser.CLOSE, 0); }
        public TerminalNode CLUSTER() { return getToken(PlSqlParser.CLUSTER, 0); }
        public TerminalNode COLLECT() { return getToken(PlSqlParser.COLLECT, 0); }
        public TerminalNode COLUMNS() { return getToken(PlSqlParser.COLUMNS, 0); }
        public TerminalNode COMMENT() { return getToken(PlSqlParser.COMMENT, 0); }
        public TerminalNode COMMIT() { return getToken(PlSqlParser.COMMIT, 0); }
        public TerminalNode COMMITTED() { return getToken(PlSqlParser.COMMITTED, 0); }
        public TerminalNode COMPATIBILITY() { return getToken(PlSqlParser.COMPATIBILITY, 0); }
        public TerminalNode COMPILE() { return getToken(PlSqlParser.COMPILE, 0); }
        public TerminalNode COMPOUND() { return getToken(PlSqlParser.COMPOUND, 0); }
        public TerminalNode CONNECT() { return getToken(PlSqlParser.CONNECT, 0); }
        public TerminalNode CONNECT_BY_ROOT() { return getToken(PlSqlParser.CONNECT_BY_ROOT, 0); }
        public TerminalNode CONSTANT() { return getToken(PlSqlParser.CONSTANT, 0); }
        public TerminalNode CONSTRAINT() { return getToken(PlSqlParser.CONSTRAINT, 0); }
        public TerminalNode CONSTRAINTS() { return getToken(PlSqlParser.CONSTRAINTS, 0); }
        public TerminalNode CONSTRUCTOR() { return getToken(PlSqlParser.CONSTRUCTOR, 0); }
        public TerminalNode CONTENT() { return getToken(PlSqlParser.CONTENT, 0); }
        public TerminalNode CONTEXT() { return getToken(PlSqlParser.CONTEXT, 0); }
        public TerminalNode CONTINUE() { return getToken(PlSqlParser.CONTINUE, 0); }
        public TerminalNode CONVERT() { return getToken(PlSqlParser.CONVERT, 0); }
        public TerminalNode CORRUPT_XID() { return getToken(PlSqlParser.CORRUPT_XID, 0); }
        public TerminalNode CORRUPT_XID_ALL() { return getToken(PlSqlParser.CORRUPT_XID_ALL, 0); }
        public TerminalNode COST() { return getToken(PlSqlParser.COST, 0); }
        public TerminalNode COUNT() { return getToken(PlSqlParser.COUNT, 0); }
        public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
        public TerminalNode CROSS() { return getToken(PlSqlParser.CROSS, 0); }
        public TerminalNode CUBE() { return getToken(PlSqlParser.CUBE, 0); }
        public TerminalNode CURRENT() { return getToken(PlSqlParser.CURRENT, 0); }
        public TerminalNode CURRENT_USER() { return getToken(PlSqlParser.CURRENT_USER, 0); }
        public TerminalNode CURSOR() { return getToken(PlSqlParser.CURSOR, 0); }
        public TerminalNode CUSTOMDATUM() { return getToken(PlSqlParser.CUSTOMDATUM, 0); }
        public TerminalNode CYCLE() { return getToken(PlSqlParser.CYCLE, 0); }
        public TerminalNode DATA() { return getToken(PlSqlParser.DATA, 0); }
        public TerminalNode DATABASE() { return getToken(PlSqlParser.DATABASE, 0); }
        public TerminalNode DATE() { return getToken(PlSqlParser.DATE, 0); }
        public TerminalNode DAY() { return getToken(PlSqlParser.DAY, 0); }
        public TerminalNode DB_ROLE_CHANGE() { return getToken(PlSqlParser.DB_ROLE_CHANGE, 0); }
        public TerminalNode DBTIMEZONE() { return getToken(PlSqlParser.DBTIMEZONE, 0); }
        public TerminalNode DDL() { return getToken(PlSqlParser.DDL, 0); }
        public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
        public TerminalNode DEC() { return getToken(PlSqlParser.DEC, 0); }
        public TerminalNode DECIMAL() { return getToken(PlSqlParser.DECIMAL, 0); }
        public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
        public TerminalNode DECOMPOSE() { return getToken(PlSqlParser.DECOMPOSE, 0); }
        public TerminalNode DECREMENT() { return getToken(PlSqlParser.DECREMENT, 0); }
        public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
        public TerminalNode DEFAULTS() { return getToken(PlSqlParser.DEFAULTS, 0); }
        public TerminalNode DEFERRED() { return getToken(PlSqlParser.DEFERRED, 0); }
        public TerminalNode DEFINER() { return getToken(PlSqlParser.DEFINER, 0); }
        public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
        public TerminalNode DEPTH() { return getToken(PlSqlParser.DEPTH, 0); }
        public TerminalNode DESC() { return getToken(PlSqlParser.DESC, 0); }
        public TerminalNode DETERMINISTIC() { return getToken(PlSqlParser.DETERMINISTIC, 0); }
        public TerminalNode DIMENSION() { return getToken(PlSqlParser.DIMENSION, 0); }
        public TerminalNode DISABLE() { return getToken(PlSqlParser.DISABLE, 0); }
        public TerminalNode DISASSOCIATE() { return getToken(PlSqlParser.DISASSOCIATE, 0); }
        public TerminalNode DISTINCT() { return getToken(PlSqlParser.DISTINCT, 0); }
        public TerminalNode DOCUMENT() { return getToken(PlSqlParser.DOCUMENT, 0); }
        public TerminalNode DOUBLE() { return getToken(PlSqlParser.DOUBLE, 0); }
        public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
        public TerminalNode DSINTERVAL_UNCONSTRAINED() { return getToken(PlSqlParser.DSINTERVAL_UNCONSTRAINED, 0); }
        public TerminalNode EACH() { return getToken(PlSqlParser.EACH, 0); }
        public TerminalNode ELEMENT() { return getToken(PlSqlParser.ELEMENT, 0); }
        public TerminalNode ELSE() { return getToken(PlSqlParser.ELSE, 0); }
        public TerminalNode ELSIF() { return getToken(PlSqlParser.ELSIF, 0); }
        public TerminalNode EMPTY() { return getToken(PlSqlParser.EMPTY, 0); }
        public TerminalNode ENABLE() { return getToken(PlSqlParser.ENABLE, 0); }
        public TerminalNode ENCODING() { return getToken(PlSqlParser.ENCODING, 0); }
        public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
        public TerminalNode ENTITYESCAPING() { return getToken(PlSqlParser.ENTITYESCAPING, 0); }
        public TerminalNode ERRORS() { return getToken(PlSqlParser.ERRORS, 0); }
        public TerminalNode ESCAPE() { return getToken(PlSqlParser.ESCAPE, 0); }
        public TerminalNode EVALNAME() { return getToken(PlSqlParser.EVALNAME, 0); }
        public TerminalNode EXCEPT() { return getToken(PlSqlParser.EXCEPT, 0); }
        public TerminalNode EXCEPTION() { return getToken(PlSqlParser.EXCEPTION, 0); }
        public TerminalNode EXCEPTION_INIT() { return getToken(PlSqlParser.EXCEPTION_INIT, 0); }
        public TerminalNode EXCEPTIONS() { return getToken(PlSqlParser.EXCEPTIONS, 0); }
        public TerminalNode EXCLUDE() { return getToken(PlSqlParser.EXCLUDE, 0); }
        public TerminalNode EXCLUSIVE() { return getToken(PlSqlParser.EXCLUSIVE, 0); }
        public TerminalNode EXECUTE() { return getToken(PlSqlParser.EXECUTE, 0); }
        public TerminalNode EXISTS() { return getToken(PlSqlParser.EXISTS, 0); }
        public TerminalNode EXIT() { return getToken(PlSqlParser.EXIT, 0); }
        public TerminalNode EXPLAIN() { return getToken(PlSqlParser.EXPLAIN, 0); }
        public TerminalNode EXTERNAL() { return getToken(PlSqlParser.EXTERNAL, 0); }
        public TerminalNode EXTRACT() { return getToken(PlSqlParser.EXTRACT, 0); }
        public TerminalNode FAILURE() { return getToken(PlSqlParser.FAILURE, 0); }
        public TerminalNode FALSE() { return getToken(PlSqlParser.FALSE, 0); }
        public TerminalNode FETCH() { return getToken(PlSqlParser.FETCH, 0); }
        public TerminalNode FINAL() { return getToken(PlSqlParser.FINAL, 0); }
        public TerminalNode FIRST() { return getToken(PlSqlParser.FIRST, 0); }
        public TerminalNode FIRST_VALUE() { return getToken(PlSqlParser.FIRST_VALUE, 0); }
        public TerminalNode FLOAT() { return getToken(PlSqlParser.FLOAT, 0); }
        public TerminalNode FOLLOWING() { return getToken(PlSqlParser.FOLLOWING, 0); }
        public TerminalNode FOLLOWS() { return getToken(PlSqlParser.FOLLOWS, 0); }
        public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
        public TerminalNode FORALL() { return getToken(PlSqlParser.FORALL, 0); }
        public TerminalNode FORCE() { return getToken(PlSqlParser.FORCE, 0); }
        public TerminalNode FROM() { return getToken(PlSqlParser.FROM, 0); }
        public TerminalNode FULL() { return getToken(PlSqlParser.FULL, 0); }
        public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
        public TerminalNode GOTO() { return getToken(PlSqlParser.GOTO, 0); }
        public TerminalNode GRANT() { return getToken(PlSqlParser.GRANT, 0); }
        public TerminalNode GROUP() { return getToken(PlSqlParser.GROUP, 0); }
        public TerminalNode GROUPING() { return getToken(PlSqlParser.GROUPING, 0); }
        public TerminalNode HASH() { return getToken(PlSqlParser.HASH, 0); }
        public TerminalNode HAVING() { return getToken(PlSqlParser.HAVING, 0); }
        public TerminalNode HIDE() { return getToken(PlSqlParser.HIDE, 0); }
        public TerminalNode HOUR() { return getToken(PlSqlParser.HOUR, 0); }
        public TerminalNode IF() { return getToken(PlSqlParser.IF, 0); }
        public TerminalNode IGNORE() { return getToken(PlSqlParser.IGNORE, 0); }
        public TerminalNode IMMEDIATE() { return getToken(PlSqlParser.IMMEDIATE, 0); }
        public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
        public TerminalNode INCLUDE() { return getToken(PlSqlParser.INCLUDE, 0); }
        public TerminalNode INCLUDING() { return getToken(PlSqlParser.INCLUDING, 0); }
        public TerminalNode INCREMENT() { return getToken(PlSqlParser.INCREMENT, 0); }
        public TerminalNode INDENT() { return getToken(PlSqlParser.INDENT, 0); }
        public TerminalNode INDEX() { return getToken(PlSqlParser.INDEX, 0); }
        public TerminalNode INDEXED() { return getToken(PlSqlParser.INDEXED, 0); }
        public TerminalNode INDICATOR() { return getToken(PlSqlParser.INDICATOR, 0); }
        public TerminalNode INDICES() { return getToken(PlSqlParser.INDICES, 0); }
        public TerminalNode INFINITE() { return getToken(PlSqlParser.INFINITE, 0); }
        public TerminalNode INLINE() { return getToken(PlSqlParser.INLINE, 0); }
        public TerminalNode INNER() { return getToken(PlSqlParser.INNER, 0); }
        public TerminalNode INOUT() { return getToken(PlSqlParser.INOUT, 0); }
        public TerminalNode INSERT() { return getToken(PlSqlParser.INSERT, 0); }
        public TerminalNode INSTANTIABLE() { return getToken(PlSqlParser.INSTANTIABLE, 0); }
        public TerminalNode INSTEAD() { return getToken(PlSqlParser.INSTEAD, 0); }
        public TerminalNode INT() { return getToken(PlSqlParser.INT, 0); }
        public TerminalNode INTEGER() { return getToken(PlSqlParser.INTEGER, 0); }
        public TerminalNode INTERSECT() { return getToken(PlSqlParser.INTERSECT, 0); }
        public TerminalNode INTERVAL() { return getToken(PlSqlParser.INTERVAL, 0); }
        public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
        public TerminalNode INVALIDATE() { return getToken(PlSqlParser.INVALIDATE, 0); }
        public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
        public TerminalNode ISOLATION() { return getToken(PlSqlParser.ISOLATION, 0); }
        public TerminalNode ITERATE() { return getToken(PlSqlParser.ITERATE, 0); }
        public TerminalNode JAVA() { return getToken(PlSqlParser.JAVA, 0); }
        public TerminalNode JOIN() { return getToken(PlSqlParser.JOIN, 0); }
        public TerminalNode KEEP() { return getToken(PlSqlParser.KEEP, 0); }
        public TerminalNode LANGUAGE() { return getToken(PlSqlParser.LANGUAGE, 0); }
        public TerminalNode LAST() { return getToken(PlSqlParser.LAST, 0); }
        public TerminalNode LAST_VALUE() { return getToken(PlSqlParser.LAST_VALUE, 0); }
        public TerminalNode LEADING() { return getToken(PlSqlParser.LEADING, 0); }
        public TerminalNode LEFT() { return getToken(PlSqlParser.LEFT, 0); }
        public TerminalNode LEVEL() { return getToken(PlSqlParser.LEVEL, 0); }
        public TerminalNode LIBRARY() { return getToken(PlSqlParser.LIBRARY, 0); }
        public TerminalNode LIKE() { return getToken(PlSqlParser.LIKE, 0); }
        public TerminalNode LIKE2() { return getToken(PlSqlParser.LIKE2, 0); }
        public TerminalNode LIKE4() { return getToken(PlSqlParser.LIKE4, 0); }
        public TerminalNode LIKEC() { return getToken(PlSqlParser.LIKEC, 0); }
        public TerminalNode LIMIT() { return getToken(PlSqlParser.LIMIT, 0); }
        public TerminalNode LOCAL() { return getToken(PlSqlParser.LOCAL, 0); }
        public TerminalNode LOCK() { return getToken(PlSqlParser.LOCK, 0); }
        public TerminalNode LOCKED() { return getToken(PlSqlParser.LOCKED, 0); }
        public TerminalNode LOG() { return getToken(PlSqlParser.LOG, 0); }
        public TerminalNode LOGOFF() { return getToken(PlSqlParser.LOGOFF, 0); }
        public TerminalNode LOGON() { return getToken(PlSqlParser.LOGON, 0); }
        public TerminalNode LONG() { return getToken(PlSqlParser.LONG, 0); }
        public TerminalNode LOOP() { return getToken(PlSqlParser.LOOP, 0); }
        public TerminalNode MAIN() { return getToken(PlSqlParser.MAIN, 0); }
        public TerminalNode MAP() { return getToken(PlSqlParser.MAP, 0); }
        public TerminalNode MATCHED() { return getToken(PlSqlParser.MATCHED, 0); }
        public TerminalNode MAXVALUE() { return getToken(PlSqlParser.MAXVALUE, 0); }
        public TerminalNode MEASURES() { return getToken(PlSqlParser.MEASURES, 0); }
        public TerminalNode MEMBER() { return getToken(PlSqlParser.MEMBER, 0); }
        public TerminalNode MERGE() { return getToken(PlSqlParser.MERGE, 0); }
        public TerminalNode MINUS() { return getToken(PlSqlParser.MINUS, 0); }
        public TerminalNode MINUTE() { return getToken(PlSqlParser.MINUTE, 0); }
        public TerminalNode MINVALUE() { return getToken(PlSqlParser.MINVALUE, 0); }
        public TerminalNode MLSLABEL() { return getToken(PlSqlParser.MLSLABEL, 0); }
        public TerminalNode MODE() { return getToken(PlSqlParser.MODE, 0); }
        public TerminalNode MODEL() { return getToken(PlSqlParser.MODEL, 0); }
        public TerminalNode MODIFY() { return getToken(PlSqlParser.MODIFY, 0); }
        public TerminalNode MONTH() { return getToken(PlSqlParser.MONTH, 0); }
        public TerminalNode MULTISET() { return getToken(PlSqlParser.MULTISET, 0); }
        public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
        public TerminalNode NAN() { return getToken(PlSqlParser.NAN, 0); }
        public TerminalNode NATURAL() { return getToken(PlSqlParser.NATURAL, 0); }
        public TerminalNode NATURALN() { return getToken(PlSqlParser.NATURALN, 0); }
        public TerminalNode NAV() { return getToken(PlSqlParser.NAV, 0); }
        public TerminalNode NCHAR() { return getToken(PlSqlParser.NCHAR, 0); }
        public TerminalNode NCHAR_CS() { return getToken(PlSqlParser.NCHAR_CS, 0); }
        public TerminalNode NCLOB() { return getToken(PlSqlParser.NCLOB, 0); }
        public TerminalNode NESTED() { return getToken(PlSqlParser.NESTED, 0); }
        public TerminalNode NEW() { return getToken(PlSqlParser.NEW, 0); }
        public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
        public TerminalNode NOAUDIT() { return getToken(PlSqlParser.NOAUDIT, 0); }
        public TerminalNode NOCACHE() { return getToken(PlSqlParser.NOCACHE, 0); }
        public TerminalNode NOCOPY() { return getToken(PlSqlParser.NOCOPY, 0); }
        public TerminalNode NOCYCLE() { return getToken(PlSqlParser.NOCYCLE, 0); }
        public TerminalNode NOENTITYESCAPING() { return getToken(PlSqlParser.NOENTITYESCAPING, 0); }
        public TerminalNode NOMAXVALUE() { return getToken(PlSqlParser.NOMAXVALUE, 0); }
        public TerminalNode NOMINVALUE() { return getToken(PlSqlParser.NOMINVALUE, 0); }
        public TerminalNode NONE() { return getToken(PlSqlParser.NONE, 0); }
        public TerminalNode NOORDER() { return getToken(PlSqlParser.NOORDER, 0); }
        public TerminalNode NOSCHEMACHECK() { return getToken(PlSqlParser.NOSCHEMACHECK, 0); }
        public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
        public TerminalNode NOWAIT() { return getToken(PlSqlParser.NOWAIT, 0); }
        public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
        public TerminalNode NULLS() { return getToken(PlSqlParser.NULLS, 0); }
        public TerminalNode NUMBER() { return getToken(PlSqlParser.NUMBER, 0); }
        public TerminalNode NUMERIC() { return getToken(PlSqlParser.NUMERIC, 0); }
        public TerminalNode NVARCHAR2() { return getToken(PlSqlParser.NVARCHAR2, 0); }
        public TerminalNode OBJECT() { return getToken(PlSqlParser.OBJECT, 0); }
        public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
        public TerminalNode OFF() { return getToken(PlSqlParser.OFF, 0); }
        public TerminalNode OID() { return getToken(PlSqlParser.OID, 0); }
        public TerminalNode OLD() { return getToken(PlSqlParser.OLD, 0); }
        public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
        public TerminalNode ONLY() { return getToken(PlSqlParser.ONLY, 0); }
        public TerminalNode OPEN() { return getToken(PlSqlParser.OPEN, 0); }
        public TerminalNode OPTION() { return getToken(PlSqlParser.OPTION, 0); }
        public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
        public TerminalNode ORADATA() { return getToken(PlSqlParser.ORADATA, 0); }
        public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
        public TerminalNode ORDINALITY() { return getToken(PlSqlParser.ORDINALITY, 0); }
        public TerminalNode OSERROR() { return getToken(PlSqlParser.OSERROR, 0); }
        public TerminalNode OUT() { return getToken(PlSqlParser.OUT, 0); }
        public TerminalNode OUTER() { return getToken(PlSqlParser.OUTER, 0); }
        public TerminalNode OVER() { return getToken(PlSqlParser.OVER, 0); }
        public TerminalNode OVERRIDING() { return getToken(PlSqlParser.OVERRIDING, 0); }
        public TerminalNode PACKAGE() { return getToken(PlSqlParser.PACKAGE, 0); }
        public TerminalNode PARALLEL_ENABLE() { return getToken(PlSqlParser.PARALLEL_ENABLE, 0); }
        public TerminalNode PARAMETERS() { return getToken(PlSqlParser.PARAMETERS, 0); }
        public TerminalNode PARENT() { return getToken(PlSqlParser.PARENT, 0); }
        public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
        public TerminalNode PASSING() { return getToken(PlSqlParser.PASSING, 0); }
        public TerminalNode PATH() { return getToken(PlSqlParser.PATH, 0); }
        public TerminalNode PIPELINED() { return getToken(PlSqlParser.PIPELINED, 0); }
        public TerminalNode PIVOT() { return getToken(PlSqlParser.PIVOT, 0); }
        public TerminalNode PLAN() { return getToken(PlSqlParser.PLAN, 0); }
        public TerminalNode PLS_INTEGER() { return getToken(PlSqlParser.PLS_INTEGER, 0); }
        public TerminalNode POSITIVE() { return getToken(PlSqlParser.POSITIVE, 0); }
        public TerminalNode POSITIVEN() { return getToken(PlSqlParser.POSITIVEN, 0); }
        public TerminalNode PRAGMA() { return getToken(PlSqlParser.PRAGMA, 0); }
        public TerminalNode PRECEDING() { return getToken(PlSqlParser.PRECEDING, 0); }
        public TerminalNode PRECISION() { return getToken(PlSqlParser.PRECISION, 0); }
        public TerminalNode PRESENT() { return getToken(PlSqlParser.PRESENT, 0); }
        public TerminalNode PRIOR() { return getToken(PlSqlParser.PRIOR, 0); }
        public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
        public TerminalNode RAISE() { return getToken(PlSqlParser.RAISE, 0); }
        public TerminalNode RANGE() { return getToken(PlSqlParser.RANGE, 0); }
        public TerminalNode RAW() { return getToken(PlSqlParser.RAW, 0); }
        public TerminalNode READ() { return getToken(PlSqlParser.READ, 0); }
        public TerminalNode REAL() { return getToken(PlSqlParser.REAL, 0); }
        public TerminalNode RECORD() { return getToken(PlSqlParser.RECORD, 0); }
        public TerminalNode REF() { return getToken(PlSqlParser.REF, 0); }
        public TerminalNode REFERENCE() { return getToken(PlSqlParser.REFERENCE, 0); }
        public TerminalNode REFERENCING() { return getToken(PlSqlParser.REFERENCING, 0); }
        public TerminalNode REJECT() { return getToken(PlSqlParser.REJECT, 0); }
        public TerminalNode RELIES_ON() { return getToken(PlSqlParser.RELIES_ON, 0); }
        public TerminalNode RENAME() { return getToken(PlSqlParser.RENAME, 0); }
        public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
        public TerminalNode RESPECT() { return getToken(PlSqlParser.RESPECT, 0); }
        public TerminalNode RESTRICT_REFERENCES() { return getToken(PlSqlParser.RESTRICT_REFERENCES, 0); }
        public TerminalNode RESULT() { return getToken(PlSqlParser.RESULT, 0); }
        public TerminalNode RESULT_CACHE() { return getToken(PlSqlParser.RESULT_CACHE, 0); }
        public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
        public TerminalNode RETURNING() { return getToken(PlSqlParser.RETURNING, 0); }
        public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
        public TerminalNode REVERSE() { return getToken(PlSqlParser.REVERSE, 0); }
        public TerminalNode REVOKE() { return getToken(PlSqlParser.REVOKE, 0); }
        public TerminalNode RIGHT() { return getToken(PlSqlParser.RIGHT, 0); }
        public TerminalNode ROLLBACK() { return getToken(PlSqlParser.ROLLBACK, 0); }
        public TerminalNode ROLLUP() { return getToken(PlSqlParser.ROLLUP, 0); }
        public TerminalNode ROW() { return getToken(PlSqlParser.ROW, 0); }
        public TerminalNode ROWID() { return getToken(PlSqlParser.ROWID, 0); }
        public TerminalNode ROWS() { return getToken(PlSqlParser.ROWS, 0); }
        public TerminalNode RULES() { return getToken(PlSqlParser.RULES, 0); }
        public TerminalNode SAMPLE() { return getToken(PlSqlParser.SAMPLE, 0); }
        public TerminalNode SAVE() { return getToken(PlSqlParser.SAVE, 0); }
        public TerminalNode SAVEPOINT() { return getToken(PlSqlParser.SAVEPOINT, 0); }
        public TerminalNode SCHEMA() { return getToken(PlSqlParser.SCHEMA, 0); }
        public TerminalNode SCHEMACHECK() { return getToken(PlSqlParser.SCHEMACHECK, 0); }
        public TerminalNode SCN() { return getToken(PlSqlParser.SCN, 0); }
        public TerminalNode SEARCH() { return getToken(PlSqlParser.SEARCH, 0); }
        public TerminalNode SECOND() { return getToken(PlSqlParser.SECOND, 0); }
        public TerminalNode SEED() { return getToken(PlSqlParser.SEED, 0); }
        public TerminalNode SEGMENT() { return getToken(PlSqlParser.SEGMENT, 0); }
        public TerminalNode SELECT() { return getToken(PlSqlParser.SELECT, 0); }
        public TerminalNode SELF() { return getToken(PlSqlParser.SELF, 0); }
        public TerminalNode SEQUENCE() { return getToken(PlSqlParser.SEQUENCE, 0); }
        public TerminalNode SEQUENTIAL() { return getToken(PlSqlParser.SEQUENTIAL, 0); }
        public TerminalNode SERIALIZABLE() { return getToken(PlSqlParser.SERIALIZABLE, 0); }
        public TerminalNode SERIALLY_REUSABLE() { return getToken(PlSqlParser.SERIALLY_REUSABLE, 0); }
        public TerminalNode SERVERERROR() { return getToken(PlSqlParser.SERVERERROR, 0); }
        public TerminalNode SESSIONTIMEZONE() { return getToken(PlSqlParser.SESSIONTIMEZONE, 0); }
        public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
        public TerminalNode SETS() { return getToken(PlSqlParser.SETS, 0); }
        public TerminalNode SETTINGS() { return getToken(PlSqlParser.SETTINGS, 0); }
        public TerminalNode SHARE() { return getToken(PlSqlParser.SHARE, 0); }
        public TerminalNode SHOW() { return getToken(PlSqlParser.SHOW, 0); }
        public TerminalNode SHUTDOWN() { return getToken(PlSqlParser.SHUTDOWN, 0); }
        public TerminalNode SIBLINGS() { return getToken(PlSqlParser.SIBLINGS, 0); }
        public TerminalNode SIGNTYPE() { return getToken(PlSqlParser.SIGNTYPE, 0); }
        public TerminalNode SIMPLE_INTEGER() { return getToken(PlSqlParser.SIMPLE_INTEGER, 0); }
        public TerminalNode SINGLE() { return getToken(PlSqlParser.SINGLE, 0); }
        public TerminalNode SIZE() { return getToken(PlSqlParser.SIZE, 0); }
        public TerminalNode SKIP_() { return getToken(PlSqlParser.SKIP_, 0); }
        public TerminalNode SMALLINT() { return getToken(PlSqlParser.SMALLINT, 0); }
        public TerminalNode SNAPSHOT() { return getToken(PlSqlParser.SNAPSHOT, 0); }
        public TerminalNode SOME() { return getToken(PlSqlParser.SOME, 0); }
        public TerminalNode SPECIFICATION() { return getToken(PlSqlParser.SPECIFICATION, 0); }
        public TerminalNode SQLDATA() { return getToken(PlSqlParser.SQLDATA, 0); }
        public TerminalNode SQLERROR() { return getToken(PlSqlParser.SQLERROR, 0); }
        public TerminalNode SQL_PERCENT_ROWCOUNT() { return getToken(PlSqlParser.SQL_PERCENT_ROWCOUNT, 0); }
        public TerminalNode STANDALONE() { return getToken(PlSqlParser.STANDALONE, 0); }
        public TerminalNode START() { return getToken(PlSqlParser.START, 0); }
        public TerminalNode STARTUP() { return getToken(PlSqlParser.STARTUP, 0); }
        public TerminalNode STATEMENT() { return getToken(PlSqlParser.STATEMENT, 0); }
        public TerminalNode STATEMENT_ID() { return getToken(PlSqlParser.STATEMENT_ID, 0); }
        public TerminalNode STATIC() { return getToken(PlSqlParser.STATIC, 0); }
        public TerminalNode STATISTICS() { return getToken(PlSqlParser.STATISTICS, 0); }
        public TerminalNode STRING() { return getToken(PlSqlParser.STRING, 0); }
        public TerminalNode SUBMULTISET() { return getToken(PlSqlParser.SUBMULTISET, 0); }
        public TerminalNode SUBPARTITION() { return getToken(PlSqlParser.SUBPARTITION, 0); }
        public TerminalNode SUBSTITUTABLE() { return getToken(PlSqlParser.SUBSTITUTABLE, 0); }
        public TerminalNode SUBTYPE() { return getToken(PlSqlParser.SUBTYPE, 0); }
        public TerminalNode SUCCESS() { return getToken(PlSqlParser.SUCCESS, 0); }
        public TerminalNode SUSPEND() { return getToken(PlSqlParser.SUSPEND, 0); }
        public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
        public TerminalNode THE() { return getToken(PlSqlParser.THE, 0); }
        public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
        public TerminalNode TIME() { return getToken(PlSqlParser.TIME, 0); }
        public TerminalNode TIMESTAMP() { return getToken(PlSqlParser.TIMESTAMP, 0); }
        public TerminalNode TIMESTAMP_LTZ_UNCONSTRAINED() { return getToken(PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0); }
        public TerminalNode TIMESTAMP_TZ_UNCONSTRAINED() { return getToken(PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, 0); }
        public TerminalNode TIMESTAMP_UNCONSTRAINED() { return getToken(PlSqlParser.TIMESTAMP_UNCONSTRAINED, 0); }
        public TerminalNode TIMEZONE_ABBR() { return getToken(PlSqlParser.TIMEZONE_ABBR, 0); }
        public TerminalNode TIMEZONE_HOUR() { return getToken(PlSqlParser.TIMEZONE_HOUR, 0); }
        public TerminalNode TIMEZONE_MINUTE() { return getToken(PlSqlParser.TIMEZONE_MINUTE, 0); }
        public TerminalNode TIMEZONE_REGION() { return getToken(PlSqlParser.TIMEZONE_REGION, 0); }
        public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
        public TerminalNode TRAILING() { return getToken(PlSqlParser.TRAILING, 0); }
        public TerminalNode TRANSACTION() { return getToken(PlSqlParser.TRANSACTION, 0); }
        public TerminalNode TRANSLATE() { return getToken(PlSqlParser.TRANSLATE, 0); }
        public TerminalNode TREAT() { return getToken(PlSqlParser.TREAT, 0); }
        public TerminalNode TRIGGER() { return getToken(PlSqlParser.TRIGGER, 0); }
        public TerminalNode TRIM() { return getToken(PlSqlParser.TRIM, 0); }
        public TerminalNode TRUE() { return getToken(PlSqlParser.TRUE, 0); }
        public TerminalNode TRUNCATE() { return getToken(PlSqlParser.TRUNCATE, 0); }
        public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
        public TerminalNode UNBOUNDED() { return getToken(PlSqlParser.UNBOUNDED, 0); }
        public TerminalNode UNDER() { return getToken(PlSqlParser.UNDER, 0); }
        public TerminalNode UNION() { return getToken(PlSqlParser.UNION, 0); }
        public TerminalNode UNIQUE() { return getToken(PlSqlParser.UNIQUE, 0); }
        public TerminalNode UNLIMITED() { return getToken(PlSqlParser.UNLIMITED, 0); }
        public TerminalNode UNPIVOT() { return getToken(PlSqlParser.UNPIVOT, 0); }
        public TerminalNode UNTIL() { return getToken(PlSqlParser.UNTIL, 0); }
        public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
        public TerminalNode UPDATED() { return getToken(PlSqlParser.UPDATED, 0); }
        public TerminalNode UPSERT() { return getToken(PlSqlParser.UPSERT, 0); }
        public TerminalNode UROWID() { return getToken(PlSqlParser.UROWID, 0); }
        public TerminalNode USE() { return getToken(PlSqlParser.USE, 0); }
        public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
        public TerminalNode VALIDATE() { return getToken(PlSqlParser.VALIDATE, 0); }
        public TerminalNode VALUE() { return getToken(PlSqlParser.VALUE, 0); }
        public TerminalNode VALUES() { return getToken(PlSqlParser.VALUES, 0); }
        public TerminalNode VARCHAR() { return getToken(PlSqlParser.VARCHAR, 0); }
        public TerminalNode VARCHAR2() { return getToken(PlSqlParser.VARCHAR2, 0); }
        public TerminalNode VARIABLE() { return getToken(PlSqlParser.VARIABLE, 0); }
        public TerminalNode VARRAY() { return getToken(PlSqlParser.VARRAY, 0); }
        public TerminalNode VARYING() { return getToken(PlSqlParser.VARYING, 0); }
        public TerminalNode VERSION() { return getToken(PlSqlParser.VERSION, 0); }
        public TerminalNode VERSIONS() { return getToken(PlSqlParser.VERSIONS, 0); }
        public TerminalNode WAIT() { return getToken(PlSqlParser.WAIT, 0); }
        public TerminalNode WARNING() { return getToken(PlSqlParser.WARNING, 0); }
        public TerminalNode WELLFORMED() { return getToken(PlSqlParser.WELLFORMED, 0); }
        public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
        public TerminalNode WHENEVER() { return getToken(PlSqlParser.WHENEVER, 0); }
        public TerminalNode WHERE() { return getToken(PlSqlParser.WHERE, 0); }
        public TerminalNode WHILE() { return getToken(PlSqlParser.WHILE, 0); }
        public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
        public TerminalNode WITHIN() { return getToken(PlSqlParser.WITHIN, 0); }
        public TerminalNode WORK() { return getToken(PlSqlParser.WORK, 0); }
        public TerminalNode WRITE() { return getToken(PlSqlParser.WRITE, 0); }
        public TerminalNode XML() { return getToken(PlSqlParser.XML, 0); }
        public TerminalNode XMLAGG() { return getToken(PlSqlParser.XMLAGG, 0); }
        public TerminalNode XMLATTRIBUTES() { return getToken(PlSqlParser.XMLATTRIBUTES, 0); }
        public TerminalNode XMLCAST() { return getToken(PlSqlParser.XMLCAST, 0); }
        public TerminalNode XMLCOLATTVAL() { return getToken(PlSqlParser.XMLCOLATTVAL, 0); }
        public TerminalNode XMLELEMENT() { return getToken(PlSqlParser.XMLELEMENT, 0); }
        public TerminalNode XMLEXISTS() { return getToken(PlSqlParser.XMLEXISTS, 0); }
        public TerminalNode XMLFOREST() { return getToken(PlSqlParser.XMLFOREST, 0); }
        public TerminalNode XMLNAMESPACES() { return getToken(PlSqlParser.XMLNAMESPACES, 0); }
        public TerminalNode XMLPARSE() { return getToken(PlSqlParser.XMLPARSE, 0); }
        public TerminalNode XMLPI() { return getToken(PlSqlParser.XMLPI, 0); }
        public TerminalNode XMLQUERY() { return getToken(PlSqlParser.XMLQUERY, 0); }
        public TerminalNode XMLROOT() { return getToken(PlSqlParser.XMLROOT, 0); }
        public TerminalNode XMLSERIALIZE() { return getToken(PlSqlParser.XMLSERIALIZE, 0); }
        public TerminalNode XMLTABLE() { return getToken(PlSqlParser.XMLTABLE, 0); }
        public TerminalNode YEAR() { return getToken(PlSqlParser.YEAR, 0); }
        public TerminalNode YES() { return getToken(PlSqlParser.YES, 0); }
        public TerminalNode YMINTERVAL_UNCONSTRAINED() { return getToken(PlSqlParser.YMINTERVAL_UNCONSTRAINED, 0); }
        public TerminalNode ZONE() { return getToken(PlSqlParser.ZONE, 0); }
        public TerminalNode PREDICTION() { return getToken(PlSqlParser.PREDICTION, 0); }
        public TerminalNode PREDICTION_BOUNDS() { return getToken(PlSqlParser.PREDICTION_BOUNDS, 0); }
        public TerminalNode PREDICTION_COST() { return getToken(PlSqlParser.PREDICTION_COST, 0); }
        public TerminalNode PREDICTION_DETAILS() { return getToken(PlSqlParser.PREDICTION_DETAILS, 0); }
        public TerminalNode PREDICTION_PROBABILITY() { return getToken(PlSqlParser.PREDICTION_PROBABILITY, 0); }
        public TerminalNode PREDICTION_SET() { return getToken(PlSqlParser.PREDICTION_SET, 0); }
        public TerminalNode CUME_DIST() { return getToken(PlSqlParser.CUME_DIST, 0); }
        public TerminalNode DENSE_RANK() { return getToken(PlSqlParser.DENSE_RANK, 0); }
        public TerminalNode LISTAGG() { return getToken(PlSqlParser.LISTAGG, 0); }
        public TerminalNode PERCENT_RANK() { return getToken(PlSqlParser.PERCENT_RANK, 0); }
        public TerminalNode PERCENTILE_CONT() { return getToken(PlSqlParser.PERCENTILE_CONT, 0); }
        public TerminalNode PERCENTILE_DISC() { return getToken(PlSqlParser.PERCENTILE_DISC, 0); }
        public TerminalNode RANK() { return getToken(PlSqlParser.RANK, 0); }
        public TerminalNode AVG() { return getToken(PlSqlParser.AVG, 0); }
        public TerminalNode CORR() { return getToken(PlSqlParser.CORR, 0); }
        public TerminalNode LAG() { return getToken(PlSqlParser.LAG, 0); }
        public TerminalNode LEAD() { return getToken(PlSqlParser.LEAD, 0); }
        public TerminalNode MAX() { return getToken(PlSqlParser.MAX, 0); }
        public TerminalNode MEDIAN() { return getToken(PlSqlParser.MEDIAN, 0); }
        public TerminalNode MIN() { return getToken(PlSqlParser.MIN, 0); }
        public TerminalNode NTILE() { return getToken(PlSqlParser.NTILE, 0); }
        public TerminalNode RATIO_TO_REPORT() { return getToken(PlSqlParser.RATIO_TO_REPORT, 0); }
        public TerminalNode ROW_NUMBER() { return getToken(PlSqlParser.ROW_NUMBER, 0); }
        public TerminalNode SUM() { return getToken(PlSqlParser.SUM, 0); }
        public TerminalNode VARIANCE() { return getToken(PlSqlParser.VARIANCE, 0); }
        public TerminalNode REGR_() { return getToken(PlSqlParser.REGR_, 0); }
        public TerminalNode STDDEV() { return getToken(PlSqlParser.STDDEV, 0); }
        public TerminalNode VAR_() { return getToken(PlSqlParser.VAR_, 0); }
        public TerminalNode COVAR_() { return getToken(PlSqlParser.COVAR_, 0); }
        public TerminalNode TO_CHAR() { return getToken(PlSqlParser.TO_CHAR, 0); }
        public Regular_idContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }
        @Override public int getRuleIndex() { return RULE_regular_id; }
        @Override
        public void enterRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterRegular_id(this);
        }
        @Override
        public void exitRule(ParseTreeListener listener) {
            if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitRegular_id(this);
        }
        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitRegular_id(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Regular_idContext regular_id() throws RecognitionException {
        Regular_idContext _localctx = new Regular_idContext(_ctx, getState());
        enterRule(_localctx, 776, RULE_regular_id);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(5502);
                _la = _input.LA(1);
                if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ALTER) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREADTH) | (1L << BULK) | (1L << BY) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHECK) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DEPTH - 64)) | (1L << (DESC - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (ELSE - 64)) | (1L << (ELSIF - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (END - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EXCEPT - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXCLUSIVE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FETCH - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FOR - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GOTO - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HAVING - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IN - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEX - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERSECT - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTO - 192)) | (1L << (INVALIDATE - 192)) | (1L << (IS - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCK - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUS - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCACHE - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)) | (1L << (NOENTITYESCAPING - 192)) | (1L << (NOMAXVALUE - 192)) | (1L << (NOMINVALUE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NONE - 256)) | (1L << (NOORDER - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NOT - 256)) | (1L << (NOWAIT - 256)) | (1L << (NULL - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OF - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ON - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (OPTION - 256)) | (1L << (OR - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDER - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PIVOT - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (PRIOR - 256)) | (1L << (PROCEDURE - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (REVOKE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SEARCH - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELECT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENCE - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHARE - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (SQL_PERCENT_ROWCOUNT - 320)) | (1L << (STANDALONE - 320)) | (1L << (START - 320)) | (1L << (STARTUP - 320)) | (1L << (STATEMENT - 320)) | (1L << (STATEMENT_ID - 320)) | (1L << (STATIC - 320)) | (1L << (STATISTICS - 320)) | (1L << (STRING - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TABLE - 384)) | (1L << (THE - 384)) | (1L << (THEN - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TO - 384)) | (1L << (TO_CHAR - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUE - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNION - 384)) | (1L << (UNIQUE - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNPIVOT - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATE - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (USING - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VALUES - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHEN - 384)) | (1L << (WHENEVER - 384)) | (1L << (WHERE - 384)) | (1L << (WHILE - 384)) | (1L << (WITH - 384)) | (1L << (WITHIN - 384)) | (1L << (WORK - 384)) | (1L << (WRITE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)) | (1L << (REGR_ - 448)) | (1L << (STDDEV - 448)) | (1L << (VAR_ - 448)) | (1L << (COVAR_ - 448)))) != 0) || _la==REGULAR_ID) ) {
                    _errHandler.recoverInline(this);
                } else {
                    consume();
                }
            }
        }
        catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        }
        finally {
            exitRule();
        }
        return _localctx;
    }

    private static final int _serializedATNSegments = 3;
    private static final String _serializedATNSegment0 =
            "\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3\u0279\u1583\4\2\t"+
                    "\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
                    "\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
                    "\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
                    "\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
                    "\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
                    ",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
                    "\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
                    "\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
                    "\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
                    "\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
                    "`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
                    "k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
                    "w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
                    "\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
                    "\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
                    "\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
                    "\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
                    "\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
                    "\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
                    "\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
                    "\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
                    "\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
                    "\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
                    "\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
                    "\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
                    "\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
                    "\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
                    "\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
                    "\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
                    "\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
                    "\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
                    "\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
                    "\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
                    "\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
                    "\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
                    "\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
                    "\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
                    "\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
                    "\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
                    "\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
                    "\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
                    "\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
                    "\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
                    "\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
                    "\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
                    "\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
                    "\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
                    "\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
                    "\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
                    "\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
                    "\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
                    "\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
                    "\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
                    "\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
                    "\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
                    "\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
                    "\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
                    "\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
                    "\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
                    "\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
                    "\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
                    "\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
                    "\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
                    "\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
                    "\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
                    "\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
                    "\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
                    "\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
                    "\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
                    "\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181"+
                    "\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184\4\u0185\t\u0185"+
                    "\4\u0186\t\u0186\3\2\6\2\u030e\n\2\r\2\16\2\u030f\3\3\7\3\u0313\n\3\f"+
                    "\3\16\3\u0316\13\3\3\3\3\3\3\4\3\4\3\4\7\4\u031d\n\4\f\4\16\4\u0320\13"+
                    "\4\3\4\5\4\u0323\n\4\3\4\7\4\u0326\n\4\f\4\16\4\u0329\13\4\3\4\5\4\u032c"+
                    "\n\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3"+
                    "\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u0345\n\5\3\6\3\6\7\6\u0349\n\6\f\6\16"+
                    "\6\u034c\13\6\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\5\t\u035a"+
                    "\n\t\3\t\7\t\u035d\n\t\f\t\16\t\u0360\13\t\3\t\3\t\5\t\u0364\n\t\3\t\3"+
                    "\t\3\n\3\n\3\n\5\n\u036b\n\n\5\n\u036d\n\n\3\n\3\n\3\13\3\13\3\13\3\13"+
                    "\3\13\3\13\7\13\u0377\n\13\f\13\16\13\u037a\13\13\3\13\3\13\5\13\u037e"+
                    "\n\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\7\13\u038a\n\13"+
                    "\f\13\16\13\u038d\13\13\3\13\3\13\7\13\u0391\n\13\f\13\16\13\u0394\13"+
                    "\13\3\13\3\13\5\13\u0398\n\13\5\13\u039a\n\13\3\13\3\13\3\f\3\f\5\f\u03a0"+
                    "\n\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\7\r\u03ac\n\r\f\r\16\r\u03af"+
                    "\13\r\3\r\3\r\5\r\u03b3\n\r\3\r\5\r\u03b6\n\r\3\r\3\r\3\16\3\16\5\16\u03bc"+
                    "\n\16\3\17\3\17\3\17\3\17\3\17\7\17\u03c3\n\17\f\17\16\17\u03c6\13\17"+
                    "\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20\7\20\u03d1\n\20\f\20\16"+
                    "\20\u03d4\13\20\3\20\3\20\3\21\3\21\3\21\5\21\u03db\n\21\3\21\3\21\3\21"+
                    "\3\22\3\22\3\22\3\22\3\22\5\22\u03e5\n\22\3\22\5\22\u03e8\n\22\3\22\7"+
                    "\22\u03eb\n\22\f\22\16\22\u03ee\13\22\3\22\3\22\5\22\u03f2\n\22\3\22\3"+
                    "\22\3\23\3\23\3\23\5\23\u03f9\n\23\3\23\3\23\3\23\5\23\u03fe\n\23\3\23"+
                    "\3\23\3\23\3\24\3\24\3\24\3\24\7\24\u0407\n\24\f\24\16\24\u040a\13\24"+
                    "\3\24\3\24\5\24\u040e\n\24\3\24\5\24\u0411\n\24\3\24\3\24\5\24\u0415\n"+
                    "\24\3\25\3\25\5\25\u0419\n\25\3\25\3\25\7\25\u041d\n\25\f\25\16\25\u0420"+
                    "\13\25\3\25\3\25\5\25\u0424\n\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3"+
                    "\26\3\26\3\26\5\26\u0430\n\26\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27"+
                    "\3\27\3\27\5\27\u043c\n\27\3\30\3\30\3\30\3\30\3\30\3\31\3\31\3\31\3\31"+
                    "\3\31\5\31\u0448\n\31\3\31\7\31\u044b\n\31\f\31\16\31\u044e\13\31\3\31"+
                    "\3\31\5\31\u0452\n\31\3\31\3\31\3\32\3\32\3\32\5\32\u0459\n\32\5\32\u045b"+
                    "\n\32\3\32\3\32\3\33\3\33\3\33\3\33\3\33\3\33\7\33\u0465\n\33\f\33\16"+
                    "\33\u0468\13\33\3\33\3\33\5\33\u046c\n\33\3\33\5\33\u046f\n\33\3\33\3"+
                    "\33\7\33\u0473\n\33\f\33\16\33\u0476\13\33\3\33\3\33\3\33\5\33\u047b\n"+
                    "\33\5\33\u047d\n\33\3\33\3\33\3\34\3\34\3\34\3\34\3\34\3\35\3\35\3\35"+
                    "\3\35\3\35\3\35\3\35\3\35\3\35\5\35\u048f\n\35\3\35\7\35\u0492\n\35\f"+
                    "\35\16\35\u0495\13\35\3\35\3\35\5\35\u0499\n\35\5\35\u049b\n\35\3\35\3"+
                    "\35\3\36\3\36\3\36\5\36\u04a2\n\36\3\36\3\36\3\36\3\36\3\36\5\36\u04a9"+
                    "\n\36\3\36\5\36\u04ac\n\36\3\36\5\36\u04af\n\36\3\36\5\36\u04b2\n\36\3"+
                    "\36\3\36\3\36\3\37\3\37\3\37\3\37\7\37\u04bb\n\37\f\37\16\37\u04be\13"+
                    "\37\3 \3 \3 \3 \3 \3!\3!\3!\3!\5!\u04c9\n!\3!\3!\5!\u04cd\n!\3!\5!\u04d0"+
                    "\n!\3\"\3\"\3\"\3\"\3#\3#\3#\5#\u04d9\n#\3$\3$\3$\3$\7$\u04df\n$\f$\16"+
                    "$\u04e2\13$\3$\3$\3$\3$\3$\5$\u04e9\n$\3$\5$\u04ec\n$\3%\3%\3%\3%\3%\5"+
                    "%\u04f3\n%\3&\3&\5&\u04f7\n&\3\'\3\'\3\'\7\'\u04fc\n\'\f\'\16\'\u04ff"+
                    "\13\'\3\'\6\'\u0502\n\'\r\'\16\'\u0503\3\'\3\'\3\'\3(\3(\3(\3(\3(\3(\3"+
                    "(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3"+
                    "(\3(\3(\3(\3(\3(\3(\5(\u052d\n(\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3"+
                    ")\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\5)\u0549\n)\3*\3*\3*\7*\u054e"+
                    "\n*\f*\16*\u0551\13*\3*\3*\5*\u0555\n*\3*\3*\3+\3+\3+\3+\3+\7+\u055e\n"+
                    "+\f+\16+\u0561\13+\5+\u0563\n+\3,\3,\3,\3,\3,\3-\3-\6-\u056c\n-\r-\16"+
                    "-\u056d\3.\3.\3.\3/\3/\3/\5/\u0576\n/\3/\3/\5/\u057a\n/\3/\3/\3\60\3\60"+
                    "\3\60\3\60\3\60\3\60\3\60\3\60\5\60\u0586\n\60\3\60\5\60\u0589\n\60\3"+
                    "\60\3\60\3\61\3\61\5\61\u058f\n\61\3\61\5\61\u0592\n\61\3\61\7\61\u0595"+
                    "\n\61\f\61\16\61\u0598\13\61\3\61\3\61\5\61\u059c\n\61\3\62\3\62\5\62"+
                    "\u05a0\n\62\3\62\3\62\3\62\3\62\3\62\3\62\7\62\u05a8\n\62\f\62\16\62\u05ab"+
                    "\13\62\3\62\3\62\3\63\3\63\3\63\7\63\u05b2\n\63\f\63\16\63\u05b5\13\63"+
                    "\3\64\3\64\3\64\5\64\u05ba\n\64\3\65\3\65\3\65\3\65\3\65\3\65\3\65\7\65"+
                    "\u05c3\n\65\f\65\16\65\u05c6\13\65\3\65\3\65\5\65\u05ca\n\65\3\66\3\66"+
                    "\5\66\u05ce\n\66\3\67\3\67\3\67\3\67\3\67\3\67\5\67\u05d6\n\67\38\38\3"+
                    "8\38\38\38\58\u05de\n8\38\38\38\58\u05e3\n8\38\58\u05e6\n8\58\u05e8\n"+
                    "8\39\59\u05eb\n9\39\39\39\39\3:\3:\3:\5:\u05f4\n:\3:\3:\3:\5:\u05f9\n"+
                    ":\3:\3:\3;\3;\3;\5;\u0600\n;\3;\5;\u0603\n;\3<\5<\u0606\n<\3<\3<\5<\u060a"+
                    "\n<\3<\5<\u060d\n<\3<\3<\3<\3<\7<\u0613\n<\f<\16<\u0616\13<\3<\3<\5<\u061a"+
                    "\n<\3<\7<\u061d\n<\f<\16<\u0620\13<\3=\3=\3=\3=\5=\u0626\n=\3>\3>\3>\3"+
                    "?\3?\3?\3?\3?\5?\u0630\n?\3@\3@\3@\3@\3@\3@\3@\3@\3A\3A\3A\3A\6A\u063e"+
                    "\nA\rA\16A\u063f\3A\3A\3B\3B\5B\u0646\nB\3C\3C\3C\3C\3D\3D\3D\3D\5D\u0650"+
                    "\nD\3E\3E\3E\3E\3E\3E\7E\u0658\nE\fE\16E\u065b\13E\3E\3E\3E\3E\7E\u0661"+
                    "\nE\fE\16E\u0664\13E\3E\3E\3E\5E\u0669\nE\3F\3F\3F\3F\3F\3F\7F\u0671\n"+
                    "F\fF\16F\u0674\13F\3F\3F\5F\u0678\nF\3F\3F\3F\3F\3F\7F\u067f\nF\fF\16"+
                    "F\u0682\13F\3F\3F\3F\5F\u0687\nF\3G\5G\u068a\nG\3G\5G\u068d\nG\3G\3G\3"+
                    "G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\7G\u069c\nG\fG\16G\u069f\13G\3G\3G\5G"+
                    "\u06a3\nG\3G\3G\3G\3G\3G\3G\3G\7G\u06ac\nG\fG\16G\u06af\13G\3G\3G\3G\5"+
                    "G\u06b4\nG\3H\5H\u06b7\nH\3H\3H\3I\3I\3I\5I\u06be\nI\3I\5I\u06c1\nI\3"+
                    "J\3J\3J\3J\3K\5K\u06c8\nK\3K\6K\u06cb\nK\rK\16K\u06cc\3K\3K\5K\u06d1\n"+
                    "K\3L\3L\3L\5L\u06d6\nL\3M\3M\3M\5M\u06db\nM\3N\3N\3N\3N\3N\3N\7N\u06e3"+
                    "\nN\fN\16N\u06e6\13N\3N\3N\3N\3N\5N\u06ec\nN\3O\3O\3O\3O\3O\3O\7O\u06f4"+
                    "\nO\fO\16O\u06f7\13O\3O\3O\5O\u06fb\nO\3O\3O\3O\3O\3O\5O\u0702\nO\3O\3"+
                    "O\3O\3O\3O\5O\u0709\nO\3O\3O\5O\u070d\nO\3P\5P\u0710\nP\3P\5P\u0713\n"+
                    "P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\7P\u0722\nP\fP\16P\u0725\13P"+
                    "\3P\3P\5P\u0729\nP\3P\3P\3P\3P\3P\3P\3P\5P\u0732\nP\3Q\3Q\3Q\3Q\3R\3R"+
                    "\3R\3R\3R\3R\7R\u073e\nR\fR\16R\u0741\13R\3R\3R\3S\3S\5S\u0747\nS\3T\3"+
                    "T\3T\3U\3U\3U\3U\3U\3V\3V\3V\3V\6V\u0755\nV\rV\16V\u0756\3V\3V\3W\3W\3"+
                    "W\3W\3W\7W\u0760\nW\fW\16W\u0763\13W\3W\3W\3X\3X\3X\3X\3X\3X\3X\3X\3X"+
                    "\3X\3X\3X\3X\3X\3X\3X\5X\u0777\nX\3Y\3Y\3Y\3Y\3Z\3Z\3Z\3[\3[\3[\3[\3\\"+
                    "\3\\\3\\\5\\\u0787\n\\\3]\3]\3]\3]\3^\3^\3^\5^\u0790\n^\3^\3^\3^\5^\u0795"+
                    "\n^\3^\3^\5^\u0799\n^\3^\5^\u079c\n^\3_\3_\3_\3_\3_\3_\7_\u07a4\n_\f_"+
                    "\16_\u07a7\13_\3_\3_\3`\3`\3`\3`\3`\7`\u07b0\n`\f`\16`\u07b3\13`\3`\3"+
                    "`\3`\5`\u07b8\n`\3`\3`\3a\3a\7a\u07be\na\fa\16a\u07c1\13a\3a\5a\u07c4"+
                    "\na\3a\5a\u07c7\na\3b\3b\3b\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\5c\u07d6\nc"+
                    "\3d\3d\5d\u07da\nd\3d\3d\3d\5d\u07df\nd\3d\5d\u07e2\nd\3d\3d\3e\3e\3e"+
                    "\3e\3e\3e\3e\3e\3e\5e\u07ef\ne\3e\3e\5e\u07f3\ne\3e\3e\3f\3f\3f\3f\3f"+
                    "\3f\7f\u07fd\nf\ff\16f\u0800\13f\3f\3f\5f\u0804\nf\3f\3f\5f\u0808\nf\3"+
                    "f\3f\5f\u080c\nf\3f\3f\3g\3g\5g\u0812\ng\3g\5g\u0815\ng\3g\5g\u0818\n"+
                    "g\3h\3h\3h\3h\3i\3i\3i\3i\3i\3i\3i\3i\5i\u0826\ni\3i\3i\3i\3i\3i\3i\3"+
                    "i\3i\3i\3i\3i\3i\3i\3i\5i\u0836\ni\3i\3i\6i\u083a\ni\ri\16i\u083b\3i\3"+
                    "i\5i\u0840\ni\3i\3i\3j\3j\5j\u0846\nj\3k\3k\3k\3k\3k\3k\3k\3k\7k\u0850"+
                    "\nk\fk\16k\u0853\13k\3k\3k\3k\3k\3k\3k\5k\u085b\nk\5k\u085d\nk\3k\3k\3"+
                    "l\3l\5l\u0863\nl\3l\3l\5l\u0867\nl\3l\5l\u086a\nl\3m\3m\3m\3m\5m\u0870"+
                    "\nm\3m\3m\3m\5m\u0875\nm\5m\u0877\nm\3m\3m\3n\3n\5n\u087d\nn\3n\3n\3o"+
                    "\3o\3o\3o\3o\3o\3o\5o\u0888\no\3o\3o\5o\u088c\no\3o\5o\u088f\no\3p\3p"+
                    "\5p\u0893\np\3p\3p\3p\3q\3q\3q\5q\u089b\nq\3q\3q\3q\3q\3q\3q\3q\5q\u08a4"+
                    "\nq\3r\3r\3r\3s\3s\3s\3s\3s\6s\u08ae\ns\rs\16s\u08af\3t\3t\3t\3t\3t\3"+
                    "t\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3"+
                    "u\3u\3u\3u\3u\5u\u08d3\nu\3v\3v\3v\5v\u08d8\nv\3v\3v\3v\3w\3w\5w\u08df"+
                    "\nw\3w\3w\5w\u08e3\nw\3x\3x\5x\u08e7\nx\3x\3x\5x\u08eb\nx\3y\3y\3y\3z"+
                    "\3z\3z\3z\3z\7z\u08f5\nz\fz\16z\u08f8\13z\3z\5z\u08fb\nz\3z\3z\3z\3{\3"+
                    "{\3{\3{\3{\3|\3|\3|\3}\5}\u0909\n}\3}\3}\3}\3}\5}\u090f\n}\3}\3}\3}\3"+
                    "}\3}\5}\u0916\n}\3~\3~\3~\5~\u091b\n~\3~\3~\3~\3~\3~\3~\3~\3~\5~\u0925"+
                    "\n~\3~\3~\3~\3~\5~\u092b\n~\5~\u092d\n~\3\177\3\177\3\177\3\177\3\177"+
                    "\3\177\3\177\5\177\u0936\n\177\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080"+
                    "\3\u0080\3\u0080\3\u0080\5\u0080\u0940\n\u0080\3\u0080\3\u0080\3\u0080"+
                    "\5\u0080\u0945\n\u0080\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0082"+
                    "\3\u0082\3\u0083\3\u0083\3\u0084\3\u0084\3\u0085\3\u0085\5\u0085\u0954"+
                    "\n\u0085\3\u0086\3\u0086\5\u0086\u0958\n\u0086\3\u0087\5\u0087\u095b\n"+
                    "\u0087\3\u0087\3\u0087\5\u0087\u095f\n\u0087\3\u0088\3\u0088\3\u0088\5"+
                    "\u0088\u0964\n\u0088\3\u0088\3\u0088\5\u0088\u0968\n\u0088\3\u0089\3\u0089"+
                    "\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\5\u0089\u0971\n\u0089\5\u0089"+
                    "\u0973\n\u0089\3\u0089\5\u0089\u0976\n\u0089\3\u0089\3\u0089\3\u0089\3"+
                    "\u0089\3\u0089\3\u0089\3\u0089\5\u0089\u097f\n\u0089\5\u0089\u0981\n\u0089"+
                    "\3\u0089\5\u0089\u0984\n\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089"+
                    "\5\u0089\u098b\n\u0089\3\u0089\5\u0089\u098e\n\u0089\5\u0089\u0990\n\u0089"+
                    "\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008b\3\u008b\6\u008b"+
                    "\u099a\n\u008b\r\u008b\16\u008b\u099b\3\u008c\3\u008c\3\u008c\3\u008c"+
                    "\7\u008c\u09a2\n\u008c\f\u008c\16\u008c\u09a5\13\u008c\3\u008c\3\u008c"+
                    "\3\u008c\3\u008d\5\u008d\u09ab\n\u008d\3\u008d\3\u008d\3\u008e\5\u008e"+
                    "\u09b0\n\u008e\3\u008e\3\u008e\3\u008f\3\u008f\3\u008f\3\u008f\5\u008f"+
                    "\u09b8\n\u008f\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\5\u0090\u09bf\n"+
                    "\u0090\3\u0090\3\u0090\5\u0090\u09c3\n\u0090\3\u0090\5\u0090\u09c6\n\u0090"+
                    "\3\u0091\3\u0091\3\u0091\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092"+
                    "\3\u0092\5\u0092\u09d2\n\u0092\3\u0093\3\u0093\3\u0093\3\u0093\5\u0093"+
                    "\u09d8\n\u0093\3\u0094\3\u0094\3\u0094\3\u0095\3\u0095\3\u0095\5\u0095"+
                    "\u09e0\n\u0095\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\7\u0096"+
                    "\u09e8\n\u0096\f\u0096\16\u0096\u09eb\13\u0096\3\u0096\3\u0096\3\u0096"+
                    "\3\u0096\3\u0096\3\u0096\7\u0096\u09f3\n\u0096\f\u0096\16\u0096\u09f6"+
                    "\13\u0096\3\u0096\3\u0096\3\u0096\5\u0096\u09fb\n\u0096\5\u0096\u09fd"+
                    "\n\u0096\5\u0096\u09ff\n\u0096\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097"+
                    "\5\u0097\u0a06\n\u0097\3\u0097\5\u0097\u0a09\n\u0097\3\u0098\3\u0098\3"+
                    "\u0098\3\u0098\3\u0098\5\u0098\u0a10\n\u0098\3\u0099\3\u0099\3\u0099\3"+
                    "\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\5\u0099\u0a1b\n\u0099\3"+
                    "\u0099\3\u0099\3\u0099\3\u0099\5\u0099\u0a21\n\u0099\3\u0099\3\u0099\5"+
                    "\u0099\u0a25\n\u0099\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\7"+
                    "\u009a\u0a2d\n\u009a\f\u009a\16\u009a\u0a30\13\u009a\5\u009a\u0a32\n\u009a"+
                    "\3\u009a\3\u009a\3\u009b\3\u009b\5\u009b\u0a38\n\u009b\3\u009b\3\u009b"+
                    "\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\5\u009b\u0a43"+
                    "\n\u009b\5\u009b\u0a45\n\u009b\5\u009b\u0a47\n\u009b\3\u009b\5\u009b\u0a4a"+
                    "\n\u009b\3\u009c\3\u009c\5\u009c\u0a4e\n\u009c\3\u009c\5\u009c\u0a51\n"+
                    "\u009c\3\u009d\3\u009d\5\u009d\u0a55\n\u009d\3\u009d\3\u009d\5\u009d\u0a59"+
                    "\n\u009d\3\u009d\3\u009d\3\u009d\5\u009d\u0a5e\n\u009d\3\u009e\3\u009e"+
                    "\3\u009e\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\5\u009f\u0a69"+
                    "\n\u009f\3\u009f\3\u009f\5\u009f\u0a6d\n\u009f\3\u009f\3\u009f\3\u009f"+
                    "\3\u009f\3\u009f\3\u009f\5\u009f\u0a75\n\u009f\3\u00a0\3\u00a0\3\u00a0"+
                    "\7\u00a0\u0a7a\n\u00a0\f\u00a0\16\u00a0\u0a7d\13\u00a0\3\u00a1\3\u00a1"+
                    "\3\u00a1\3\u00a1\7\u00a1\u0a83\n\u00a1\f\u00a1\16\u00a1\u0a86\13\u00a1"+
                    "\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\7\u00a2\u0a8d\n\u00a2\f\u00a2"+
                    "\16\u00a2\u0a90\13\u00a2\3\u00a2\3\u00a2\5\u00a2\u0a94\n\u00a2\3\u00a2"+
                    "\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0a9a\n\u00a2\3\u00a2\3\u00a2\5\u00a2"+
                    "\u0a9e\n\u00a2\3\u00a2\5\u00a2\u0aa1\n\u00a2\3\u00a3\3\u00a3\3\u00a3\3"+
                    "\u00a3\3\u00a3\3\u00a3\5\u00a3\u0aa9\n\u00a3\3\u00a3\5\u00a3\u0aac\n\u00a3"+
                    "\3\u00a3\3\u00a3\5\u00a3\u0ab0\n\u00a3\3\u00a3\3\u00a3\5\u00a3\u0ab4\n"+
                    "\u00a3\3\u00a3\3\u00a3\3\u00a3\5\u00a3\u0ab9\n\u00a3\3\u00a3\5\u00a3\u0abc"+
                    "\n\u00a3\3\u00a3\3\u00a3\5\u00a3\u0ac0\n\u00a3\3\u00a3\3\u00a3\5\u00a3"+
                    "\u0ac4\n\u00a3\7\u00a3\u0ac6\n\u00a3\f\u00a3\16\u00a3\u0ac9\13\u00a3\3"+
                    "\u00a3\3\u00a3\3\u00a3\3\u00a4\3\u00a4\3\u00a4\3\u00a4\7\u00a4\u0ad2\n"+
                    "\u00a4\f\u00a4\16\u00a4\u0ad5\13\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4"+
                    "\3\u00a4\3\u00a4\3\u00a4\3\u00a5\3\u00a5\7\u00a5\u0ae0\n\u00a5\f\u00a5"+
                    "\16\u00a5\u0ae3\13\u00a5\3\u00a6\3\u00a6\5\u00a6\u0ae7\n\u00a6\3\u00a6"+
                    "\3\u00a6\5\u00a6\u0aeb\n\u00a6\3\u00a6\3\u00a6\3\u00a7\3\u00a7\3\u00a7"+
                    "\3\u00a7\3\u00a7\5\u00a7\u0af4\n\u00a7\3\u00a8\5\u00a8\u0af7\n\u00a8\3"+
                    "\u00a8\3\u00a8\5\u00a8\u0afb\n\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\7"+
                    "\u00a8\u0b01\n\u00a8\f\u00a8\16\u00a8\u0b04\13\u00a8\5\u00a8\u0b06\n\u00a8"+
                    "\3\u00a8\5\u00a8\u0b09\n\u00a8\3\u00a8\3\u00a8\5\u00a8\u0b0d\n\u00a8\3"+
                    "\u00a8\5\u00a8\u0b10\n\u00a8\3\u00a8\5\u00a8\u0b13\n\u00a8\3\u00a8\5\u00a8"+
                    "\u0b16\n\u00a8\3\u00a8\5\u00a8\u0b19\n\u00a8\3\u00a8\5\u00a8\u0b1c\n\u00a8"+
                    "\3\u00a9\3\u00a9\5\u00a9\u0b20\n\u00a9\3\u00aa\3\u00aa\3\u00aa\3\u00ab"+
                    "\3\u00ab\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u0b2a\n\u00ab\3\u00ac\3\u00ac"+
                    "\3\u00ac\7\u00ac\u0b2f\n\u00ac\f\u00ac\16\u00ac\u0b32\13\u00ac\3\u00ad"+
                    "\3\u00ad\7\u00ad\u0b36\n\u00ad\f\u00ad\16\u00ad\u0b39\13\u00ad\3\u00ad"+
                    "\3\u00ad\5\u00ad\u0b3d\n\u00ad\3\u00ae\3\u00ae\3\u00ae\5\u00ae\u0b42\n"+
                    "\u00ae\3\u00ae\3\u00ae\3\u00ae\7\u00ae\u0b47\n\u00ae\f\u00ae\16\u00ae"+
                    "\u0b4a\13\u00ae\3\u00ae\3\u00ae\3\u00ae\5\u00ae\u0b4f\n\u00ae\3\u00ae"+
                    "\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\5\u00ae\u0b59"+
                    "\n\u00ae\3\u00ae\5\u00ae\u0b5c\n\u00ae\3\u00ae\7\u00ae\u0b5f\n\u00ae\f"+
                    "\u00ae\16\u00ae\u0b62\13\u00ae\3\u00ae\5\u00ae\u0b65\n\u00ae\3\u00af\5"+
                    "\u00af\u0b68\n\u00af\3\u00af\5\u00af\u0b6b\n\u00af\3\u00af\3\u00af\5\u00af"+
                    "\u0b6f\n\u00af\3\u00af\3\u00af\3\u00af\5\u00af\u0b74\n\u00af\3\u00af\3"+
                    "\u00af\7\u00af\u0b78\n\u00af\f\u00af\16\u00af\u0b7b\13\u00af\3\u00b0\3"+
                    "\u00b0\3\u00b0\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\7\u00b1\u0b85\n"+
                    "\u00b1\f\u00b1\16\u00b1\u0b88\13\u00b1\3\u00b1\3\u00b1\3\u00b2\3\u00b2"+
                    "\5\u00b2\u0b8e\n\u00b2\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3"+
                    "\3\u00b3\3\u00b3\3\u00b3\3\u00b3\7\u00b3\u0b9a\n\u00b3\f\u00b3\16\u00b3"+
                    "\u0b9d\13\u00b3\5\u00b3\u0b9f\n\u00b3\3\u00b4\3\u00b4\3\u00b4\3\u00b4"+
                    "\3\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u0ba9\n\u00b4\3\u00b5\3\u00b5"+
                    "\5\u00b5\u0bad\n\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\7\u00b5\u0bb3\n"+
                    "\u00b5\f\u00b5\16\u00b5\u0bb6\13\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5"+
                    "\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\5\u00b6\u0bc1\n\u00b6\3\u00b7"+
                    "\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\7\u00b7\u0bc9\n\u00b7\f\u00b7"+
                    "\16\u00b7\u0bcc\13\u00b7\3\u00b7\3\u00b7\5\u00b7\u0bd0\n\u00b7\3\u00b8"+
                    "\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\7\u00b8\u0bd8\n\u00b8\f\u00b8"+
                    "\16\u00b8\u0bdb\13\u00b8\3\u00b8\3\u00b8\3\u00b8\7\u00b8\u0be0\n\u00b8"+
                    "\f\u00b8\16\u00b8\u0be3\13\u00b8\5\u00b8\u0be5\n\u00b8\3\u00b8\3\u00b8"+
                    "\3\u00b9\3\u00b9\5\u00b9\u0beb\n\u00b9\3\u00ba\3\u00ba\5\u00ba\u0bef\n"+
                    "\u00ba\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u0bf4\n\u00bb\3\u00bb\3\u00bb\3"+
                    "\u00bb\3\u00bb\3\u00bb\3\u00bb\7\u00bb\u0bfc\n\u00bb\f\u00bb\16\u00bb"+
                    "\u0bff\13\u00bb\3\u00bb\3\u00bb\5\u00bb\u0c03\n\u00bb\3\u00bb\3\u00bb"+
                    "\3\u00bb\3\u00bb\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\7\u00bc\u0c0e"+
                    "\n\u00bc\f\u00bc\16\u00bc\u0c11\13\u00bc\3\u00bc\3\u00bc\3\u00bd\3\u00bd"+
                    "\3\u00bd\3\u00bd\3\u00bd\7\u00bd\u0c1a\n\u00bd\f\u00bd\16\u00bd\u0c1d"+
                    "\13\u00bd\3\u00bd\3\u00bd\5\u00bd\u0c21\n\u00bd\3\u00bd\3\u00bd\3\u00bd"+
                    "\3\u00bd\3\u00bd\3\u00bd\7\u00bd\u0c29\n\u00bd\f\u00bd\16\u00bd\u0c2c"+
                    "\13\u00bd\3\u00bd\3\u00bd\5\u00bd\u0c30\n\u00bd\5\u00bd\u0c32\n\u00bd"+
                    "\3\u00be\3\u00be\3\u00be\5\u00be\u0c37\n\u00be\3\u00be\3\u00be\5\u00be"+
                    "\u0c3b\n\u00be\3\u00be\3\u00be\3\u00be\3\u00be\5\u00be\u0c41\n\u00be\3"+
                    "\u00be\3\u00be\5\u00be\u0c45\n\u00be\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3"+
                    "\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\7\u00c0\u0c50\n\u00c0\f\u00c0\16"+
                    "\u00c0\u0c53\13\u00c0\3\u00c0\5\u00c0\u0c56\n\u00c0\3\u00c0\3\u00c0\3"+
                    "\u00c0\3\u00c0\3\u00c0\3\u00c0\7\u00c0\u0c5e\n\u00c0\f\u00c0\16\u00c0"+
                    "\u0c61\13\u00c0\5\u00c0\u0c63\n\u00c0\5\u00c0\u0c65\n\u00c0\3\u00c1\3"+
                    "\u00c1\3\u00c1\5\u00c1\u0c6a\n\u00c1\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3"+
                    "\u00c2\7\u00c2\u0c71\n\u00c2\f\u00c2\16\u00c2\u0c74\13\u00c2\3\u00c2\3"+
                    "\u00c2\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\7\u00c3\u0c7e\n"+
                    "\u00c3\f\u00c3\16\u00c3\u0c81\13\u00c3\3\u00c3\3\u00c3\3\u00c4\3\u00c4"+
                    "\3\u00c4\5\u00c4\u0c88\n\u00c4\3\u00c5\3\u00c5\3\u00c5\3\u00c6\3\u00c6"+
                    "\7\u00c6\u0c8f\n\u00c6\f\u00c6\16\u00c6\u0c92\13\u00c6\3\u00c6\5\u00c6"+
                    "\u0c95\n\u00c6\3\u00c6\7\u00c6\u0c98\n\u00c6\f\u00c6\16\u00c6\u0c9b\13"+
                    "\u00c6\3\u00c6\3\u00c6\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7"+
                    "\5\u00c7\u0ca5\n\u00c7\5\u00c7\u0ca7\n\u00c7\3\u00c8\3\u00c8\3\u00c8\3"+
                    "\u00c8\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9"+
                    "\7\u00c9\u0cb5\n\u00c9\f\u00c9\16\u00c9\u0cb8\13\u00c9\3\u00ca\3\u00ca"+
                    "\5\u00ca\u0cbc\n\u00ca\3\u00ca\3\u00ca\7\u00ca\u0cc0\n\u00ca\f\u00ca\16"+
                    "\u00ca\u0cc3\13\u00ca\3\u00ca\3\u00ca\3\u00cb\5\u00cb\u0cc8\n\u00cb\3"+
                    "\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cc\3\u00cc\3\u00cc"+
                    "\3\u00cc\3\u00cd\3\u00cd\3\u00cd\3\u00cd\7\u00cd\u0cd8\n\u00cd\f\u00cd"+
                    "\16\u00cd\u0cdb\13\u00cd\3\u00cd\3\u00cd\3\u00ce\3\u00ce\5\u00ce\u0ce1"+
                    "\n\u00ce\3\u00cf\5\u00cf\u0ce4\n\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf"+
                    "\7\u00cf\u0cea\n\u00cf\f\u00cf\16\u00cf\u0ced\13\u00cf\3\u00cf\3\u00cf"+
                    "\3\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u0cf5\n\u00d0\5\u00d0\u0cf7\n"+
                    "\u00d0\3\u00d0\3\u00d0\5\u00d0\u0cfb\n\u00d0\3\u00d0\5\u00d0\u0cfe\n\u00d0"+
                    "\3\u00d1\3\u00d1\3\u00d1\5\u00d1\u0d03\n\u00d1\5\u00d1\u0d05\n\u00d1\3"+
                    "\u00d1\3\u00d1\5\u00d1\u0d09\n\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d2\3"+
                    "\u00d2\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\5\u00d3\u0d15\n\u00d3\3"+
                    "\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d5\3\u00d5\5\u00d5\u0d1e\n"+
                    "\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\7\u00d5\u0d24\n\u00d5\f\u00d5\16"+
                    "\u00d5\u0d27\13\u00d5\3\u00d6\3\u00d6\5\u00d6\u0d2b\n\u00d6\3\u00d6\3"+
                    "\u00d6\5\u00d6\u0d2f\n\u00d6\3\u00d7\3\u00d7\3\u00d7\5\u00d7\u0d34\n\u00d7"+
                    "\3\u00d7\5\u00d7\u0d37\n\u00d7\3\u00d8\3\u00d8\3\u00d8\3\u00d8\7\u00d8"+
                    "\u0d3d\n\u00d8\f\u00d8\16\u00d8\u0d40\13\u00d8\3\u00d9\3\u00d9\3\u00d9"+
                    "\3\u00d9\3\u00d9\5\u00d9\u0d47\n\u00d9\3\u00da\3\u00da\3\u00da\3\u00da"+
                    "\5\u00da\u0d4d\n\u00da\3\u00da\5\u00da\u0d50\n\u00da\3\u00da\5\u00da\u0d53"+
                    "\n\u00da\3\u00db\3\u00db\3\u00db\3\u00db\7\u00db\u0d59\n\u00db\f\u00db"+
                    "\16\u00db\u0d5c\13\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db"+
                    "\3\u00db\5\u00db\u0d65\n\u00db\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc"+
                    "\3\u00dc\3\u00dc\3\u00dc\7\u00dc\u0d6f\n\u00dc\f\u00dc\16\u00dc\u0d72"+
                    "\13\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\5\u00dc\u0d78\n\u00dc\3\u00dd"+
                    "\3\u00dd\5\u00dd\u0d7c\n\u00dd\3\u00dd\3\u00dd\5\u00dd\u0d80\n\u00dd\3"+
                    "\u00dd\5\u00dd\u0d83\n\u00dd\3\u00dd\5\u00dd\u0d86\n\u00dd\3\u00de\3\u00de"+
                    "\3\u00de\5\u00de\u0d8b\n\u00de\3\u00df\3\u00df\3\u00df\5\u00df\u0d90\n"+
                    "\u00df\3\u00df\5\u00df\u0d93\n\u00df\3\u00df\5\u00df\u0d96\n\u00df\3\u00e0"+
                    "\3\u00e0\6\u00e0\u0d9a\n\u00e0\r\u00e0\16\u00e0\u0d9b\3\u00e0\5\u00e0"+
                    "\u0d9f\n\u00e0\3\u00e0\3\u00e0\3\u00e1\3\u00e1\5\u00e1\u0da5\n\u00e1\3"+
                    "\u00e1\5\u00e1\u0da8\n\u00e1\3\u00e2\5\u00e2\u0dab\n\u00e2\3\u00e2\6\u00e2"+
                    "\u0dae\n\u00e2\r\u00e2\16\u00e2\u0daf\3\u00e2\5\u00e2\u0db3\n\u00e2\3"+
                    "\u00e3\3\u00e3\3\u00e3\3\u00e3\6\u00e3\u0db9\n\u00e3\r\u00e3\16\u00e3"+
                    "\u0dba\3\u00e4\3\u00e4\6\u00e4\u0dbf\n\u00e4\r\u00e4\16\u00e4\u0dc0\3"+
                    "\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\7\u00e5\u0dc9\n\u00e5\f"+
                    "\u00e5\16\u00e5\u0dcc\13\u00e5\3\u00e5\3\u00e5\5\u00e5\u0dd0\n\u00e5\3"+
                    "\u00e6\3\u00e6\3\u00e6\3\u00e6\5\u00e6\u0dd6\n\u00e6\3\u00e7\3\u00e7\3"+
                    "\u00e7\3\u00e7\5\u00e7\u0ddc\n\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3"+
                    "\u00e7\3\u00e7\3\u00e7\3\u00e7\5\u00e7\u0de6\n\u00e7\3\u00e7\3\u00e7\5"+
                    "\u00e7\u0dea\n\u00e7\5\u00e7\u0dec\n\u00e7\3\u00e7\5\u00e7\u0def\n\u00e7"+
                    "\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\7\u00e8"+
                    "\u0df9\n\u00e8\f\u00e8\16\u00e8\u0dfc\13\u00e8\3\u00e8\5\u00e8\u0dff\n"+
                    "\u00e8\3\u00e8\5\u00e8\u0e02\n\u00e8\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3"+
                    "\u00ea\3\u00ea\3\u00ea\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb"+
                    "\3\u00eb\3\u00eb\3\u00eb\7\u00eb\u0e14\n\u00eb\f\u00eb\16\u00eb\u0e17"+
                    "\13\u00eb\3\u00eb\3\u00eb\5\u00eb\u0e1b\n\u00eb\3\u00eb\3\u00eb\3\u00eb"+
                    "\5\u00eb\u0e20\n\u00eb\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\5\u00ec"+
                    "\u0e27\n\u00ec\3\u00ec\5\u00ec\u0e2a\n\u00ec\3\u00ed\3\u00ed\3\u00ed\3"+
                    "\u00ed\3\u00ed\7\u00ed\u0e31\n\u00ed\f\u00ed\16\u00ed\u0e34\13\u00ed\3"+
                    "\u00ed\3\u00ed\3\u00ed\3\u00ed\5\u00ed\u0e3a\n\u00ed\3\u00ee\3\u00ee\3"+
                    "\u00ee\5\u00ee\u0e3f\n\u00ee\3\u00ef\3\u00ef\5\u00ef\u0e43\n\u00ef\3\u00f0"+
                    "\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u0e4b\n\u00f0\3\u00f0"+
                    "\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u0e51\n\u00f0\3\u00f1\3\u00f1\3\u00f1"+
                    "\3\u00f1\3\u00f1\3\u00f1\5\u00f1\u0e59\n\u00f1\3\u00f1\5\u00f1\u0e5c\n"+
                    "\u00f1\3\u00f2\3\u00f2\3\u00f2\3\u00f2\7\u00f2\u0e62\n\u00f2\f\u00f2\16"+
                    "\u00f2\u0e65\13\u00f2\3\u00f2\3\u00f2\3\u00f3\3\u00f3\3\u00f3\5\u00f3"+
                    "\u0e6c\n\u00f3\3\u00f3\5\u00f3\u0e6f\n\u00f3\3\u00f3\5\u00f3\u0e72\n\u00f3"+
                    "\3\u00f4\3\u00f4\3\u00f4\3\u00f5\3\u00f5\3\u00f5\3\u00f5\5\u00f5\u0e7b"+
                    "\n\u00f5\3\u00f6\3\u00f6\3\u00f6\3\u00f6\5\u00f6\u0e81\n\u00f6\3\u00f6"+
                    "\3\u00f6\3\u00f6\3\u00f6\5\u00f6\u0e87\n\u00f6\5\u00f6\u0e89\n\u00f6\3"+
                    "\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7"+
                    "\3\u00f7\3\u00f7\5\u00f7\u0e96\n\u00f7\5\u00f7\u0e98\n\u00f7\3\u00f8\3"+
                    "\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\5\u00f8\u0ea1\n\u00f8\5"+
                    "\u00f8\u0ea3\n\u00f8\3\u00f9\3\u00f9\5\u00f9\u0ea7\n\u00f9\3\u00f9\3\u00f9"+
                    "\3\u00f9\3\u00f9\5\u00f9\u0ead\n\u00f9\3\u00f9\3\u00f9\5\u00f9\u0eb1\n"+
                    "\u00f9\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fb\3\u00fb\3\u00fb"+
                    "\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb"+
                    "\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\5\u00fb\u0eca\n\u00fb"+
                    "\3\u00fc\3\u00fc\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\7\u00fd\u0ed3"+
                    "\n\u00fd\f\u00fd\16\u00fd\u0ed6\13\u00fd\3\u00fd\3\u00fd\5\u00fd\u0eda"+
                    "\n\u00fd\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe"+
                    "\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe"+
                    "\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe"+
                    "\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe"+
                    "\3\u00fe\3\u00fe\3\u00fe\5\u00fe\u0f02\n\u00fe\3\u00ff\3\u00ff\5\u00ff"+
                    "\u0f06\n\u00ff\3\u00ff\3\u00ff\7\u00ff\u0f0a\n\u00ff\f\u00ff\16\u00ff"+
                    "\u0f0d\13\u00ff\3\u00ff\3\u00ff\3\u0100\3\u0100\3\u0101\3\u0101\3\u0102"+
                    "\3\u0102\3\u0102\7\u0102\u0f18\n\u0102\f\u0102\16\u0102\u0f1b\13\u0102"+
                    "\3\u0103\3\u0103\3\u0104\3\u0104\3\u0104\7\u0104\u0f22\n\u0104\f\u0104"+
                    "\16\u0104\u0f25\13\u0104\3\u0105\3\u0105\3\u0105\5\u0105\u0f2a\n\u0105"+
                    "\3\u0106\3\u0106\3\u0106\3\u0106\5\u0106\u0f30\n\u0106\3\u0106\3\u0106"+
                    "\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\5\u0106\u0f3b"+
                    "\n\u0106\3\u0106\3\u0106\5\u0106\u0f3f\n\u0106\3\u0106\3\u0106\3\u0106"+
                    "\7\u0106\u0f44\n\u0106\f\u0106\16\u0106\u0f47\13\u0106\3\u0106\3\u0106"+
                    "\5\u0106\u0f4b\n\u0106\7\u0106\u0f4d\n\u0106\f\u0106\16\u0106\u0f50\13"+
                    "\u0106\3\u0106\5\u0106\u0f53\n\u0106\3\u0107\3\u0107\3\u0107\5\u0107\u0f58"+
                    "\n\u0107\3\u0108\3\u0108\3\u0108\3\u0108\5\u0108\u0f5e\n\u0108\3\u0108"+
                    "\6\u0108\u0f61\n\u0108\r\u0108\16\u0108\u0f62\3\u0108\3\u0108\5\u0108"+
                    "\u0f67\n\u0108\3\u0108\3\u0108\5\u0108\u0f6b\n\u0108\3\u0108\3\u0108\5"+
                    "\u0108\u0f6f\n\u0108\5\u0108\u0f71\n\u0108\3\u0109\3\u0109\3\u010a\3\u010a"+
                    "\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\5\u010a\u0f7c\n\u010a\3\u010a"+
                    "\7\u010a\u0f7f\n\u010a\f\u010a\16\u010a\u0f82\13\u010a\3\u010b\3\u010b"+
                    "\5\u010b\u0f86\n\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b"+
                    "\3\u010b\5\u010b\u0f8f\n\u010b\5\u010b\u0f91\n\u010b\5\u010b\u0f93\n\u010b"+
                    "\3\u010b\5\u010b\u0f96\n\u010b\3\u010c\3\u010c\3\u010d\3\u010d\3\u010d"+
                    "\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\7\u010e"+
                    "\u0fa5\n\u010e\f\u010e\16\u010e\u0fa8\13\u010e\3\u010e\3\u010e\3\u010e"+
                    "\3\u010e\3\u010e\5\u010e\u0faf\n\u010e\3\u010f\3\u010f\3\u010f\3\u010f"+
                    "\3\u0110\3\u0110\3\u0110\3\u0110\7\u0110\u0fb9\n\u0110\f\u0110\16\u0110"+
                    "\u0fbc\13\u0110\3\u0111\3\u0111\3\u0112\3\u0112\3\u0112\7\u0112\u0fc3"+
                    "\n\u0112\f\u0112\16\u0112\u0fc6\13\u0112\3\u0113\3\u0113\3\u0113\7\u0113"+
                    "\u0fcb\n\u0113\f\u0113\16\u0113\u0fce\13\u0113\3\u0114\3\u0114\3\u0114"+
                    "\3\u0114\3\u0114\3\u0114\5\u0114\u0fd6\n\u0114\3\u0114\5\u0114\u0fd9\n"+
                    "\u0114\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u0fe0\n\u0115\3"+
                    "\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u0fe8\n\u0115\3"+
                    "\u0115\3\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u0fef\n\u0115\3\u0115\3"+
                    "\u0115\5\u0115\u0ff3\n\u0115\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\5"+
                    "\u0116\u0ffa\n\u0116\3\u0117\3\u0117\5\u0117\u0ffe\n\u0117\3\u0117\3\u0117"+
                    "\3\u0117\5\u0117\u1003\n\u0117\7\u0117\u1005\n\u0117\f\u0117\16\u0117"+
                    "\u1008\13\u0117\3\u0117\3\u0117\3\u0117\7\u0117\u100d\n\u0117\f\u0117"+
                    "\16\u0117\u1010\13\u0117\3\u0117\5\u0117\u1013\n\u0117\3\u0118\3\u0118"+
                    "\3\u0118\3\u0118\3\u0118\5\u0118\u101a\n\u0118\3\u0118\3\u0118\3\u0118"+
                    "\3\u0118\3\u0118\3\u0118\3\u0118\5\u0118\u1023\n\u0118\3\u0119\3\u0119"+
                    "\3\u0119\3\u011a\3\u011a\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\7\u011b"+
                    "\u102f\n\u011b\f\u011b\16\u011b\u1032\13\u011b\3\u011b\3\u011b\3\u011b"+
                    "\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\7\u011b\u103c\n\u011b\f\u011b"+
                    "\16\u011b\u103f\13\u011b\3\u011b\3\u011b\5\u011b\u1043\n\u011b\3\u011b"+
                    "\3\u011b\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c"+
                    "\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c"+
                    "\3\u011c\5\u011c\u1059\n\u011c\3\u011d\3\u011d\5\u011d\u105d\n\u011d\3"+
                    "\u011e\5\u011e\u1060\n\u011e\3\u011e\3\u011e\3\u011e\6\u011e\u1065\n\u011e"+
                    "\r\u011e\16\u011e\u1066\3\u011e\5\u011e\u106a\n\u011e\3\u011e\3\u011e"+
                    "\5\u011e\u106e\n\u011e\3\u011e\5\u011e\u1071\n\u011e\3\u011f\3\u011f\3"+
                    "\u011f\3\u011f\3\u011f\5\u011f\u1078\n\u011f\3\u0120\5\u0120\u107b\n\u0120"+
                    "\3\u0120\3\u0120\6\u0120\u107f\n\u0120\r\u0120\16\u0120\u1080\3\u0120"+
                    "\5\u0120\u1084\n\u0120\3\u0120\3\u0120\5\u0120\u1088\n\u0120\3\u0120\5"+
                    "\u0120\u108b\n\u0120\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\5\u0121\u1092"+
                    "\n\u0121\3\u0122\3\u0122\3\u0122\5\u0122\u1097\n\u0122\3\u0123\3\u0123"+
                    "\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\7\u0123"+
                    "\u10a3\n\u0123\f\u0123\16\u0123\u10a6\13\u0123\3\u0123\3\u0123\3\u0123"+
                    "\5\u0123\u10ab\n\u0123\3\u0123\5\u0123\u10ae\n\u0123\3\u0124\3\u0124\5"+
                    "\u0124\u10b2\n\u0124\3\u0125\3\u0125\3\u0125\3\u0125\7\u0125\u10b8\n\u0125"+
                    "\f\u0125\16\u0125\u10bb\13\u0125\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126"+
                    "\3\u0126\3\u0126\3\u0126\3\u0126\7\u0126\u10c6\n\u0126\f\u0126\16\u0126"+
                    "\u10c9\13\u0126\3\u0126\3\u0126\5\u0126\u10cd\n\u0126\3\u0127\3\u0127"+
                    "\3\u0127\3\u0127\3\u0127\7\u0127\u10d4\n\u0127\f\u0127\16\u0127\u10d7"+
                    "\13\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\7\u0127"+
                    "\u10e0\n\u0127\f\u0127\16\u0127\u10e3\13\u0127\3\u0127\3\u0127\5\u0127"+
                    "\u10e7\n\u0127\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128"+
                    "\3\u0128\5\u0128\u10f1\n\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128"+
                    "\5\u0128\u10f8\n\u0128\3\u0129\3\u0129\3\u0129\3\u0129\7\u0129\u10fe\n"+
                    "\u0129\f\u0129\16\u0129\u1101\13\u0129\3\u012a\3\u012a\3\u012a\3\u012a"+
                    "\3\u012a\5\u012a\u1108\n\u012a\3\u012a\3\u012a\5\u012a\u110c\n\u012a\3"+
                    "\u012a\5\u012a\u110f\n\u012a\3\u012a\3\u012a\3\u012a\5\u012a\u1114\n\u012a"+
                    "\3\u012b\3\u012b\3\u012b\5\u012b\u1119\n\u012b\3\u012b\3\u012b\3\u012b"+
                    "\5\u012b\u111e\n\u012b\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u1124\n"+
                    "\u012b\3\u012b\5\u012b\u1127\n\u012b\3\u012b\3\u012b\5\u012b\u112b\n\u012b"+
                    "\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b"+
                    "\3\u012b\3\u012b\5\u012b\u1138\n\u012b\3\u012b\3\u012b\5\u012b\u113c\n"+
                    "\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\6\u012b\u1143\n\u012b\r"+
                    "\u012b\16\u012b\u1144\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u114b\n"+
                    "\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b"+
                    "\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u1159\n\u012b\3\u012b\3\u012b"+
                    "\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\7\u012b\u1162\n\u012b\f\u012b"+
                    "\16\u012b\u1165\13\u012b\3\u012b\5\u012b\u1168\n\u012b\3\u012b\5\u012b"+
                    "\u116b\n\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b"+
                    "\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u117b"+
                    "\n\u012b\3\u012b\3\u012b\7\u012b\u117f\n\u012b\f\u012b\16\u012b\u1182"+
                    "\13\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b"+
                    "\u118b\n\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b"+
                    "\u1193\n\u012b\3\u012b\5\u012b\u1196\n\u012b\3\u012b\5\u012b\u1199\n\u012b"+
                    "\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u11a2"+
                    "\n\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u11a7\n\u012b\3\u012b\3\u012b"+
                    "\3\u012b\3\u012b\3\u012b\7\u012b\u11ae\n\u012b\f\u012b\16\u012b\u11b1"+
                    "\13\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u11b6\n\u012b\3\u012b\3\u012b"+
                    "\3\u012b\5\u012b\u11bb\n\u012b\3\u012b\5\u012b\u11be\n\u012b\3\u012b\3"+
                    "\u012b\3\u012b\5\u012b\u11c3\n\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u11c8"+
                    "\n\u012b\7\u012b\u11ca\n\u012b\f\u012b\16\u012b\u11cd\13\u012b\3\u012b"+
                    "\3\u012b\3\u012b\5\u012b\u11d2\n\u012b\3\u012b\3\u012b\3\u012b\3\u012b"+
                    "\5\u012b\u11d8\n\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b"+
                    "\3\u012b\5\u012b\u11e1\n\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u11e6\n"+
                    "\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u11ee\n"+
                    "\u012b\3\u012b\3\u012b\5\u012b\u11f2\n\u012b\3\u012b\3\u012b\3\u012b\5"+
                    "\u012b\u11f7\n\u012b\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u11fd\n\u012b"+
                    "\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u1204\n\u012b\3\u012b"+
                    "\3\u012b\3\u012b\5\u012b\u1209\n\u012b\3\u012b\3\u012b\3\u012b\3\u012b"+
                    "\3\u012b\5\u012b\u1210\n\u012b\3\u012b\3\u012b\5\u012b\u1214\n\u012b\3"+
                    "\u012b\3\u012b\3\u012b\5\u012b\u1219\n\u012b\3\u012b\3\u012b\3\u012b\3"+
                    "\u012b\3\u012b\3\u012b\5\u012b\u1221\n\u012b\3\u012b\5\u012b\u1224\n\u012b"+
                    "\3\u012b\5\u012b\u1227\n\u012b\3\u012b\5\u012b\u122a\n\u012b\3\u012b\3"+
                    "\u012b\5\u012b\u122e\n\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u1233\n\u012b"+
                    "\3\u012b\5\u012b\u1236\n\u012b\3\u012c\3\u012c\3\u012d\3\u012d\3\u012e"+
                    "\3\u012e\3\u012f\3\u012f\3\u012f\5\u012f\u1241\n\u012f\3\u012f\3\u012f"+
                    "\5\u012f\u1245\n\u012f\5\u012f\u1247\n\u012f\3\u012f\3\u012f\3\u0130\3"+
                    "\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\5\u0130\u1252\n\u0130\3"+
                    "\u0131\3\u0131\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132"+
                    "\5\u0132\u125d\n\u0132\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133\7\u0133"+
                    "\u1264\n\u0133\f\u0133\16\u0133\u1267\13\u0133\5\u0133\u1269\n\u0133\3"+
                    "\u0134\3\u0134\5\u0134\u126d\n\u0134\3\u0134\5\u0134\u1270\n\u0134\3\u0134"+
                    "\3\u0134\5\u0134\u1274\n\u0134\3\u0135\3\u0135\3\u0135\3\u0135\3\u0136"+
                    "\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\5\u0136\u1281\n\u0136"+
                    "\3\u0137\3\u0137\3\u0137\5\u0137\u1286\n\u0137\3\u0137\3\u0137\3\u0137"+
                    "\3\u0137\7\u0137\u128c\n\u0137\f\u0137\16\u0137\u128f\13\u0137\3\u0137"+
                    "\3\u0137\3\u0137\3\u0137\5\u0137\u1295\n\u0137\3\u0138\3\u0138\3\u0138"+
                    "\5\u0138\u129a\n\u0138\3\u0138\3\u0138\5\u0138\u129e\n\u0138\3\u0138\3"+
                    "\u0138\3\u0138\5\u0138\u12a3\n\u0138\7\u0138\u12a5\n\u0138\f\u0138\16"+
                    "\u0138\u12a8\13\u0138\3\u0139\3\u0139\3\u0139\5\u0139\u12ad\n\u0139\3"+
                    "\u0139\5\u0139\u12b0\n\u0139\3\u0139\3\u0139\3\u0139\7\u0139\u12b5\n\u0139"+
                    "\f\u0139\16\u0139\u12b8\13\u0139\3\u0139\3\u0139\3\u013a\3\u013a\3\u013a"+
                    "\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\7\u013a\u12c4\n\u013a\f\u013a"+
                    "\16\u013a\u12c7\13\u013a\5\u013a\u12c9\n\u013a\3\u013a\5\u013a\u12cc\n"+
                    "\u013a\3\u013a\3\u013a\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b"+
                    "\5\u013b\u12d6\n\u013b\3\u013b\5\u013b\u12d9\n\u013b\5\u013b\u12db\n\u013b"+
                    "\3\u013c\3\u013c\3\u013c\3\u013d\3\u013d\5\u013d\u12e2\n\u013d\3\u013d"+
                    "\3\u013d\3\u013d\5\u013d\u12e7\n\u013d\5\u013d\u12e9\n\u013d\3\u013e\3"+
                    "\u013e\3\u013e\3\u013e\5\u013e\u12ef\n\u013e\3\u013f\3\u013f\3\u013f\3"+
                    "\u013f\5\u013f\u12f5\n\u013f\5\u013f\u12f7\n\u013f\3\u0140\3\u0140\3\u0140"+
                    "\3\u0141\3\u0141\3\u0141\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142"+
                    "\5\u0142\u1305\n\u0142\5\u0142\u1307\n\u0142\3\u0143\3\u0143\3\u0144\6"+
                    "\u0144\u130c\n\u0144\r\u0144\16\u0144\u130d\3\u0144\3\u0144\5\u0144\u1312"+
                    "\n\u0144\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145"+
                    "\3\u0145\7\u0145\u131d\n\u0145\f\u0145\16\u0145\u1320\13\u0145\3\u0145"+
                    "\3\u0145\5\u0145\u1324\n\u0145\3\u0145\3\u0145\3\u0146\3\u0146\5\u0146"+
                    "\u132a\n\u0146\3\u0146\3\u0146\3\u0147\5\u0147\u132f\n\u0147\3\u0147\3"+
                    "\u0147\5\u0147\u1333\n\u0147\3\u0148\3\u0148\5\u0148\u1337\n\u0148\3\u0149"+
                    "\3\u0149\3\u014a\3\u014a\3\u014a\5\u014a\u133e\n\u014a\3\u014b\3\u014b"+
                    "\3\u014b\3\u014b\3\u014c\3\u014c\5\u014c\u1346\n\u014c\3\u014d\3\u014d"+
                    "\3\u014d\3\u014d\7\u014d\u134c\n\u014d\f\u014d\16\u014d\u134f\13\u014d"+
                    "\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d\7\u014d\u1357\n\u014d"+
                    "\f\u014d\16\u014d\u135a\13\u014d\5\u014d\u135c\n\u014d\3\u014e\3\u014e"+
                    "\5\u014e\u1360\n\u014e\3\u014f\3\u014f\3\u0150\3\u0150\3\u0151\3\u0151"+
                    "\3\u0152\3\u0152\3\u0153\3\u0153\3\u0154\3\u0154\3\u0155\3\u0155\3\u0155"+
                    "\7\u0155\u1371\n\u0155\f\u0155\16\u0155\u1374\13\u0155\3\u0155\3\u0155"+
                    "\5\u0155\u1378\n\u0155\3\u0156\3\u0156\3\u0156\5\u0156\u137d\n\u0156\3"+
                    "\u0156\3\u0156\3\u0157\3\u0157\3\u0157\5\u0157\u1384\n\u0157\3\u0158\3"+
                    "\u0158\3\u0159\3\u0159\3\u015a\3\u015a\3\u015b\3\u015b\3\u015b\7\u015b"+
                    "\u138f\n\u015b\f\u015b\16\u015b\u1392\13\u015b\3\u015c\3\u015c\3\u015d"+
                    "\3\u015d\3\u015d\7\u015d\u1399\n\u015d\f\u015d\16\u015d\u139c\13\u015d"+
                    "\3\u015d\3\u015d\5\u015d\u13a0\n\u015d\3\u015e\3\u015e\3\u015f\3\u015f"+
                    "\3\u015f\7\u015f\u13a7\n\u015f\f\u015f\16\u015f\u13aa\13\u015f\3\u0160"+
                    "\3\u0160\3\u0160\7\u0160\u13af\n\u0160\f\u0160\16\u0160\u13b2\13\u0160"+
                    "\3\u0161\3\u0161\3\u0161\7\u0161\u13b7\n\u0161\f\u0161\16\u0161\u13ba"+
                    "\13\u0161\3\u0162\3\u0162\3\u0162\5\u0162\u13bf\n\u0162\3\u0163\3\u0163"+
                    "\3\u0163\5\u0163\u13c4\n\u0163\3\u0164\3\u0164\3\u0164\5\u0164\u13c9\n"+
                    "\u0164\3\u0165\3\u0165\5\u0165\u13cd\n\u0165\3\u0165\3\u0165\3\u0165\5"+
                    "\u0165\u13d2\n\u0165\3\u0165\5\u0165\u13d5\n\u0165\3\u0166\3\u0166\3\u0167"+
                    "\3\u0167\5\u0167\u13db\n\u0167\3\u0168\3\u0168\5\u0168\u13df\n\u0168\3"+
                    "\u0169\3\u0169\3\u0169\5\u0169\u13e4\n\u0169\3\u016a\3\u016a\3\u016a\7"+
                    "\u016a\u13e9\n\u016a\f\u016a\16\u016a\u13ec\13\u016a\3\u016b\3\u016b\3"+
                    "\u016b\7\u016b\u13f1\n\u016b\f\u016b\16\u016b\u13f4\13\u016b\3\u016c\3"+
                    "\u016c\3\u016c\5\u016c\u13f9\n\u016c\3\u016c\3\u016c\3\u016c\5\u016c\u13fe"+
                    "\n\u016c\3\u016d\3\u016d\3\u016d\7\u016d\u1403\n\u016d\f\u016d\16\u016d"+
                    "\u1406\13\u016d\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e"+
                    "\5\u016e\u140f\n\u016e\3\u016f\3\u016f\5\u016f\u1413\n\u016f\3\u016f\3"+
                    "\u016f\7\u016f\u1417\n\u016f\f\u016f\16\u016f\u141a\13\u016f\3\u016f\3"+
                    "\u016f\5\u016f\u141e\n\u016f\3\u0170\3\u0170\3\u0170\5\u0170\u1423\n\u0170"+
                    "\5\u0170\u1425\n\u0170\3\u0170\3\u0170\3\u0170\5\u0170\u142a\n\u0170\7"+
                    "\u0170\u142c\n\u0170\f\u0170\16\u0170\u142f\13\u0170\3\u0170\3\u0170\5"+
                    "\u0170\u1433\n\u0170\3\u0171\3\u0171\3\u0171\3\u0171\3\u0171\5\u0171\u143a"+
                    "\n\u0171\3\u0171\3\u0171\3\u0171\5\u0171\u143f\n\u0171\5\u0171\u1441\n"+
                    "\u0171\5\u0171\u1443\n\u0171\3\u0171\3\u0171\3\u0171\3\u0171\3\u0171\3"+
                    "\u0171\3\u0171\3\u0171\5\u0171\u144d\n\u0171\3\u0171\3\u0171\3\u0171\5"+
                    "\u0171\u1452\n\u0171\7\u0171\u1454\n\u0171\f\u0171\16\u0171\u1457\13\u0171"+
                    "\5\u0171\u1459\n\u0171\3\u0171\3\u0171\5\u0171\u145d\n\u0171\3\u0172\3"+
                    "\u0172\3\u0172\3\u0173\3\u0173\3\u0173\5\u0173\u1465\n\u0173\3\u0173\3"+
                    "\u0173\3\u0174\3\u0174\5\u0174\u146b\n\u0174\3\u0174\3\u0174\3\u0174\5"+
                    "\u0174\u1470\n\u0174\3\u0174\5\u0174\u1473\n\u0174\5\u0174\u1475\n\u0174"+
                    "\3\u0175\3\u0175\5\u0175\u1479\n\u0175\3\u0175\3\u0175\5\u0175\u147d\n"+
                    "\u0175\3\u0175\3\u0175\5\u0175\u1481\n\u0175\3\u0175\3\u0175\3\u0175\3"+
                    "\u0175\3\u0175\3\u0175\5\u0175\u1489\n\u0175\3\u0175\3\u0175\3\u0175\3"+
                    "\u0175\3\u0175\3\u0175\5\u0175\u1491\n\u0175\5\u0175\u1493\n\u0175\3\u0176"+
                    "\3\u0176\3\u0176\3\u0176\5\u0176\u1499\n\u0176\3\u0176\5\u0176\u149c\n"+
                    "\u0176\3\u0176\3\u0176\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177"+
                    "\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177"+
                    "\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\5\u0177\u14b4\n\u0177\3\u0177"+
                    "\3\u0177\3\u0177\3\u0177\3\u0177\5\u0177\u14bb\n\u0177\3\u0177\3\u0177"+
                    "\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177"+
                    "\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177"+
                    "\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177"+
                    "\3\u0177\3\u0177\5\u0177\u14dc\n\u0177\3\u0178\3\u0178\3\u0178\5\u0178"+
                    "\u14e1\n\u0178\3\u0178\5\u0178\u14e4\n\u0178\3\u0178\3\u0178\3\u0178\5"+
                    "\u0178\u14e9\n\u0178\5\u0178\u14eb\n\u0178\3\u0178\3\u0178\7\u0178\u14ef"+
                    "\n\u0178\f\u0178\16\u0178\u14f2\13\u0178\3\u0179\3\u0179\3\u0179\7\u0179"+
                    "\u14f7\n\u0179\f\u0179\16\u0179\u14fa\13\u0179\3\u017a\3\u017a\5\u017a"+
                    "\u14fe\n\u017a\3\u017a\3\u017a\3\u017a\7\u017a\u1503\n\u017a\f\u017a\16"+
                    "\u017a\u1506\13\u017a\3\u017a\5\u017a\u1509\n\u017a\3\u017b\3\u017b\5"+
                    "\u017b\u150d\n\u017b\3\u017b\3\u017b\3\u017b\7\u017b\u1512\n\u017b\f\u017b"+
                    "\16\u017b\u1515\13\u017b\3\u017c\3\u017c\3\u017c\5\u017c\u151a\n\u017c"+
                    "\3\u017c\3\u017c\3\u017c\3\u017c\5\u017c\u1520\n\u017c\3\u017c\3\u017c"+
                    "\3\u017c\3\u017c\5\u017c\u1526\n\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
                    "\5\u017c\u152c\n\u017c\3\u017c\3\u017c\3\u017c\5\u017c\u1531\n\u017c\5"+
                    "\u017c\u1533\n\u017c\3\u017c\5\u017c\u1536\n\u017c\3\u017c\3\u017c\3\u017c"+
                    "\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\5\u017c\u1540\n\u017c\3\u017c"+
                    "\5\u017c\u1543\n\u017c\5\u017c\u1545\n\u017c\5\u017c\u1547\n\u017c\3\u017c"+
                    "\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
                    "\3\u017c\3\u017c\5\u017c\u1555\n\u017c\3\u017d\3\u017d\3\u017e\3\u017e"+
                    "\3\u017f\3\u017f\5\u017f\u155d\n\u017f\3\u017f\3\u017f\3\u0180\3\u0180"+
                    "\5\u0180\u1563\n\u0180\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
                    "\3\u0181\5\u0181\u156c\n\u0181\3\u0182\3\u0182\3\u0182\5\u0182\u1571\n"+
                    "\u0182\3\u0183\3\u0183\3\u0183\5\u0183\u1576\n\u0183\3\u0184\3\u0184\3"+
                    "\u0184\5\u0184\u157b\n\u0184\3\u0185\3\u0185\3\u0185\3\u0185\3\u0186\3"+
                    "\u0186\3\u0186\2\2\u0187\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&("+
                    "*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084"+
                    "\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c"+
                    "\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4"+
                    "\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc"+
                    "\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4"+
                    "\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc"+
                    "\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114"+
                    "\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c"+
                    "\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144"+
                    "\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c"+
                    "\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174"+
                    "\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c"+
                    "\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4"+
                    "\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc"+
                    "\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4"+
                    "\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec"+
                    "\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204"+
                    "\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c"+
                    "\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234"+
                    "\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c"+
                    "\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260\u0262\u0264"+
                    "\u0266\u0268\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a\u027c"+
                    "\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c\u028e\u0290\u0292\u0294"+
                    "\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac"+
                    "\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4"+
                    "\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8\u02da\u02dc"+
                    "\u02de\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4"+
                    "\u02f6\u02f8\u02fa\u02fc\u02fe\u0300\u0302\u0304\u0306\u0308\u030a\2O"+
                    "\3\2\u020a\u020a\4\3\u020a\u020a\u0219\u0219\4\2\25\25\u00c4\u00c4\4\2"+
                    "\u00a7\u00a7\u0139\u0139\4\2??\u0117\u0117\5\2**\u011e\u011e\u0176\u0176"+
                    "\4\2tt\u0080\u0080\4\2\f\f!!\5\2oo\u00bb\u00bb\u01a7\u01a7\5\2\u00f8\u00f8"+
                    "\u0110\u0110\u0121\u0121\4\2\u009f\u009f\u01ad\u01ad\4\2**\u0176\u0176"+
                    "\4\2\13\13yy\5\2\13\13yy\u00ec\u00ec\5\2\\\\\u0116\u0116\u0177\u0177\4"+
                    "\2\u00df\u00df\u0117\u0117\4\2\u00e3\u00e3\u017f\u017f\5\2\u0097\u0097"+
                    "\u00bc\u00bc\u011d\u011d\4\2ZZnn\6\2\u00ae\u00ae\u00ba\u00ba\u00fd\u00fd"+
                    "\u011a\u011a\4\2kk\u0207\u0207\3\2\u0149\u014a\4\2\u0112\u0112\u01c1\u01c1"+
                    "\3\2KL\4\2mm\u00ad\u00ad\4\2\u0106\u0106\u01b7\u01b7\4\2  \u00ad\u00ad"+
                    "\4\2--pp\5\2\17\17vv\u01a3\u01a3\4\2WW\u00f1\u00f1\5\2\u00a1\u00a1\u00ce"+
                    "\u00ce\u014e\u014e\4\2\u015a\u015a\u018c\u018c\5\2\u015a\u015a\u0174\u0174"+
                    "\u018c\u018c\4\2\u008b\u008b\u00af\u00af\4\2XX\u0150\u0150\4\2\u00ac\u00ac"+
                    "\u00c9\u00c9\4\2\17\17\u01a8\u01a8\4\2\36\36\u0162\u0162\4\2\26\26qq\4"+
                    "\2\u0098\u0098\u00cb\u00cb\4\2\17\17\u0098\u0098\3\2\u0188\u0189\5\2\u0086"+
                    "\u0086\u00c0\u00c0\u01a2\u01a2\4\2\17\17vv\4\2\u00e3\u00e3\u0182\u0182"+
                    "\3\2\u00d1\u00d4\3\2\u0202\u0203\5\2\u00e9\u00e9\u0201\u0201\u0205\u0205"+
                    "\4\2jj\u00b1\u00b1\6\2\17\17\23\23\u008e\u008e\u0175\u0175\4\2\67\67\u01c5"+
                    "\u01c5\4\2vv\u01a3\u01a3\4\2\64\64EE\4\2\u0099\u0099\u00cc\u00cc\4\29"+
                    "9\u00f5\u00f5\5\2,,\u00cd\u00cd\u0197\u0197\4\2\u01c6\u01c6\u01c9\u01c9"+
                    "\4\2\u0083\u0083\u00ff\u00ff\4\2\u0087\u0087\u00ef\u00ef\4\2NNww\4\2\u00a9"+
                    "\u00a9\u016b\u016b\3\2\u01e2\u01f1\3\2\u01db\u01e1\3\2\u01d5\u01da\4\2"+
                    "\u0139\u0139\u0153\u0153\4\2\u009b\u009b\u0133\u0133\4\2\u0104\u0104\u0159"+
                    "\u0159\4\2\u0122\u0122\u0183\u0183\4\2\u00ac\u00ac\u0145\u0145\3\2\u0126"+
                    "\u0127\4\2aa\u01d1\u01d1\4\2\u00ed\u00ed\u015c\u015c\4\2\60\6088\6\2a"+
                    "a\u00aa\u00aa\u00e6\u00e6\u015c\u015c\3\2\u01f8\u01f9\4\2\u01f3\u01f3"+
                    "\u01fa\u01fa\13\2\n\27\31\u0091\u0093\u00e8\u00ea\u00f8\u00fa\u0124\u012b"+
                    "\u012b\u012d\u0195\u0197\u01f1\u0278\u0278\u17fd\2\u030d\3\2\2\2\4\u0314"+
                    "\3\2\2\2\6\u0327\3\2\2\2\b\u0344\3\2\2\2\n\u0346\3\2\2\2\f\u034d\3\2\2"+
                    "\2\16\u034f\3\2\2\2\20\u0354\3\2\2\2\22\u036c\3\2\2\2\24\u0370\3\2\2\2"+
                    "\26\u039d\3\2\2\2\30\u03a1\3\2\2\2\32\u03b9\3\2\2\2\34\u03bd\3\2\2\2\36"+
                    "\u03c9\3\2\2\2 \u03d7\3\2\2\2\"\u03df\3\2\2\2$\u03f5\3\2\2\2&\u0402\3"+
                    "\2\2\2(\u0416\3\2\2\2*\u042f\3\2\2\2,\u043b\3\2\2\2.\u043d\3\2\2\2\60"+
                    "\u0442\3\2\2\2\62\u045a\3\2\2\2\64\u045e\3\2\2\2\66\u0480\3\2\2\28\u0485"+
                    "\3\2\2\2:\u049e\3\2\2\2<\u04b6\3\2\2\2>\u04bf\3\2\2\2@\u04c8\3\2\2\2B"+
                    "\u04d1\3\2\2\2D\u04d5\3\2\2\2F\u04da\3\2\2\2H\u04f2\3\2\2\2J\u04f4\3\2"+
                    "\2\2L\u04f8\3\2\2\2N\u052c\3\2\2\2P\u0548\3\2\2\2R\u054a\3\2\2\2T\u0558"+
                    "\3\2\2\2V\u0564\3\2\2\2X\u0569\3\2\2\2Z\u056f\3\2\2\2\\\u0572\3\2\2\2"+
                    "^\u057d\3\2\2\2`\u058c\3\2\2\2b\u059d\3\2\2\2d\u05ae\3\2\2\2f\u05b6\3"+
                    "\2\2\2h\u05bb\3\2\2\2j\u05cb\3\2\2\2l\u05cf\3\2\2\2n\u05e7\3\2\2\2p\u05ea"+
                    "\3\2\2\2r\u05f0\3\2\2\2t\u05fc\3\2\2\2v\u0605\3\2\2\2x\u0621\3\2\2\2z"+
                    "\u0627\3\2\2\2|\u062a\3\2\2\2~\u0631\3\2\2\2\u0080\u0639\3\2\2\2\u0082"+
                    "\u0645\3\2\2\2\u0084\u0647\3\2\2\2\u0086\u064b\3\2\2\2\u0088\u0651\3\2"+
                    "\2\2\u008a\u066a\3\2\2\2\u008c\u0689\3\2\2\2\u008e\u06b6\3\2\2\2\u0090"+
                    "\u06c0\3\2\2\2\u0092\u06c2\3\2\2\2\u0094\u06c7\3\2\2\2\u0096\u06d5\3\2"+
                    "\2\2\u0098\u06d7\3\2\2\2\u009a\u06dc\3\2\2\2\u009c\u06ed\3\2\2\2\u009e"+
                    "\u070f\3\2\2\2\u00a0\u0733\3\2\2\2\u00a2\u0737\3\2\2\2\u00a4\u0746\3\2"+
                    "\2\2\u00a6\u0748\3\2\2\2\u00a8\u074b\3\2\2\2\u00aa\u0750\3\2\2\2\u00ac"+
                    "\u075a\3\2\2\2\u00ae\u0776\3\2\2\2\u00b0\u0778\3\2\2\2\u00b2\u077c\3\2"+
                    "\2\2\u00b4\u077f\3\2\2\2\u00b6\u0783\3\2\2\2\u00b8\u0788\3\2\2\2\u00ba"+
                    "\u078c\3\2\2\2\u00bc\u079d\3\2\2\2\u00be\u07aa\3\2\2\2\u00c0\u07bb\3\2"+
                    "\2\2\u00c2\u07c8\3\2\2\2\u00c4\u07d5\3\2\2\2\u00c6\u07d7\3\2\2\2\u00c8"+
                    "\u07e5\3\2\2\2\u00ca\u07f6\3\2\2\2\u00cc\u080f\3\2\2\2\u00ce\u0819\3\2"+
                    "\2\2\u00d0\u081d\3\2\2\2\u00d2\u0845\3\2\2\2\u00d4\u0847\3\2\2\2\u00d6"+
                    "\u0860\3\2\2\2\u00d8\u086b\3\2\2\2\u00da\u087c\3\2\2\2\u00dc\u0880\3\2"+
                    "\2\2\u00de\u0892\3\2\2\2\u00e0\u089a\3\2\2\2\u00e2\u08a5\3\2\2\2\u00e4"+
                    "\u08ad\3\2\2\2\u00e6\u08b1\3\2\2\2\u00e8\u08d2\3\2\2\2\u00ea\u08d7\3\2"+
                    "\2\2\u00ec\u08dc\3\2\2\2\u00ee\u08e4\3\2\2\2\u00f0\u08ec\3\2\2\2\u00f2"+
                    "\u08ef\3\2\2\2\u00f4\u08ff\3\2\2\2\u00f6\u0904\3\2\2\2\u00f8\u0908\3\2"+
                    "\2\2\u00fa\u092c\3\2\2\2\u00fc\u092e\3\2\2\2\u00fe\u0944\3\2\2\2\u0100"+
                    "\u0946\3\2\2\2\u0102\u094b\3\2\2\2\u0104\u094d\3\2\2\2\u0106\u094f\3\2"+
                    "\2\2\u0108\u0951\3\2\2\2\u010a\u0955\3\2\2\2\u010c\u095a\3\2\2\2\u010e"+
                    "\u0960\3\2\2\2\u0110\u098f\3\2\2\2\u0112\u0991\3\2\2\2\u0114\u0997\3\2"+
                    "\2\2\u0116\u099d\3\2\2\2\u0118\u09aa\3\2\2\2\u011a\u09af\3\2\2\2\u011c"+
                    "\u09b7\3\2\2\2\u011e\u09b9\3\2\2\2\u0120\u09c7\3\2\2\2\u0122\u09d1\3\2"+
                    "\2\2\u0124\u09d7\3\2\2\2\u0126\u09d9\3\2\2\2\u0128\u09dc\3\2\2\2\u012a"+
                    "\u09e1\3\2\2\2\u012c\u0a00\3\2\2\2\u012e\u0a0f\3\2\2\2\u0130\u0a11\3\2"+
                    "\2\2\u0132\u0a26\3\2\2\2\u0134\u0a35\3\2\2\2\u0136\u0a4b\3\2\2\2\u0138"+
                    "\u0a52\3\2\2\2\u013a\u0a5f\3\2\2\2\u013c\u0a62\3\2\2\2\u013e\u0a76\3\2"+
                    "\2\2\u0140\u0a7e\3\2\2\2\u0142\u0a87\3\2\2\2\u0144\u0aa2\3\2\2\2\u0146"+
                    "\u0acd\3\2\2\2\u0148\u0add\3\2\2\2\u014a\u0aea\3\2\2\2\u014c\u0af3\3\2"+
                    "\2\2\u014e\u0af6\3\2\2\2\u0150\u0b1d\3\2\2\2\u0152\u0b21\3\2\2\2\u0154"+
                    "\u0b29\3\2\2\2\u0156\u0b2b\3\2\2\2\u0158\u0b33\3\2\2\2\u015a\u0b5b\3\2"+
                    "\2\2\u015c\u0b67\3\2\2\2\u015e\u0b7c\3\2\2\2\u0160\u0b7f\3\2\2\2\u0162"+
                    "\u0b8b\3\2\2\2\u0164\u0b8f\3\2\2\2\u0166\u0ba8\3\2\2\2\u0168\u0baa\3\2"+
                    "\2\2\u016a\u0bbb\3\2\2\2\u016c\u0bc2\3\2\2\2\u016e\u0bd1\3\2\2\2\u0170"+
                    "\u0be8\3\2\2\2\u0172\u0bee\3\2\2\2\u0174\u0bf0\3\2\2\2\u0176\u0c08\3\2"+
                    "\2\2\u0178\u0c20\3\2\2\2\u017a\u0c44\3\2\2\2\u017c\u0c46\3\2\2\2\u017e"+
                    "\u0c64\3\2\2\2\u0180\u0c69\3\2\2\2\u0182\u0c6b\3\2\2\2\u0184\u0c77\3\2"+
                    "\2\2\u0186\u0c87\3\2\2\2\u0188\u0c89\3\2\2\2\u018a\u0c8c\3\2\2\2\u018c"+
                    "\u0ca6\3\2\2\2\u018e\u0ca8\3\2\2\2\u0190\u0cac\3\2\2\2\u0192\u0cbb\3\2"+
                    "\2\2\u0194\u0cc7\3\2\2\2\u0196\u0ccf\3\2\2\2\u0198\u0cd3\3\2\2\2\u019a"+
                    "\u0cde\3\2\2\2\u019c\u0ce3\3\2\2\2\u019e\u0cf0\3\2\2\2\u01a0\u0d04\3\2"+
                    "\2\2\u01a2\u0d0d\3\2\2\2\u01a4\u0d0f\3\2\2\2\u01a6\u0d16\3\2\2\2\u01a8"+
                    "\u0d1b\3\2\2\2\u01aa\u0d28\3\2\2\2\u01ac\u0d30\3\2\2\2\u01ae\u0d38\3\2"+
                    "\2\2\u01b0\u0d46\3\2\2\2\u01b2\u0d48\3\2\2\2\u01b4\u0d54\3\2\2\2\u01b6"+
                    "\u0d77\3\2\2\2\u01b8\u0d79\3\2\2\2\u01ba\u0d87\3\2\2\2\u01bc\u0d8c\3\2"+
                    "\2\2\u01be\u0d9e\3\2\2\2\u01c0\u0da2\3\2\2\2\u01c2\u0daa\3\2\2\2\u01c4"+
                    "\u0db4\3\2\2\2\u01c6\u0dbc\3\2\2\2\u01c8\u0dc2\3\2\2\2\u01ca\u0dd1\3\2"+
                    "\2\2\u01cc\u0dd7\3\2\2\2\u01ce\u0df0\3\2\2\2\u01d0\u0e03\3\2\2\2\u01d2"+
                    "\u0e07\3\2\2\2\u01d4\u0e0a\3\2\2\2\u01d6\u0e26\3\2\2\2\u01d8\u0e2b\3\2"+
                    "\2\2\u01da\u0e3e\3\2\2\2\u01dc\u0e40\3\2\2\2\u01de\u0e50\3\2\2\2\u01e0"+
                    "\u0e58\3\2\2\2\u01e2\u0e5d\3\2\2\2\u01e4\u0e68\3\2\2\2\u01e6\u0e73\3\2"+
                    "\2\2\u01e8\u0e76\3\2\2\2\u01ea\u0e88\3\2\2\2\u01ec\u0e8a\3\2\2\2\u01ee"+
                    "\u0e99\3\2\2\2\u01f0\u0ea4\3\2\2\2\u01f2\u0eb2\3\2\2\2\u01f4\u0ec9\3\2"+
                    "\2\2\u01f6\u0ecb\3\2\2\2\u01f8\u0ecd\3\2\2\2\u01fa\u0f01\3\2\2\2\u01fc"+
                    "\u0f03\3\2\2\2\u01fe\u0f10\3\2\2\2\u0200\u0f12\3\2\2\2\u0202\u0f14\3\2"+
                    "\2\2\u0204\u0f1c\3\2\2\2\u0206\u0f1e\3\2\2\2\u0208\u0f29\3\2\2\2\u020a"+
                    "\u0f52\3\2\2\2\u020c\u0f57\3\2\2\2\u020e\u0f70\3\2\2\2\u0210\u0f72\3\2"+
                    "\2\2\u0212\u0f74\3\2\2\2\u0214\u0f95\3\2\2\2\u0216\u0f97\3\2\2\2\u0218"+
                    "\u0f99\3\2\2\2\u021a\u0fae\3\2\2\2\u021c\u0fb0\3\2\2\2\u021e\u0fb4\3\2"+
                    "\2\2\u0220\u0fbd\3\2\2\2\u0222\u0fbf\3\2\2\2\u0224\u0fc7\3\2\2\2\u0226"+
                    "\u0fcf\3\2\2\2\u0228\u0ff2\3\2\2\2\u022a\u0ff4\3\2\2\2\u022c\u1012\3\2"+
                    "\2\2\u022e\u1014\3\2\2\2\u0230\u1024\3\2\2\2\u0232\u1027\3\2\2\2\u0234"+
                    "\u1029\3\2\2\2\u0236\u1058\3\2\2\2\u0238\u105c\3\2\2\2\u023a\u105f\3\2"+
                    "\2\2\u023c\u1072\3\2\2\2\u023e\u107a\3\2\2\2\u0240\u108c\3\2\2\2\u0242"+
                    "\u1093\3\2\2\2\u0244\u10ad\3\2\2\2\u0246\u10af\3\2\2\2\u0248\u10b3\3\2"+
                    "\2\2\u024a\u10bc\3\2\2\2\u024c\u10e6\3\2\2\2\u024e\u10f7\3\2\2\2\u0250"+
                    "\u10f9\3\2\2\2\u0252\u1102\3\2\2\2\u0254\u1235\3\2\2\2\u0256\u1237\3\2"+
                    "\2\2\u0258\u1239\3\2\2\2\u025a\u123b\3\2\2\2\u025c\u123d\3\2\2\2\u025e"+
                    "\u124a\3\2\2\2\u0260\u1253\3\2\2\2\u0262\u125c\3\2\2\2\u0264\u125e\3\2"+
                    "\2\2\u0266\u126f\3\2\2\2\u0268\u1275\3\2\2\2\u026a\u1280\3\2\2\2\u026c"+
                    "\u1282\3\2\2\2\u026e\u1296\3\2\2\2\u0270\u12a9\3\2\2\2\u0272\u12bb\3\2"+
                    "\2\2\u0274\u12cf\3\2\2\2\u0276\u12dc\3\2\2\2\u0278\u12df\3\2\2\2\u027a"+
                    "\u12ea\3\2\2\2\u027c\u12f0\3\2\2\2\u027e\u12f8\3\2\2\2\u0280\u12fb\3\2"+
                    "\2\2\u0282\u1306\3\2\2\2\u0284\u1308\3\2\2\2\u0286\u1311\3\2\2\2\u0288"+
                    "\u1313\3\2\2\2\u028a\u1327\3\2\2\2\u028c\u132e\3\2\2\2\u028e\u1336\3\2"+
                    "\2\2\u0290\u1338\3\2\2\2\u0292\u133a\3\2\2\2\u0294\u133f\3\2\2\2\u0296"+
                    "\u1345\3\2\2\2\u0298\u135b\3\2\2\2\u029a\u135f\3\2\2\2\u029c\u1361\3\2"+
                    "\2\2\u029e\u1363\3\2\2\2\u02a0\u1365\3\2\2\2\u02a2\u1367\3\2\2\2\u02a4"+
                    "\u1369\3\2\2\2\u02a6\u136b\3\2\2\2\u02a8\u136d\3\2\2\2\u02aa\u137c\3\2"+
                    "\2\2\u02ac\u1380\3\2\2\2\u02ae\u1385\3\2\2\2\u02b0\u1387\3\2\2\2\u02b2"+
                    "\u1389\3\2\2\2\u02b4\u138b\3\2\2\2\u02b6\u1393\3\2\2\2\u02b8\u1395\3\2"+
                    "\2\2\u02ba\u13a1\3\2\2\2\u02bc\u13a3\3\2\2\2\u02be\u13ab\3\2\2\2\u02c0"+
                    "\u13b3\3\2\2\2\u02c2\u13bb\3\2\2\2\u02c4\u13c0\3\2\2\2\u02c6\u13c5\3\2"+
                    "\2\2\u02c8\u13d4\3\2\2\2\u02ca\u13d6\3\2\2\2\u02cc\u13da\3\2\2\2\u02ce"+
                    "\u13de\3\2\2\2\u02d0\u13e0\3\2\2\2\u02d2\u13e5\3\2\2\2\u02d4\u13ed\3\2"+
                    "\2\2\u02d6\u13f5\3\2\2\2\u02d8\u13ff\3\2\2\2\u02da\u1407\3\2\2\2\u02dc"+
                    "\u1410\3\2\2\2\u02de\u141f\3\2\2\2\u02e0\u1434\3\2\2\2\u02e2\u145e\3\2"+
                    "\2\2\u02e4\u1464\3\2\2\2\u02e6\u1474\3\2\2\2\u02e8\u1492\3\2\2\2\u02ea"+
                    "\u1494\3\2\2\2\u02ec\u14db\3\2\2\2\u02ee\u14e0\3\2\2\2\u02f0\u14f3\3\2"+
                    "\2\2\u02f2\u14fd\3\2\2\2\u02f4\u150c\3\2\2\2\u02f6\u1554\3\2\2\2\u02f8"+
                    "\u1556\3\2\2\2\u02fa\u1558\3\2\2\2\u02fc\u155c\3\2\2\2\u02fe\u1562\3\2"+
                    "\2\2\u0300\u156b\3\2\2\2\u0302\u1570\3\2\2\2\u0304\u1575\3\2\2\2\u0306"+
                    "\u157a\3\2\2\2\u0308\u157c\3\2\2\2\u030a\u1580\3\2\2\2\u030c\u030e\n\2"+
                    "\2\2\u030d\u030c\3\2\2\2\u030e\u030f\3\2\2\2\u030f\u030d\3\2\2\2\u030f"+
                    "\u0310\3\2\2\2\u0310\3\3\2\2\2\u0311\u0313\5\b\5\2\u0312\u0311\3\2\2\2"+
                    "\u0313\u0316\3\2\2\2\u0314\u0312\3\2\2\2\u0314\u0315\3\2\2\2\u0315\u0317"+
                    "\3\2\2\2\u0316\u0314\3\2\2\2\u0317\u0318\7\2\2\3\u0318\5\3\2\2\2\u0319"+
                    "\u031e\5\b\5\2\u031a\u031b\7\u020a\2\2\u031b\u031d\5\b\5\2\u031c\u031a"+
                    "\3\2\2\2\u031d\u0320\3\2\2\2\u031e\u031c\3\2\2\2\u031e\u031f\3\2\2\2\u031f"+
                    "\u0322\3\2\2\2\u0320\u031e\3\2\2\2\u0321\u0323\7\u020a\2\2\u0322\u0321"+
                    "\3\2\2\2\u0322\u0323\3\2\2\2\u0323\u0326\3\2\2\2\u0324\u0326\5\u0288\u0145"+
                    "\2\u0325\u0319\3\2\2\2\u0325\u0324\3\2\2\2\u0326\u0329\3\2\2\2\u0327\u0325"+
                    "\3\2\2\2\u0327\u0328\3\2\2\2\u0328\u032b\3\2\2\2\u0329\u0327\3\2\2\2\u032a"+
                    "\u032c\t\3\2\2\u032b\u032a\3\2\2\2\u032b\u032c\3\2\2\2\u032c\7\3\2\2\2"+
                    "\u032d\u0345\5\20\t\2\u032e\u0345\5\"\22\2\u032f\u0345\5\60\31\2\u0330"+
                    "\u0345\5\u00aaV\2\u0331\u0345\58\35\2\u0332\u0345\5^\60\2\u0333\u0345"+
                    "\5\22\n\2\u0334\u0345\5\62\32\2\u0335\u0345\5$\23\2\u0336\u0345\5\u00ac"+
                    "W\2\u0337\u0345\5:\36\2\u0338\u0345\5r:\2\u0339\u0345\5\16\b\2\u033a\u0345"+
                    "\5 \21\2\u033b\u0345\5.\30\2\u033c\u0345\5\u00a8U\2\u033d\u0345\5\66\34"+
                    "\2\u033e\u0345\5\\/\2\u033f\u0345\5\u0122\u0092\2\u0340\u0341\5\u011a"+
                    "\u008e\2\u0341\u0342\7\u020a\2\2\u0342\u0343\7\u0205\2\2\u0343\u0345\3"+
                    "\2\2\2\u0344\u032d\3\2\2\2\u0344\u032e\3\2\2\2\u0344\u032f\3\2\2\2\u0344"+
                    "\u0330\3\2\2\2\u0344\u0331\3\2\2\2\u0344\u0332\3\2\2\2\u0344\u0333\3\2"+
                    "\2\2\u0344\u0334\3\2\2\2\u0344\u0335\3\2\2\2\u0344\u0336\3\2\2\2\u0344"+
                    "\u0337\3\2\2\2\u0344\u0338\3\2\2\2\u0344\u0339\3\2\2\2\u0344\u033a\3\2"+
                    "\2\2\u0344\u033b\3\2\2\2\u0344\u033c\3\2\2\2\u0344\u033d\3\2\2\2\u0344"+
                    "\u033e\3\2\2\2\u0344\u033f\3\2\2\2\u0344\u0340\3\2\2\2\u0345\t\3\2\2\2"+
                    "\u0346\u034a\7h\2\2\u0347\u0349\5\u00c4c\2\u0348\u0347\3\2\2\2\u0349\u034c"+
                    "\3\2\2\2\u034a\u0348\3\2\2\2\u034a\u034b\3\2\2\2\u034b\13\3\2\2\2\u034c"+
                    "\u034a\3\2\2\2\u034d\u034e\t\4\2\2\u034e\r\3\2\2\2\u034f\u0350\7y\2\2"+
                    "\u0350\u0351\7\u00a2\2\2\u0351\u0352\5\u02c2\u0162\2\u0352\u0353\7\u020a"+
                    "\2\2\u0353\17\3\2\2\2\u0354\u0355\7\20\2\2\u0355\u0356\7\u00a2\2\2\u0356"+
                    "\u0357\5\u02c2\u0162\2\u0357\u0359\7F\2\2\u0358\u035a\7e\2\2\u0359\u0358"+
                    "\3\2\2\2\u0359\u035a\3\2\2\2\u035a\u035e\3\2\2\2\u035b\u035d\5\u00b4["+
                    "\2\u035c\u035b\3\2\2\2\u035d\u0360\3\2\2\2\u035e\u035c\3\2\2\2\u035e\u035f"+
                    "\3\2\2\2\u035f\u0363\3\2\2\2\u0360\u035e\3\2\2\2\u0361\u0362\7\u014b\2"+
                    "\2\u0362\u0364\7\u0169\2\2\u0363\u0361\3\2\2\2\u0363\u0364\3\2\2\2\u0364"+
                    "\u0365\3\2\2\2\u0365\u0366\7\u020a\2\2\u0366\21\3\2\2\2\u0367\u036a\7"+
                    "V\2\2\u0368\u0369\7\u0115\2\2\u0369\u036b\7\u0144\2\2\u036a\u0368\3\2"+
                    "\2\2\u036a\u036b\3\2\2\2\u036b\u036d\3\2\2\2\u036c\u0367\3\2\2\2\u036c"+
                    "\u036d\3\2\2\2\u036d\u036e\3\2\2\2\u036e\u036f\5\24\13\2\u036f\23\3\2"+
                    "\2\2\u0370\u0371\7\u00a2\2\2\u0371\u037d\5\u02c2\u0162\2\u0372\u0373\7"+
                    "\u01fe\2\2\u0373\u0378\5\u00c0a\2\u0374\u0375\7\u0204\2\2\u0375\u0377"+
                    "\5\u00c0a\2\u0376\u0374\3\2\2\2\u0377\u037a\3\2\2\2\u0378\u0376\3\2\2"+
                    "\2\u0378\u0379\3\2\2\2\u0379\u037b\3\2\2\2\u037a\u0378\3\2\2\2\u037b\u037c"+
                    "\7\u01ff\2\2\u037c\u037e\3\2\2\2\u037d\u0372\3\2\2\2\u037d\u037e\3\2\2"+
                    "\2\u037e\u037f\3\2\2\2\u037f\u0380\7\u0149\2\2\u0380\u038b\5\u02e6\u0174"+
                    "\2\u0381\u038a\5\u00b2Z\2\u0382\u038a\5\26\f\2\u0383\u038a\5\32\16\2\u0384"+
                    "\u038a\7r\2\2\u0385\u038a\7\u012b\2\2\u0386\u0387\7\16\2\2\u0387\u0388"+
                    "\7\u01ac\2\2\u0388\u038a\5\u02ac\u0157\2\u0389\u0381\3\2\2\2\u0389\u0382"+
                    "\3\2\2\2\u0389\u0383\3\2\2\2\u0389\u0384\3\2\2\2\u0389\u0385\3\2\2\2\u0389"+
                    "\u0386\3\2\2\2\u038a\u038d\3\2\2\2\u038b\u0389\3\2\2\2\u038b\u038c\3\2"+
                    "\2\2\u038c\u0399\3\2\2\2\u038d\u038b\3\2\2\2\u038e\u0397\5\f\7\2\u038f"+
                    "\u0391\5\u00c4c\2\u0390\u038f\3\2\2\2\u0391\u0394\3\2\2\2\u0392\u0390"+
                    "\3\2\2\2\u0392\u0393\3\2\2\2\u0393\u0395\3\2\2\2\u0394\u0392\3\2\2\2\u0395"+
                    "\u0398\5\u010e\u0088\2\u0396\u0398\5\u00b6\\\2\u0397\u0392\3\2\2\2\u0397"+
                    "\u0396\3\2\2\2\u0398\u039a\3\2\2\2\u0399\u038e\3\2\2\2\u0399\u039a\3\2"+
                    "\2\2\u039a\u039b\3\2\2\2\u039b\u039c\7\u020a\2\2\u039c\25\3\2\2\2\u039d"+
                    "\u039f\7\u011f\2\2\u039e\u03a0\5\30\r\2\u039f\u039e\3\2\2\2\u039f\u03a0"+
                    "\3\2\2\2\u03a0\27\3\2\2\2\u03a1\u03a2\7\u01fe\2\2\u03a2\u03a3\7\u0122"+
                    "\2\2\u03a3\u03a4\5\u0202\u0102\2\u03a4\u03b2\7/\2\2\u03a5\u03b3\7\23\2"+
                    "\2\u03a6\u03a7\t\5\2\2\u03a7\u03a8\7\u01fe\2\2\u03a8\u03ad\5\u02d4\u016b"+
                    "\2\u03a9\u03aa\7\u0204\2\2\u03aa\u03ac\5\u02d4\u016b\2\u03ab\u03a9\3\2"+
                    "\2\2\u03ac\u03af\3\2\2\2\u03ad\u03ab\3\2\2\2\u03ad\u03ae\3\2\2\2\u03ae"+
                    "\u03b0\3\2\2\2\u03af\u03ad\3\2\2\2\u03b0\u03b1\7\u01ff\2\2\u03b1\u03b3"+
                    "\3\2\2\2\u03b2\u03a5\3\2\2\2\u03b2\u03a6\3\2\2\2\u03b3\u03b5\3\2\2\2\u03b4"+
                    "\u03b6\5\36\20\2\u03b5\u03b4\3\2\2\2\u03b5\u03b6\3\2\2\2\u03b6\u03b7\3"+
                    "\2\2\2\u03b7\u03b8\7\u01ff\2\2\u03b8\31\3\2\2\2\u03b9\u03bb\7\u0148\2"+
                    "\2\u03ba\u03bc\5\34\17\2\u03bb\u03ba\3\2\2\2\u03bb\u03bc\3\2\2\2\u03bc"+
                    "\33\3\2\2\2\u03bd\u03be\7\u0142\2\2\u03be\u03bf\7\u01fe\2\2\u03bf\u03c4"+
                    "\5\u02d6\u016c\2\u03c0\u03c1\7\u0204\2\2\u03c1\u03c3\5\u02d6\u016c\2\u03c2"+
                    "\u03c0\3\2\2\2\u03c3\u03c6\3\2\2\2\u03c4\u03c2\3\2\2\2\u03c4\u03c5\3\2"+
                    "\2\2\u03c5\u03c7\3\2\2\2\u03c6\u03c4\3\2\2\2\u03c7\u03c8\7\u01ff\2\2\u03c8"+
                    "\35\3\2\2\2\u03c9\u03ca\t\6\2\2\u03ca\u03cb\5\u0202\u0102\2\u03cb\u03cc"+
                    "\7/\2\2\u03cc\u03cd\7\u01fe\2\2\u03cd\u03d2\5\u02d4\u016b\2\u03ce\u03cf"+
                    "\7\u0204\2\2\u03cf\u03d1\5\u02d4\u016b\2\u03d0\u03ce\3\2\2\2\u03d1\u03d4"+
                    "\3\2\2\2\u03d2\u03d0\3\2\2\2\u03d2\u03d3\3\2\2\2\u03d3\u03d5\3\2\2\2\u03d4"+
                    "\u03d2\3\2\2\2\u03d5\u03d6\7\u01ff\2\2\u03d6\37\3\2\2\2\u03d7\u03d8\7"+
                    "y\2\2\u03d8\u03da\7\u011e\2\2\u03d9\u03db\7*\2\2\u03da\u03d9\3\2\2\2\u03da"+
                    "\u03db\3\2\2\2\u03db\u03dc\3\2\2\2\u03dc\u03dd\5\u02aa\u0156\2\u03dd\u03de"+
                    "\7\u020a\2\2\u03de!\3\2\2\2\u03df\u03e0\7\20\2\2\u03e0\u03e1\7\u011e\2"+
                    "\2\u03e1\u03e2\5\u02aa\u0156\2\u03e2\u03e4\7F\2\2\u03e3\u03e5\7e\2\2\u03e4"+
                    "\u03e3\3\2\2\2\u03e4\u03e5\3\2\2\2\u03e5\u03e7\3\2\2\2\u03e6\u03e8\t\7"+
                    "\2\2\u03e7\u03e6\3\2\2\2\u03e7\u03e8\3\2\2\2\u03e8\u03ec\3\2\2\2\u03e9"+
                    "\u03eb\5\u00b4[\2\u03ea\u03e9\3\2\2\2\u03eb\u03ee\3\2\2\2\u03ec\u03ea"+
                    "\3\2\2\2\u03ec\u03ed\3\2\2\2\u03ed\u03f1\3\2\2\2\u03ee\u03ec\3\2\2\2\u03ef"+
                    "\u03f0\7\u014b\2\2\u03f0\u03f2\7\u0169\2\2\u03f1\u03ef\3\2\2\2\u03f1\u03f2"+
                    "\3\2\2\2\u03f2\u03f3\3\2\2\2\u03f3\u03f4\7\u020a\2\2\u03f4#\3\2\2\2\u03f5"+
                    "\u03f8\7V\2\2\u03f6\u03f7\7\u0115\2\2\u03f7\u03f9\7\u0144\2\2\u03f8\u03f6"+
                    "\3\2\2\2\u03f8\u03f9\3\2\2\2\u03f9\u03fa\3\2\2\2\u03fa\u03fd\7\u011e\2"+
                    "\2\u03fb\u03fe\5(\25\2\u03fc\u03fe\5&\24\2\u03fd\u03fb\3\2\2\2\u03fd\u03fc"+
                    "\3\2\2\2\u03fd\u03fe\3\2\2\2\u03fe\u03ff\3\2\2\2\u03ff\u0400\7\u020a\2"+
                    "\2\u0400\u0401\7\u0205\2\2\u0401%\3\2\2\2\u0402\u0403\7*\2\2\u0403\u0404"+
                    "\5\u02aa\u0156\2\u0404\u0408\5\f\7\2\u0405\u0407\5,\27\2\u0406\u0405\3"+
                    "\2\2\2\u0407\u040a\3\2\2\2\u0408\u0406\3\2\2\2\u0408\u0409\3\2\2\2\u0409"+
                    "\u040d\3\2\2\2\u040a\u0408\3\2\2\2\u040b\u040c\7\"\2\2\u040c\u040e\5\u00e4"+
                    "s\2\u040d\u040b\3\2\2\2\u040d\u040e\3\2\2\2\u040e\u0410\3\2\2\2\u040f"+
                    "\u0411\5\u0114\u008b\2\u0410\u040f\3\2\2\2\u0410\u0411\3\2\2\2\u0411\u0412"+
                    "\3\2\2\2\u0412\u0414\7\u0082\2\2\u0413\u0415\5\u02aa\u0156\2\u0414\u0413"+
                    "\3\2\2\2\u0414\u0415\3\2\2\2\u0415\'\3\2\2\2\u0416\u0418\5\u02aa\u0156"+
                    "\2\u0417\u0419\5\u00b2Z\2\u0418\u0417\3\2\2\2\u0418\u0419\3\2\2\2\u0419"+
                    "\u041a\3\2\2\2\u041a\u041e\5\f\7\2\u041b\u041d\5*\26\2\u041c\u041b\3\2"+
                    "\2\2\u041d\u0420\3\2\2\2\u041e\u041c\3\2\2\2\u041e\u041f\3\2\2\2\u041f"+
                    "\u0421\3\2\2\2\u0420\u041e\3\2\2\2\u0421\u0423\7\u0082\2\2\u0422\u0424"+
                    "\5\u02aa\u0156\2\u0423\u0422\3\2\2\2\u0423\u0424\3\2\2\2\u0424)\3\2\2"+
                    "\2\u0425\u0430\5\u00c6d\2\u0426\u0430\5\u00c8e\2\u0427\u0430\5\u00caf"+
                    "\2\u0428\u0430\5\u00ceh\2\u0429\u0430\5\u00d0i\2\u042a\u0430\5\u00d2j"+
                    "\2\u042b\u0430\5\u00dan\2\u042c\u0430\5\64\33\2\u042d\u0430\5\24\13\2"+
                    "\u042e\u0430\5\u0288\u0145\2\u042f\u0425\3\2\2\2\u042f\u0426\3\2\2\2\u042f"+
                    "\u0427\3\2\2\2\u042f\u0428\3\2\2\2\u042f\u0429\3\2\2\2\u042f\u042a\3\2"+
                    "\2\2\u042f\u042b\3\2\2\2\u042f\u042c\3\2\2\2\u042f\u042d\3\2\2\2\u042f"+
                    "\u042e\3\2\2\2\u0430+\3\2\2\2\u0431\u043c\5\u00c6d\2\u0432\u043c\5\u00c8"+
                    "e\2\u0433\u043c\5\u00caf\2\u0434\u043c\5\u00ceh\2\u0435\u043c\5\u00d0"+
                    "i\2\u0436\u043c\5\u00d2j\2\u0437\u043c\5\u00dan\2\u0438\u043c\5\62\32"+
                    "\2\u0439\u043c\5\22\n\2\u043a\u043c\5\u0288\u0145\2\u043b\u0431\3\2\2"+
                    "\2\u043b\u0432\3\2\2\2\u043b\u0433\3\2\2\2\u043b\u0434\3\2\2\2\u043b\u0435"+
                    "\3\2\2\2\u043b\u0436\3\2\2\2\u043b\u0437\3\2\2\2\u043b\u0438\3\2\2\2\u043b"+
                    "\u0439\3\2\2\2\u043b\u043a\3\2\2\2\u043c-\3\2\2\2\u043d\u043e\7y\2\2\u043e"+
                    "\u043f\7\u0137\2\2\u043f\u0440\5\u02c4\u0163\2\u0440\u0441\7\u020a\2\2"+
                    "\u0441/\3\2\2\2\u0442\u0443\7\20\2\2\u0443\u0444\7\u0137\2\2\u0444\u0445"+
                    "\5\u02c4\u0163\2\u0445\u0447\7F\2\2\u0446\u0448\7e\2\2\u0447\u0446\3\2"+
                    "\2\2\u0447\u0448\3\2\2\2\u0448\u044c\3\2\2\2\u0449\u044b\5\u00b4[\2\u044a"+
                    "\u0449\3\2\2\2\u044b\u044e\3\2\2\2\u044c\u044a\3\2\2\2\u044c\u044d\3\2"+
                    "\2\2\u044d\u0451\3\2\2\2\u044e\u044c\3\2\2\2\u044f\u0450\7\u014b\2\2\u0450"+
                    "\u0452\7\u0169\2\2\u0451\u044f\3\2\2\2\u0451\u0452\3\2\2\2\u0452\u0453"+
                    "\3\2\2\2\u0453\u0454\7\u020a\2\2\u0454\61\3\2\2\2\u0455\u0458\7V\2\2\u0456"+
                    "\u0457\7\u0115\2\2\u0457\u0459\7\u0144\2\2\u0458\u0456\3\2\2\2\u0458\u0459"+
                    "\3\2\2\2\u0459\u045b\3\2\2\2\u045a\u0455\3\2\2\2\u045a\u045b\3\2\2\2\u045b"+
                    "\u045c\3\2\2\2\u045c\u045d\5\64\33\2\u045d\63\3\2\2\2\u045e\u045f\7\u0137"+
                    "\2\2\u045f\u046b\5\u02c4\u0163\2\u0460\u0461\7\u01fe\2\2\u0461\u0466\5"+
                    "\u00c0a\2\u0462\u0463\7\u0204\2\2\u0463\u0465\5\u00c0a\2\u0464\u0462\3"+
                    "\2\2\2\u0465\u0468\3\2\2\2\u0466\u0464\3\2\2\2\u0466\u0467\3\2\2\2\u0467"+
                    "\u0469\3\2\2\2\u0468\u0466\3\2\2\2\u0469\u046a\7\u01ff\2\2\u046a\u046c"+
                    "\3\2\2\2\u046b\u0460\3\2\2\2\u046b\u046c\3\2\2\2\u046c\u047c\3\2\2\2\u046d"+
                    "\u046f\5\u00b2Z\2\u046e\u046d\3\2\2\2\u046e\u046f\3\2\2\2\u046f\u0470"+
                    "\3\2\2\2\u0470\u047a\5\f\7\2\u0471\u0473\5\u00c4c\2\u0472\u0471\3\2\2"+
                    "\2\u0473\u0476\3\2\2\2\u0474\u0472\3\2\2\2\u0474\u0475\3\2\2\2\u0475\u0477"+
                    "\3\2\2\2\u0476\u0474\3\2\2\2\u0477\u047b\5\u010e\u0088\2\u0478\u047b\5"+
                    "\u00b6\\\2\u0479\u047b\7\u0091\2\2\u047a\u0474\3\2\2\2\u047a\u0478\3\2"+
                    "\2\2\u047a\u0479\3\2\2\2\u047b\u047d\3\2\2\2\u047c\u046e\3\2\2\2\u047c"+
                    "\u047d\3\2\2\2\u047d\u047e\3\2\2\2\u047e\u047f\7\u020a\2\2\u047f\65\3"+
                    "\2\2\2\u0480\u0481\7y\2\2\u0481\u0482\7\u019b\2\2\u0482\u0483\5\u02c6"+
                    "\u0164\2\u0483\u0484\7\u020a\2\2\u0484\67\3\2\2\2\u0485\u0486\7\20\2\2"+
                    "\u0486\u0487\7\u019b\2\2\u0487\u049a\5\u02c6\u0164\2\u0488\u049b\t\b\2"+
                    "\2\u0489\u048a\7\u0143\2\2\u048a\u048b\7\u0194\2\2\u048b\u049b\5\u02c6"+
                    "\u0164\2\u048c\u048e\7F\2\2\u048d\u048f\7e\2\2\u048e\u048d\3\2\2\2\u048e"+
                    "\u048f\3\2\2\2\u048f\u0493\3\2\2\2\u0490\u0492\5\u00b4[\2\u0491\u0490"+
                    "\3\2\2\2\u0492\u0495\3\2\2\2\u0493\u0491\3\2\2\2\u0493\u0494\3\2\2\2\u0494"+
                    "\u0498\3\2\2\2\u0495\u0493\3\2\2\2\u0496\u0497\7\u014b\2\2\u0497\u0499"+
                    "\7\u0169\2\2\u0498\u0496\3\2\2\2\u0498\u0499\3\2\2\2\u0499\u049b\3\2\2"+
                    "\2\u049a\u0488\3\2\2\2\u049a\u0489\3\2\2\2\u049a\u048c\3\2\2\2\u049b\u049c"+
                    "\3\2\2\2\u049c\u049d\7\u020a\2\2\u049d9\3\2\2\2\u049e\u04a1\7V\2\2\u049f"+
                    "\u04a0\7\u0115\2\2\u04a0\u04a2\7\u0144\2\2\u04a1\u049f\3\2\2\2\u04a1\u04a2"+
                    "\3\2\2\2\u04a2\u04a3\3\2\2\2\u04a3\u04a4\7\u019b\2\2\u04a4\u04a8\5\u02c6"+
                    "\u0164\2\u04a5\u04a9\5@!\2\u04a6\u04a9\5D#\2\u04a7\u04a9\5F$\2\u04a8\u04a5"+
                    "\3\2\2\2\u04a8\u04a6\3\2\2\2\u04a8\u04a7\3\2\2\2\u04a9\u04ab\3\2\2\2\u04aa"+
                    "\u04ac\5<\37\2\u04ab\u04aa\3\2\2\2\u04ab\u04ac\3\2\2\2\u04ac\u04ae\3\2"+
                    "\2\2\u04ad\u04af\t\b\2\2\u04ae\u04ad\3\2\2\2\u04ae\u04af\3\2\2\2\u04af"+
                    "\u04b1\3\2\2\2\u04b0\u04b2\5> \2\u04b1\u04b0\3\2\2\2\u04b1\u04b2\3\2\2"+
                    "\2\u04b2\u04b3\3\2\2\2\u04b3\u04b4\5H%\2\u04b4\u04b5\7\u020a\2\2\u04b5"+
                    ";\3\2\2\2\u04b6\u04b7\7\u009c\2\2\u04b7\u04bc\5\u02c6\u0164\2\u04b8\u04b9"+
                    "\7\u0204\2\2\u04b9\u04bb\5\u02c6\u0164\2\u04ba\u04b8\3\2\2\2\u04bb\u04be"+
                    "\3\2\2\2\u04bc\u04ba\3\2\2\2\u04bc\u04bd\3\2\2\2\u04bd=\3\2\2\2\u04be"+
                    "\u04bc\3\2\2\2\u04bf\u04c0\7\u01ba\2\2\u04c0\u04c1\7\u01fe\2\2\u04c1\u04c2"+
                    "\5\u01fe\u0100\2\u04c2\u04c3\7\u01ff\2\2\u04c3?\3\2\2\2\u04c4\u04c9\7"+
                    "!\2\2\u04c5\u04c9\7\f\2\2\u04c6\u04c7\7\u00bd\2\2\u04c7\u04c9\7\u010d"+
                    "\2\2\u04c8\u04c4\3\2\2\2\u04c8\u04c5\3\2\2\2\u04c8\u04c6\3\2\2\2\u04c9"+
                    "\u04ca\3\2\2\2\u04ca\u04cc\5R*\2\u04cb\u04cd\5X-\2\u04cc\u04cb\3\2\2\2"+
                    "\u04cc\u04cd\3\2\2\2\u04cd\u04cf\3\2\2\2\u04ce\u04d0\5B\"\2\u04cf\u04ce"+
                    "\3\2\2\2\u04cf\u04d0\3\2\2\2\u04d0A\3\2\2\2\u04d1\u04d2\7\u009d\2\2\u04d2"+
                    "\u04d3\7{\2\2\u04d3\u04d4\7\u0151\2\2\u04d4C\3\2\2\2\u04d5\u04d6\7\u009d"+
                    "\2\2\u04d6\u04d8\5R*\2\u04d7\u04d9\5X-\2\u04d8\u04d7\3\2\2\2\u04d8\u04d9"+
                    "\3\2\2\2\u04d9E\3\2\2\2\u04da\u04db\t\t\2\2\u04db\u04e0\5P)\2\u04dc\u04dd"+
                    "\7\u0115\2\2\u04dd\u04df\5P)\2\u04de\u04dc\3\2\2\2\u04df\u04e2\3\2\2\2"+
                    "\u04e0\u04de\3\2\2\2\u04e0\u04e1\3\2\2\2\u04e1\u04e3\3\2\2\2\u04e2\u04e0"+
                    "\3\2\2\2\u04e3\u04eb\7\u0111\2\2\u04e4\u04ec\7_\2\2\u04e5\u04e6\5\u02a6"+
                    "\u0154\2\u04e6\u04e7\7\u01f7\2\2\u04e7\u04e9\3\2\2\2\u04e8\u04e5\3\2\2"+
                    "\2\u04e8\u04e9\3\2\2\2\u04e9\u04ea\3\2\2\2\u04ea\u04ec\7\u0158\2\2\u04eb"+
                    "\u04e4\3\2\2\2\u04eb\u04e8\3\2\2\2\u04ecG\3\2\2\2\u04ed\u04ee\7G\2\2\u04ee"+
                    "\u04f3\7\u019b\2\2\u04ef\u04f0\7\63\2\2\u04f0\u04f3\5\u02fc\u017f\2\u04f1"+
                    "\u04f3\5\u0118\u008d\2\u04f2\u04ed\3\2\2\2\u04f2\u04ef\3\2\2\2\u04f2\u04f1"+
                    "\3\2\2\2\u04f3I\3\2\2\2\u04f4\u04f6\5\u02a8\u0155\2\u04f5\u04f7\5\u02dc"+
                    "\u016f\2\u04f6\u04f5\3\2\2\2\u04f6\u04f7\3\2\2\2\u04f7K\3\2\2\2\u04f8"+
                    "\u04f9\7G\2\2\u04f9\u04fd\7\u019b\2\2\u04fa\u04fc\5\u00c4c\2\u04fb\u04fa"+
                    "\3\2\2\2\u04fc\u04ff\3\2\2\2\u04fd\u04fb\3\2\2\2\u04fd\u04fe\3\2\2\2\u04fe"+
                    "\u0501\3\2\2\2\u04ff\u04fd\3\2\2\2\u0500\u0502\5N(\2\u0501\u0500\3\2\2"+
                    "\2\u0502\u0503\3\2\2\2\u0503\u0501\3\2\2\2\u0503\u0504\3\2\2\2\u0504\u0505"+
                    "\3\2\2\2\u0505\u0506\7\u0082\2\2\u0506\u0507\5\u02c6\u0164\2\u0507M\3"+
                    "\2\2\2\u0508\u0509\7!\2\2\u0509\u050a\7\u017d\2\2\u050a\u050b\7\u00c4"+
                    "\2\2\u050b\u050c\5\u0118\u008d\2\u050c\u050d\7!\2\2\u050d\u050e\7\u017d"+
                    "\2\2\u050e\u050f\7\u020a\2\2\u050f\u052d\3\2\2\2\u0510\u0511\7!\2\2\u0511"+
                    "\u0512\7{\2\2\u0512\u0513\7\u0151\2\2\u0513\u0514\7\u00c4\2\2\u0514\u0515"+
                    "\5\u0118\u008d\2\u0515\u0516\7!\2\2\u0516\u0517\7{\2\2\u0517\u0518\7\u0151"+
                    "\2\2\u0518\u0519\7\u020a\2\2\u0519\u052d\3\2\2\2\u051a\u051b\7\f\2\2\u051b"+
                    "\u051c\7\u017d\2\2\u051c\u051d\7\u00c4\2\2\u051d\u051e\5\u0118\u008d\2"+
                    "\u051e\u051f\7\f\2\2\u051f\u0520\7\u017d\2\2\u0520\u0521\7\u020a\2\2\u0521"+
                    "\u052d\3\2\2\2\u0522\u0523\7\f\2\2\u0523\u0524\7{\2\2\u0524\u0525\7\u0151"+
                    "\2\2\u0525\u0526\7\u00c4\2\2\u0526\u0527\5\u0118\u008d\2\u0527\u0528\7"+
                    "\f\2\2\u0528\u0529\7{\2\2\u0529\u052a\7\u0151\2\2\u052a\u052b\7\u020a"+
                    "\2\2\u052b\u052d\3\2\2\2\u052c\u0508\3\2\2\2\u052c\u0510\3\2\2\2\u052c"+
                    "\u051a\3\2\2\2\u052c\u0522\3\2\2\2\u052dO\3\2\2\2\u052e\u0549\7\20\2\2"+
                    "\u052f\u0549\7\21\2\2\u0530\u0531\7\27\2\2\u0531\u0549\7\u0180\2\2\u0532"+
                    "\u0549\7\33\2\2\u0533\u0549\7B\2\2\u0534\u0549\7V\2\2\u0535\u0536\7u\2"+
                    "\2\u0536\u0549\7\u0180\2\2\u0537\u0549\7y\2\2\u0538\u0549\7\u00a4\2\2"+
                    "\u0539\u0549\7\u00fb\2\2\u053a\u0549\7\u0143\2\2\u053b\u0549\7\u014d\2"+
                    "\2\u053c\u0549\7\u019e\2\2\u053d\u0549\7d\2\2\u053e\u0549\7\u017c\2\2"+
                    "\u053f\u0549\7\u016c\2\2\u0540\u0549\7b\2\2\u0541\u0549\7\u00db\2\2\u0542"+
                    "\u0549\7\u00da\2\2\u0543\u0549\7\u0165\2\2\u0544\u0549\7\u0187\2\2\u0545"+
                    "\u0549\7_\2\2\u0546\u0549\7\u0158\2\2\u0547\u0549\7\u009c\2\2\u0548\u052e"+
                    "\3\2\2\2\u0548\u052f\3\2\2\2\u0548\u0530\3\2\2\2\u0548\u0532\3\2\2\2\u0548"+
                    "\u0533\3\2\2\2\u0548\u0534\3\2\2\2\u0548\u0535\3\2\2\2\u0548\u0537\3\2"+
                    "\2\2\u0548\u0538\3\2\2\2\u0548\u0539\3\2\2\2\u0548\u053a\3\2\2\2\u0548"+
                    "\u053b\3\2\2\2\u0548\u053c\3\2\2\2\u0548\u053d\3\2\2\2\u0548\u053e\3\2"+
                    "\2\2\u0548\u053f\3\2\2\2\u0548\u0540\3\2\2\2\u0548\u0541\3\2\2\2\u0548"+
                    "\u0542\3\2\2\2\u0548\u0543\3\2\2\2\u0548\u0544\3\2\2\2\u0548\u0545\3\2"+
                    "\2\2\u0548\u0546\3\2\2\2\u0548\u0547\3\2\2\2\u0549Q\3\2\2\2\u054a\u054f"+
                    "\5T+\2\u054b\u054c\7\u0115\2\2\u054c\u054e\5T+\2\u054d\u054b\3\2\2\2\u054e"+
                    "\u0551\3\2\2\2\u054f\u054d\3\2\2\2\u054f\u0550\3\2\2\2\u0550\u0552\3\2"+
                    "\2\2\u0551\u054f\3\2\2\2\u0552\u0554\7\u0111\2\2\u0553\u0555\5V,\2\u0554"+
                    "\u0553\3\2\2\2\u0554\u0555\3\2\2\2\u0555\u0556\3\2\2\2\u0556\u0557\5\u02d6"+
                    "\u016c\2\u0557S\3\2\2\2\u0558\u0562\t\n\2\2\u0559\u055a\7\u010d\2\2\u055a"+
                    "\u055f\5\u02d4\u016b\2\u055b\u055c\7\u0204\2\2\u055c\u055e\5\u02d4\u016b"+
                    "\2\u055d\u055b\3\2\2\2\u055e\u0561\3\2\2\2\u055f\u055d\3\2\2\2\u055f\u0560"+
                    "\3\2\2\2\u0560\u0563\3\2\2\2\u0561\u055f\3\2\2\2\u0562\u0559\3\2\2\2\u0562"+
                    "\u0563\3\2\2\2\u0563U\3\2\2\2\u0564\u0565\7\u00f7\2\2\u0565\u0566\7\u0188"+
                    "\2\2\u0566\u0567\5\u02d6\u016c\2\u0567\u0568\7\u010d\2\2\u0568W\3\2\2"+
                    "\2\u0569\u056b\7\u0140\2\2\u056a\u056c\5Z.\2\u056b\u056a\3\2\2\2\u056c"+
                    "\u056d\3\2\2\2\u056d\u056b\3\2\2\2\u056d\u056e\3\2\2\2\u056eY\3\2\2\2"+
                    "\u056f\u0570\t\13\2\2\u0570\u0571\5\u028c\u0147\2\u0571[\3\2\2\2\u0572"+
                    "\u0573\7y\2\2\u0573\u0575\7\u019f\2\2\u0574\u0576\7*\2\2\u0575\u0574\3"+
                    "\2\2\2\u0575\u0576\3\2\2\2\u0576\u0577\3\2\2\2\u0577\u0579\5\u02bc\u015f"+
                    "\2\u0578\u057a\t\f\2\2\u0579\u0578\3\2\2\2\u0579\u057a\3\2\2\2\u057a\u057b"+
                    "\3\2\2\2\u057b\u057c\7\u020a\2\2\u057c]\3\2\2\2\u057d\u057e\7\20\2\2\u057e"+
                    "\u057f\7\u019f\2\2\u057f\u0585\5\u02bc\u015f\2\u0580\u0586\5`\61\2\u0581"+
                    "\u0586\5b\62\2\u0582\u0586\5d\63\2\u0583\u0586\5l\67\2\u0584\u0586\5\u008e"+
                    "H\2\u0585\u0580\3\2\2\2\u0585\u0581\3\2\2\2\u0585\u0582\3\2\2\2\u0585"+
                    "\u0583\3\2\2\2\u0585\u0584\3\2\2\2\u0586\u0588\3\2\2\2\u0587\u0589\5n"+
                    "8\2\u0588\u0587\3\2\2\2\u0588\u0589\3\2\2\2\u0589\u058a\3\2\2\2\u058a"+
                    "\u058b\7\u020a\2\2\u058b_\3\2\2\2\u058c\u058e\7F\2\2\u058d\u058f\7e\2"+
                    "\2\u058e\u058d\3\2\2\2\u058e\u058f\3\2\2\2\u058f\u0591\3\2\2\2\u0590\u0592"+
                    "\t\r\2\2\u0591\u0590\3\2\2\2\u0591\u0592\3\2\2\2\u0592\u0596\3\2\2\2\u0593"+
                    "\u0595\5\u00b4[\2\u0594\u0593\3\2\2\2\u0595\u0598\3\2\2\2\u0596\u0594"+
                    "\3\2\2\2\u0596\u0597\3\2\2\2\u0597\u059b\3\2\2\2\u0598\u0596\3\2\2\2\u0599"+
                    "\u059a\7\u014b\2\2\u059a\u059c\7\u0169\2\2\u059b\u0599\3\2\2\2\u059b\u059c"+
                    "\3\2\2\2\u059ca\3\2\2\2\u059d\u059f\7\u0144\2\2\u059e\u05a0\5\u00b2Z\2"+
                    "\u059f\u059e\3\2\2\2\u059f\u05a0\3\2\2\2\u05a0\u05a1\3\2\2\2\u05a1\u05a2"+
                    "\7\25\2\2\u05a2\u05a3\7\u010c\2\2\u05a3\u05a4\7\u01fe\2\2\u05a4\u05a9"+
                    "\5\u0090I\2\u05a5\u05a6\7\u0204\2\2\u05a6\u05a8\5\u0090I\2\u05a7\u05a5"+
                    "\3\2\2\2\u05a8\u05ab\3\2\2\2\u05a9\u05a7\3\2\2\2\u05a9\u05aa\3\2\2\2\u05aa"+
                    "\u05ac\3\2\2\2\u05ab\u05a9\3\2\2\2\u05ac\u05ad\7\u01ff\2\2\u05adc\3\2"+
                    "\2\2\u05ae\u05b3\5f\64\2\u05af\u05b0\7\u0204\2\2\u05b0\u05b2\5f\64\2\u05b1"+
                    "\u05af\3\2\2\2\u05b2\u05b5\3\2\2\2\u05b3\u05b1\3\2\2\2\u05b3\u05b4\3\2"+
                    "\2\2\u05b4e\3\2\2\2\u05b5\u05b3\3\2\2\2\u05b6\u05b9\t\16\2\2\u05b7\u05ba"+
                    "\5\u00a0Q\2\u05b8\u05ba\5\u0098M\2\u05b9\u05b7\3\2\2\2\u05b9\u05b8\3\2"+
                    "\2\2\u05bag\3\2\2\2\u05bb\u05bc\t\17\2\2\u05bc\u05c9\7\32\2\2\u05bd\u05ca"+
                    "\5j\66\2\u05be\u05bf\7\u01fe\2\2\u05bf\u05c4\5j\66\2\u05c0\u05c1\7\u0204"+
                    "\2\2\u05c1\u05c3\5j\66\2\u05c2\u05c0\3\2\2\2\u05c3\u05c6\3\2\2\2\u05c4"+
                    "\u05c2\3\2\2\2\u05c4\u05c5\3\2\2\2\u05c5\u05c7\3\2\2\2\u05c6\u05c4\3\2"+
                    "\2\2\u05c7\u05c8\7\u01ff\2\2\u05c8\u05ca\3\2\2\2\u05c9\u05bd\3\2\2\2\u05c9"+
                    "\u05be\3\2\2\2\u05cai\3\2\2\2\u05cb\u05cd\5\u029e\u0150\2\u05cc\u05ce"+
                    "\5\u02e6\u0174\2\u05cd\u05cc\3\2\2\2\u05cd\u05ce\3\2\2\2\u05cek\3\2\2"+
                    "\2\u05cf\u05d5\7\u00ec\2\2\u05d0\u05d1\7\u00d5\2\2\u05d1\u05d6\5\u0202"+
                    "\u0102\2\u05d2\u05d3\7|\2\2\u05d3\u05d4\7\u019f\2\2\u05d4\u05d6\5\u02e6"+
                    "\u0174\2\u05d5\u05d0\3\2\2\2\u05d5\u05d2\3\2\2\2\u05d6m\3\2\2\2\u05d7"+
                    "\u05e8\7\u00c3\2\2\u05d8\u05e2\7\65\2\2\u05d9\u05da\7Q\2\2\u05da\u05db"+
                    "\7\u0194\2\2\u05db\u05e3\7\u0184\2\2\u05dc\u05de\7\u0105\2\2\u05dd\u05dc"+
                    "\3\2\2\2\u05dd\u05de\3\2\2\2\u05de\u05df\3\2\2\2\u05df\u05e0\7\u00b0\2"+
                    "\2\u05e0\u05e1\7\u0188\2\2\u05e1\u05e3\7^\2\2\u05e2\u05d9\3\2\2\2\u05e2"+
                    "\u05dd\3\2\2\2\u05e2\u05e3\3\2\2\2\u05e3\u05e5\3\2\2\2\u05e4\u05e6\5p"+
                    "9\2\u05e5\u05e4\3\2\2\2\u05e5\u05e6\3\2\2\2\u05e6\u05e8\3\2\2\2\u05e7"+
                    "\u05d7\3\2\2\2\u05e7\u05d8\3\2\2\2\u05e8o\3\2\2\2\u05e9\u05eb\7\u009f"+
                    "\2\2\u05ea\u05e9\3\2\2\2\u05ea\u05eb\3\2\2\2\u05eb\u05ec\3\2\2\2\u05ec"+
                    "\u05ed\7\u008a\2\2\u05ed\u05ee\7\u00c2\2\2\u05ee\u05ef\5\u02d6\u016c\2"+
                    "\u05efq\3\2\2\2\u05f0\u05f3\7V\2\2\u05f1\u05f2\7\u0115\2\2\u05f2\u05f4"+
                    "\7\u0144\2\2\u05f3\u05f1\3\2\2\2\u05f3\u05f4\3\2\2\2\u05f4\u05f5\3\2\2"+
                    "\2\u05f5\u05f8\7\u019f\2\2\u05f6\u05f9\5t;\2\u05f7\u05f9\5\u0080A\2\u05f8"+
                    "\u05f6\3\2\2\2\u05f8\u05f7\3\2\2\2\u05f9\u05fa\3\2\2\2\u05fa\u05fb\7\u020a"+
                    "\2\2\u05fbs\3\2\2\2\u05fc\u05ff\5\u02bc\u015f\2\u05fd\u05fe\7\u010f\2"+
                    "\2\u05fe\u0600\7\u01fa\2\2\u05ff\u05fd\3\2\2\2\u05ff\u0600\3\2\2\2\u0600"+
                    "\u0602\3\2\2\2\u0601\u0603\5v<\2\u0602\u0601\3\2\2\2\u0602\u0603\3\2\2"+
                    "\2\u0603u\3\2\2\2\u0604\u0606\5\u00b2Z\2\u0605\u0604\3\2\2\2\u0605\u0606"+
                    "\3\2\2\2\u0606\u0609\3\2\2\2\u0607\u060a\5x=\2\u0608\u060a\5z>\2\u0609"+
                    "\u0607\3\2\2\2\u0609\u0608\3\2\2\2\u060a\u060c\3\2\2\2\u060b\u060d\5~"+
                    "@\2\u060c\u060b\3\2\2\2\u060c\u060d\3\2\2\2\u060d\u0619\3\2\2\2\u060e"+
                    "\u060f\7\u01fe\2\2\u060f\u0614\5\u0090I\2\u0610\u0611\7\u0204\2\2\u0611"+
                    "\u0613\5\u0090I\2\u0612\u0610\3\2\2\2\u0613\u0616\3\2\2\2\u0614\u0612"+
                    "\3\2\2\2\u0614\u0615\3\2\2\2\u0615\u0617\3\2\2\2\u0616\u0614\3\2\2\2\u0617"+
                    "\u0618\7\u01ff\2\2\u0618\u061a\3\2\2\2\u0619\u060e\3\2\2\2\u0619\u061a"+
                    "\3\2\2\2\u061a\u061e\3\2\2\2\u061b\u061d\5\u008eH\2\u061c\u061b\3\2\2"+
                    "\2\u061d\u0620\3\2\2\2\u061e\u061c\3\2\2\2\u061e\u061f\3\2\2\2\u061fw"+
                    "\3\2\2\2\u0620\u061e\3\2\2\2\u0621\u0625\5\f\7\2\u0622\u0626\7\u010c\2"+
                    "\2\u0623\u0626\5\u00e0q\2\u0624\u0626\5|?\2\u0625\u0622\3\2\2\2\u0625"+
                    "\u0623\3\2\2\2\u0625\u0624\3\2\2\2\u0626y\3\2\2\2\u0627\u0628\7\u01a1"+
                    "\2\2\u0628\u0629\5\u02e6\u0174\2\u0629{\3\2\2\2\u062a\u062b\7\u0188\2"+
                    "\2\u062b\u062c\7\u010d\2\2\u062c\u062f\5\u02e6\u0174\2\u062d\u062e\7\u0105"+
                    "\2\2\u062e\u0630\7\u0107\2\2\u062f\u062d\3\2\2\2\u062f\u0630\3\2\2\2\u0630"+
                    "}\3\2\2\2\u0631\u0632\7\u0091\2\2\u0632\u0633\7\u00ef\2\2\u0633\u0634"+
                    "\5\u0202\u0102\2\u0634\u0635\7\u00ca\2\2\u0635\u0636\7\u00c7\2\2\u0636"+
                    "\u0637\7\u01ac\2\2\u0637\u0638\t\20\2\2\u0638\177\3\2\2\2\u0639\u063a"+
                    "\7*\2\2\u063a\u063b\5\u02bc\u015f\2\u063b\u063d\5\f\7\2\u063c\u063e\5"+
                    "\u0082B\2\u063d\u063c\3\2\2\2\u063e\u063f\3\2\2\2\u063f\u063d\3\2\2\2"+
                    "\u063f\u0640\3\2\2\2\u0640\u0641\3\2\2\2\u0641\u0642\7\u0082\2\2\u0642"+
                    "\u0081\3\2\2\2\u0643\u0646\5\u0084C\2\u0644\u0646\5\u0086D\2\u0645\u0643"+
                    "\3\2\2\2\u0645\u0644\3\2\2\2\u0646\u0083\3\2\2\2\u0647\u0648\t\21\2\2"+
                    "\u0648\u0649\7\u00e3\2\2\u0649\u064a\5\u008aF\2\u064a\u0085\3\2\2\2\u064b"+
                    "\u064f\t\22\2\2\u064c\u0650\5\u0088E\2\u064d\u0650\5\u008aF\2\u064e\u0650"+
                    "\5\u008cG\2\u064f\u064c\3\2\2\2\u064f\u064d\3\2\2\2\u064f\u064e\3\2\2"+
                    "\2\u0650\u0087\3\2\2\2\u0651\u0652\7\u0137\2\2\u0652\u0653\5\u02c4\u0163"+
                    "\2\u0653\u0654\7\u01fe\2\2\u0654\u0659\5\u00a6T\2\u0655\u0656\7\u0204"+
                    "\2\2\u0656\u0658\5\u00a6T\2\u0657\u0655\3\2\2\2\u0658\u065b\3\2\2\2\u0659"+
                    "\u0657\3\2\2\2\u0659\u065a\3\2\2\2\u065a\u065c\3\2\2\2\u065b\u0659\3\2"+
                    "\2\2\u065c\u065d\7\u01ff\2\2\u065d\u0668\5\f\7\2\u065e\u0669\5\u00b6\\"+
                    "\2\u065f\u0661\5\u00c4c\2\u0660\u065f\3\2\2\2\u0661\u0664\3\2\2\2\u0662"+
                    "\u0660\3\2\2\2\u0662\u0663\3\2\2\2\u0663\u0665\3\2\2\2\u0664\u0662\3\2"+
                    "\2\2\u0665\u0666\5\u010e\u0088\2\u0666\u0667\7\u020a\2\2\u0667\u0669\3"+
                    "\2\2\2\u0668\u065e\3\2\2\2\u0668\u0662\3\2\2\2\u0669\u0089\3\2\2\2\u066a"+
                    "\u066b\7\u00a2\2\2\u066b\u0677\5\u02c2\u0162\2\u066c\u066d\7\u01fe\2\2"+
                    "\u066d\u0672\5\u00a6T\2\u066e\u066f\7\u0204\2\2\u066f\u0671\5\u00a6T\2"+
                    "\u0670\u066e\3\2\2\2\u0671\u0674\3\2\2\2\u0672\u0670\3\2\2\2\u0672\u0673"+
                    "\3\2\2\2\u0673\u0675\3\2\2\2\u0674\u0672\3\2\2\2\u0675\u0676\7\u01ff\2"+
                    "\2\u0676\u0678\3\2\2\2\u0677\u066c\3\2\2\2\u0677\u0678\3\2\2\2\u0678\u0679"+
                    "\3\2\2\2\u0679\u067a\7\u0149\2\2\u067a\u067b\5\u02e6\u0174\2\u067b\u0686"+
                    "\5\f\7\2\u067c\u0687\5\u00b6\\\2\u067d\u067f\5\u00c4c\2\u067e\u067d\3"+
                    "\2\2\2\u067f\u0682\3\2\2\2\u0680\u067e\3\2\2\2\u0680\u0681\3\2\2\2\u0681"+
                    "\u0683\3\2\2\2\u0682\u0680\3\2\2\2\u0683\u0684\5\u010e\u0088\2\u0684\u0685"+
                    "\7\u020a\2\2\u0685\u0687\3\2\2\2\u0686\u067c\3\2\2\2\u0686\u0680\3\2\2"+
                    "\2\u0687\u008b\3\2\2\2\u0688\u068a\7\u0097\2\2\u0689\u0688\3\2\2\2\u0689"+
                    "\u068a\3\2\2\2\u068a\u068c\3\2\2\2\u068b\u068d\7\u00bc\2\2\u068c\u068b"+
                    "\3\2\2\2\u068c\u068d\3\2\2\2\u068d\u068e\3\2\2\2\u068e\u068f\7M\2\2\u068f"+
                    "\u0690\7\u00a2\2\2\u0690\u06a2\5\u02e6\u0174\2\u0691\u0692\7\u01fe\2\2"+
                    "\u0692\u0693\7\u0160\2\2\u0693\u0694\7\u00ae\2\2\u0694\u0695\7\u011a\2"+
                    "\2\u0695\u0696\5\u02e6\u0174\2\u0696\u0697\7\u0204\2\2\u0697\u0698\3\2"+
                    "\2\2\u0698\u069d\5\u00a6T\2\u0699\u069a\7\u0204\2\2\u069a\u069c\5\u00a6"+
                    "T\2\u069b\u0699\3\2\2\2\u069c\u069f\3\2\2\2\u069d\u069b\3\2\2\2\u069d"+
                    "\u069e\3\2\2\2\u069e\u06a0\3\2\2\2\u069f\u069d\3\2\2\2\u06a0\u06a1\7\u01ff"+
                    "\2\2\u06a1\u06a3\3\2\2\2\u06a2\u0691\3";
    private static final String _serializedATNSegment1 =
            "\2\2\2\u06a2\u06a3\3\2\2\2\u06a3\u06a4\3\2\2\2\u06a4\u06a5\7\u0149\2\2"+
                    "\u06a5\u06a6\7\u0160\2\2\u06a6\u06a7\7\25\2\2\u06a7\u06a8\7\u0147\2\2"+
                    "\u06a8\u06b3\5\f\7\2\u06a9\u06b4\5\u00b6\\\2\u06aa\u06ac\5\u00c4c\2\u06ab"+
                    "\u06aa\3\2\2\2\u06ac\u06af\3\2\2\2\u06ad\u06ab\3\2\2\2\u06ad\u06ae\3\2"+
                    "\2\2\u06ae\u06b0\3\2\2\2\u06af\u06ad\3\2\2\2\u06b0\u06b1\5\u010e\u0088"+
                    "\2\u06b1\u06b2\7\u020a\2\2\u06b2\u06b4\3\2\2\2\u06b3\u06a9\3\2\2\2\u06b3"+
                    "\u06ad\3\2\2\2\u06b4\u008d\3\2\2\2\u06b5\u06b7\7\u0105\2\2\u06b6\u06b5"+
                    "\3\2\2\2\u06b6\u06b7\3\2\2\2\u06b7\u06b8\3\2\2\2\u06b8\u06b9\t\23\2\2"+
                    "\u06b9\u008f\3\2\2\2\u06ba\u06bb\5\u02fc\u017f\2\u06bb\u06bd\5\u02e6\u0174"+
                    "\2\u06bc\u06be\5\u0092J\2\u06bd\u06bc\3\2\2\2\u06bd\u06be\3\2\2\2\u06be"+
                    "\u06c1\3\2\2\2\u06bf\u06c1\5\u0094K\2\u06c0\u06ba\3\2\2\2\u06c0\u06bf"+
                    "\3\2\2\2\u06c1\u0091\3\2\2\2\u06c2\u06c3\7\u0091\2\2\u06c3\u06c4\7\u00ef"+
                    "\2\2\u06c4\u06c5\5\u0202\u0102\2\u06c5\u0093\3\2\2\2\u06c6\u06c8\5\u008e"+
                    "H\2\u06c7\u06c6\3\2\2\2\u06c7\u06c8\3\2\2\2\u06c8\u06ca\3\2\2\2\u06c9"+
                    "\u06cb\5\u0096L\2\u06ca\u06c9\3\2\2\2\u06cb\u06cc\3\2\2\2\u06cc\u06ca"+
                    "\3\2\2\2\u06cc\u06cd\3\2\2\2\u06cd\u06d0\3\2\2\2\u06ce\u06cf\7\u0204\2"+
                    "\2\u06cf\u06d1\5\u00a2R\2\u06d0\u06ce\3\2\2\2\u06d0\u06d1\3\2\2\2\u06d1"+
                    "\u0095\3\2\2\2\u06d2\u06d6\5\u0098M\2\u06d3\u06d6\5\u009eP\2\u06d4\u06d6"+
                    "\5\u00a0Q\2\u06d5\u06d2\3\2\2\2\u06d5\u06d3\3\2\2\2\u06d5\u06d4\3\2\2"+
                    "\2\u06d6\u0097\3\2\2\2\u06d7\u06da\t\22\2\2\u06d8\u06db\5\u009aN\2\u06d9"+
                    "\u06db\5\u009cO\2\u06da\u06d8\3\2\2\2\u06da\u06d9\3\2\2\2\u06db\u0099"+
                    "\3\2\2\2\u06dc\u06dd\7\u0137\2\2\u06dd\u06de\5\u02c4\u0163\2\u06de\u06df"+
                    "\7\u01fe\2\2\u06df\u06e4\5\u00a6T\2\u06e0\u06e1\7\u0204\2\2\u06e1\u06e3"+
                    "\5\u00a6T\2\u06e2\u06e0\3\2\2\2\u06e3\u06e6\3\2\2\2\u06e4\u06e2\3\2\2"+
                    "\2\u06e4\u06e5\3\2\2\2\u06e5\u06e7\3\2\2\2\u06e6\u06e4\3\2\2\2\u06e7\u06eb"+
                    "\7\u01ff\2\2\u06e8\u06e9\5\f\7\2\u06e9\u06ea\5\u00b6\\\2\u06ea\u06ec\3"+
                    "\2\2\2\u06eb\u06e8\3\2\2\2\u06eb\u06ec\3\2\2\2\u06ec\u009b\3\2\2\2\u06ed"+
                    "\u06ee\7\u00a2\2\2\u06ee\u06fa\5\u02c2\u0162\2\u06ef\u06f0\7\u01fe\2\2"+
                    "\u06f0\u06f5\5\u00a6T\2\u06f1\u06f2\7\u0204\2\2\u06f2\u06f4\5\u00a6T\2"+
                    "\u06f3\u06f1\3\2\2\2\u06f4\u06f7\3\2\2\2\u06f5\u06f3\3\2\2\2\u06f5\u06f6"+
                    "\3\2\2\2\u06f6\u06f8\3\2\2\2\u06f7\u06f5\3\2\2\2\u06f8\u06f9\7\u01ff\2"+
                    "\2\u06f9\u06fb\3\2\2\2\u06fa\u06ef\3\2\2\2\u06fa\u06fb\3\2\2\2\u06fb\u06fc"+
                    "\3\2\2\2\u06fc\u0701\7\u0149\2\2\u06fd\u0702\5\u02e6\u0174\2\u06fe\u06ff"+
                    "\7\u0160\2\2\u06ff\u0700\7\25\2\2\u0700\u0702\7\u0147\2\2\u0701\u06fd"+
                    "\3\2\2\2\u0701\u06fe\3\2\2\2\u0702\u070c\3\2\2\2\u0703\u0704\5\f\7\2\u0704"+
                    "\u0705\5\u00b6\\\2\u0705\u070d\3\2\2\2\u0706\u0708\7\u0091\2\2\u0707\u0709"+
                    "\7\u01b2\2\2\u0708\u0707\3\2\2\2\u0708\u0709\3\2\2\2\u0709\u070a\3\2\2"+
                    "\2\u070a\u070b\7\u00ef\2\2\u070b\u070d\5\u0202\u0102\2\u070c\u0703\3\2"+
                    "\2\2\u070c\u0706\3\2\2\2\u070c\u070d\3\2\2\2\u070d\u009d\3\2\2\2\u070e"+
                    "\u0710\7\u0097\2\2\u070f\u070e\3\2\2\2\u070f\u0710\3\2\2\2\u0710\u0712"+
                    "\3\2\2\2\u0711\u0713\7\u00bc\2\2\u0712\u0711\3\2\2\2\u0712\u0713\3\2\2"+
                    "\2\u0713\u0714\3\2\2\2\u0714\u0715\7M\2\2\u0715\u0716\7\u00a2\2\2\u0716"+
                    "\u0728\5\u02e6\u0174\2\u0717\u0718\7\u01fe\2\2\u0718\u0719\7\u0160\2\2"+
                    "\u0719\u071a\7\u00ae\2\2\u071a\u071b\7\u011a\2\2\u071b\u071c\5\u02e6\u0174"+
                    "\2\u071c\u071d\7\u0204\2\2\u071d\u071e\3\2\2\2\u071e\u0723\5\u00a6T\2"+
                    "\u071f\u0720\7\u0204\2\2\u0720\u0722\5\u00a6T\2\u0721\u071f\3\2\2\2\u0722"+
                    "\u0725\3\2\2\2\u0723\u0721\3\2\2\2\u0723\u0724\3\2\2\2\u0724\u0726\3\2"+
                    "\2\2\u0725\u0723\3\2\2\2\u0726\u0727\7\u01ff\2\2\u0727\u0729\3\2\2\2\u0728"+
                    "\u0717\3\2\2\2\u0728\u0729\3\2\2\2\u0729\u072a\3\2\2\2\u072a\u072b\7\u0149"+
                    "\2\2\u072b\u072c\7\u0160\2\2\u072c\u072d\7\25\2\2\u072d\u0731\7\u0147"+
                    "\2\2\u072e\u072f\5\f\7\2\u072f\u0730\5\u00b6\\\2\u0730\u0732\3\2\2\2\u0731"+
                    "\u072e\3\2\2\2\u0731\u0732\3\2\2\2\u0732\u009f\3\2\2\2\u0733\u0734\t\21"+
                    "\2\2\u0734\u0735\7\u00e3\2\2\u0735\u0736\5\u009cO\2\u0736\u00a1\3\2\2"+
                    "\2\u0737\u0738\7\u0132\2\2\u0738\u0739\7\u0146\2\2\u0739\u073a\7\u01fe"+
                    "\2\2\u073a\u073f\5\u00a4S\2\u073b\u073c\7\u0204\2\2\u073c\u073e\5\u00a4"+
                    "S\2\u073d\u073b\3\2\2\2\u073e\u0741\3\2\2\2\u073f\u073d\3\2\2\2\u073f"+
                    "\u0740\3\2\2\2\u0740\u0742\3\2\2\2\u0741\u073f\3\2\2\2\u0742\u0743\7\u01ff"+
                    "\2\2\u0743\u00a3\3\2\2\2\u0744\u0747\5\u02fc\u017f\2\u0745\u0747\7k\2"+
                    "\2\u0746\u0744\3\2\2\2\u0746\u0745\3\2\2\2\u0747\u00a5\3\2\2\2\u0748\u0749"+
                    "\5\u02ae\u0158\2\u0749\u074a\5\u02e6\u0174\2\u074a\u00a7\3\2\2\2\u074b"+
                    "\u074c\7y\2\2\u074c\u074d\7\u0161\2\2\u074d\u074e\5\u02be\u0160\2\u074e"+
                    "\u074f\7\u020a\2\2\u074f\u00a9\3\2\2\2\u0750\u0751\7\20\2\2\u0751\u0752"+
                    "\7\u0161\2\2\u0752\u0754\5\u02be\u0160\2\u0753\u0755\5\u00aeX\2\u0754"+
                    "\u0753\3\2\2\2\u0755\u0756\3\2\2\2\u0756\u0754\3\2\2\2\u0756\u0757\3\2"+
                    "\2\2\u0757\u0758\3\2\2\2\u0758\u0759\7\u020a\2\2\u0759\u00ab\3\2\2\2\u075a"+
                    "\u075b\7V\2\2\u075b\u075c\7\u0161\2\2\u075c\u0761\5\u02be\u0160\2\u075d"+
                    "\u0760\5\u00b0Y\2\u075e\u0760\5\u00aeX\2\u075f\u075d\3\2\2\2\u075f\u075e"+
                    "\3\2\2\2\u0760\u0763\3\2\2\2\u0761\u075f\3\2\2\2\u0761\u0762\3\2\2\2\u0762"+
                    "\u0764\3\2\2\2\u0763\u0761\3\2\2\2\u0764\u0765\7\u020a\2\2\u0765\u00ad"+
                    "\3\2\2\2\u0766\u0767\7\u00b1\2\2\u0767\u0768\7/\2\2\u0768\u0777\7\u01f8"+
                    "\2\2\u0769\u076a\7\u00e1\2\2\u076a\u0777\7\u01f8\2\2\u076b\u0777\7\u0100"+
                    "\2\2\u076c\u076d\7\u00e7\2\2\u076d\u0777\7\u01f8\2\2\u076e\u0777\7\u0101"+
                    "\2\2\u076f\u0777\7]\2\2\u0770\u0777\7\u00fe\2\2\u0771\u0772\7\62\2\2\u0772"+
                    "\u0777\7\u01f8\2\2\u0773\u0777\7\u00fc\2\2\u0774\u0777\7\u0117\2\2\u0775"+
                    "\u0777\7\u0103\2\2\u0776\u0766\3\2\2\2\u0776\u0769\3\2\2\2\u0776\u076b"+
                    "\3\2\2\2\u0776\u076c\3\2\2\2\u0776\u076e\3\2\2\2\u0776\u076f\3\2\2\2\u0776"+
                    "\u0770\3\2\2\2\u0776\u0771\3\2\2\2\u0776\u0773\3\2\2\2\u0776\u0774\3\2"+
                    "\2\2\u0776\u0775\3\2\2\2\u0777\u00af\3\2\2\2\u0778\u0779\7\u017b\2\2\u0779"+
                    "\u077a\7\u01be\2\2\u077a\u077b\7\u01f8\2\2\u077b\u00b1\3\2\2\2\u077c\u077d"+
                    "\7\34\2\2\u077d\u077e\t\24\2\2\u077e\u00b3\3\2\2\2\u077f\u0780\5\u02fc"+
                    "\u017f\2\u0780\u0781\7\u0215\2\2\u0781\u0782\5\u0202\u0102\2\u0782\u00b5"+
                    "\3\2\2\2\u0783\u0786\7\u00ca\2\2\u0784\u0787\5\u00b8]\2\u0785\u0787\5"+
                    "\u00ba^\2\u0786\u0784\3\2\2\2\u0786\u0785\3\2\2\2\u0787\u00b7\3\2\2\2"+
                    "\u0788\u0789\7\u00c7\2\2\u0789\u078a\7\u00ef\2\2\u078a\u078b\7\u01fa\2"+
                    "\2\u078b\u00b9\3\2\2\2\u078c\u078f\7\61\2\2\u078d\u078e\7\u00ef\2\2\u078e"+
                    "\u0790\7\u01fa\2\2\u078f\u078d\3\2\2\2\u078f\u0790\3\2\2\2\u0790\u0791"+
                    "\3\2\2\2\u0791\u0792\7\u00d0\2\2\u0792\u0794\5\u02fc\u017f\2\u0793\u0795"+
                    "\5\u00bc_\2\u0794\u0793\3\2\2\2\u0794\u0795\3\2\2\2\u0795\u0798\3\2\2"+
                    "\2\u0796\u0797\7\u01be\2\2\u0797\u0799\7O\2\2\u0798\u0796\3\2\2\2\u0798"+
                    "\u0799\3\2\2\2\u0799\u079b\3\2\2\2\u079a\u079c\5\u00be`\2\u079b\u079a"+
                    "\3\2\2\2\u079b\u079c\3\2\2\2\u079c\u00bb\3\2\2\2\u079d\u079e\7\r\2\2\u079e"+
                    "\u079f\7\u00ae\2\2\u079f\u07a0\7\u01fe\2\2\u07a0\u07a5\5\u0202\u0102\2"+
                    "\u07a1\u07a2\7\u0204\2\2\u07a2\u07a4\5\u0202\u0102\2\u07a3\u07a1\3\2\2"+
                    "\2\u07a4\u07a7\3\2\2\2\u07a5\u07a3\3\2\2\2\u07a5\u07a6\3\2\2\2\u07a6\u07a8"+
                    "\3\2\2\2\u07a7\u07a5\3\2\2\2\u07a8\u07a9\7\u01ff\2\2\u07a9\u00bd\3\2\2"+
                    "\2\u07aa\u07ab\7\u0120\2\2\u07ab\u07b7\7\u01fe\2\2\u07ac\u07b1\5\u0202"+
                    "\u0102\2\u07ad\u07ae\7\u0204\2\2\u07ae\u07b0\5\u0202\u0102\2\u07af\u07ad"+
                    "\3\2\2\2\u07b0\u07b3\3\2\2\2\u07b1\u07af\3\2\2\2\u07b1\u07b2\3\2\2\2\u07b2"+
                    "\u07b8\3\2\2\2\u07b3\u07b1\3\2\2\2\u07b4\u07b5\7\u01f7\2\2\u07b5\u07b6"+
                    "\7\u01f7\2\2\u07b6\u07b8\7\u01f7\2\2\u07b7\u07ac\3\2\2\2\u07b7\u07b4\3"+
                    "\2\2\2\u07b8\u07b9\3\2\2\2\u07b9\u07ba\7\u01ff\2\2\u07ba\u00bf\3\2\2\2"+
                    "\u07bb\u07bf\5\u02ae\u0158\2\u07bc\u07be\t\25\2\2\u07bd\u07bc\3\2\2\2"+
                    "\u07be\u07c1\3\2\2\2\u07bf\u07bd\3\2\2\2\u07bf\u07c0\3\2\2\2\u07c0\u07c3"+
                    "\3\2\2\2\u07c1\u07bf\3\2\2\2\u07c2\u07c4\5\u02e6\u0174\2\u07c3\u07c2\3"+
                    "\2\2\2\u07c3\u07c4\3\2\2\2\u07c4\u07c6\3\2\2\2\u07c5\u07c7\5\u00c2b\2"+
                    "\u07c6\u07c5\3\2\2\2\u07c6\u07c7\3\2\2\2\u07c7\u00c1\3\2\2\2\u07c8\u07c9"+
                    "\t\26\2\2\u07c9\u07ca\5\u0202\u0102\2\u07ca\u00c3\3\2\2\2\u07cb\u07d6"+
                    "\5\u00c6d\2\u07cc\u07d6\5\u00c8e\2\u07cd\u07d6\5\u00caf\2\u07ce\u07d6"+
                    "\5\u00ceh\2\u07cf\u07d6\5\u00d0i\2\u07d0\u07d6\5\u00d2j\2\u07d1\u07d6"+
                    "\5\u00dan\2\u07d2\u07d6\5\62\32\2\u07d3\u07d6\5\22\n\2\u07d4\u07d6\5\u0288"+
                    "\u0145\2\u07d5\u07cb\3\2\2\2\u07d5\u07cc\3\2\2\2\u07d5\u07cd\3\2\2\2\u07d5"+
                    "\u07ce\3\2\2\2\u07d5\u07cf\3\2\2\2\u07d5\u07d0\3\2\2\2\u07d5\u07d1\3\2"+
                    "\2\2\u07d5\u07d2\3\2\2\2\u07d5\u07d3\3\2\2\2\u07d5\u07d4\3\2\2\2\u07d6"+
                    "\u00c5\3\2\2\2\u07d7\u07d9\5\u02c8\u0165\2\u07d8\u07da\7J\2\2\u07d9\u07d8"+
                    "\3\2\2\2\u07d9\u07da\3\2\2\2\u07da\u07db\3\2\2\2\u07db\u07de\5\u02e6\u0174"+
                    "\2\u07dc\u07dd\7\u0105\2\2\u07dd\u07df\7\u0107\2\2\u07de\u07dc\3\2\2\2"+
                    "\u07de\u07df\3\2\2\2\u07df\u07e1\3\2\2\2\u07e0\u07e2\5\u00c2b\2\u07e1"+
                    "\u07e0\3\2\2\2\u07e1\u07e2\3\2\2\2\u07e2\u07e3\3\2\2\2\u07e3\u07e4\7\u020a"+
                    "\2\2\u07e4\u00c7\3\2\2\2\u07e5\u07e6\7\u0185\2\2\u07e6\u07e7\5\u02bc\u015f"+
                    "\2\u07e7\u07e8\7\u00c4\2\2\u07e8\u07ee\5\u02e6\u0174\2\u07e9\u07ea\7\u0139"+
                    "\2\2\u07ea\u07eb\5\u0202\u0102\2\u07eb\u07ec\7\3\2\2\u07ec\u07ed\5\u0202"+
                    "\u0102\2\u07ed\u07ef\3\2\2\2\u07ee\u07e9\3\2\2\2\u07ee\u07ef\3\2\2\2\u07ef"+
                    "\u07f2\3\2\2\2\u07f0\u07f1\7\u0105\2\2\u07f1\u07f3\7\u0107\2\2\u07f2\u07f0"+
                    "\3\2\2\2\u07f2\u07f3\3\2\2\2\u07f3\u07f4\3\2\2\2\u07f4\u07f5\7\u020a\2"+
                    "\2\u07f5\u00c9\3\2\2\2\u07f6\u07f7\7[\2\2\u07f7\u0803\5\u02cc\u0167\2"+
                    "\u07f8\u07f9\7\u01fe\2\2\u07f9\u07fe\5\u00ccg\2\u07fa\u07fb\7\u0204\2"+
                    "\2\u07fb\u07fd\5\u00ccg\2\u07fc\u07fa\3\2\2\2\u07fd\u0800\3\2\2\2\u07fe"+
                    "\u07fc\3\2\2\2\u07fe\u07ff\3\2\2\2\u07ff\u0801\3\2\2\2\u0800\u07fe\3\2"+
                    "\2\2\u0801\u0802\7\u01ff\2\2\u0802\u0804\3\2\2\2\u0803\u07f8\3\2\2\2\u0803"+
                    "\u0804\3\2\2\2\u0804\u0807\3\2\2\2\u0805\u0806\7\u0149\2\2\u0806\u0808"+
                    "\5\u02e6\u0174\2\u0807\u0805\3\2\2\2\u0807\u0808\3\2\2\2\u0808\u080b\3"+
                    "\2\2\2\u0809\u080a\7\u00c4\2\2\u080a\u080c\5\u013e\u00a0\2\u080b\u0809"+
                    "\3\2\2\2\u080b\u080c\3\2\2\2\u080c\u080d\3\2\2\2\u080d\u080e\7\u020a\2"+
                    "\2\u080e\u00cb\3\2\2\2\u080f\u0814\5\u02ae\u0158\2\u0810\u0812\7\u00ae"+
                    "\2\2\u0811\u0810\3\2\2\2\u0811\u0812\3\2\2\2\u0812\u0813\3\2\2\2\u0813"+
                    "\u0815\5\u02e6\u0174\2\u0814\u0811\3\2\2\2\u0814\u0815\3\2\2\2\u0815\u0817"+
                    "\3\2\2\2\u0816\u0818\5\u00c2b\2\u0817\u0816\3\2\2\2\u0817\u0818\3\2\2"+
                    "\2\u0818\u00cd\3\2\2\2\u0819\u081a\5\u02c0\u0161\2\u081a\u081b\7\u0088"+
                    "\2\2\u081b\u081c\7\u020a\2\2\u081c\u00cf\3\2\2\2\u081d\u083f\7\u0132\2"+
                    "\2\u081e\u0840\7\u0164\2\2\u081f\u0840\7\37\2\2\u0820\u0821\7\u0089\2"+
                    "\2\u0821\u0822\7\u01fe\2\2\u0822\u0823\5\u02c0\u0161\2\u0823\u0825\7\u0204"+
                    "\2\2\u0824\u0826\7\u0203\2\2\u0825\u0824\3\2\2\2\u0825\u0826\3\2\2\2\u0826"+
                    "\u0827\3\2\2\2\u0827\u0828\5\u02f8\u017d\2\u0828\u0829\7\u01ff\2\2\u0829"+
                    "\u0840\3\2\2\2\u082a\u082b\7\u00b8\2\2\u082b\u082c\7\u01fe\2\2\u082c\u082d"+
                    "\5\u02fc\u017f\2\u082d\u082e\7\u0204\2\2\u082e\u082f\5\u0202\u0102\2\u082f"+
                    "\u0830\7\u01ff\2\2\u0830\u0840\3\2\2\2\u0831\u0832\7\u0146\2\2\u0832\u0835"+
                    "\7\u01fe\2\2\u0833\u0836\5\u02fc\u017f\2\u0834\u0836\7k\2\2\u0835\u0833"+
                    "\3\2\2\2\u0835\u0834\3\2\2\2\u0836\u0839\3\2\2\2\u0837\u0838\7\u0204\2"+
                    "\2\u0838\u083a\5\u02fc\u017f\2\u0839\u0837\3\2\2\2\u083a\u083b\3\2\2\2"+
                    "\u083b\u0839\3\2\2\2\u083b\u083c\3\2\2\2\u083c\u083d\3\2\2\2\u083d\u083e"+
                    "\7\u01ff\2\2\u083e\u0840\3\2\2\2\u083f\u081e\3\2\2\2\u083f\u081f\3\2\2"+
                    "\2\u083f\u0820\3\2\2\2\u083f\u082a\3\2\2\2\u083f\u0831\3\2\2\2\u0840\u0841"+
                    "\3\2\2\2\u0841\u0842\7\u020a\2\2\u0842\u00d1\3\2\2\2\u0843\u0846\5\u00d4"+
                    "k\2\u0844\u0846\5\u00d8m\2\u0845\u0843\3\2\2\2\u0845\u0844\3\2\2\2\u0846"+
                    "\u00d3\3\2\2\2\u0847\u0848\7\u019f\2\2\u0848\u0849\5\u02bc\u015f\2\u0849"+
                    "\u085c\7\u00c4\2\2\u084a\u084b\7\u013d\2\2\u084b\u084c\7\u01fe\2\2\u084c"+
                    "\u0851\5\u00d6l\2\u084d\u084e\7\u0204\2\2\u084e\u0850\5\u00d6l\2\u084f"+
                    "\u084d\3\2\2\2\u0850\u0853\3\2\2\2\u0851\u084f\3\2\2\2\u0851\u0852\3\2"+
                    "\2\2\u0852\u0854\3\2\2\2\u0853\u0851\3\2\2\2\u0854\u0855\7\u01ff\2\2\u0855"+
                    "\u085d\3\2\2\2\u0856\u0857\7\u013e\2\2\u0857\u085a\7[\2\2\u0858\u0859"+
                    "\7\u0149\2\2\u0859\u085b\5\u02e6\u0174\2\u085a\u0858\3\2\2\2\u085a\u085b"+
                    "\3\2\2\2\u085b\u085d\3\2\2\2\u085c\u084a\3\2\2\2\u085c\u0856\3\2\2\2\u085d"+
                    "\u085e\3\2\2\2\u085e\u085f\7\u020a\2\2\u085f\u00d5\3\2\2\2\u0860\u0862"+
                    "\5\u02d4\u016b\2\u0861\u0863\5\u02e6\u0174\2\u0862\u0861\3\2\2\2\u0862"+
                    "\u0863\3\2\2\2\u0863\u0866\3\2\2\2\u0864\u0865\7\u0105\2\2\u0865\u0867"+
                    "\7\u0107\2\2\u0866\u0864\3\2\2\2\u0866\u0867\3\2\2\2\u0867\u0869\3\2\2"+
                    "\2\u0868\u086a\5\u00c2b\2\u0869\u0868\3\2\2\2\u0869\u086a\3\2\2\2\u086a"+
                    "\u00d7\3\2\2\2\u086b\u086c\5\u02ce\u0168\2\u086c\u086f\5\u02bc\u015f\2"+
                    "\u086d\u086e\7\u0206\2\2\u086e\u0870\5\u02d2\u016a\2\u086f\u086d\3\2\2"+
                    "\2\u086f\u0870\3\2\2\2\u0870\u0876\3\2\2\2\u0871\u0877\7\u0126\2\2\u0872"+
                    "\u0874\7\u0127\2\2\u0873\u0875\5\u00c2b\2\u0874\u0873\3\2\2\2\u0874\u0875"+
                    "\3\2\2\2\u0875\u0877\3\2\2\2\u0876\u0871\3\2\2\2\u0876\u0872\3\2\2\2\u0877"+
                    "\u0878\3\2\2\2\u0878\u0879\7\u020a\2\2\u0879\u00d9\3\2\2\2\u087a\u087d"+
                    "\5\u00dco\2\u087b\u087d\5\u00e2r\2\u087c\u087a\3\2\2\2\u087c\u087b\3\2"+
                    "\2\2\u087d\u087e\3\2\2\2\u087e\u087f\7\u020a\2\2\u087f\u00db\3\2\2\2\u0880"+
                    "\u0881\7\u019f\2\2\u0881\u0882\5\u02bc\u015f\2\u0882\u088e\7\u00c4\2\2"+
                    "\u0883\u0884\7\u0188\2\2\u0884\u0885\7\u010d\2\2\u0885\u0887\5\u02e6\u0174"+
                    "\2\u0886\u0888\5\u00dep\2\u0887\u0886\3\2\2\2\u0887\u0888\3\2\2\2\u0888"+
                    "\u088b\3\2\2\2\u0889\u088a\7\u0105\2\2\u088a\u088c\7\u0107\2\2\u088b\u0889"+
                    "\3\2\2\2\u088b\u088c\3\2\2\2\u088c\u088f\3\2\2\2\u088d\u088f\5\u00e0q"+
                    "\2\u088e\u0883\3\2\2\2\u088e\u088d\3\2\2\2\u088f\u00dd\3\2\2\2\u0890\u0893"+
                    "\7\u00b4\2\2\u0891\u0893\7\u00b3\2\2\u0892\u0890\3\2\2\2\u0892\u0891\3"+
                    "\2\2\2\u0893\u0894\3\2\2\2\u0894\u0895\7/\2\2\u0895\u0896\5\u02e6\u0174"+
                    "\2\u0896\u00df\3\2\2\2\u0897\u089b\7\u01b3\2\2\u0898\u0899\7\u01b4\2\2"+
                    "\u0899\u089b\7\24\2\2\u089a\u0897\3\2\2\2\u089a\u0898\3\2\2\2\u089b\u089c"+
                    "\3\2\2\2\u089c\u089d\7\u01fe\2\2\u089d\u089e\5\u0202\u0102\2\u089e\u089f"+
                    "\7\u01ff\2\2\u089f\u08a0\7\u010d\2\2\u08a0\u08a3\5\u02e6\u0174\2\u08a1"+
                    "\u08a2\7\u0105\2\2\u08a2\u08a4\7\u0107\2\2\u08a3\u08a1\3\2\2\2\u08a3\u08a4"+
                    "\3\2\2\2\u08a4\u00e1\3\2\2\2\u08a5\u08a6\5\u02a4\u0153\2\u08a6\u08a7\5"+
                    "\u02e6\u0174\2\u08a7\u00e3\3\2\2\2\u08a8\u08a9\5\u00e8u\2\u08a9\u08aa"+
                    "\7\u020a\2\2\u08aa\u08ae\3\2\2\2\u08ab\u08ae\5\u00e6t\2\u08ac\u08ae\5"+
                    "\u0288\u0145\2\u08ad\u08a8\3\2\2\2\u08ad\u08ab\3\2\2\2\u08ad\u08ac\3\2"+
                    "\2\2\u08ae\u08af\3\2\2\2\u08af\u08ad\3\2\2\2\u08af\u08b0\3\2\2\2\u08b0"+
                    "\u00e5\3\2\2\2\u08b1\u08b2\7\u020c\2\2\u08b2\u08b3\7\u020c\2\2\u08b3\u08b4"+
                    "\5\u02ba\u015e\2\u08b4\u08b5\7\u0212\2\2\u08b5\u08b6\7\u0212\2\2\u08b6"+
                    "\u00e7\3\2\2\2\u08b7\u08b8\7V\2\2\u08b8\u08d3\5\2\2\2\u08b9\u08ba\7\20"+
                    "\2\2\u08ba\u08d3\5\2\2\2\u08bb\u08bc\7\u00a4\2\2\u08bc\u08d3\5\2\2\2\u08bd"+
                    "\u08be\7\u019e\2\2\u08be\u08d3\5\2\2\2\u08bf\u08c0\7\u0132\2\2\u08c0\u08d3"+
                    "\5\2\2\2\u08c1\u08d3\5\u010e\u0088\2\u08c2\u08d3\5\u011a\u008e\2\u08c3"+
                    "\u08d3\5\u00eav\2\u08c4\u08d3\5\u00ecw\2\u08c5\u08d3\5\u00eex\2\u08c6"+
                    "\u08d3\5\u00f0y\2\u08c7\u08d3\5\u00f2z\2\u08c8\u08d3\5\u00f8}\2\u08c9"+
                    "\u08d3\5\u00fc\177\2\u08ca\u08d3\5\u0106\u0084\2\u08cb\u08d3\5\u0108\u0085"+
                    "\2\u08cc\u08d3\5\u010a\u0086\2\u08cd\u08d3\5\u0238\u011d\2\u08ce\u08d3"+
                    "\5\u011c\u008f\2\u08cf\u08d3\5\u010c\u0087\2\u08d0\u08d3\5\u0112\u008a"+
                    "\2\u08d1\u08d3\5\u0110\u0089\2\u08d2\u08b7\3\2\2\2\u08d2\u08b9\3\2\2\2"+
                    "\u08d2\u08bb\3\2\2\2\u08d2\u08bd\3\2\2\2\u08d2\u08bf\3\2\2\2\u08d2\u08c1"+
                    "\3\2\2\2\u08d2\u08c2\3\2\2\2\u08d2\u08c3\3\2\2\2\u08d2\u08c4\3\2\2\2\u08d2"+
                    "\u08c5\3\2\2\2\u08d2\u08c6\3\2\2\2\u08d2\u08c7\3\2\2\2\u08d2\u08c8\3\2"+
                    "\2\2\u08d2\u08c9\3\2\2\2\u08d2\u08ca\3\2\2\2\u08d2\u08cb\3\2\2\2\u08d2"+
                    "\u08cc\3\2\2\2\u08d2\u08cd\3\2\2\2\u08d2\u08ce\3\2\2\2\u08d2\u08cf\3\2"+
                    "\2\2\u08d2\u08d0\3\2\2\2\u08d2\u08d1\3\2\2\2\u08d3\u00e9\3\2\2\2\u08d4"+
                    "\u08d8\5\u01f8\u00fd\2\u08d5\u08d8\5\u02f0\u0179\2\u08d6\u08d8\5\u02ee"+
                    "\u0178\2\u08d7\u08d4\3\2\2\2\u08d7\u08d5\3\2\2\2\u08d7\u08d6\3\2\2\2\u08d8"+
                    "\u08d9\3\2\2\2\u08d9\u08da\7\u0207\2\2\u08da\u08db\5\u0202\u0102\2\u08db"+
                    "\u00eb\3\2\2\2\u08dc\u08de\7P\2\2\u08dd\u08df\5\u02ba\u015e\2\u08de\u08dd"+
                    "\3\2\2\2\u08de\u08df\3\2\2\2\u08df\u08e2\3\2\2\2\u08e0\u08e1\7\u01ba\2"+
                    "\2\u08e1\u08e3\5\u01fe\u0100\2\u08e2\u08e0\3\2\2\2\u08e2\u08e3\3\2\2\2"+
                    "\u08e3\u00ed\3\2\2\2\u08e4\u08e6\7\u008f\2\2\u08e5\u08e7\5\u02ba\u015e"+
                    "\2\u08e6\u08e5\3\2\2\2\u08e6\u08e7\3\2\2\2\u08e7\u08ea\3\2\2\2\u08e8\u08e9"+
                    "\7\u01ba\2\2\u08e9\u08eb\5\u01fe\u0100\2\u08ea\u08e8\3\2\2\2\u08ea\u08eb"+
                    "\3\2\2\2\u08eb\u00ef\3\2\2\2\u08ec\u08ed\7\u00a3\2\2\u08ed\u08ee\5\u02ba"+
                    "\u015e\2\u08ee\u00f1\3\2\2\2\u08ef\u08f0\7\u00ab\2\2\u08f0\u08f1\5\u01fe"+
                    "\u0100\2\u08f1\u08f2\7\u018a\2\2\u08f2\u08f6\5\u00e4s\2\u08f3\u08f5\5"+
                    "\u00f4{\2\u08f4\u08f3\3\2\2\2\u08f5\u08f8\3\2\2\2\u08f6\u08f4\3\2\2\2"+
                    "\u08f6\u08f7\3\2\2\2\u08f7\u08fa\3\2\2\2\u08f8\u08f6\3\2\2\2\u08f9\u08fb"+
                    "\5\u00f6|\2\u08fa\u08f9\3\2\2\2\u08fa\u08fb\3\2\2\2\u08fb\u08fc\3\2\2"+
                    "\2\u08fc\u08fd\7\u0082\2\2\u08fd\u08fe\7\u00ab\2\2\u08fe\u00f3\3\2\2\2"+
                    "\u08ff\u0900\7~\2\2\u0900\u0901\5\u01fe\u0100\2\u0901\u0902\7\u018a\2"+
                    "\2\u0902\u0903\5\u00e4s\2\u0903\u00f5\3\2\2\2\u0904\u0905\7}\2\2\u0905"+
                    "\u0906\5\u00e4s\2\u0906\u00f7\3\2\2\2\u0907\u0909\5\u02ba\u015e\2\u0908"+
                    "\u0907\3\2\2\2\u0908\u0909\3\2\2\2\u0909\u090e\3\2\2\2\u090a\u090b\7\u01bd"+
                    "\2\2\u090b\u090f\5\u01fe\u0100\2\u090c\u090d\7\u009d\2\2\u090d\u090f\5"+
                    "\u00fa~\2\u090e\u090a\3\2\2\2\u090e\u090c\3\2\2\2\u090e\u090f\3\2\2\2"+
                    "\u090f\u0910\3\2\2\2\u0910\u0911\7\u00dd\2\2\u0911\u0912\5\u00e4s\2\u0912"+
                    "\u0913\7\u0082\2\2\u0913\u0915\7\u00dd\2\2\u0914\u0916\5\u02ba\u015e\2"+
                    "\u0915\u0914\3\2\2\2\u0915\u0916\3\2\2\2\u0916\u00f9\3\2\2\2\u0917\u0918"+
                    "\5\u02ca\u0166\2\u0918\u091a\7\u00ae\2\2\u0919\u091b\7\u014c\2\2\u091a"+
                    "\u0919\3\2\2\2\u091a\u091b\3\2\2\2\u091b\u091c\3\2\2\2\u091c\u091d\5\u0102"+
                    "\u0082\2\u091d\u091e\7\3\2\2\u091e\u091f\5\u0104\u0083\2\u091f\u092d\3"+
                    "\2\2\2\u0920\u0921\5\u02ce\u0168\2\u0921\u092a\7\u00ae\2\2\u0922\u0924"+
                    "\5\u02cc\u0167\2\u0923\u0925\5\u01fc\u00ff\2\u0924\u0923\3\2\2\2\u0924"+
                    "\u0925\3\2\2\2\u0925\u092b\3\2\2\2\u0926\u0927\7\u01fe\2\2\u0927\u0928"+
                    "\5\u013e\u00a0\2\u0928\u0929\7\u01ff\2\2\u0929\u092b\3\2\2\2\u092a\u0922"+
                    "\3\2\2\2\u092a\u0926\3\2\2\2\u092b\u092d\3\2\2\2\u092c\u0917\3\2\2\2\u092c"+
                    "\u0920\3\2\2\2\u092d\u00fb\3\2\2\2\u092e\u092f\7\u009e\2\2\u092f\u0930"+
                    "\5\u02ca\u0166\2\u0930\u0931\7\u00ae\2\2\u0931\u0932\5\u00fe\u0080\2\u0932"+
                    "\u0935\5\u011c\u008f\2\u0933\u0934\7\u0156\2\2\u0934\u0936\7\u008a\2\2"+
                    "\u0935\u0933\3\2\2\2\u0935\u0936\3\2\2\2\u0936\u00fd\3\2\2\2\u0937\u0938"+
                    "\5\u0102\u0082\2\u0938\u0939\7\3\2\2\u0939\u093a\5\u0104\u0083\2\u093a"+
                    "\u0945\3\2\2\2\u093b\u093c\7\u00b6\2\2\u093c\u093d\7\u010d\2\2\u093d\u093f"+
                    "\5\u02d0\u0169\2\u093e\u0940\5\u0100\u0081\2\u093f\u093e\3\2\2\2\u093f"+
                    "\u0940\3\2\2\2\u0940\u0945\3\2\2\2\u0941\u0942\7\u01af\2\2\u0942\u0943"+
                    "\7\u010d\2\2\u0943\u0945\5\u02ca\u0166\2\u0944\u0937\3\2\2\2\u0944\u093b"+
                    "\3\2\2\2\u0944\u0941\3\2\2\2\u0945\u00ff\3\2\2\2\u0946\u0947\7#\2\2\u0947"+
                    "\u0948\5\u0102\u0082\2\u0948\u0949\7\22\2\2\u0949\u094a\5\u0104\u0083"+
                    "\2\u094a\u0101\3\2\2\2\u094b\u094c\5\u021e\u0110\2\u094c\u0103\3\2\2\2"+
                    "\u094d\u094e\5\u021e\u0110\2\u094e\u0105\3\2\2\2\u094f\u0950\7\u0107\2"+
                    "\2\u0950\u0107\3\2\2\2\u0951\u0953\7\u0138\2\2\u0952\u0954\5\u02c0\u0161"+
                    "\2\u0953\u0952\3\2\2\2\u0953\u0954\3\2\2\2\u0954\u0109\3\2\2\2\u0955\u0957"+
                    "\7\u0149\2\2\u0956\u0958\5\u01fe\u0100\2\u0957\u0956\3\2\2\2\u0957\u0958"+
                    "\3\2\2\2\u0958\u010b\3\2\2\2\u0959\u095b\7\63\2\2\u095a\u0959\3\2\2\2"+
                    "\u095a\u095b\3\2\2\2\u095b\u095c\3\2\2\2\u095c\u095e\5\u02a8\u0155\2\u095d"+
                    "\u095f\5\u02dc\u016f\2\u095e\u095d\3\2\2\2\u095e\u095f\3\2\2\2\u095f\u010d"+
                    "\3\2\2\2\u0960\u0961\7\"\2\2\u0961\u0963\5\u00e4s\2\u0962\u0964\5\u0114"+
                    "\u008b\2\u0963\u0962\3\2\2\2\u0963\u0964\3\2\2\2\u0964\u0965\3\2\2\2\u0965"+
                    "\u0967\7\u0082\2\2\u0966\u0968\5\u02ba\u015e\2\u0967\u0966\3\2\2\2\u0967"+
                    "\u0968\3\2\2\2\u0968\u010f\3\2\2\2\u0969\u096a\5\u01f8\u00fd\2\u096a\u096b"+
                    "\7\u01f7\2\2\u096b\u0975\7o\2\2\u096c\u0972\7\u01fe\2\2\u096d\u0970\5"+
                    "\u0202\u0102\2\u096e\u096f\7\u0204\2\2\u096f\u0971\5\u0202\u0102\2\u0970"+
                    "\u096e\3\2\2\2\u0970\u0971\3\2\2\2\u0971\u0973\3\2\2\2\u0972\u096d\3\2"+
                    "\2\2\u0972\u0973\3\2\2\2\u0973\u0974\3\2\2\2\u0974\u0976\7\u01ff\2\2\u0975"+
                    "\u096c\3\2\2\2\u0975\u0976\3\2\2\2\u0976\u0990\3\2\2\2\u0977\u0978\5\u01f8"+
                    "\u00fd\2\u0978\u0979\7\u01f7\2\2\u0979\u0983\7\u0092\2\2\u097a\u0980\7"+
                    "\u01fe\2\2\u097b\u097e\5\u0202\u0102\2\u097c\u097d\7\u0204\2\2\u097d\u097f"+
                    "\5\u0202\u0102\2\u097e\u097c\3\2\2\2\u097e\u097f\3\2\2\2\u097f\u0981\3"+
                    "\2\2\2\u0980\u097b\3\2\2\2\u0980\u0981\3\2\2\2\u0981\u0982\3\2\2\2\u0982"+
                    "\u0984\7\u01ff\2\2\u0983\u097a\3\2\2\2\u0983\u0984\3\2\2\2\u0984\u0990"+
                    "\3\2\2\2\u0985\u0986\5\u01f8\u00fd\2\u0986\u0987\7\u01f7\2\2\u0987\u098d"+
                    "\7\u019c\2\2\u0988\u098a\7\u01fe\2\2\u0989\u098b\5\u0202\u0102\2\u098a"+
                    "\u0989\3\2\2\2\u098a\u098b\3\2\2\2\u098b\u098c\3\2\2\2\u098c\u098e\7\u01ff"+
                    "\2\2\u098d\u0988\3\2\2\2\u098d\u098e\3\2\2\2\u098e\u0990\3\2\2\2\u098f"+
                    "\u0969\3\2\2\2\u098f\u0977\3\2\2\2\u098f\u0985\3\2\2\2\u0990\u0111\3\2"+
                    "\2\2\u0991\u0992\7\u012c\2\2\u0992\u0993\7\u0151\2\2\u0993\u0994\7\u01fe"+
                    "\2\2\u0994\u0995\5\u0202\u0102\2\u0995\u0996\7\u01ff\2\2\u0996\u0113\3"+
                    "\2\2\2\u0997\u0999\7\u0088\2\2\u0998\u099a\5\u0116\u008c\2\u0999\u0998"+
                    "\3\2\2\2\u099a\u099b\3\2\2\2\u099b\u0999\3\2\2\2\u099b\u099c\3\2\2\2\u099c"+
                    "\u0115\3\2\2\2\u099d\u099e\7\u01ba\2\2\u099e\u09a3\5\u02c0\u0161\2\u099f"+
                    "\u09a0\7\u0115\2\2\u09a0\u09a2\5\u02c0\u0161\2\u09a1\u099f\3\2\2\2\u09a2"+
                    "\u09a5\3\2\2\2\u09a3\u09a1\3\2\2\2\u09a3\u09a4\3\2\2\2\u09a4\u09a6\3\2"+
                    "\2\2\u09a5\u09a3\3\2\2\2\u09a6\u09a7\7\u018a\2\2\u09a7\u09a8\5\u00e4s"+
                    "\2\u09a8\u0117\3\2\2\2\u09a9\u09ab\5\n\6\2\u09aa\u09a9\3\2\2\2\u09aa\u09ab"+
                    "\3\2\2\2\u09ab\u09ac\3\2\2\2\u09ac\u09ad\5\u010e\u0088\2\u09ad\u0119\3"+
                    "\2\2\2\u09ae\u09b0\5\n\6\2\u09af\u09ae\3\2\2\2\u09af\u09b0\3\2\2\2\u09b0"+
                    "\u09b1\3\2\2\2\u09b1\u09b2\5\u010e\u0088\2\u09b2\u011b\3\2\2\2\u09b3\u09b8"+
                    "\5\u011e\u0090\2\u09b4\u09b8\5\u0122\u0092\2\u09b5\u09b8\5\u0124\u0093"+
                    "\2\u09b6\u09b8\5\u012e\u0098\2\u09b7\u09b3\3\2\2\2\u09b7\u09b4\3\2\2\2"+
                    "\u09b7\u09b5\3\2\2\2\u09b7\u09b6\3\2\2\2\u09b8\u011d\3\2\2\2\u09b9\u09ba"+
                    "\7\u008d\2\2\u09ba\u09bb\7\u00ad\2\2\u09bb\u09c5\5\u0202\u0102\2\u09bc"+
                    "\u09be\5\u0298\u014d\2\u09bd\u09bf\5\u0264\u0133\2\u09be\u09bd\3\2\2\2"+
                    "\u09be\u09bf\3\2\2\2\u09bf\u09c6\3\2\2\2\u09c0\u09c2\5\u0264\u0133\2\u09c1"+
                    "\u09c3\5\u0120\u0091\2\u09c2\u09c1\3\2\2\2\u09c2\u09c3\3\2\2\2\u09c3\u09c6"+
                    "\3\2\2\2\u09c4\u09c6\5\u0120\u0091\2\u09c5\u09bc\3\2\2\2\u09c5\u09c0\3"+
                    "\2\2\2\u09c5\u09c4\3\2\2\2\u09c5\u09c6\3\2\2\2\u09c6\u011f\3\2\2\2\u09c7"+
                    "\u09c8\t\27\2\2\u09c8\u09c9\5\u0298\u014d\2\u09c9\u0121\3\2\2\2\u09ca"+
                    "\u09d2\5\u01cc\u00e7\2\u09cb\u09d2\5\u01d8\u00ed\2\u09cc\u09d2\5\u013e"+
                    "\u00a0\2\u09cd\u09d2\5\u01b2\u00da\2\u09ce\u09d2\5\u01b8\u00dd\2\u09cf"+
                    "\u09d2\5\u01ba\u00de\2\u09d0\u09d2\5\u013c\u009f\2\u09d1\u09ca\3\2\2\2"+
                    "\u09d1\u09cb\3\2\2\2\u09d1\u09cc\3\2\2\2\u09d1\u09cd\3\2\2\2\u09d1\u09ce"+
                    "\3\2\2\2\u09d1\u09cf\3\2\2\2\u09d1\u09d0\3\2\2\2\u09d2\u0123\3\2\2\2\u09d3"+
                    "\u09d8\5\u0126\u0094\2\u09d4\u09d8\5\u0128\u0095\2\u09d5\u09d8\5\u012a"+
                    "\u0096\2\u09d6\u09d8\5\u012c\u0097\2\u09d7\u09d3\3\2\2\2\u09d7\u09d4\3"+
                    "\2\2\2\u09d7\u09d5\3\2\2\2\u09d7\u09d6\3\2\2\2\u09d8\u0125\3\2\2\2\u09d9"+
                    "\u09da\7>\2\2\u09da\u09db\5\u02cc\u0167\2\u09db\u0127\3\2\2\2\u09dc\u09dd"+
                    "\7\u0113\2\2\u09dd\u09df\5\u02cc\u0167\2\u09de\u09e0\5\u01fc\u00ff\2\u09df"+
                    "\u09de\3\2\2\2\u09df\u09e0\3\2\2\2\u09e0\u0129\3\2\2\2\u09e1\u09e2\7\u0096"+
                    "\2\2\u09e2\u09fe\5\u02cc\u0167\2\u09e3\u09e4\7\u00c2\2\2\u09e4\u09e9\5"+
                    "\u02c8\u0165\2\u09e5\u09e6\7\u0204\2\2\u09e6\u09e8\5\u02c8\u0165\2\u09e7"+
                    "\u09e5\3\2\2\2\u09e8\u09eb\3\2\2\2\u09e9\u09e7\3\2\2\2\u09e9\u09ea\3\2"+
                    "\2\2\u09ea\u09ff\3\2\2\2\u09eb\u09e9\3\2\2\2\u09ec\u09ed\7.\2\2\u09ed"+
                    "\u09ee\7@\2\2\u09ee\u09ef\7\u00c2\2\2\u09ef\u09f4\5\u02c8\u0165\2\u09f0"+
                    "\u09f1\7\u0204\2\2\u09f1\u09f3\5\u02c8\u0165\2\u09f2\u09f0\3\2\2\2\u09f3"+
                    "\u09f6\3\2\2\2\u09f4\u09f2\3\2\2\2\u09f4\u09f5\3\2\2\2\u09f5\u09fc\3\2"+
                    "\2\2\u09f6\u09f4\3\2\2\2\u09f7\u09fa\7\u00d5\2\2\u09f8\u09fb\5\u02c8\u0165"+
                    "\2\u09f9\u09fb\5\u02f8\u017d\2\u09fa\u09f8\3\2\2\2\u09fa\u09f9\3\2\2\2"+
                    "\u09fb\u09fd\3\2\2\2\u09fc\u09f7\3\2\2\2\u09fc\u09fd\3\2\2\2\u09fd\u09ff"+
                    "\3\2\2\2\u09fe\u09e3\3\2\2\2\u09fe\u09ec\3\2\2\2\u09ff\u012b\3\2\2\2\u0a00"+
                    "\u0a01\7\u0113\2\2\u0a01\u0a02\5\u02c8\u0165\2\u0a02\u0a05\7\u009d\2\2"+
                    "\u0a03\u0a06\5\u013e\u00a0\2\u0a04\u0a06\5\u0202\u0102\2\u0a05\u0a03\3"+
                    "\2\2\2\u0a05\u0a04\3\2\2\2\u0a06\u0a08\3\2\2\2\u0a07\u0a09\5\u0264\u0133"+
                    "\2\u0a08\u0a07\3\2\2\2\u0a08\u0a09\3\2\2\2\u0a09\u012d\3\2\2\2\u0a0a\u0a10"+
                    "\5\u0130\u0099\2\u0a0b\u0a10\5\u0132\u009a\2\u0a0c\u0a10\5\u0134\u009b"+
                    "\2\u0a0d\u0a10\5\u0138\u009d\2\u0a0e\u0a10\5\u013a\u009e\2\u0a0f\u0a0a"+
                    "\3\2\2\2\u0a0f\u0a0b\3\2\2\2\u0a0f\u0a0c\3\2\2\2\u0a0f\u0a0d\3\2\2\2\u0a0f"+
                    "\u0a0e\3\2\2\2\u0a10\u012f\3\2\2\2\u0a11\u0a12\7\u0167\2\2\u0a12\u0a20"+
                    "\7\u0198\2\2\u0a13\u0a14\7\u013b\2\2\u0a14\u0a21\t\30\2\2\u0a15\u0a16"+
                    "\7\u00c5\2\2\u0a16\u0a1a\7\u00cf\2\2\u0a17\u0a1b\7\u0163\2\2\u0a18\u0a19"+
                    "\7\u013b\2\2\u0a19\u0a1b\7D\2\2\u0a1a\u0a17\3\2\2\2\u0a1a\u0a18\3\2\2"+
                    "\2\u0a1b\u0a21\3\2\2\2\u0a1c\u0a1d\7\u01ab\2\2\u0a1d\u0a1e\7\u014f\2\2"+
                    "\u0a1e\u0a1f\7\u015e\2\2\u0a1f\u0a21\5\u02a2\u0152\2\u0a20\u0a13\3\2\2"+
                    "\2\u0a20\u0a15\3\2\2\2\u0a20\u0a1c\3\2\2\2\u0a20\u0a21\3\2\2\2\u0a21\u0a24"+
                    "\3\2\2\2\u0a22\u0a23\7\u00ef\2\2\u0a23\u0a25\5\u02fa\u017e\2\u0a24\u0a22"+
                    "\3\2\2\2\u0a24\u0a25\3\2\2\2\u0a25\u0131\3\2\2\2\u0a26\u0a27\7\u0167\2"+
                    "\2\u0a27\u0a31\t\31\2\2\u0a28\u0a32\7\17\2\2\u0a29\u0a2e\5\u02b8\u015d"+
                    "\2\u0a2a\u0a2b\7\u0204\2\2\u0a2b\u0a2d\5\u02b8\u015d\2\u0a2c\u0a2a\3\2"+
                    "\2\2\u0a2d\u0a30\3\2\2\2\u0a2e\u0a2c\3\2\2\2\u0a2e\u0a2f\3\2\2\2\u0a2f"+
                    "\u0a32\3\2\2\2\u0a30\u0a2e\3\2\2\2\u0a31\u0a28\3\2\2\2\u0a31\u0a29\3\2"+
                    "\2\2\u0a32\u0a33\3\2\2\2\u0a33\u0a34\t\32\2\2\u0a34\u0133\3\2\2\2\u0a35"+
                    "\u0a37\7C\2\2\u0a36\u0a38\7\u01c0\2\2\u0a37\u0a36\3\2\2\2\u0a37\u0a38"+
                    "\3\2\2\2\u0a38\u0a46\3\2\2\2\u0a39\u0a3a\7B\2\2\u0a3a\u0a47\5\u0202\u0102"+
                    "\2\u0a3b\u0a44\7\u009f\2\2\u0a3c\u0a3d\7R\2\2\u0a3d\u0a45\5\u0202\u0102"+
                    "\2\u0a3e\u0a45\7S\2\2\u0a3f\u0a42\5\u0202\u0102\2\u0a40\u0a41\7\u0204"+
                    "\2\2\u0a41\u0a43\5\u0202\u0102\2\u0a42\u0a40\3\2\2\2\u0a42\u0a43\3\2\2"+
                    "\2\u0a43\u0a45\3\2\2\2\u0a44\u0a3c\3\2\2\2\u0a44\u0a3e\3\2\2\2\u0a44\u0a3f"+
                    "\3\2\2\2\u0a45\u0a47\3\2\2\2\u0a46\u0a39\3\2\2\2\u0a46\u0a3b\3\2\2\2\u0a46"+
                    "\u0a47\3\2\2\2\u0a47\u0a49\3\2\2\2\u0a48\u0a4a\5\u0136\u009c\2\u0a49\u0a48"+
                    "\3\2\2\2\u0a49\u0a4a\3\2\2\2\u0a4a\u0135\3\2\2\2\u0a4b\u0a4d\7\u01c1\2"+
                    "\2\u0a4c\u0a4e\t\33\2\2\u0a4d\u0a4c\3\2\2\2\u0a4d\u0a4e\3\2\2\2\u0a4e"+
                    "\u0a50\3\2\2\2\u0a4f\u0a51\t\34\2\2\u0a50\u0a4f\3\2\2\2\u0a50\u0a51\3"+
                    "\2\2\2\u0a51\u0137\3\2\2\2\u0a52\u0a54\7\u014f\2\2\u0a53\u0a55\7\u01c0"+
                    "\2\2\u0a54\u0a53\3\2\2\2\u0a54\u0a55\3\2\2\2\u0a55\u0a5d\3\2\2\2\u0a56"+
                    "\u0a58\7\u0194\2\2\u0a57\u0a59\7\u0157\2\2\u0a58\u0a57\3\2\2\2\u0a58\u0a59"+
                    "\3\2\2\2\u0a59\u0a5a\3\2\2\2\u0a5a\u0a5e\5\u02a0\u0151\2\u0a5b\u0a5c\7"+
                    "\u009f\2\2\u0a5c\u0a5e\5\u02fa\u017e\2\u0a5d\u0a56\3\2\2\2\u0a5d\u0a5b"+
                    "\3\2\2\2\u0a5d\u0a5e\3\2\2\2\u0a5e\u0139\3\2\2\2\u0a5f\u0a60\7\u0157\2"+
                    "\2\u0a60\u0a61\5\u02a0\u0151\2\u0a61\u013b\3\2\2\2\u0a62\u0a63\7\u0090"+
                    "\2\2\u0a63\u0a68\7\u012e\2\2\u0a64\u0a65\7\u0167\2\2\u0a65\u0a66\7\u017e"+
                    "\2\2\u0a66\u0a67\7\u0215\2\2\u0a67\u0a69\5\u02fa\u017e\2\u0a68\u0a64\3"+
                    "\2\2\2\u0a68\u0a69\3\2\2\2\u0a69\u0a6c\3\2\2\2\u0a6a\u0a6b\7\u00c2\2\2"+
                    "\u0a6b\u0a6d\5\u02d6\u016c\2\u0a6c\u0a6a\3\2\2\2\u0a6c\u0a6d\3\2\2\2\u0a6d"+
                    "\u0a6e\3\2\2\2\u0a6e\u0a74\7\u009d\2\2\u0a6f\u0a75\5\u013e\u00a0\2\u0a70"+
                    "\u0a75\5\u01b2\u00da\2\u0a71\u0a75\5\u01b8\u00dd\2\u0a72\u0a75\5\u01ba"+
                    "\u00de\2\u0a73\u0a75\5\u01cc\u00e7\2\u0a74\u0a6f\3\2\2\2\u0a74\u0a70\3"+
                    "\2\2\2\u0a74\u0a71\3\2\2\2\u0a74\u0a72\3\2\2\2\u0a74\u0a73\3\2\2\2\u0a75"+
                    "\u013d\3\2\2\2\u0a76\u0a7b\5\u0148\u00a5\2\u0a77\u0a7a\5\u01ac\u00d7\2"+
                    "\u0a78\u0a7a\5\u01a8\u00d5\2\u0a79\u0a77\3\2\2\2\u0a79\u0a78\3\2\2\2\u0a7a"+
                    "\u0a7d\3\2\2\2\u0a7b\u0a79\3\2\2\2\u0a7b\u0a7c\3\2\2\2\u0a7c\u013f\3\2"+
                    "\2\2\u0a7d\u0a7b\3\2\2\2\u0a7e\u0a7f\7\u01be\2\2\u0a7f\u0a84\5\u0142\u00a2"+
                    "\2\u0a80\u0a81\7\u0204\2\2\u0a81\u0a83\5\u0142\u00a2\2\u0a82\u0a80\3\2"+
                    "\2\2\u0a83\u0a86\3\2\2\2\u0a84\u0a82\3\2\2\2\u0a84\u0a85\3\2\2\2\u0a85"+
                    "\u0141\3\2\2\2\u0a86\u0a84\3\2\2\2\u0a87\u0a93\5\u02b6\u015c\2\u0a88\u0a89"+
                    "\7\u01fe\2\2\u0a89\u0a8e\5\u02d4\u016b\2\u0a8a\u0a8b\7\u0204\2\2\u0a8b"+
                    "\u0a8d\5\u02d4\u016b\2\u0a8c\u0a8a\3\2\2\2\u0a8d\u0a90\3\2\2\2\u0a8e\u0a8c"+
                    "\3\2\2\2\u0a8e\u0a8f\3\2\2\2\u0a8f\u0a91\3\2\2\2\u0a90\u0a8e\3\2\2\2\u0a91"+
                    "\u0a92\7\u01ff\2\2\u0a92\u0a94\3\2\2\2\u0a93\u0a88\3\2\2\2\u0a93\u0a94"+
                    "\3\2\2\2\u0a94\u0a95\3\2\2\2\u0a95\u0a96\7\25\2\2\u0a96\u0a97\7\u01fe"+
                    "\2\2\u0a97\u0a99\5\u0148\u00a5\2\u0a98\u0a9a\5\u01a8\u00d5\2\u0a99\u0a98"+
                    "\3\2\2\2\u0a99\u0a9a\3\2\2\2\u0a9a\u0a9b\3\2\2\2\u0a9b\u0a9d\7\u01ff\2"+
                    "\2\u0a9c\u0a9e\5\u0144\u00a3\2\u0a9d\u0a9c\3\2\2\2\u0a9d\u0a9e\3\2\2\2"+
                    "\u0a9e\u0aa0\3\2\2\2\u0a9f\u0aa1\5\u0146\u00a4\2\u0aa0\u0a9f\3\2\2\2\u0aa0"+
                    "\u0aa1\3\2\2\2\u0aa1\u0143\3\2\2\2\u0aa2\u0aa3\7\u015b\2\2\u0aa3\u0aa4"+
                    "\t\35\2\2\u0aa4\u0aa5\7\u0098\2\2\u0aa5\u0aa6\7/\2\2\u0aa6\u0aa8\5\u02d4"+
                    "\u016b\2\u0aa7\u0aa9\7\26\2\2\u0aa8\u0aa7\3\2\2\2\u0aa8\u0aa9\3\2\2\2"+
                    "\u0aa9\u0aab\3\2\2\2\u0aaa\u0aac\7q\2\2\u0aab\u0aaa\3\2\2\2\u0aab\u0aac"+
                    "\3\2\2\2\u0aac\u0aaf\3\2\2\2\u0aad\u0aae\7\u0108\2\2\u0aae\u0ab0\7\u0098"+
                    "\2\2\u0aaf\u0aad\3\2\2\2\u0aaf\u0ab0\3\2\2\2\u0ab0\u0ab3\3\2\2\2\u0ab1"+
                    "\u0ab2\7\u0108\2\2\u0ab2\u0ab4\7\u00cb\2\2\u0ab3\u0ab1\3\2\2\2\u0ab3\u0ab4"+
                    "\3\2\2\2\u0ab4\u0ac7\3\2\2\2\u0ab5\u0ab6\7\u0204\2\2\u0ab6\u0ab8\5\u02d4"+
                    "\u016b\2\u0ab7\u0ab9\7\26\2\2\u0ab8\u0ab7\3\2\2\2\u0ab8\u0ab9\3\2\2\2"+
                    "\u0ab9\u0abb\3\2\2\2\u0aba\u0abc\7q\2\2\u0abb\u0aba\3\2\2\2\u0abb\u0abc"+
                    "\3\2\2\2\u0abc\u0abf\3\2\2\2\u0abd\u0abe\7\u0108\2\2\u0abe\u0ac0\7\u0098"+
                    "\2\2\u0abf\u0abd\3\2\2\2\u0abf\u0ac0\3\2\2\2\u0ac0\u0ac3\3\2\2\2\u0ac1"+
                    "\u0ac2\7\u0108\2\2\u0ac2\u0ac4\7\u00cb\2\2\u0ac3\u0ac1\3\2\2\2\u0ac3\u0ac4"+
                    "\3\2\2\2\u0ac4\u0ac6\3\2\2\2\u0ac5\u0ab5\3\2\2\2\u0ac6\u0ac9\3\2\2\2\u0ac7"+
                    "\u0ac5\3\2\2\2\u0ac7\u0ac8\3\2\2\2\u0ac8\u0aca\3\2\2\2\u0ac9\u0ac7\3\2"+
                    "\2\2\u0aca\u0acb\7\u0167\2\2\u0acb\u0acc\5\u02d4\u016b\2\u0acc\u0145\3"+
                    "\2\2\2\u0acd\u0ace\7]\2\2\u0ace\u0ad3\5\u02d4\u016b\2\u0acf\u0ad0\7\u0204"+
                    "\2\2\u0ad0\u0ad2\5\u02d4\u016b\2\u0ad1\u0acf\3\2\2\2\u0ad2\u0ad5\3\2\2"+
                    "\2\u0ad3\u0ad1\3\2\2\2\u0ad3\u0ad4\3\2\2\2\u0ad4\u0ad6\3\2\2\2\u0ad5\u0ad3"+
                    "\3\2\2\2\u0ad6\u0ad7\7\u0167\2\2\u0ad7\u0ad8\5\u02d4\u016b\2\u0ad8\u0ad9"+
                    "\7\u0194\2\2\u0ad9\u0ada\5\u0202\u0102\2\u0ada\u0adb\7k\2\2\u0adb\u0adc"+
                    "\5\u0202\u0102\2\u0adc\u0147\3\2\2\2\u0add\u0ae1\5\u014c\u00a7\2\u0ade"+
                    "\u0ae0\5\u014a\u00a6\2\u0adf\u0ade\3\2\2\2\u0ae0\u0ae3\3\2\2\2\u0ae1\u0adf"+
                    "\3\2\2\2\u0ae1\u0ae2\3\2\2\2\u0ae2\u0149\3\2\2\2\u0ae3\u0ae1\3\2\2\2\u0ae4"+
                    "\u0ae6\7\u01a2\2\2\u0ae5\u0ae7\7\17\2\2\u0ae6\u0ae5\3\2\2\2\u0ae6\u0ae7"+
                    "\3\2\2\2\u0ae7\u0aeb\3\2\2\2\u0ae8\u0aeb\7\u00c0\2\2\u0ae9\u0aeb\7\u00e5"+
                    "\2\2\u0aea\u0ae4\3\2\2\2\u0aea\u0ae8\3\2\2\2\u0aea\u0ae9\3\2\2\2\u0aeb"+
                    "\u0aec\3\2\2\2\u0aec\u0aed\5\u014c\u00a7\2\u0aed\u014b\3\2\2\2\u0aee\u0af4"+
                    "\5\u014e\u00a8\2\u0aef\u0af0\7\u01fe\2\2\u0af0\u0af1\5\u0148\u00a5\2\u0af1"+
                    "\u0af2\7\u01ff\2\2\u0af2\u0af4\3\2\2\2\u0af3\u0aee\3\2\2\2\u0af3\u0aef"+
                    "\3\2\2\2\u0af4\u014d\3\2\2\2\u0af5\u0af7\5\u0140\u00a1\2\u0af6\u0af5\3"+
                    "\2\2\2\u0af6\u0af7\3\2\2\2\u0af7\u0af8\3\2\2\2\u0af8\u0afa\7\u015f\2\2"+
                    "\u0af9\u0afb\t\36\2\2\u0afa\u0af9\3\2\2\2\u0afa\u0afb\3\2\2\2\u0afb\u0b05"+
                    "\3\2\2\2\u0afc\u0b06\7\u0201\2\2\u0afd\u0b02\5\u0150\u00a9\2\u0afe\u0aff"+
                    "\7\u0204\2\2\u0aff\u0b01\5\u0150\u00a9\2\u0b00\u0afe\3\2\2\2\u0b01\u0b04"+
                    "\3\2\2\2\u0b02\u0b00\3\2\2\2\u0b02\u0b03\3\2\2\2\u0b03\u0b06\3\2\2\2\u0b04"+
                    "\u0b02\3\2\2\2\u0b05\u0afc\3\2\2\2\u0b05\u0afd\3\2\2\2\u0b06\u0b08\3\2"+
                    "\2\2\u0b07\u0b09\5\u0298\u014d\2\u0b08\u0b07\3\2\2\2\u0b08\u0b09\3\2\2"+
                    "\2\u0b09\u0b0a\3\2\2\2\u0b0a\u0b0c\5\u0152\u00aa\2\u0b0b\u0b0d\5\u0292"+
                    "\u014a\2\u0b0c\u0b0b\3\2\2\2\u0b0c\u0b0d\3\2\2\2\u0b0d\u0b0f\3\2\2\2\u0b0e"+
                    "\u0b10\5\u017a\u00be\2\u0b0f\u0b0e\3\2\2\2\u0b0f\u0b10\3\2\2\2\u0b10\u0b12"+
                    "\3\2\2\2\u0b11\u0b13\5\u017e\u00c0\2\u0b12\u0b11\3\2\2\2\u0b12\u0b13\3"+
                    "\2\2\2\u0b13\u0b15\3\2\2\2\u0b14\u0b16\5\u01a8\u00d5\2\u0b15\u0b14\3\2"+
                    "\2\2\u0b15\u0b16\3\2\2\2\u0b16\u0b18\3\2\2\2\u0b17\u0b19\5\u018a\u00c6"+
                    "\2\u0b18\u0b17\3\2\2\2\u0b18\u0b19\3\2\2\2\u0b19\u0b1b\3\2\2\2\u0b1a\u0b1c"+
                    "\7\u020a\2\2\u0b1b\u0b1a\3\2\2\2\u0b1b\u0b1c\3\2\2\2\u0b1c\u014f\3\2\2"+
                    "\2\u0b1d\u0b1f\5\u0154\u00ab\2\u0b1e\u0b20\5\u028c\u0147\2\u0b1f\u0b1e"+
                    "\3\2\2\2\u0b1f\u0b20\3\2\2\2\u0b20\u0151\3\2\2\2\u0b21\u0b22\7\u00a0\2"+
                    "\2\u0b22\u0b23\5\u0156\u00ac\2\u0b23\u0153\3\2\2\2\u0b24\u0b25\5\u02d6"+
                    "\u016c\2\u0b25\u0b26\7\u01f7\2\2\u0b26\u0b27\7\u0201\2\2\u0b27\u0b2a\3"+
                    "\2\2\2\u0b28\u0b2a\5\u0202\u0102\2\u0b29\u0b24\3\2\2\2\u0b29\u0b28\3\2"+
                    "\2\2\u0b2a\u0155\3\2\2\2\u0b2b\u0b30\5\u0158\u00ad\2\u0b2c\u0b2d\7\u0204"+
                    "\2\2\u0b2d\u0b2f\5\u0158\u00ad\2\u0b2e\u0b2c\3\2\2\2\u0b2f\u0b32\3\2\2"+
                    "\2\u0b30\u0b2e\3\2\2\2\u0b30\u0b31\3\2\2\2\u0b31\u0157\3\2\2\2\u0b32\u0b30"+
                    "\3\2\2\2\u0b33\u0b37\5\u015a\u00ae\2\u0b34\u0b36\5\u015c\u00af\2\u0b35"+
                    "\u0b34\3\2\2\2\u0b36\u0b39\3\2\2\2\u0b37\u0b35\3\2\2\2\u0b37\u0b38\3\2"+
                    "\2\2\u0b38\u0b3c\3\2\2\2\u0b39\u0b37\3\2\2\2\u0b3a\u0b3d\5\u0168\u00b5"+
                    "\2\u0b3b\u0b3d\5\u0174\u00bb\2\u0b3c\u0b3a\3\2\2\2\u0b3c\u0b3b\3\2\2\2"+
                    "\u0b3c\u0b3d\3\2\2\2\u0b3d\u0159\3\2\2\2\u0b3e\u0b41\5\u01ea\u00f6\2\u0b3f"+
                    "\u0b42\5\u0168\u00b5\2\u0b40\u0b42\5\u0174\u00bb\2\u0b41\u0b3f\3\2\2\2"+
                    "\u0b41\u0b40\3\2\2\2\u0b41\u0b42\3\2\2\2\u0b42\u0b5c\3\2\2\2\u0b43\u0b44"+
                    "\7\u01fe\2\2\u0b44\u0b48\5\u0158\u00ad\2\u0b45\u0b47\5\u014a\u00a6\2\u0b46"+
                    "\u0b45\3\2\2\2\u0b47\u0b4a\3\2\2\2\u0b48\u0b46\3\2\2\2\u0b48\u0b49\3\2"+
                    "\2\2\u0b49\u0b4b\3\2\2\2\u0b4a\u0b48\3\2\2\2\u0b4b\u0b4e\7\u01ff\2\2\u0b4c"+
                    "\u0b4f\5\u0168\u00b5\2\u0b4d\u0b4f\5\u0174\u00bb\2\u0b4e\u0b4c\3\2\2\2"+
                    "\u0b4e\u0b4d\3\2\2\2\u0b4e\u0b4f\3\2\2\2\u0b4f\u0b5c\3\2\2\2\u0b50\u0b51"+
                    "\7\u0112\2\2\u0b51\u0b52\7\u01fe\2\2\u0b52\u0b53\5\u01ea\u00f6\2\u0b53"+
                    "\u0b54\7\u01ff\2\2\u0b54\u0b5c\3\2\2\2\u0b55\u0b58\5\u01ea\u00f6\2\u0b56"+
                    "\u0b59\5\u0168\u00b5\2\u0b57\u0b59\5\u0174\u00bb\2\u0b58\u0b56\3\2\2\2"+
                    "\u0b58\u0b57\3\2\2\2\u0b58\u0b59\3\2\2\2\u0b59\u0b5c\3\2\2\2\u0b5a\u0b5c"+
                    "\5\u0252\u012a\2\u0b5b\u0b3e\3\2\2\2\u0b5b\u0b43\3\2\2\2\u0b5b\u0b50\3"+
                    "\2\2\2\u0b5b\u0b55\3\2\2\2\u0b5b\u0b5a\3\2\2\2\u0b5c\u0b60\3\2\2\2\u0b5d"+
                    "\u0b5f\5\u0166\u00b4\2\u0b5e\u0b5d\3\2\2\2\u0b5f\u0b62\3\2\2\2\u0b60\u0b5e"+
                    "\3\2\2\2\u0b60\u0b61\3\2\2\2\u0b61\u0b64\3\2\2\2\u0b62\u0b60\3\2\2\2\u0b63"+
                    "\u0b65\5\u028e\u0148\2\u0b64\u0b63\3\2\2\2\u0b64\u0b65\3\2\2\2\u0b65\u015b"+
                    "\3\2\2\2\u0b66\u0b68\5\u0164\u00b3\2\u0b67\u0b66\3\2\2\2\u0b67\u0b68\3"+
                    "\2\2\2\u0b68\u0b6a\3\2\2\2\u0b69\u0b6b\t\37\2\2\u0b6a\u0b69\3\2\2\2\u0b6a"+
                    "\u0b6b\3\2\2\2\u0b6b\u0b6e\3\2\2\2\u0b6c\u0b6f\7\u00b9\2\2\u0b6d\u0b6f"+
                    "\5\u0162\u00b2\2\u0b6e\u0b6c\3\2\2\2\u0b6e\u0b6d\3\2\2\2\u0b6e\u0b6f\3"+
                    "\2\2\2\u0b6f\u0b70\3\2\2\2\u0b70\u0b71\7\u00c8\2\2\u0b71\u0b73\5\u015a"+
                    "\u00ae\2\u0b72\u0b74\5\u0164\u00b3\2\u0b73\u0b72\3\2\2\2\u0b73\u0b74\3"+
                    "\2\2\2\u0b74\u0b79\3\2\2\2\u0b75\u0b78\5\u015e\u00b0\2\u0b76\u0b78\5\u0160"+
                    "\u00b1\2\u0b77\u0b75\3\2\2\2\u0b77\u0b76\3\2\2\2\u0b78\u0b7b\3\2\2\2\u0b79"+
                    "\u0b77\3\2\2\2\u0b79\u0b7a\3\2\2\2\u0b7a\u015d\3\2\2\2\u0b7b\u0b79\3\2"+
                    "\2\2\u0b7c\u0b7d\7\u0111\2\2\u0b7d\u0b7e\5\u01fe\u0100\2\u0b7e\u015f\3"+
                    "\2\2\2\u0b7f\u0b80\7\u01ac\2\2\u0b80\u0b81\7\u01fe\2\2\u0b81\u0b86\5\u02d4"+
                    "\u016b\2\u0b82\u0b83\7\u0204\2\2\u0b83\u0b85\5\u02d4\u016b\2\u0b84\u0b82"+
                    "\3\2\2\2\u0b85\u0b88\3\2\2\2\u0b86\u0b84\3\2\2\2\u0b86\u0b87\3\2\2\2\u0b87"+
                    "\u0b89\3\2\2\2\u0b88\u0b86\3\2\2\2\u0b89\u0b8a\7\u01ff\2\2\u0b8a\u0161"+
                    "\3\2\2\2\u0b8b\u0b8d\t \2\2\u0b8c\u0b8e\7\u011b\2\2\u0b8d\u0b8c\3\2\2"+
                    "\2\u0b8d\u0b8e\3\2\2\2\u0b8e\u0163\3\2\2\2\u0b8f\u0b90\7\u0122\2\2\u0b90"+
                    "\u0b9e\7/\2\2\u0b91\u0b92\7\u01fe\2\2\u0b92\u0b93\5\u0148\u00a5\2\u0b93"+
                    "\u0b94\7\u01ff\2\2\u0b94\u0b9f\3\2\2\2\u0b95\u0b9f\5\u01fc\u00ff\2\u0b96"+
                    "\u0b9b\5\u0202\u0102\2\u0b97\u0b98\7\u0204\2\2\u0b98\u0b9a\5\u0202\u0102"+
                    "\2\u0b99\u0b97\3\2\2\2\u0b9a\u0b9d\3\2\2\2\u0b9b\u0b99\3\2\2\2\u0b9b\u0b9c"+
                    "\3\2\2\2\u0b9c\u0b9f\3\2\2\2\u0b9d\u0b9b\3\2\2\2\u0b9e\u0b91\3\2\2\2\u0b9e"+
                    "\u0b95\3\2\2\2\u0b9e\u0b96\3\2\2\2\u0b9f\u0165\3\2\2\2\u0ba0\u0ba1\7\u01b6"+
                    "\2\2\u0ba1\u0ba2\7#\2\2\u0ba2\u0ba3\t!\2\2\u0ba3\u0ba9\5\u0202\u0102\2"+
                    "\u0ba4\u0ba5\7\25\2\2\u0ba5\u0ba6\7\u010d\2\2\u0ba6\u0ba7\t\"\2\2\u0ba7"+
                    "\u0ba9\5\u0202\u0102\2\u0ba8\u0ba0\3\2\2\2\u0ba8\u0ba4\3\2\2\2\u0ba9\u0167"+
                    "\3\2\2\2\u0baa\u0bac\7\u012d\2\2\u0bab\u0bad\7\u01c2\2\2\u0bac\u0bab\3"+
                    "\2\2\2\u0bac\u0bad\3\2\2\2\u0bad\u0bae\3\2\2\2\u0bae\u0baf\7\u01fe\2\2"+
                    "\u0baf\u0bb4\5\u016a\u00b6\2\u0bb0\u0bb1\7\u0204\2\2\u0bb1\u0bb3\5\u016a"+
                    "\u00b6\2\u0bb2\u0bb0\3\2\2\2\u0bb3\u0bb6\3\2\2\2\u0bb4\u0bb2\3\2\2\2\u0bb4"+
                    "\u0bb5\3\2\2\2\u0bb5\u0bb7\3\2\2\2\u0bb6\u0bb4\3\2\2\2\u0bb7\u0bb8\5\u016c"+
                    "\u00b7\2\u0bb8\u0bb9\5\u016e\u00b8\2\u0bb9\u0bba\7\u01ff\2\2\u0bba\u0169"+
                    "\3\2\2\2\u0bbb\u0bbc\5\u02b4\u015b\2\u0bbc\u0bbd\7\u01fe\2\2\u0bbd\u0bbe"+
                    "\5\u0202\u0102\2\u0bbe\u0bc0\7\u01ff\2\2\u0bbf\u0bc1\5\u028c\u0147\2\u0bc0"+
                    "\u0bbf\3\2\2\2\u0bc0\u0bc1\3\2\2\2\u0bc1\u016b\3\2\2\2\u0bc2\u0bcf\7\u009d"+
                    "\2\2\u0bc3\u0bd0\5\u02d4\u016b\2\u0bc4\u0bc5\7\u01fe\2\2\u0bc5\u0bca\5"+
                    "\u02d4\u016b\2\u0bc6\u0bc7\7\u0204\2\2\u0bc7\u0bc9\5\u02d4\u016b\2\u0bc8"+
                    "\u0bc6\3\2\2\2\u0bc9\u0bcc\3\2\2\2\u0bca\u0bc8\3\2\2\2\u0bca\u0bcb\3\2"+
                    "\2\2\u0bcb\u0bcd\3\2\2\2\u0bcc\u0bca\3\2\2\2\u0bcd\u0bce\7\u01ff\2\2\u0bce"+
                    "\u0bd0\3\2\2\2\u0bcf\u0bc3\3\2\2\2\u0bcf\u0bc4\3\2\2\2\u0bd0\u016d\3\2"+
                    "\2\2\u0bd1\u0bd2\7\u00ae\2\2\u0bd2\u0be4\7\u01fe\2\2\u0bd3\u0be5\5\u0148"+
                    "\u00a5\2\u0bd4\u0bd9\7\23\2\2\u0bd5\u0bd6\7\u0204\2\2\u0bd6\u0bd8\7\23"+
                    "\2\2\u0bd7\u0bd5\3\2\2\2\u0bd8\u0bdb\3\2\2\2\u0bd9\u0bd7\3\2\2\2\u0bd9"+
                    "\u0bda\3\2\2\2\u0bda\u0be5\3\2\2\2\u0bdb\u0bd9\3\2\2\2\u0bdc\u0be1\5\u0170"+
                    "\u00b9\2\u0bdd\u0bde\7\u0204\2\2\u0bde\u0be0\5\u0170\u00b9\2\u0bdf\u0bdd"+
                    "\3\2\2\2\u0be0\u0be3\3\2\2\2\u0be1\u0bdf\3\2\2\2\u0be1\u0be2\3\2\2\2\u0be2"+
                    "\u0be5\3\2\2\2\u0be3\u0be1\3\2\2\2\u0be4\u0bd3\3\2\2\2\u0be4\u0bd4\3\2"+
                    "\2\2\u0be4\u0bdc\3\2\2\2\u0be5\u0be6\3\2\2\2\u0be6\u0be7\7\u01ff\2\2\u0be7"+
                    "\u016f\3\2\2\2\u0be8\u0bea\5\u0172\u00ba\2\u0be9\u0beb\5\u028c\u0147\2"+
                    "\u0bea\u0be9\3\2\2\2\u0bea\u0beb\3\2\2\2\u0beb\u0171\3\2\2\2\u0bec\u0bef"+
                    "\5\u0202\u0102\2\u0bed\u0bef\5\u01fc\u00ff\2\u0bee\u0bec\3\2\2\2\u0bee"+
                    "\u0bed\3\2\2\2\u0bef\u0173\3\2\2\2\u0bf0\u0bf3\7\u01a5\2\2\u0bf1\u0bf2"+
                    "\t#\2\2\u0bf2\u0bf4\7\u0108\2\2\u0bf3\u0bf1\3\2\2\2\u0bf3\u0bf4\3\2\2"+
                    "\2\u0bf4\u0bf5\3\2\2\2\u0bf5\u0c02\7\u01fe\2\2\u0bf6\u0c03\5\u02d4\u016b"+
                    "\2\u0bf7\u0bf8\7\u01fe\2\2\u0bf8\u0bfd\5\u02d4\u016b\2\u0bf9\u0bfa\7\u0204"+
                    "\2\2\u0bfa\u0bfc\5\u02d4\u016b\2\u0bfb\u0bf9\3\2\2\2\u0bfc\u0bff\3\2\2"+
                    "\2\u0bfd\u0bfb\3\2\2\2\u0bfd\u0bfe\3\2\2\2\u0bfe\u0c00\3\2\2\2\u0bff\u0bfd"+
                    "\3\2\2\2\u0c00\u0c01\7\u01ff\2\2\u0c01\u0c03\3\2\2\2\u0c02\u0bf6\3\2\2"+
                    "\2\u0c02\u0bf7\3\2\2\2\u0c03\u0c04\3\2\2\2\u0c04\u0c05\5\u016c\u00b7\2"+
                    "\u0c05\u0c06\5\u0176\u00bc\2\u0c06\u0c07\7\u01ff\2\2\u0c07\u0175\3\2\2"+
                    "\2\u0c08\u0c09\7\u00ae\2\2\u0c09\u0c0a\7\u01fe\2\2\u0c0a\u0c0f\5\u0178"+
                    "\u00bd\2\u0c0b\u0c0c\7\u0204\2\2\u0c0c\u0c0e\5\u0178\u00bd\2\u0c0d\u0c0b"+
                    "\3\2\2\2\u0c0e\u0c11\3\2\2\2\u0c0f\u0c0d\3\2\2\2\u0c0f\u0c10\3\2\2\2\u0c10"+
                    "\u0c12\3\2\2\2\u0c11\u0c0f\3\2\2\2\u0c12\u0c13\7\u01ff\2\2\u0c13\u0177"+
                    "\3\2\2\2\u0c14\u0c21\5\u02d4\u016b\2\u0c15\u0c16\7\u01fe\2\2\u0c16\u0c1b"+
                    "\5\u02d4\u016b\2\u0c17\u0c18\7\u0204\2\2\u0c18\u0c1a\5\u02d4\u016b\2\u0c19"+
                    "\u0c17\3\2\2\2\u0c1a\u0c1d\3\2\2\2\u0c1b\u0c19\3\2\2\2\u0c1b\u0c1c\3\2"+
                    "\2\2\u0c1c\u0c1e\3\2\2\2\u0c1d\u0c1b\3\2\2\2\u0c1e\u0c1f\7\u01ff\2\2\u0c1f"+
                    "\u0c21\3\2\2\2\u0c20\u0c14\3\2\2\2\u0c20\u0c15\3\2\2\2\u0c21\u0c31\3\2"+
                    "\2\2\u0c22\u0c2f\7\25\2\2\u0c23\u0c30\5\u02f6\u017c\2\u0c24\u0c25\7\u01fe"+
                    "\2\2\u0c25\u0c2a\5\u02f6\u017c\2\u0c26\u0c27\7\u0204\2\2\u0c27\u0c29\5"+
                    "\u02f6\u017c\2\u0c28\u0c26\3\2\2\2\u0c29\u0c2c\3\2\2\2\u0c2a\u0c28\3\2"+
                    "\2\2\u0c2a\u0c2b\3\2\2\2\u0c2b\u0c2d\3\2\2\2\u0c2c\u0c2a\3\2\2\2\u0c2d"+
                    "\u0c2e\7\u01ff\2\2\u0c2e\u0c30\3\2\2\2\u0c2f\u0c23\3\2\2\2\u0c2f\u0c24"+
                    "\3\2\2\2\u0c30\u0c32\3\2\2\2\u0c31\u0c22\3\2\2\2\u0c31\u0c32\3\2\2\2\u0c32"+
                    "\u0179\3\2\2\2\u0c33\u0c34\7H\2\2\u0c34\u0c36\7/\2\2\u0c35\u0c37\7\u00fe"+
                    "\2\2\u0c36\u0c35\3\2\2\2\u0c36\u0c37\3\2\2\2\u0c37\u0c38\3\2\2\2\u0c38"+
                    "\u0c3a\5\u01fe\u0100\2\u0c39\u0c3b\5\u017c\u00bf\2\u0c3a\u0c39\3\2\2\2"+
                    "\u0c3a\u0c3b\3\2\2\2\u0c3b\u0c45\3\2\2\2\u0c3c\u0c3d\5\u017c\u00bf\2\u0c3d"+
                    "\u0c3e\7H\2\2\u0c3e\u0c40\7/\2\2\u0c3f\u0c41\7\u00fe\2\2\u0c40\u0c3f\3"+
                    "\2\2\2\u0c40\u0c41\3\2\2\2\u0c41\u0c42\3\2\2\2\u0c42\u0c43\5\u01fe\u0100"+
                    "\2\u0c43\u0c45\3\2\2\2\u0c44\u0c33\3\2\2\2\u0c44\u0c3c\3\2\2\2\u0c45\u017b"+
                    "\3\2\2\2\u0c46\u0c47\7\u017b\2\2\u0c47\u0c48\7\u01be\2\2\u0c48\u0c49\5"+
                    "\u01fe\u0100\2\u0c49\u017d\3\2\2\2\u0c4a\u0c4b\7\u00a5\2\2\u0c4b\u0c4c"+
                    "\7/\2\2\u0c4c\u0c51\5\u0180\u00c1\2\u0c4d\u0c4e\7\u0204\2\2\u0c4e\u0c50"+
                    "\5\u0180\u00c1\2\u0c4f\u0c4d\3\2\2\2\u0c50\u0c53\3\2\2\2\u0c51\u0c4f\3"+
                    "\2\2\2\u0c51\u0c52\3\2\2\2\u0c52\u0c55\3\2\2\2\u0c53\u0c51\3\2\2\2\u0c54"+
                    "\u0c56\5\u0188\u00c5\2\u0c55\u0c54\3\2\2\2\u0c55\u0c56\3\2\2\2\u0c56\u0c65"+
                    "\3\2\2\2\u0c57\u0c62\5\u0188\u00c5\2\u0c58\u0c59\7\u00a5\2\2\u0c59\u0c5a"+
                    "\7/\2\2\u0c5a\u0c5f\5\u0180\u00c1\2\u0c5b\u0c5c\7\u0204\2\2\u0c5c\u0c5e"+
                    "\5\u0180\u00c1\2\u0c5d\u0c5b\3\2\2\2\u0c5e\u0c61\3\2\2\2\u0c5f\u0c5d\3"+
                    "\2\2\2\u0c5f\u0c60\3\2\2\2\u0c60\u0c63\3\2\2\2\u0c61\u0c5f\3\2\2\2\u0c62"+
                    "\u0c58\3\2\2\2\u0c62\u0c63\3\2\2\2\u0c63\u0c65\3\2\2\2\u0c64\u0c4a\3\2"+
                    "\2\2\u0c64\u0c57\3\2\2\2\u0c65\u017f\3\2\2\2\u0c66\u0c6a\5\u0184\u00c3"+
                    "\2\u0c67\u0c6a\5\u0182\u00c2\2\u0c68\u0c6a\5\u0202\u0102\2\u0c69\u0c66"+
                    "\3\2\2\2\u0c69\u0c67\3\2\2\2\u0c69\u0c68\3\2\2\2\u0c6a\u0181\3\2\2\2\u0c6b"+
                    "\u0c6c\t$\2\2\u0c6c\u0c6d\7\u01fe\2\2\u0c6d\u0c72\5\u0186\u00c4\2\u0c6e"+
                    "\u0c6f\7\u0204\2\2\u0c6f\u0c71\5\u0186\u00c4\2\u0c70\u0c6e\3\2\2\2\u0c71"+
                    "\u0c74\3\2\2\2\u0c72\u0c70\3\2\2\2\u0c72\u0c73\3\2\2\2\u0c73\u0c75\3\2"+
                    "\2\2\u0c74\u0c72\3\2\2\2\u0c75\u0c76\7\u01ff\2\2\u0c76\u0183\3\2\2\2\u0c77"+
                    "\u0c78\7\u00a6\2\2\u0c78\u0c79\7\u0168\2\2\u0c79\u0c7a\7\u01fe\2\2\u0c7a"+
                    "\u0c7f\5\u0186\u00c4\2\u0c7b\u0c7c\7\u0204\2\2\u0c7c\u0c7e\5\u0186\u00c4"+
                    "\2\u0c7d\u0c7b\3\2\2\2\u0c7e\u0c81\3\2\2\2\u0c7f\u0c7d\3\2\2\2\u0c7f\u0c80"+
                    "\3\2\2\2\u0c80\u0c82\3\2\2\2\u0c81\u0c7f\3\2\2\2\u0c82\u0c83\7\u01ff\2"+
                    "\2\u0c83\u0185\3\2\2\2\u0c84\u0c88\5\u0182\u00c2\2\u0c85\u0c88\5\u01fc"+
                    "\u00ff\2\u0c86\u0c88\5\u0202\u0102\2\u0c87\u0c84\3\2\2\2\u0c87\u0c85\3"+
                    "\2\2\2\u0c87\u0c86\3\2\2\2\u0c88\u0187\3\2\2\2\u0c89\u0c8a\7\u00a8\2\2"+
                    "\u0c8a\u0c8b\5\u01fe\u0100\2\u0c8b\u0189\3\2\2\2\u0c8c\u0c90\7\u00eb\2"+
                    "\2\u0c8d\u0c8f\5\u018c\u00c7\2\u0c8e\u0c8d\3\2\2\2\u0c8f\u0c92\3\2\2\2"+
                    "\u0c90\u0c8e\3\2\2\2\u0c90\u0c91\3\2\2\2\u0c91\u0c94\3\2\2\2\u0c92\u0c90"+
                    "\3\2\2\2\u0c93\u0c95\5\u018e\u00c8\2\u0c94\u0c93\3\2\2\2\u0c94\u0c95\3"+
                    "\2\2\2\u0c95\u0c99\3\2\2\2\u0c96\u0c98\5\u0190\u00c9\2\u0c97\u0c96\3\2"+
                    "\2\2\u0c98\u0c9b\3\2\2\2\u0c99\u0c97\3\2\2\2\u0c99\u0c9a\3\2\2\2\u0c9a"+
                    "\u0c9c\3\2\2\2\u0c9b\u0c99\3\2\2\2\u0c9c\u0c9d\5\u0192\u00ca\2\u0c9d\u018b"+
                    "\3\2\2\2\u0c9e\u0c9f\t%\2\2\u0c9f\u0ca7\7\u00f3\2\2\u0ca0\u0ca4\7\u01a3"+
                    "\2\2\u0ca1\u0ca5\7s\2\2\u0ca2\u0ca3\7\u0170\2\2\u0ca3\u0ca5\7\u013f\2"+
                    "\2\u0ca4\u0ca1\3\2\2\2\u0ca4\u0ca2\3\2\2\2\u0ca5\u0ca7\3\2\2\2\u0ca6\u0c9e"+
                    "\3\2\2\2\u0ca6\u0ca0\3\2\2\2\u0ca7\u018d\3\2\2\2\u0ca8\u0ca9\7\u0149\2"+
                    "\2\u0ca9\u0caa\t&\2\2\u0caa\u0cab\7\u0153\2\2\u0cab\u018f\3\2\2\2\u0cac"+
                    "\u0cad\7\u013f\2\2\u0cad\u0cae\5\u02b0\u0159\2\u0cae\u0caf\7\u0111\2\2"+
                    "\u0caf\u0cb0\7\u01fe\2\2\u0cb0\u0cb1\5\u0148\u00a5\2\u0cb1\u0cb2\7\u01ff"+
                    "\2\2\u0cb2\u0cb6\5\u0194\u00cb\2\u0cb3\u0cb5\5\u018c\u00c7\2\u0cb4\u0cb3"+
                    "\3\2\2\2\u0cb5\u0cb8\3\2\2\2\u0cb6\u0cb4\3\2\2\2\u0cb6\u0cb7\3\2\2\2\u0cb7"+
                    "\u0191\3\2\2\2\u0cb8\u0cb6\3\2\2\2\u0cb9\u0cba\7\u00de\2\2\u0cba\u0cbc"+
                    "\5\u02b2\u015a\2\u0cbb\u0cb9\3\2\2\2\u0cbb\u0cbc\3\2\2\2\u0cbc\u0cbd\3"+
                    "\2\2\2\u0cbd\u0cc1\5\u0194\u00cb\2\u0cbe\u0cc0\5\u018c\u00c7\2\u0cbf\u0cbe"+
                    "\3\2\2\2\u0cc0\u0cc3\3\2\2\2\u0cc1\u0cbf\3\2\2\2\u0cc1\u0cc2\3\2\2\2\u0cc2"+
                    "\u0cc4\3\2\2\2\u0cc3\u0cc1\3\2\2\2\u0cc4\u0cc5\5\u019c\u00cf\2\u0cc5\u0193"+
                    "\3\2\2\2\u0cc6\u0cc8\5\u0196\u00cc\2\u0cc7\u0cc6\3\2\2\2\u0cc7\u0cc8\3"+
                    "\2\2\2\u0cc8\u0cc9\3\2\2\2\u0cc9\u0cca\7s\2\2\u0cca\u0ccb\7/\2\2\u0ccb"+
                    "\u0ccc\5\u0198\u00cd\2\u0ccc\u0ccd\7\u00e2\2\2\u0ccd\u0cce\5\u0198\u00cd"+
                    "\2\u0cce\u0195\3\2\2\2\u0ccf\u0cd0\7\u0122\2\2\u0cd0\u0cd1\7/\2\2\u0cd1"+
                    "\u0cd2\5\u0198\u00cd\2\u0cd2\u0197\3\2\2\2\u0cd3\u0cd4\7\u01fe\2\2\u0cd4"+
                    "\u0cd9\5\u019a\u00ce\2\u0cd5\u0cd6\7\u0204\2\2\u0cd6\u0cd8\5\u019a\u00ce"+
                    "\2\u0cd7\u0cd5\3\2\2\2\u0cd8\u0cdb\3\2\2\2\u0cd9\u0cd7\3\2\2\2\u0cd9\u0cda"+
                    "\3\2\2\2\u0cda\u0cdc\3\2\2\2\u0cdb\u0cd9\3\2\2\2\u0cdc\u0cdd\7\u01ff\2"+
                    "\2\u0cdd\u0199\3\2\2\2\u0cde\u0ce0\5\u0202\u0102\2\u0cdf\u0ce1\5\u028e"+
                    "\u0148\2\u0ce0\u0cdf\3\2\2\2\u0ce0\u0ce1\3\2\2\2\u0ce1\u019b\3\2\2\2\u0ce2"+
                    "\u0ce4\5\u019e\u00d0\2\u0ce3\u0ce2\3\2\2\2\u0ce3\u0ce4\3\2\2\2\u0ce4\u0ce5"+
                    "\3\2\2\2\u0ce5\u0ce6\7\u01fe\2\2\u0ce6\u0ceb\5\u01a0\u00d1\2\u0ce7\u0ce8"+
                    "\7\u0204\2\2\u0ce8\u0cea\5\u01a0\u00d1\2\u0ce9\u0ce7\3\2\2\2\u0cea\u0ced"+
                    "\3\2\2\2\u0ceb\u0ce9\3\2\2\2\u0ceb\u0cec\3\2\2\2\u0cec\u0cee\3\2\2\2\u0ced"+
                    "\u0ceb\3\2\2\2\u0cee\u0cef\7\u01ff\2\2\u0cef\u019d\3\2\2\2\u0cf0\u0cf6"+
                    "\7\u0154\2\2\u0cf1\u0cf7\7\u01a7\2\2\u0cf2\u0cf4\7\u01a9\2\2\u0cf3\u0cf5"+
                    "\7\17\2\2\u0cf4\u0cf3\3\2\2\2\u0cf4\u0cf5\3\2\2\2\u0cf5\u0cf7\3\2\2\2"+
                    "\u0cf6\u0cf1\3\2\2\2\u0cf6\u0cf2\3\2\2\2\u0cf6\u0cf7\3\2\2\2\u0cf7\u0cfa"+
                    "\3\2\2\2\u0cf8\u0cf9\t\'\2\2\u0cf9\u0cfb\7\u0117\2\2\u0cfa\u0cf8\3\2\2"+
                    "\2\u0cfa\u0cfb\3\2\2\2\u0cfb\u0cfd\3\2\2\2\u0cfc\u0cfe\5\u01a4\u00d3\2"+
                    "\u0cfd\u0cfc\3\2\2\2\u0cfd\u0cfe\3\2\2\2\u0cfe\u019f\3\2\2\2\u0cff\u0d05"+
                    "\7\u01a7\2\2\u0d00\u0d02\7\u01a9\2\2\u0d01\u0d03\7\17\2\2\u0d02\u0d01"+
                    "\3\2\2\2\u0d02\u0d03\3\2\2\2\u0d03\u0d05\3\2\2\2\u0d04\u0cff\3\2\2\2\u0d04"+
                    "\u0d00\3\2\2\2\u0d04\u0d05\3\2\2\2\u0d05\u0d06\3\2\2\2\u0d06\u0d08\5\u01a2"+
                    "\u00d2\2\u0d07\u0d09\5\u01a8\u00d5\2\u0d08\u0d07\3\2\2\2\u0d08\u0d09\3"+
                    "\2\2\2\u0d09\u0d0a\3\2\2\2\u0d0a\u0d0b\7\u0215\2\2\u0d0b\u0d0c\5\u0202"+
                    "\u0102\2\u0d0c\u01a1\3\2\2\2\u0d0d\u0d0e\5\u022a\u0116\2\u0d0e\u01a3\3"+
                    "\2\2\2\u0d0f\u0d10\7\u00c6\2\2\u0d10\u0d11\7\u01fe\2\2\u0d11\u0d12\5\u0202"+
                    "\u0102\2\u0d12\u0d14\7\u01ff\2\2\u0d13\u0d15\5\u01a6\u00d4\2\u0d14\u0d13"+
                    "\3\2\2\2\u0d14\u0d15\3\2\2\2\u0d15\u01a5\3\2\2\2\u0d16\u0d17\7\u01a6\2"+
                    "\2\u0d17\u0d18\7\u01fe\2\2\u0d18\u0d19\5\u01fe\u0100\2\u0d19\u0d1a\7\u01ff"+
                    "\2\2\u0d1a\u01a7\3\2\2\2\u0d1b\u0d1d\7\u0117\2\2\u0d1c\u0d1e\7\u016d\2"+
                    "\2\u0d1d\u0d1c\3\2\2\2\u0d1d\u0d1e\3\2\2\2\u0d1e\u0d1f\3\2\2\2\u0d1f\u0d20"+
                    "\7/\2\2\u0d20\u0d25\5\u01aa\u00d6\2\u0d21\u0d22\7\u0204\2\2\u0d22\u0d24"+
                    "\5\u01aa\u00d6\2\u0d23\u0d21\3\2\2\2\u0d24\u0d27\3\2\2\2\u0d25\u0d23\3"+
                    "\2\2\2\u0d25\u0d26\3\2\2\2\u0d26\u01a9\3\2\2\2\u0d27\u0d25\3\2\2\2\u0d28"+
                    "\u0d2a\5\u0202\u0102\2\u0d29\u0d2b\t(\2\2\u0d2a\u0d29\3\2\2\2\u0d2a\u0d2b"+
                    "\3\2\2\2\u0d2b\u0d2e\3\2\2\2\u0d2c\u0d2d\7\u0108\2\2\u0d2d\u0d2f\t)\2"+
                    "\2\u0d2e\u0d2c\3\2\2\2\u0d2e\u0d2f\3\2\2\2\u0d2f\u01ab\3\2\2\2\u0d30\u0d31"+
                    "\7\u009d\2\2\u0d31\u0d33\7\u01a7\2\2\u0d32\u0d34\5\u01ae\u00d8\2\u0d33"+
                    "\u0d32\3\2\2\2\u0d33\u0d34\3\2\2\2\u0d34\u0d36\3\2\2\2\u0d35\u0d37\5\u01b0"+
                    "\u00d9\2\u0d36\u0d35\3\2\2\2\u0d36\u0d37\3\2\2\2\u0d37\u01ad\3\2\2\2\u0d38"+
                    "\u0d39\7\u010d\2\2\u0d39\u0d3e\5\u02d4\u016b\2\u0d3a\u0d3b\7\u0204\2\2"+
                    "\u0d3b\u0d3d\5\u02d4\u016b\2\u0d3c\u0d3a\3\2\2\2\u0d3d\u0d40\3\2\2\2\u0d3e"+
                    "\u0d3c\3\2\2\2\u0d3e\u0d3f\3\2\2\2\u0d3f\u01af\3\2\2\2\u0d40\u0d3e\3\2"+
                    "\2\2\u0d41\u0d42\7\u0172\2\2\u0d42\u0d47\7\u00d8\2\2\u0d43\u0d47\7\u0106"+
                    "\2\2\u0d44\u0d45\7\u01b7\2\2\u0d45\u0d47\5\u0202\u0102\2\u0d46\u0d41\3"+
                    "\2\2\2\u0d46\u0d43\3\2\2\2\u0d46\u0d44\3\2\2\2\u0d47\u01b1\3\2\2\2\u0d48"+
                    "\u0d49\7\u01a7\2\2\u0d49\u0d4a\5\u01e0\u00f1\2\u0d4a\u0d4c\5\u01b4\u00db"+
                    "\2\u0d4b\u0d4d\5\u0292\u014a\2\u0d4c\u0d4b\3\2\2\2\u0d4c\u0d4d\3\2\2\2"+
                    "\u0d4d\u0d4f\3\2\2\2\u0d4e\u0d50\5\u01e2\u00f2\2\u0d4f\u0d4e\3\2\2\2\u0d4f"+
                    "\u0d50\3\2\2\2\u0d50\u0d52\3\2\2\2\u0d51\u0d53\5\u01e4\u00f3\2\u0d52\u0d51"+
                    "\3\2\2\2\u0d52\u0d53\3\2\2\2\u0d53\u01b3\3\2\2\2\u0d54\u0d64\7\u0167\2"+
                    "\2\u0d55\u0d5a\5\u01b6\u00dc\2\u0d56\u0d57\7\u0204\2\2\u0d57\u0d59\5\u01b6"+
                    "\u00dc\2\u0d58\u0d56\3\2\2\2\u0d59\u0d5c\3\2\2\2\u0d5a\u0d58\3\2\2\2\u0d5a"+
                    "\u0d5b\3\2\2\2\u0d5b\u0d65\3\2\2\2\u0d5c\u0d5a\3\2\2\2\u0d5d\u0d5e\7\u01ae"+
                    "\2\2\u0d5e\u0d5f\7\u01fe\2\2\u0d5f\u0d60\5\u02fc\u017f\2\u0d60\u0d61\7"+
                    "\u01ff\2\2\u0d61\u0d62\7\u0215\2\2\u0d62\u0d63\5\u0202\u0102\2\u0d63\u0d65"+
                    "\3\2\2\2\u0d64\u0d55\3\2\2\2\u0d64\u0d5d\3\2\2\2\u0d65\u01b5\3\2\2\2\u0d66"+
                    "\u0d67\5\u02d4\u016b\2\u0d67\u0d68\7\u0215\2\2\u0d68\u0d69\5\u0202\u0102"+
                    "\2\u0d69\u0d78\3\2\2\2\u0d6a\u0d6b\7\u01fe\2\2\u0d6b\u0d70\5\u02d4\u016b"+
                    "\2\u0d6c\u0d6d\7\u0204\2\2\u0d6d\u0d6f\5\u02d4\u016b\2\u0d6e\u0d6c\3\2"+
                    "\2\2\u0d6f\u0d72\3\2\2\2\u0d70\u0d6e\3\2\2\2\u0d70\u0d71\3\2\2\2\u0d71"+
                    "\u0d73\3\2\2\2\u0d72\u0d70\3\2\2\2\u0d73\u0d74\7\u01ff\2\2\u0d74\u0d75"+
                    "\7\u0215\2\2\u0d75\u0d76\5\u0148\u00a5\2\u0d76\u0d78\3\2\2\2\u0d77\u0d66"+
                    "\3\2\2\2\u0d77\u0d6a\3\2\2\2\u0d78\u01b7\3\2\2\2\u0d79\u0d7b\7o\2\2\u0d7a"+
                    "\u0d7c\7\u00a0\2\2\u0d7b\u0d7a\3\2\2\2\u0d7b\u0d7c\3\2\2\2\u0d7c\u0d7d"+
                    "\3\2\2\2\u0d7d\u0d7f\5\u01e0\u00f1\2\u0d7e\u0d80\5\u0292\u014a\2\u0d7f"+
                    "\u0d7e\3\2\2\2\u0d7f\u0d80\3\2\2\2\u0d80\u0d82\3\2\2\2\u0d81\u0d83\5\u01e2"+
                    "\u00f2\2\u0d82\u0d81\3\2\2\2\u0d82\u0d83\3\2\2\2\u0d83\u0d85\3\2\2\2\u0d84"+
                    "\u0d86\5\u01e4\u00f3\2\u0d85\u0d84\3\2\2\2\u0d85\u0d86\3\2\2\2\u0d86\u01b9"+
                    "\3\2\2\2\u0d87\u0d8a\7\u00bb\2\2\u0d88\u0d8b\5\u01bc\u00df\2\u0d89\u0d8b"+
                    "\5\u01be\u00e0\2\u0d8a\u0d88\3\2\2\2\u0d8a\u0d89\3\2\2\2\u0d8b\u01bb\3"+
                    "\2\2\2\u0d8c\u0d92\5\u01c8\u00e5\2\u0d8d\u0d8f\5\u01ca\u00e6\2\u0d8e\u0d90"+
                    "\5\u01e2\u00f2\2\u0d8f\u0d8e\3\2\2\2\u0d8f\u0d90\3\2\2\2\u0d90\u0d93\3"+
                    "\2\2\2\u0d91\u0d93\5\u013e\u00a0\2\u0d92\u0d8d\3\2\2\2\u0d92\u0d91\3\2"+
                    "\2\2\u0d93\u0d95\3\2\2\2\u0d94\u0d96\5\u01e4\u00f3\2\u0d95\u0d94\3\2\2"+
                    "\2\u0d95\u0d96\3\2\2\2\u0d96\u01bd\3\2\2\2\u0d97\u0d99\7\17\2\2\u0d98"+
                    "\u0d9a\5\u01c0\u00e1\2\u0d99\u0d98\3\2\2\2\u0d9a\u0d9b\3\2\2\2\u0d9b\u0d99"+
                    "\3\2\2\2\u0d9b\u0d9c\3\2\2\2\u0d9c\u0d9f\3\2\2\2\u0d9d\u0d9f\5\u01c2\u00e2"+
                    "\2\u0d9e\u0d97\3\2\2\2\u0d9e\u0d9d\3\2\2\2\u0d9f\u0da0\3\2\2\2\u0da0\u0da1"+
                    "\5\u013e\u00a0\2\u0da1\u01bf\3\2\2\2\u0da2\u0da4\5\u01c8\u00e5\2\u0da3"+
                    "\u0da5\5\u01ca\u00e6\2\u0da4\u0da3\3\2\2\2\u0da4\u0da5\3\2\2\2\u0da5\u0da7"+
                    "\3\2\2\2\u0da6\u0da8\5\u01e4\u00f3\2\u0da7\u0da6\3\2\2\2\u0da7\u0da8\3"+
                    "\2\2\2\u0da8\u01c1\3\2\2\2\u0da9\u0dab\t*\2\2\u0daa\u0da9\3\2\2\2\u0daa"+
                    "\u0dab\3\2\2\2\u0dab\u0dad\3\2\2\2\u0dac\u0dae\5\u01c4\u00e3\2\u0dad\u0dac"+
                    "\3\2\2\2\u0dae\u0daf\3\2\2\2\u0daf\u0dad\3\2\2\2\u0daf\u0db0\3\2\2\2\u0db0"+
                    "\u0db2\3\2\2\2\u0db1\u0db3\5\u01c6\u00e4\2\u0db2\u0db1\3\2\2\2\u0db2\u0db3"+
                    "\3\2\2\2\u0db3\u01c3\3\2\2\2\u0db4\u0db5\7\u01ba\2\2\u0db5\u0db6\5\u01fe"+
                    "\u0100\2\u0db6\u0db8\7\u018a\2\2\u0db7\u0db9\5\u01c0\u00e1\2\u0db8\u0db7"+
                    "\3\2\2\2\u0db9\u0dba\3\2\2\2\u0dba\u0db8\3\2\2\2\u0dba\u0dbb\3\2\2\2\u0dbb"+
                    "\u01c5\3\2\2\2\u0dbc\u0dbe\7}\2\2\u0dbd\u0dbf\5\u01c0\u00e1\2\u0dbe\u0dbd"+
                    "\3\2\2\2\u0dbf\u0dc0\3\2\2\2\u0dc0\u0dbe\3\2\2\2\u0dc0\u0dc1\3\2\2\2\u0dc1"+
                    "\u01c7\3\2\2\2\u0dc2\u0dc3\7\u00c2\2\2\u0dc3\u0dcf\5\u01e0\u00f1\2\u0dc4"+
                    "\u0dc5\7\u01fe\2\2\u0dc5\u0dca\5\u02d4\u016b\2\u0dc6\u0dc7\7\u0204\2\2"+
                    "\u0dc7\u0dc9\5\u02d4\u016b\2\u0dc8\u0dc6\3\2\2\2\u0dc9\u0dcc\3\2\2\2\u0dca"+
                    "\u0dc8\3\2\2\2\u0dca\u0dcb\3\2\2\2\u0dcb\u0dcd\3\2\2\2\u0dcc\u0dca\3\2"+
                    "\2\2\u0dcd\u0dce\7\u01ff\2\2\u0dce\u0dd0\3\2\2\2\u0dcf\u0dc4\3\2\2\2\u0dcf"+
                    "\u0dd0\3\2\2\2\u0dd0\u01c9\3\2\2\2\u0dd1\u0dd5\7\u01af\2\2\u0dd2\u0dd6"+
                    "\5\u01fc\u00ff\2\u0dd3\u0dd6\5\u02ce\u0168\2\u0dd4\u0dd6\5\u01f8\u00fd"+
                    "\2\u0dd5\u0dd2\3\2\2\2\u0dd5\u0dd3\3\2\2\2\u0dd5\u0dd4\3\2\2\2\u0dd6\u01cb"+
                    "\3\2\2\2\u0dd7\u0dd8\7\u00e4\2\2\u0dd8\u0dd9\7\u00c2\2\2\u0dd9\u0ddb\5"+
                    "\u02d6\u016c\2\u0dda\u0ddc\5\u028e\u0148\2\u0ddb\u0dda\3\2\2\2\u0ddb\u0ddc"+
                    "\3\2\2\2\u0ddc\u0ddd\3\2\2\2\u0ddd\u0dde\7\u01ac\2\2\u0dde\u0ddf\5\u01d6"+
                    "\u00ec\2\u0ddf\u0de0\7\u0111\2\2\u0de0\u0de1\7\u01fe\2\2\u0de1\u0de2\5"+
                    "\u01fe\u0100\2\u0de2\u0deb\7\u01ff\2\2\u0de3\u0de5\5\u01ce\u00e8\2\u0de4"+
                    "\u0de6\5\u01d4\u00eb\2\u0de5\u0de4\3\2\2\2\u0de5\u0de6\3\2\2\2\u0de6\u0dec"+
                    "\3\2\2\2\u0de7\u0de9\5\u01d4\u00eb\2\u0de8\u0dea\5\u01ce\u00e8\2\u0de9"+
                    "\u0de8\3\2\2\2\u0de9\u0dea\3\2\2\2\u0dea\u0dec\3\2\2\2\u0deb\u0de3\3\2"+
                    "\2\2\u0deb\u0de7\3\2\2\2\u0deb\u0dec\3\2\2\2\u0dec\u0dee\3\2\2\2\u0ded"+
                    "\u0def\5\u01e4\u00f3\2\u0dee\u0ded\3\2\2\2\u0dee\u0def\3\2\2\2\u0def\u01cd"+
                    "\3\2\2\2\u0df0\u0df1\7\u01ba\2\2\u0df1\u0df2\7\u00e0\2\2\u0df2\u0df3\7"+
                    "\u018a\2\2\u0df3\u0df4\7\u01a7\2\2\u0df4\u0df5\7\u0167\2\2\u0df5\u0dfa"+
                    "\5\u01d0\u00e9\2\u0df6\u0df7\7\u0204\2\2\u0df7\u0df9\5\u01d0\u00e9\2\u0df8"+
                    "\u0df6\3\2\2\2\u0df9\u0dfc\3\2\2\2\u0dfa\u0df8\3\2\2\2\u0dfa\u0dfb\3\2"+
                    "\2\2\u0dfb\u0dfe\3\2\2\2\u0dfc\u0dfa\3\2\2\2\u0dfd\u0dff\5\u0292\u014a"+
                    "\2\u0dfe\u0dfd\3\2\2\2\u0dfe\u0dff\3\2\2\2\u0dff\u0e01\3\2\2\2\u0e00\u0e02"+
                    "\5\u01d2\u00ea\2\u0e01\u0e00\3\2\2\2\u0e01\u0e02\3\2\2\2\u0e02\u01cf\3"+
                    "\2\2\2\u0e03\u0e04\5\u02d4\u016b\2\u0e04\u0e05\7\u0215\2\2\u0e05\u0e06"+
                    "\5\u0202\u0102\2\u0e06\u01d1\3\2\2\2\u0e07\u0e08\7o\2\2\u0e08\u0e09\5"+
                    "\u0292\u014a\2\u0e09\u01d3\3\2\2\2\u0e0a\u0e0b\7\u01ba\2\2\u0e0b\u0e0c"+
                    "\7\u0105\2\2\u0e0c\u0e0d\7\u00e0\2\2\u0e0d\u0e0e\7\u018a\2\2\u0e0e\u0e1a"+
                    "\7\u00bb\2\2\u0e0f\u0e10\7\u01fe\2\2\u0e10\u0e15\5\u02d4\u016b\2\u0e11"+
                    "\u0e12\7\u0204\2\2\u0e12\u0e14\5\u02d4\u016b\2\u0e13\u0e11\3\2\2\2\u0e14"+
                    "\u0e17\3\2\2\2\u0e15\u0e13\3\2\2\2\u0e15\u0e16\3\2\2\2\u0e16\u0e18\3\2"+
                    "\2\2\u0e17\u0e15\3\2\2\2\u0e18\u0e19\7\u01ff\2\2\u0e19\u0e1b\3\2\2\2\u0e1a"+
                    "\u0e0f\3\2\2\2\u0e1a\u0e1b\3\2\2\2\u0e1b\u0e1c\3\2\2\2\u0e1c\u0e1d\7\u01af"+
                    "\2\2\u0e1d\u0e1f\5\u01fc\u00ff\2\u0e1e\u0e20\5\u0292\u014a\2\u0e1f\u0e1e"+
                    "\3\2\2\2\u0e1f\u0e20\3\2\2\2\u0e20\u01d5\3\2\2\2\u0e21\u0e27\5\u02d6\u016c"+
                    "\2\u0e22\u0e23\7\u01fe\2\2\u0e23\u0e24\5\u013e\u00a0\2\u0e24\u0e25\7\u01ff"+
                    "\2\2\u0e25\u0e27\3\2\2\2\u0e26\u0e21\3\2\2\2\u0e26\u0e22\3\2\2\2\u0e27"+
                    "\u0e29\3\2\2\2\u0e28\u0e2a\5\u028e\u0148\2\u0e29\u0e28\3\2\2\2\u0e29\u0e2a"+
                    "\3\2\2\2\u0e2a\u01d7\3\2\2\2\u0e2b\u0e2c\7\u00d7\2\2\u0e2c\u0e2d\7\u0188"+
                    "\2\2\u0e2d\u0e32\5\u01dc\u00ef\2\u0e2e\u0e2f\7\u0204\2\2\u0e2f\u0e31\5"+
                    "\u01dc\u00ef\2\u0e30\u0e2e\3\2\2\2\u0e31\u0e34\3\2\2\2\u0e32\u0e30\3\2"+
                    "\2\2\u0e32\u0e33\3\2\2\2\u0e33\u0e35\3\2\2\2\u0e34\u0e32\3\2\2\2\u0e35"+
                    "\u0e36\7\u00ae\2\2\u0e36\u0e37\5\u01de\u00f0\2\u0e37\u0e39\7\u00ea\2\2"+
                    "\u0e38\u0e3a\5\u01da\u00ee\2\u0e39\u0e38\3\2\2\2\u0e39\u0e3a\3\2\2\2\u0e3a"+
                    "\u01d9\3\2\2\2\u0e3b\u0e3c\7\u01b7\2\2\u0e3c\u0e3f\5\u0202\u0102\2\u0e3d"+
                    "\u0e3f\7\u0106\2\2\u0e3e\u0e3b\3\2\2\2\u0e3e\u0e3d\3\2\2\2\u0e3f\u01db"+
                    "\3\2\2\2\u0e40\u0e42\5\u02d6\u016c\2\u0e41\u0e43\5\u028a\u0146\2\u0e42"+
                    "\u0e41\3\2\2\2\u0e42\u0e43\3\2\2\2\u0e43\u01dd\3\2\2\2\u0e44\u0e45\7\u0151"+
                    "\2\2\u0e45\u0e51\7\u016a\2\2\u0e46\u0e47\7\u0151\2\2\u0e47\u0e51\7\u008c"+
                    "\2\2\u0e48\u0e4a\7\u016a\2\2\u0e49\u0e4b\7\u01a7\2\2\u0e4a\u0e49\3\2\2"+
                    "\2\u0e4a\u0e4b\3\2\2\2\u0e4b\u0e51\3\2\2\2\u0e4c\u0e4d\7\u016a\2\2\u0e4d"+
                    "\u0e4e\7\u0151\2\2\u0e4e\u0e51\7\u008c\2\2\u0e4f\u0e51\7\u008c\2\2\u0e50"+
                    "\u0e44\3\2\2\2\u0e50\u0e46\3\2\2\2\u0e50\u0e48\3\2\2\2\u0e50\u0e4c\3\2"+
                    "\2\2\u0e50\u0e4f\3\2\2\2\u0e51\u01df\3\2\2\2\u0e52\u0e59\5\u01ea\u00f6"+
                    "\2\u0e53\u0e54\7\u0112\2\2\u0e54\u0e55\7\u01fe\2\2\u0e55\u0e56\5\u01ea"+
                    "\u00f6\2\u0e56\u0e57\7\u01ff\2\2\u0e57\u0e59\3\2\2\2\u0e58\u0e52\3\2\2"+
                    "\2\u0e58\u0e53\3\2\2\2\u0e59\u0e5b\3\2\2\2\u0e5a\u0e5c\5\u028e\u0148\2"+
                    "\u0e5b\u0e5a\3\2\2\2\u0e5b\u0e5c\3\2\2\2\u0e5c\u01e1\3\2\2\2\u0e5d\u0e5e"+
                    "\t\27\2\2\u0e5e\u0e63\5\u0202\u0102\2\u0e5f\u0e60\7\u0204\2\2\u0e60\u0e62"+
                    "\5\u0202\u0102\2\u0e61\u0e5f\3\2\2\2\u0e62\u0e65\3\2\2\2\u0e63\u0e61\3"+
                    "\2\2\2\u0e63\u0e64\3\2\2\2\u0e64\u0e66\3\2\2\2\u0e65\u0e63\3\2\2\2\u0e66"+
                    "\u0e67\5\u0298\u014d\2\u0e67\u01e3\3\2\2\2\u0e68\u0e69\7\u00d9\2\2\u0e69"+
                    "\u0e6b\7\u0084\2\2\u0e6a\u0e6c\5\u01e6\u00f4\2\u0e6b\u0e6a\3\2\2\2\u0e6b"+
                    "\u0e6c\3\2\2\2\u0e6c\u0e6e\3\2\2\2\u0e6d\u0e6f\5\u0204\u0103\2\u0e6e\u0e6d"+
                    "\3\2\2\2\u0e6e\u0e6f\3\2\2\2\u0e6f\u0e71\3\2\2\2\u0e70\u0e72\5\u01e8\u00f5"+
                    "\2\u0e71\u0e70\3\2\2\2\u0e71\u0e72\3\2\2\2\u0e72\u01e5\3\2\2\2\u0e73\u0e74"+
                    "\7\u00c2\2\2\u0e74\u0e75\5\u02d6\u016c\2\u0e75\u01e7\3\2\2\2\u0e76\u0e77"+
                    "\7\u0141\2\2\u0e77\u0e7a\7\u00d5\2\2\u0e78\u0e7b\7\u01a4\2\2\u0e79\u0e7b"+
                    "\5\u0204\u0103\2\u0e7a\u0e78\3\2\2\2\u0e7a\u0e79\3\2\2\2\u0e7b\u01e9\3"+
                    "\2\2\2\u0e7c\u0e89\5\u01ec\u00f7\2\u0e7d\u0e7e\7\u01fe\2\2\u0e7e\u0e80"+
                    "\5\u013e\u00a0\2\u0e7f\u0e81\5\u01ee\u00f8\2\u0e80\u0e7f\3\2\2\2\u0e80"+
                    "\u0e81\3\2\2\2\u0e81\u0e82\3\2\2\2\u0e82\u0e83\7\u01ff\2\2\u0e83\u0e89"+
                    "\3\2\2\2\u0e84\u0e86\5\u02d6\u016c\2\u0e85\u0e87\5\u01f0\u00f9\2\u0e86"+
                    "\u0e85\3\2\2\2\u0e86\u0e87\3\2\2\2\u0e87\u0e89\3\2\2\2\u0e88\u0e7c\3\2"+
                    "\2\2\u0e88\u0e7d\3\2\2\2\u0e88\u0e84\3\2\2\2\u0e89\u01eb\3\2\2\2\u0e8a"+
                    "\u0e97\t+\2\2\u0e8b\u0e8c\7\u01fe\2\2\u0e8c\u0e8d\5\u0148\u00a5\2\u0e8d"+
                    "\u0e8e\7\u01ff\2\2\u0e8e\u0e98\3\2\2\2\u0e8f\u0e90\7\u01fe\2\2\u0e90\u0e91"+
                    "\5\u0202\u0102\2\u0e91\u0e95\7\u01ff\2\2\u0e92\u0e93\7\u01fe\2\2\u0e93"+
                    "\u0e94\7\u0202\2\2\u0e94\u0e96\7\u01ff\2\2\u0e95\u0e92\3\2\2\2\u0e95\u0e96"+
                    "\3\2\2\2\u0e96\u0e98\3\2\2\2\u0e97\u0e8b\3\2\2\2\u0e97\u0e8f\3\2\2\2\u0e98"+
                    "\u01ed\3\2\2\2\u0e99\u0ea2\7\u01be\2\2\u0e9a\u0e9b\7\u013b\2\2\u0e9b\u0ea3"+
                    "\7\u0112\2\2\u0e9c\u0e9d\7;\2\2\u0e9d\u0ea0\7\u0114\2\2\u0e9e\u0e9f\7"+
                    "K\2\2\u0e9f\u0ea1\5\u02b8\u015d\2\u0ea0\u0e9e\3\2\2\2\u0ea0\u0ea1\3\2"+
                    "\2\2\u0ea1\u0ea3\3\2\2\2\u0ea2\u0e9a\3\2\2\2\u0ea2\u0e9c\3\2\2\2\u0ea3"+
                    "\u01ef\3\2\2\2\u0ea4\u0ea6\7\u0155\2\2\u0ea5\u0ea7\7)\2\2\u0ea6\u0ea5"+
                    "\3\2\2\2\u0ea6\u0ea7\3\2\2\2\u0ea7\u0ea8\3\2\2\2\u0ea8\u0ea9\7\u01fe\2"+
                    "\2\u0ea9\u0eac\5\u0202\u0102\2\u0eaa\u0eab\7\u0204\2\2\u0eab\u0ead\5\u0202"+
                    "\u0102\2\u0eac\u0eaa\3\2\2\2\u0eac\u0ead\3\2\2\2\u0ead\u0eae\3\2\2\2\u0eae"+
                    "\u0eb0\7\u01ff\2\2\u0eaf\u0eb1\5\u01f2\u00fa\2\u0eb0\u0eaf\3\2\2\2\u0eb0"+
                    "\u0eb1\3\2\2\2\u0eb1\u01f1\3\2\2\2\u0eb2\u0eb3\7\u015d\2\2\u0eb3\u0eb4"+
                    "\7\u01fe\2\2\u0eb4\u0eb5\5\u0202\u0102\2\u0eb5\u0eb6\7\u01ff\2\2\u0eb6"+
                    "\u01f3\3\2\2\2\u0eb7\u0eb8\7[\2\2\u0eb8\u0eb9\7\u01fe\2\2\u0eb9\u0eba"+
                    "\5\u0148\u00a5\2\u0eba\u0ebb\7\u01ff\2\2\u0ebb\u0eca\3\2\2\2\u0ebc\u0ebd"+
                    "\5\u02cc\u0167\2\u0ebd\u0ebe\7\u0129\2\2\u0ebe\u0eca\3\2\2\2\u0ebf\u0ec0"+
                    "\5\u02cc\u0167\2\u0ec0\u0ec1\7\u0128\2\2\u0ec1\u0eca\3\2\2\2\u0ec2\u0ec3"+
                    "\5\u02cc\u0167\2\u0ec3\u0ec4\7\u0125\2\2\u0ec4\u0eca\3\2\2\2\u0ec5\u0ec6"+
                    "\5\u02cc\u0167\2\u0ec6\u0ec7\7\u012a\2\2\u0ec7\u0eca\3\2\2\2\u0ec8\u0eca"+
                    "\5\u01f6\u00fc\2\u0ec9\u0eb7\3\2\2\2\u0ec9\u0ebc\3\2\2\2\u0ec9\u0ebf\3"+
                    "\2\2\2\u0ec9\u0ec2\3\2\2\2\u0ec9\u0ec5\3\2\2\2\u0ec9\u0ec8\3\2\2\2\u0eca"+
                    "\u01f5\3\2\2\2\u0ecb\u0ecc\7\u0179\2\2\u0ecc\u01f7\3\2\2\2\u0ecd\u0ed4"+
                    "\5\u02d0\u0169\2\u0ece\u0ecf\7\u01fe\2\2\u0ecf\u0ed0\5\u0202\u0102\2\u0ed0"+
                    "\u0ed1\7\u01ff\2\2\u0ed1\u0ed3\3\2\2\2\u0ed2\u0ece\3\2\2\2\u0ed3\u0ed6"+
                    "\3\2\2\2\u0ed4\u0ed2\3\2\2\2\u0ed4\u0ed5\3\2\2\2\u0ed5\u0ed9\3\2\2\2\u0ed6"+
                    "\u0ed4\3\2\2\2\u0ed7\u0ed8\7\u01f7\2\2\u0ed8\u0eda\5\u02c8\u0165\2\u0ed9"+
                    "\u0ed7\3\2\2\2\u0ed9\u0eda\3\2\2\2\u0eda\u01f9\3\2\2\2\u0edb\u0f02\5\u01f8"+
                    "\u00fd\2\u0edc\u0edd\5\u01f8\u00fd\2\u0edd\u0ede\7\u01f7\2\2\u0ede\u0edf"+
                    "\7\u0098\2\2\u0edf\u0f02\3\2\2\2\u0ee0\u0ee1\5\u01f8\u00fd\2\u0ee1\u0ee2"+
                    "\7\u01f7\2\2\u0ee2\u0ee3\7\u00cb\2\2\u0ee3\u0f02\3\2\2\2\u0ee4\u0ee5\5"+
                    "\u01f8\u00fd\2\u0ee5\u0ee6\7\u01f7\2\2\u0ee6\u0ee7\7\u008e\2\2\u0ee7\u0ee8"+
                    "\7\u01fe\2\2\u0ee8\u0ee9\5\u0202\u0102\2\u0ee9\u0eea\7\u01ff\2\2\u0eea"+
                    "\u0f02\3\2\2\2\u0eeb\u0eec\5\u01f8\u00fd\2\u0eec\u0eed\7\u01f7\2\2\u0eed"+
                    "\u0eee\7\u0136\2\2\u0eee\u0eef\7\u01fe\2\2\u0eef\u0ef0\5\u0202\u0102\2"+
                    "\u0ef0\u0ef1\7\u01ff\2\2\u0ef1\u0f02\3\2\2\2\u0ef2\u0ef3\5\u01f8\u00fd"+
                    "\2\u0ef3\u0ef4\7\u01f7\2\2\u0ef4\u0ef5\7\u00f9\2\2\u0ef5\u0ef6\7\u01fe"+
                    "\2\2\u0ef6\u0ef7\5\u0202\u0102\2\u0ef7\u0ef8\7\u01ff\2\2\u0ef8\u0f02\3"+
                    "\2\2\2\u0ef9\u0efa\5\u01f8\u00fd\2\u0efa\u0efb\7\u01f7\2\2\u0efb\u0efc"+
                    "\7U\2\2\u0efc\u0f02\3\2\2\2\u0efd\u0efe\5\u01f8\u00fd\2\u0efe\u0eff\7"+
                    "\u01f7\2\2\u0eff\u0f00\7\u00d5\2\2\u0f00\u0f02\3\2\2\2\u0f01\u0edb\3\2"+
                    "\2\2\u0f01\u0edc\3\2\2\2\u0f01\u0ee0\3\2\2\2\u0f01\u0ee4\3\2\2\2\u0f01"+
                    "\u0eeb\3\2\2\2\u0f01\u0ef2\3\2\2\2\u0f01\u0ef9\3\2\2\2\u0f01\u0efd\3\2"+
                    "\2\2\u0f02\u01fb\3\2\2\2\u0f03\u0f05\7\u01fe\2\2\u0f04\u0f06\5\u0202\u0102"+
                    "\2\u0f05\u0f04\3\2\2\2\u0f05\u0f06\3\2\2\2\u0f06\u0f0b\3\2\2\2\u0f07\u0f08"+
                    "\7\u0204\2\2\u0f08\u0f0a\5\u0202\u0102\2\u0f09\u0f07\3\2\2\2\u0f0a\u0f0d"+
                    "\3\2\2\2\u0f0b\u0f09\3\2\2\2\u0f0b\u0f0c\3\2\2\2\u0f0c\u0f0e\3\2\2\2\u0f0d"+
                    "\u0f0b\3\2\2\2\u0f0e\u0f0f\7\u01ff\2\2\u0f0f\u01fd\3\2\2\2\u0f10\u0f11"+
                    "\5\u0202\u0102\2\u0f11\u01ff\3\2\2\2\u0f12\u0f13\5\u0202\u0102\2\u0f13"+
                    "\u0201\3\2\2\2\u0f14\u0f19\5\u0206\u0104\2\u0f15\u0f16\7\u0115\2\2\u0f16"+
                    "\u0f18\5\u0202\u0102\2\u0f17\u0f15\3\2\2\2\u0f18\u0f1b\3\2\2\2\u0f19\u0f17"+
                    "\3\2\2\2\u0f19\u0f1a\3\2\2\2\u0f1a\u0203\3\2\2\2\u0f1b\u0f19\3\2\2\2\u0f1c"+
                    "\u0f1d\5\u0202\u0102\2\u0f1d\u0205\3\2\2\2\u0f1e\u0f23\5\u0208\u0105\2"+
                    "\u0f1f\u0f20\7\22\2\2\u0f20\u0f22\5\u0208\u0105\2\u0f21\u0f1f\3\2\2\2"+
                    "\u0f22\u0f25\3\2\2\2\u0f23\u0f21\3\2\2\2\u0f23\u0f24\3\2\2\2\u0f24\u0207"+
                    "\3\2\2\2\u0f25\u0f23\3\2\2\2\u0f26\u0f27\7\u0105\2\2\u0f27\u0f2a\5\u0208"+
                    "\u0105\2\u0f28\u0f2a\5\u020a\u0106\2\u0f29\u0f26\3\2\2\2\u0f29\u0f28\3"+
                    "\2\2\2\u0f2a\u0209\3\2\2\2\u0f2b\u0f53\5\u01fa\u00fe\2\u0f2c\u0f4e\5\u020e"+
                    "\u0108\2\u0f2d\u0f2f\7\u00c4\2\2\u0f2e\u0f30\7\u0105\2\2\u0f2f\u0f2e\3"+
                    "\2\2\2\u0f2f\u0f30\3\2\2\2\u0f30\u0f4a\3\2\2\2\u0f31\u0f4b\7\u0107\2\2"+
                    "\u0f32\u0f4b\7\u00f0\2\2\u0f33\u0f4b\7\u0135\2\2\u0f34\u0f4b\7\u00b7\2"+
                    "\2\u0f35\u0f36\7\n\2\2\u0f36\u0f4b\7\u0167\2\2\u0f37\u0f4b\7\177\2\2\u0f38"+
                    "\u0f3a\7\u010d\2\2\u0f39\u0f3b\7\u019f\2\2\u0f3a\u0f39\3\2\2\2\u0f3a\u0f3b"+
                    "\3\2\2\2\u0f3b\u0f3c\3\2\2\2\u0f3c\u0f3e\7\u01fe\2\2\u0f3d\u0f3f\7\u0112"+
                    "\2\2\u0f3e\u0f3d\3\2\2\2\u0f3e\u0f3f\3\2\2\2\u0f3f\u0f40\3\2\2\2\u0f40"+
                    "\u0f45\5\u02e6\u0174\2\u0f41\u0f42\7\u0204\2\2\u0f42\u0f44\5\u02e6\u0174"+
                    "\2\u0f43\u0f41\3\2\2\2\u0f44\u0f47\3\2\2\2\u0f45\u0f43\3\2\2\2\u0f45\u0f46"+
                    "\3\2\2\2\u0f46\u0f48\3\2\2\2\u0f47\u0f45\3\2\2\2\u0f48\u0f49\7\u01ff\2"+
                    "\2\u0f49\u0f4b\3\2\2\2\u0f4a\u0f31\3\2\2\2\u0f4a\u0f32\3\2\2\2\u0f4a\u0f33"+
                    "\3\2\2\2\u0f4a\u0f34\3\2\2\2\u0f4a\u0f35\3\2\2\2\u0f4a\u0f37\3\2\2\2\u0f4a"+
                    "\u0f38\3\2\2\2\u0f4b\u0f4d\3\2\2\2\u0f4c\u0f2d\3\2\2\2\u0f4d\u0f50\3\2"+
                    "\2\2\u0f4e\u0f4c\3\2\2\2\u0f4e\u0f4f\3\2\2\2\u0f4f\u0f53\3\2\2\2\u0f50"+
                    "\u0f4e\3\2\2\2\u0f51\u0f53\5\u01f4\u00fb\2\u0f52\u0f2b\3\2\2\2\u0f52\u0f2c"+
                    "\3\2\2\2\u0f52\u0f51\3\2\2\2\u0f53\u020b\3\2\2\2\u0f54\u0f58\5\u02d0\u0169"+
                    "\2\u0f55\u0f58\5\u01f8\u00fd\2\u0f56\u0f58\5\u010c\u0087\2\u0f57\u0f54"+
                    "\3\2\2\2\u0f57\u0f55\3\2\2\2\u0f57\u0f56\3\2\2\2\u0f58\u020d\3\2\2\2\u0f59"+
                    "\u0f60\5\u020c\u0107\2\u0f5a\u0f5b\7\u00ee\2\2\u0f5b\u0f5d\t,\2\2\u0f5c"+
                    "\u0f5e\t-\2\2\u0f5d\u0f5c\3\2\2\2\u0f5d\u0f5e\3\2\2\2\u0f5e\u0f5f\3\2"+
                    "\2\2\u0f5f\u0f61\5\u020c\u0107\2\u0f60\u0f5a\3\2\2\2\u0f61\u0f62\3\2\2"+
                    "\2\u0f62\u0f60\3\2\2\2\u0f62\u0f63\3\2\2\2\u0f63\u0f71\3\2\2\2\u0f64\u0f6e"+
                    "\5\u0212\u010a\2\u0f65\u0f67\7\u0105\2\2\u0f66\u0f65\3\2\2\2\u0f66\u0f67"+
                    "\3\2\2\2\u0f67\u0f68\3\2\2\2\u0f68\u0f6a\5\u0210\u0109\2\u0f69\u0f6b\7"+
                    "\u010d\2\2\u0f6a\u0f69\3\2\2\2\u0f6a\u0f6b\3\2\2\2\u0f6b\u0f6c\3\2\2\2"+
                    "\u0f6c\u0f6d\5\u021e\u0110\2\u0f6d\u0f6f\3\2\2\2\u0f6e\u0f66\3\2\2\2\u0f6e"+
                    "\u0f6f\3\2\2\2\u0f6f\u0f71\3\2\2\2\u0f70\u0f59\3\2\2\2\u0f70\u0f64\3\2"+
                    "\2\2\u0f71\u020f\3\2\2\2\u0f72\u0f73\t.\2\2\u0f73\u0211\3\2\2\2\u0f74"+
                    "\u0f80\5\u0214\u010b\2\u0f75\u0f7c\7\u0215\2\2\u0f76\u0f7c\5\u0300\u0181"+
                    "\2\u0f77\u0f7c\7\u020c\2\2\u0f78\u0f7c\7\u0212\2\2\u0f79\u0f7c\5\u0304"+
                    "\u0183\2\u0f7a\u0f7c\5\u0302\u0182\2\u0f7b\u0f75\3\2\2\2\u0f7b\u0f76\3"+
                    "\2\2\2\u0f7b\u0f77\3\2\2\2\u0f7b\u0f78\3\2\2\2\u0f7b\u0f79\3\2\2\2\u0f7b"+
                    "\u0f7a\3\2\2\2\u0f7c\u0f7d\3\2\2\2\u0f7d\u0f7f\5\u0214\u010b\2\u0f7e\u0f7b"+
                    "\3\2\2\2\u0f7f\u0f82\3\2\2\2\u0f80\u0f7e\3\2\2\2\u0f80\u0f81\3\2\2\2\u0f81"+
                    "\u0213\3\2\2\2\u0f82\u0f80\3\2\2\2\u0f83\u0f92\5\u021e\u0110\2\u0f84\u0f86"+
                    "\7\u0105\2\2\u0f85\u0f84\3\2\2\2\u0f85\u0f86\3\2\2\2\u0f86\u0f90\3\2\2"+
                    "\2\u0f87\u0f88\7\u00ae\2\2\u0f88\u0f91\5\u021a\u010e\2\u0f89\u0f8a\7#"+
                    "\2\2\u0f8a\u0f91\5\u021c\u010f\2\u0f8b\u0f8c\5\u0216\u010c\2\u0f8c\u0f8e"+
                    "\5\u021e\u0110\2\u0f8d\u0f8f\5\u0218\u010d\2\u0f8e\u0f8d\3\2\2\2\u0f8e"+
                    "\u0f8f\3\2\2\2\u0f8f\u0f91\3\2\2\2\u0f90\u0f87\3\2\2\2\u0f90\u0f89\3\2"+
                    "\2\2\u0f90\u0f8b\3\2\2\2\u0f91\u0f93\3\2\2\2\u0f92\u0f85\3\2\2\2\u0f92"+
                    "\u0f93\3\2\2\2\u0f93\u0f96\3\2\2\2\u0f94\u0f96\5\u010c\u0087\2\u0f95\u0f83"+
                    "\3\2\2\2\u0f95\u0f94\3\2\2\2\u0f96\u0215\3\2\2\2\u0f97\u0f98\t/\2\2\u0f98"+
                    "\u0217\3\2\2\2\u0f99\u0f9a\7\u0085\2\2\u0f9a\u0f9b\5\u021e\u0110\2\u0f9b"+
                    "\u0219\3\2\2\2\u0f9c\u0f9d\7\u01fe\2\2\u0f9d\u0f9e\5\u0148\u00a5\2\u0f9e"+
                    "\u0f9f\7\u01ff\2\2\u0f9f\u0faf\3\2\2\2\u0fa0\u0fa1\7\u01fe\2\2\u0fa1\u0fa6"+
                    "\5\u0220\u0111\2\u0fa2\u0fa3\7\u0204\2\2\u0fa3\u0fa5\5\u0220\u0111\2\u0fa4"+
                    "\u0fa2\3\2\2\2\u0fa5\u0fa8\3\2\2\2\u0fa6\u0fa4\3\2\2\2\u0fa6\u0fa7\3\2"+
                    "\2\2\u0fa7\u0fa9\3\2\2\2\u0fa8\u0fa6\3\2\2\2\u0fa9\u0faa\7\u01ff\2\2\u0faa"+
                    "\u0faf\3\2\2\2\u0fab\u0faf\5\u02f6\u017c\2\u0fac\u0faf\5\u02ee\u0178\2"+
                    "\u0fad\u0faf\5\u02f0\u0179\2\u0fae\u0f9c\3\2\2\2\u0fae\u0fa0\3\2\2\2\u0fae"+
                    "\u0fab\3\2\2\2\u0fae\u0fac\3\2\2\2\u0fae\u0fad\3\2\2\2\u0faf\u021b\3\2"+
                    "\2\2\u0fb0\u0fb1\5\u021e\u0110\2\u0fb1\u0fb2\7\22\2\2\u0fb2\u0fb3\5\u021e"+
                    "\u0110\2\u0fb3\u021d\3\2\2\2\u0fb4\u0fba\5\u0222\u0112\2\u0fb5\u0fb6\5"+
                    "\u0306\u0184\2\u0fb6\u0fb7\5\u0222\u0112\2\u0fb7\u0fb9\3\2\2\2\u0fb8\u0fb5"+
                    "\3\2\2\2\u0fb9\u0fbc\3\2\2\2\u0fba\u0fb8\3\2\2\2\u0fba\u0fbb\3\2\2\2\u0fbb"+
                    "\u021f\3\2\2\2\u0fbc\u0fba\3\2\2\2\u0fbd\u0fbe\5\u021e\u0110\2\u0fbe\u0221"+
                    "\3\2\2\2\u0fbf\u0fc4\5\u0224\u0113\2\u0fc0\u0fc1\t\60\2\2\u0fc1\u0fc3"+
                    "\5\u0224\u0113\2\u0fc2\u0fc0\3\2\2\2\u0fc3\u0fc6\3\2\2\2\u0fc4\u0fc2\3"+
                    "\2\2\2\u0fc4\u0fc5\3\2\2\2\u0fc5\u0223\3\2\2\2\u0fc6\u0fc4\3\2\2\2\u0fc7"+
                    "\u0fcc\5\u0226\u0114\2\u0fc8\u0fc9\t\61\2\2\u0fc9\u0fcb\5\u0226\u0114"+
                    "\2\u0fca\u0fc8\3\2\2\2\u0fcb\u0fce\3\2\2\2\u0fcc\u0fca\3\2\2\2\u0fcc\u0fcd"+
                    "\3\2\2\2\u0fcd\u0225\3\2\2\2\u0fce\u0fcc\3\2\2\2\u0fcf\u0fd8\5\u022a\u0116"+
                    "\2\u0fd0\u0fd5\7\31\2\2\u0fd1\u0fd6\7\u00d6\2\2\u0fd2\u0fd3\7\u018b\2"+
                    "\2\u0fd3\u0fd4\7\u01d4\2\2\u0fd4\u0fd6\5\u0220\u0111\2\u0fd5\u0fd1\3\2"+
                    "\2\2\u0fd5\u0fd2\3\2\2\2\u0fd6\u0fd9\3\2\2\2\u0fd7\u0fd9\5\u0228\u0115"+
                    "\2\u0fd8\u0fd0\3\2\2\2\u0fd8\u0fd7\3\2\2\2\u0fd8\u0fd9\3\2\2\2\u0fd9\u0227"+
                    "\3\2\2\2\u0fda\u0fdf\7a\2\2\u0fdb\u0fdc\7\u01fe\2\2\u0fdc\u0fdd\5\u0220"+
                    "\u0111\2\u0fdd\u0fde\7\u01ff\2\2\u0fde\u0fe0\3\2\2\2\u0fdf\u0fdb\3\2\2"+
                    "\2\u0fdf\u0fe0\3\2\2\2\u0fe0\u0fe1\3\2\2\2\u0fe1\u0fe2\7\u0194\2\2\u0fe2"+
                    "\u0fe7\7\u015c\2\2\u0fe3\u0fe4\7\u01fe\2\2\u0fe4\u0fe5\5\u0220\u0111\2"+
                    "\u0fe5\u0fe6\7\u01ff\2\2\u0fe6\u0fe8\3\2\2\2\u0fe7\u0fe3\3\2\2\2\u0fe7"+
                    "\u0fe8\3\2\2\2\u0fe8\u0ff3\3\2\2\2\u0fe9\u0fee\7\u01d1\2\2\u0fea\u0feb"+
                    "\7\u01fe\2\2\u0feb\u0fec\5\u0220\u0111\2\u0fec\u0fed\7\u01ff\2\2\u0fed"+
                    "\u0fef\3\2\2\2\u0fee\u0fea\3\2\2\2\u0fee\u0fef\3\2\2\2\u0fef\u0ff0\3\2"+
                    "\2\2\u0ff0\u0ff1\7\u0194\2\2\u0ff1\u0ff3\7\u00ed\2\2\u0ff2\u0fda\3\2\2"+
                    "\2\u0ff2\u0fe9\3\2\2\2\u0ff3\u0229\3\2\2\2\u0ff4\u0ff9\5\u0236\u011c\2"+
                    "\u0ff5\u0ff6\7\u0216\2\2\u0ff6\u0ff7\5\u022c\u0117\2\u0ff7\u0ff8\7\u0217"+
                    "\2\2\u0ff8\u0ffa\3\2\2\2\u0ff9\u0ff5\3\2\2\2\u0ff9\u0ffa\3\2\2\2\u0ffa"+
                    "\u022b\3\2\2\2\u0ffb\u0ffe\7\23\2\2\u0ffc\u0ffe\5\u0200\u0101\2\u0ffd"+
                    "\u0ffb\3\2\2\2\u0ffd\u0ffc\3\2\2\2\u0ffe\u1006\3\2\2\2\u0fff\u1002\7\u0204"+
                    "\2\2\u1000\u1003\7\23\2\2\u1001\u1003\5\u0200\u0101\2\u1002\u1000\3\2"+
                    "\2\2\u1002\u1001\3\2\2\2\u1003\u1005\3\2\2\2\u1004\u0fff\3\2\2\2\u1005"+
                    "\u1008\3\2\2\2\u1006\u1004\3\2\2\2\u1006\u1007\3\2\2\2\u1007\u1013\3\2"+
                    "\2\2\u1008\u1006\3\2\2\2\u1009\u100e\5\u022e\u0118\2\u100a\u100b\7\u0204"+
                    "\2\2\u100b\u100d\5\u022e\u0118\2\u100c\u100a\3\2\2\2\u100d\u1010\3\2\2"+
                    "\2\u100e\u100c\3\2\2\2\u100e\u100f\3\2\2\2\u100f\u1013\3\2\2\2\u1010\u100e"+
                    "\3\2\2\2\u1011\u1013\5\u0234\u011b\2\u1012\u0ffd\3\2\2\2\u1012\u1009\3"+
                    "\2\2\2\u1012\u1011\3\2\2\2\u1013\u022d\3\2\2\2\u1014\u1015\7\u009d\2\2"+
                    "\u1015\u1022\5\u02d4\u016b\2\u1016\u1017\7\u00ae\2\2\u1017\u1023\5\u01fc"+
                    "\u00ff\2\u1018\u101a\5\u0230\u0119\2\u1019\u1018\3\2\2\2\u1019\u101a\3"+
                    "\2\2\2\u101a\u101b\3\2\2\2\u101b\u101c\7\u00a0\2\2\u101c\u101d\5\u0202"+
                    "\u0102\2\u101d\u101e\7\u0194\2\2\u101e\u101f\5\u0202\u0102\2\u101f\u1020"+
                    "\5\u0232\u011a\2\u1020\u1021\5\u0202\u0102\2\u1021\u1023\3\2\2\2\u1022"+
                    "\u1016\3\2\2\2\u1022\u1019\3\2\2\2\u1023\u022f\3\2\2\2\u1024\u1025\7\u00d1"+
                    "\2\2\u1025\u1026\5\u0202\u0102\2\u1026\u0231\3\2\2\2\u1027\u1028\t\62"+
                    "\2\2\u1028\u0233\3\2\2\2\u1029\u102a\7\u009d\2\2\u102a\u102b\7\u01fe\2"+
                    "\2\u102b\u1030\5\u02d4\u016b\2\u102c\u102d\7\u0204\2\2\u102d\u102f\5\u02d4"+
                    "\u016b\2\u102e\u102c\3\2\2\2\u102f\u1032\3\2\2\2\u1030\u102e\3\2\2\2\u1030"+
                    "\u1031\3\2\2\2\u1031\u1033\3\2\2\2\u1032\u1030\3\2\2\2\u1033\u1034\7\u01ff"+
                    "\2\2\u1034\u1035\7\u00ae\2\2\u1035\u1042\7\u01fe\2\2\u1036\u1043\5\u0148"+
                    "\u00a5\2\u1037\u1038\7\u01fe\2\2\u1038\u103d\5\u01fc\u00ff\2\u1039\u103a"+
                    "\7\u0204\2\2\u103a\u103c\5\u01fc\u00ff\2\u103b\u1039\3\2\2\2\u103c\u103f"+
                    "\3\2\2\2\u103d\u103b\3\2\2\2\u103d\u103e\3\2\2\2\u103e\u1040\3\2\2\2\u103f"+
                    "\u103d\3\2\2\2\u1040\u1041\7\u01ff\2\2\u1041\u1043\3\2\2\2\u1042\u1036"+
                    "\3\2\2\2\u1042\u1037\3\2\2\2\u1043\u1044\3\2\2\2\u1044\u1045\7\u01ff\2"+
                    "\2\u1045\u0235\3\2\2\2\u1046\u1047\7\u0203\2\2\u1047\u1059\5\u0236\u011c"+
                    "\2\u1048\u1049\7\u0202\2\2\u1049\u1059\5\u0236\u011c\2\u104a\u104b\7\u0136"+
                    "\2\2\u104b\u1059\5\u0236\u011c\2\u104c\u104d\7I\2\2\u104d\u1059\5\u0236"+
                    "\u011c\2\u104e\u104f\7\u00f8\2\2\u104f\u1059\5\u0236\u011c\2\u1050\u1051"+
                    "\7v\2\2\u1051\u1059\5\u0236\u011c\2\u1052\u1053\7\17\2\2\u1053\u1059\5"+
                    "\u0236\u011c\2\u1054\u1059\5\u0238\u011d\2\u1055\u1059\5\u024a\u0126\2"+
                    "\u1056\u1059\5\u0254\u012b\2\u1057\u1059\5\u0244\u0123\2\u1058\u1046\3"+
                    "\2\2\2\u1058\u1048\3\2\2\2\u1058\u104a\3\2\2\2\u1058\u104c\3\2\2\2\u1058"+
                    "\u104e\3\2\2\2\u1058\u1050\3\2\2\2\u1058\u1052\3\2\2\2\u1058\u1054\3\2"+
                    "\2\2\u1058\u1055\3\2\2\2\u1058\u1056\3\2\2\2\u1058\u1057\3\2\2\2\u1059"+
                    "\u0237\3\2\2\2\u105a\u105d\5\u023e\u0120\2\u105b\u105d\5\u023a\u011e\2"+
                    "\u105c\u105a\3\2\2\2\u105c\u105b\3\2\2\2\u105d\u0239\3\2\2\2\u105e\u1060"+
                    "\5\u02ba\u015e\2\u105f\u105e\3\2\2\2\u105f\u1060\3\2\2\2\u1060\u1061\3"+
                    "\2\2\2\u1061\u1062\7\66\2\2\u1062\u1064\5\u0202\u0102\2\u1063\u1065\5"+
                    "\u023c\u011f\2\u1064\u1063\3\2\2\2\u1065\u1066\3\2\2\2\u1066\u1064\3\2"+
                    "\2\2\u1066\u1067\3\2\2\2\u1067\u1069\3\2\2\2\u1068\u106a\5\u0242\u0122"+
                    "\2\u1069\u1068\3\2\2\2\u1069\u106a\3\2\2\2\u106a\u106b\3\2\2\2\u106b\u106d"+
                    "\7\u0082\2\2\u106c\u106e\7\66\2\2\u106d\u106c\3\2\2\2\u106d\u106e\3\2"+
                    "\2\2\u106e\u1070\3\2\2\2\u106f\u1071\5\u02ba\u015e\2\u1070\u106f\3\2\2"+
                    "\2\u1070\u1071\3\2\2\2\u1071\u023b\3\2\2\2\u1072\u1073\7\u01ba\2\2\u1073"+
                    "\u1074\5\u0204\u0103\2\u1074\u1077\7\u018a\2\2\u1075\u1078\5\u00e4s\2"+
                    "\u1076\u1078\5\u0204\u0103\2\u1077\u1075\3\2\2\2\u1077\u1076\3\2\2\2\u1078"+
                    "\u023d\3\2\2\2\u1079\u107b\5\u02ba\u015e\2\u107a\u1079\3\2\2\2\u107a\u107b"+
                    "\3\2\2\2\u107b\u107c\3\2\2\2\u107c\u107e\7\66\2\2\u107d\u107f\5\u0240"+
                    "\u0121\2\u107e\u107d\3\2\2\2\u107f\u1080\3\2\2\2\u1080\u107e\3\2\2\2\u1080"+
                    "\u1081\3\2\2\2\u1081\u1083\3\2\2\2\u1082\u1084\5\u0242\u0122\2\u1083\u1082"+
                    "\3\2\2\2\u1083\u1084\3\2\2\2\u1084\u1085\3\2\2\2\u1085\u1087\7\u0082\2"+
                    "\2\u1086\u1088\7\66\2\2\u1087\u1086\3\2\2\2\u1087\u1088\3\2\2\2\u1088"+
                    "\u108a\3\2\2\2\u1089\u108b\5\u02ba\u015e\2\u108a\u1089\3\2\2\2\u108a\u108b"+
                    "\3\2\2\2\u108b\u023f\3\2\2\2\u108c\u108d\7\u01ba\2\2\u108d\u108e\5\u0200"+
                    "\u0101\2\u108e\u1091\7\u018a\2\2\u108f\u1092\5\u00e4s\2\u1090\u1092\5"+
                    "\u0204\u0103\2\u1091\u108f\3\2\2\2\u1091\u1090\3\2\2\2\u1092\u0241\3\2"+
                    "\2\2\u1093\u1096\7}\2\2\u1094\u1097\5\u00e4s\2\u1095\u1097\5\u0204\u0103"+
                    "\2\u1096\u1094\3\2\2\2\u1096\u1095\3\2\2\2\u1097\u0243\3\2\2\2\u1098\u1099"+
                    "\5\u02f4\u017b\2\u1099\u109a\5\u0308\u0185\2\u109a\u10ae\3\2\2\2\u109b"+
                    "\u10ae\5\u02ee\u0178\2\u109c\u10ae\5\u02f6\u017c\2\u109d\u10ae\5\u02f0"+
                    "\u0179\2\u109e\u10aa\7\u01fe\2\2\u109f\u10a0\5\u0148\u00a5\2\u10a0\u10a4"+
                    "\7\u01ff\2\2\u10a1\u10a3\5\u014a\u00a6\2\u10a2\u10a1\3\2\2\2\u10a3\u10a6"+
                    "\3\2\2\2\u10a4\u10a2\3\2\2\2\u10a4\u10a5\3\2\2\2\u10a5\u10ab\3\2\2\2\u10a6"+
                    "\u10a4\3\2\2\2\u10a7\u10a8\5\u0246\u0124\2\u10a8\u10a9\7\u01ff\2\2\u10a9"+
                    "\u10ab\3\2\2\2\u10aa\u109f\3\2\2\2\u10aa\u10a7\3\2\2\2\u10ab\u10ae\3\2"+
                    "\2\2\u10ac\u10ae\5\u01fa\u00fe\2\u10ad\u1098\3\2\2\2\u10ad\u109b\3\2\2"+
                    "\2\u10ad\u109c\3\2\2\2\u10ad\u109d\3\2\2\2\u10ad\u109e\3\2\2\2\u10ad\u10ac"+
                    "\3\2\2\2\u10ae\u0245\3\2\2\2\u10af\u10b1\5\u0202\u0102\2\u10b0\u10b2\5"+
                    "\u0248\u0125\2\u10b1\u10b0\3\2\2\2\u10b1\u10b2\3\2\2\2\u10b2\u0247\3\2"+
                    "\2\2\u10b3\u10b4\7\u0204\2\2\u10b4\u10b9\5\u0202\u0102\2\u10b5\u10b6\7"+
                    "\u0204\2\2\u10b6\u10b8\5\u0202\u0102\2\u10b7\u10b5\3\2\2\2\u10b8\u10bb"+
                    "\3\2\2\2\u10b9\u10b7\3\2\2\2\u10b9\u10ba\3\2\2\2\u10ba\u0249\3\2\2\2\u10bb"+
                    "\u10b9\3\2\2\2\u10bc\u10cc\t\63\2\2\u10bd\u10be\7\u01fe\2\2\u10be\u10bf"+
                    "\5\u0148\u00a5\2\u10bf\u10c0\7\u01ff\2\2\u10c0\u10cd\3\2\2\2\u10c1\u10c2"+
                    "\7\u01fe\2\2\u10c2\u10c7\5\u0202\u0102\2\u10c3\u10c4\7\u0204\2\2\u10c4"+
                    "\u10c6\5\u0202\u0102\2\u10c5\u10c3\3\2\2\2\u10c6\u10c9\3\2\2\2\u10c7\u10c5"+
                    "\3\2\2\2\u10c7\u10c8\3\2\2\2\u10c8\u10ca\3\2\2\2\u10c9\u10c7\3\2\2\2\u10ca"+
                    "\u10cb\7\u01ff\2\2\u10cb\u10cd\3\2\2\2\u10cc\u10bd\3\2\2\2\u10cc\u10c1"+
                    "\3\2\2\2\u10cd\u024b\3\2\2\2\u10ce\u10cf\7\u0195\2\2\u10cf\u10d0\7\u01fe"+
                    "\2\2\u10d0\u10d5\5\u0202\u0102\2\u10d1\u10d2\7\u0204\2\2\u10d2\u10d4\5"+
                    "\u0202\u0102\2\u10d3\u10d1\3\2\2\2\u10d4\u10d7\3\2\2\2\u10d5\u10d3\3\2"+
                    "\2\2\u10d5\u10d6\3\2\2\2\u10d6\u10d8\3\2\2\2\u10d7\u10d5\3\2\2\2\u10d8"+
                    "\u10d9\7\u01ff\2\2\u10d9\u10e7\3\2\2\2\u10da\u10db\7\u0196\2\2\u10db\u10dc"+
                    "\7\u01fe\2\2\u10dc\u10e1\5\u0202\u0102\2\u10dd\u10de\7\u0204\2\2\u10de"+
                    "\u10e0\5\u0202\u0102\2\u10df\u10dd\3\2\2\2\u10e0\u10e3\3\2\2\2\u10e1\u10df"+
                    "\3\2\2\2\u10e1\u10e2\3\2\2\2\u10e2\u10e4\3\2\2\2\u10e3\u10e1\3\2\2\2\u10e4"+
                    "\u10e5\7\u01ff\2\2\u10e5\u10e7\3\2\2\2\u10e6\u10ce\3\2\2\2\u10e6\u10da"+
                    "\3\2\2\2\u10e7\u024d\3\2\2\2\u10e8\u10e9\t\64\2\2\u10e9\u10f0\7\u01fe"+
                    "\2\2\u10ea\u10eb\7\u00ee\2\2\u10eb\u10ec\7\u01fe\2\2\u10ec\u10ed\5\u0148"+
                    "\u00a5\2\u10ed\u10ee\7\u01ff\2\2\u10ee\u10f1\3\2\2\2\u10ef\u10f1\5\u0220"+
                    "\u0111\2\u10f0\u10ea\3\2\2\2\u10f0\u10ef\3\2\2\2\u10f1\u10f2\3\2\2\2\u10f2"+
                    "\u10f3\7\25\2\2\u10f3\u10f4\5\u02e6\u0174\2\u10f4\u10f5\7\u01ff\2\2\u10f5"+
                    "\u10f8\3\2\2\2\u10f6\u10f8\5\u024c\u0127\2\u10f7\u10e8\3\2\2\2\u10f7\u10f6"+
                    "\3\2\2\2\u10f8\u024f\3\2\2\2\u10f9\u10fa\7A\2\2\u10fa\u10ff\5\u0274\u013b"+
                    "\2\u10fb\u10fc\7\u0204\2\2\u10fc\u10fe\5\u0274\u013b\2\u10fd\u10fb\3\2"+
                    "\2\2\u10fe\u1101\3\2\2\2\u10ff\u10fd\3\2\2\2\u10ff\u1100\3\2\2\2\u1100"+
                    "\u0251\3\2\2\2\u1101\u10ff\3\2\2\2\u1102\u1103\7\u01d0\2\2\u1103\u1107"+
                    "\7\u01fe\2\2\u1104\u1105\5\u0272\u013a\2\u1105\u1106\7\u0204\2\2\u1106"+
                    "\u1108\3\2\2\2\u1107\u1104\3\2\2\2\u1107\u1108\3\2\2\2\u1108\u1109\3\2"+
                    "\2\2\u1109\u110b\5\u0220\u0111\2\u110a\u110c\5\u026e\u0138\2\u110b\u110a"+
                    "\3\2\2\2\u110b\u110c\3\2\2\2\u110c\u110e\3\2\2\2\u110d\u110f\5\u0250\u0129"+
                    "\2\u110e\u110d\3\2\2\2\u110e\u110f\3\2\2\2\u110f\u1110\3\2\2\2\u1110\u1113"+
                    "\7\u01ff\2\2\u1111\u1112\7\u01f7\2\2\u1112\u1114\5\u02f2\u017a\2\u1113"+
                    "\u1111\3\2\2\2\u1113\u1114\3\2\2\2\u1114\u0253\3\2\2\2\u1115\u1116\5\u0256"+
                    "\u012c\2\u1116\u1118\5\u02de\u0170\2\u1117\u1119\5\u025c\u012f\2\u1118"+
                    "\u1117\3\2\2\2\u1118\u1119\3\2\2\2\u1119\u1236\3\2\2\2\u111a\u111b\5\u030a"+
                    "\u0186\2\u111b\u111d\5\u02e0\u0171\2\u111c\u111e\5\u0264\u0133\2\u111d"+
                    "\u111c\3\2\2\2\u111d\u111e\3\2\2\2\u111e\u1236\3\2\2\2\u111f\u1120\7U"+
                    "\2\2\u1120\u1126\7\u01fe\2\2\u1121\u1127\7\u0201\2\2\u1122\u1124\t\36"+
                    "\2\2\u1123\u1122\3\2\2\2\u1123\u1124\3\2\2\2\u1124\u1125\3\2\2\2\u1125"+
                    "\u1127\5\u0220\u0111\2\u1126\u1121\3\2\2\2\u1126\u1123\3\2\2\2\u1127\u1128"+
                    "\3\2\2\2\u1128\u112a\7\u01ff\2\2\u1129\u112b\5\u025c\u012f\2\u112a\u1129"+
                    "\3\2\2\2\u112a\u112b\3\2\2\2\u112b\u1236\3\2\2\2\u112c\u1236\5\u024e\u0128"+
                    "\2\u112d\u112e\7<\2\2\u112e\u112f\7\u01fe\2\2\u112f\u1130\5\u0220\u0111"+
                    "\2\u1130\u1131\7\u01ac\2\2\u1131\u1132\7\u00f5\2\2\u1132\u1133\7\u01ff"+
                    "\2\2\u1133\u1236\3\2\2\2\u1134\u1135\7@\2\2\u1135\u1137\7\u01fe\2\2\u1136"+
                    "\u1138\t\65\2\2\u1137\u1136\3\2\2\2\u1137\u1138\3\2\2\2\u1138\u1139\3"+
                    "\2\2\2\u1139\u113b\5\u0220\u0111\2\u113a\u113c\5\u0268\u0135\2\u113b\u113a"+
                    "\3\2\2\2\u113b\u113c\3\2\2\2\u113c\u113d\3\2\2\2\u113d\u113e\7\u01ff\2"+
                    "\2\u113e\u1236\3\2\2\2\u113f\u1140\5\u0258\u012d\2\u1140\u1142\5\u02dc"+
                    "\u016f\2\u1141\u1143\5\u026a\u0136\2\u1142\u1141\3\2\2\2\u1143\u1144\3"+
                    "\2\2\2\u1144\u1142\3\2\2\2\u1144\u1145\3\2\2\2\u1145\u1236\3\2\2\2\u1146"+
                    "\u1147\7i\2\2\u1147\u1148\7\u01fe\2\2\u1148\u114a\5\u0220\u0111\2\u1149"+
                    "\u114b\t\66\2\2\u114a\u1149\3\2\2\2\u114a\u114b\3\2\2\2\u114b\u114c\3"+
                    "\2\2\2\u114c\u114d\7\u01ff\2\2\u114d\u1236\3\2\2\2\u114e\u114f\7\u0093"+
                    "\2\2\u114f\u1150\7\u01fe\2\2\u1150\u1151\5\u030a\u0186\2\u1151\u1152\7"+
                    "\u00a0\2\2\u1152\u1153\5\u0220\u0111\2\u1153\u1154\7\u01ff\2\2\u1154\u1236"+
                    "\3\2\2\2\u1155\u1156\t\67\2\2\u1156\u1158\5\u02de\u0170\2\u1157\u1159"+
                    "\5\u02e2\u0172\2\u1158\u1157\3\2\2\2\u1158\u1159\3\2\2\2\u1159\u115a\3"+
                    "\2\2\2\u115a\u115b\5\u025c\u012f\2\u115b\u1236\3\2\2\2\u115c\u115d\5\u025a"+
                    "\u012e\2\u115d\u115e\7\u01fe\2\2\u115e\u1163\5\u0204\u0103\2\u115f\u1160"+
                    "\7\u0204\2\2\u1160\u1162\5\u0204\u0103\2\u1161\u115f\3\2\2\2\u1162\u1165"+
                    "\3\2\2\2\u1163\u1161\3\2\2\2\u1163\u1164\3\2\2\2\u1164\u1167\3\2\2\2\u1165"+
                    "\u1163\3\2\2\2\u1166\u1168\5\u026c\u0137\2\u1167\u1166\3\2\2\2\u1167\u1168"+
                    "\3\2\2\2\u1168\u116a\3\2\2\2\u1169\u116b\5\u0264\u0133\2\u116a\u1169\3"+
                    "\2\2\2\u116a\u116b\3\2\2\2\u116b\u116c\3\2\2\2\u116c\u116d\7\u01ff\2\2"+
                    "\u116d\u1236\3\2\2\2\u116e\u116f\7\u00e9\2\2\u116f\u1170\7\u01fe\2\2\u1170"+
                    "\u1171\5\u0202\u0102\2\u1171\u1172\7\u0204\2\2\u1172\u1173\5\u0202\u0102"+
                    "\2\u1173\u1174\7\u01ff\2\2\u1174\u1236\3\2\2\2\u1175\u1176\7\u0199\2\2"+
                    "\u1176\u1177\7\u01fe\2\2\u1177\u117a\5\u0204\u0103\2\u1178\u1179\7\u01ac"+
                    "\2\2\u1179\u117b\t8\2\2\u117a\u1178\3\2\2\2\u117a\u117b\3\2\2\2\u117b"+
                    "\u1180\3\2\2\2\u117c\u117d\7\u0204\2\2\u117d\u117f\5\u0204\u0103\2\u117e"+
                    "\u117c\3\2\2\2\u117f\u1182\3\2\2\2\u1180\u117e\3\2\2\2\u1180\u1181\3\2"+
                    "\2\2\u1181\u1183\3\2\2\2\u1182\u1180\3\2\2\2\u1183\u1184\7\u01ff\2\2\u1184"+
                    "\u1236\3\2\2\2\u1185\u1186\7\u019a\2\2\u1186\u1187\7\u01fe\2\2\u1187\u1188"+
                    "\5\u0204\u0103\2\u1188\u118a\7\25\2\2\u1189\u118b\7\u013e\2\2\u118a\u1189"+
                    "\3\2\2\2\u118a\u118b\3\2\2\2\u118b\u118c\3\2\2\2\u118c\u118d\5\u02e6\u0174"+
                    "\2\u118d\u118e\7\u01ff\2\2\u118e\u1236\3\2\2\2\u118f\u1190\7\u019c\2\2"+
                    "\u1190\u1198\7\u01fe\2\2\u1191\u1193\t9\2\2\u1192\u1191\3\2\2\2\u1192"+
                    "\u1193\3\2\2\2\u1193\u1195\3\2\2\2\u1194\u1196\5\u0204\u0103\2\u1195\u1194"+
                    "\3\2\2\2\u1195\u1196\3\2\2\2\u1196\u1197\3\2\2\2\u1197\u1199\7\u00a0\2"+
                    "\2\u1198\u1192\3\2\2\2\u1198\u1199\3\2\2\2\u1199\u119a\3\2\2\2\u119a\u119b"+
                    "\5\u0204\u0103\2\u119b\u119c\7\u01ff\2\2\u119c\u1236\3\2\2\2\u119d\u119e"+
                    "\7\u01c3\2\2\u119e\u119f\7\u01fe\2\2\u119f\u11a1\5\u0204\u0103\2\u11a0"+
                    "\u11a2\5\u01a8\u00d5\2\u11a1\u11a0\3\2\2\2\u11a1\u11a2\3\2\2\2\u11a2\u11a3"+
                    "\3\2\2\2\u11a3\u11a6\7\u01ff\2\2\u11a4\u11a5\7\u01f7\2\2\u11a5\u11a7\5"+
                    "\u02f2\u017a\2\u11a6\u11a4\3\2\2\2\u11a6\u11a7\3\2\2\2\u11a7\u1236\3\2"+
                    "\2\2\u11a8\u11a9\t:\2\2\u11a9\u11aa\7\u01fe\2\2\u11aa\u11af\5\u0278\u013d"+
                    "\2\u11ab\u11ac\7\u0204\2\2\u11ac\u11ae\5\u0278\u013d\2\u11ad\u11ab\3\2"+
                    "\2\2\u11ae\u11b1\3\2\2\2\u11af\u11ad\3\2\2\2\u11af\u11b0\3\2\2\2\u11b0"+
                    "\u11b2\3\2\2\2\u11b1\u11af\3\2\2\2\u11b2\u11b5\7\u01ff\2\2\u11b3\u11b4"+
                    "\7\u01f7\2\2\u11b4\u11b6\5\u02f2\u017a\2\u11b5\u11b3\3\2\2\2\u11b5\u11b6"+
                    "\3\2\2\2\u11b6\u1236\3\2\2\2\u11b7\u11b8\7\u01c7\2\2\u11b8\u11ba\7\u01fe"+
                    "\2\2\u11b9\u11bb\t;\2\2\u11ba\u11b9\3\2\2\2\u11ba\u11bb\3\2\2\2\u11bb"+
                    "\u11bd\3\2\2\2\u11bc\u11be\t<\2\2\u11bd\u11bc\3\2\2\2\u11bd\u11be\3\2"+
                    "\2\2\u11be\u11bf\3\2\2\2\u11bf\u11c2\5\u0204\u0103\2\u11c0\u11c1\7\u0204"+
                    "\2\2\u11c1\u11c3\5\u0270\u0139\2\u11c2\u11c0\3\2\2\2\u11c2\u11c3\3\2\2"+
                    "\2\u11c3\u11cb\3\2\2\2\u11c4\u11c5\7\u0204\2\2\u11c5\u11c7\5\u0204\u0103"+
                    "\2\u11c6\u11c8\5\u028c\u0147\2\u11c7\u11c6\3\2\2\2\u11c7\u11c8\3\2\2\2"+
                    "\u11c8\u11ca\3\2\2\2\u11c9\u11c4\3\2\2\2\u11ca\u11cd\3\2\2\2\u11cb\u11c9"+
                    "\3\2\2\2\u11cb\u11cc\3\2\2\2\u11cc\u11ce\3\2\2\2\u11cd\u11cb\3\2\2\2\u11ce"+
                    "\u11d1\7\u01ff\2\2\u11cf\u11d0\7\u01f7\2\2\u11d0\u11d2\5\u02f2\u017a\2"+
                    "\u11d1\u11cf\3\2\2\2\u11d1\u11d2\3\2\2\2\u11d2\u1236\3\2\2\2\u11d3\u11d4"+
                    "\7\u01c8\2\2\u11d4\u11d5\7\u01fe\2\2\u11d5\u11d7\5\u0204\u0103\2\u11d6"+
                    "\u11d8\5\u026e\u0138\2\u11d7\u11d6\3\2\2\2\u11d7\u11d8\3\2\2\2\u11d8\u11d9"+
                    "\3\2\2\2\u11d9\u11da\7\u01ff\2\2\u11da\u1236\3\2\2\2\u11db\u11dc\7\u01cb"+
                    "\2\2\u11dc\u11dd\7\u01fe\2\2\u11dd\u11de\t=\2\2\u11de\u11e0\5\u0220\u0111"+
                    "\2\u11df\u11e1\7\u01b9\2\2\u11e0\u11df\3\2\2\2\u11e0\u11e1\3\2\2\2\u11e1"+
                    "\u11e2\3\2\2\2\u11e2\u11e5\7\u01ff\2\2\u11e3\u11e4\7\u01f7\2\2\u11e4\u11e6"+
                    "\5\u02f2\u017a\2\u11e5\u11e3\3\2\2\2\u11e5\u11e6\3\2\2\2\u11e6\u1236\3"+
                    "\2\2\2\u11e7\u11e8\7\u01cc\2\2\u11e8\u11ed\7\u01fe\2\2\u11e9\u11ea\7\u00ef"+
                    "\2\2\u11ea\u11ee\5\u02fc\u017f\2\u11eb\u11ec\7\u0087\2\2\u11ec\u11ee\5"+
                    "\u0220\u0111\2\u11ed\u11e9\3\2\2\2\u11ed\u11eb\3\2\2\2\u11ee\u11f1\3\2"+
                    "\2\2\u11ef\u11f0\7\u0204\2\2\u11f0\u11f2\5\u0220\u0111\2\u11f1\u11ef\3"+
                    "\2\2\2\u11f1\u11f2\3\2\2\2\u11f2\u11f3\3\2\2\2\u11f3\u11f6\7\u01ff\2\2"+
                    "\u11f4\u11f5\7\u01f7\2\2\u11f5\u11f7\5\u02f2\u017a\2\u11f6\u11f4\3\2\2"+
                    "\2\u11f6\u11f7\3\2\2\2\u11f7\u1236\3\2\2\2\u11f8\u11f9\7\u01cd\2\2\u11f9"+
                    "\u11fa\7\u01fe\2\2\u11fa\u11fc\5\u0220\u0111\2\u11fb\u11fd\5\u026e\u0138"+
                    "\2\u11fc\u11fb\3\2\2\2\u11fc\u11fd\3\2\2\2\u11fd\u11fe\3\2\2\2\u11fe\u11ff"+
                    "\7\u014a\2\2\u11ff\u1203\7N\2\2\u1200\u1201\7\u0107\2\2\u1201\u1202\7"+
                    "\u0111\2\2\u1202\u1204\7\177\2\2\u1203\u1200\3\2\2\2\u1203\u1204\3\2\2"+
                    "\2\u1204\u1205\3\2\2\2\u1205\u1208\7\u01ff\2\2\u1206\u1207\7\u01f7\2\2"+
                    "\u1207\u1209\5\u02f2\u017a\2\u1208\u1206\3\2\2\2\u1208\u1209\3\2\2\2\u1209"+
                    "\u1236\3\2\2\2\u120a\u120b\7\u01ce\2\2\u120b\u120c\7\u01fe\2\2\u120c\u120f"+
                    "\5\u0220\u0111\2\u120d\u120e\7\u0204\2\2\u120e\u1210\5\u027a\u013e\2\u120f"+
                    "\u120d\3\2\2\2\u120f\u1210\3\2\2\2\u1210\u1213\3\2\2\2\u1211\u1212\7\u0204"+
                    "\2\2\u1212\u1214\5\u027c\u013f\2\u1213\u1211\3\2\2\2\u1213\u1214\3\2\2"+
                    "\2\u1214\u1215\3\2\2\2\u1215\u1218\7\u01ff\2\2\u1216\u1217\7\u01f7\2\2"+
                    "\u1217\u1219\5\u02f2\u017a\2\u1218\u1216\3\2\2\2\u1218\u1219\3\2\2\2\u1219"+
                    "\u1236\3\2\2\2\u121a\u121b\7\u01cf\2\2\u121b\u121c\7\u01fe\2\2\u121c\u121d"+
                    "\t=\2\2\u121d\u1220\5\u0220\u0111\2\u121e\u121f\7\25\2\2\u121f\u1221\5"+
                    "\u02e6\u0174\2\u1220\u121e\3\2\2\2\u1220\u1221\3\2\2\2\u1221\u1223\3\2"+
                    "\2\2\u1222\u1224\5\u027e\u0140\2\u1223\u1222\3\2\2\2\u1223\u1224\3\2\2"+
                    "\2\u1224\u1226\3\2\2\2\u1225\u1227\5\u0280\u0141\2\u1226\u1225\3\2\2\2"+
                    "\u1226\u1227\3\2\2\2\u1227\u1229\3\2\2\2\u1228\u122a\5\u0282\u0142\2\u1229"+
                    "\u1228\3\2\2\2\u1229\u122a\3\2\2\2\u122a\u122d\3\2\2\2\u122b\u122c\t>"+
                    "\2\2\u122c\u122e\7l\2\2\u122d\u122b\3\2\2\2\u122d\u122e\3\2\2\2\u122e"+
                    "\u122f\3\2\2\2\u122f\u1232\7\u01ff\2\2\u1230\u1231\7\u01f7\2\2\u1231\u1233"+
                    "\5\u02f2\u017a\2\u1232\u1230\3\2\2\2\u1232\u1233\3\2\2\2\u1233\u1236\3"+
                    "\2\2\2\u1234\u1236\5\u0252\u012a\2\u1235\u1115\3\2\2\2\u1235\u111a\3\2"+
                    "\2\2\u1235\u111f\3\2\2\2\u1235\u112c\3\2\2\2\u1235\u112d\3\2\2\2\u1235"+
                    "\u1134\3\2\2\2\u1235\u113f\3\2\2\2\u1235\u1146\3\2\2\2\u1235\u114e\3\2"+
                    "\2\2\u1235\u1155\3\2\2\2\u1235\u115c\3\2\2\2\u1235\u116e\3\2\2\2\u1235"+
                    "\u1175\3\2\2\2\u1235\u1185\3\2\2\2\u1235\u118f\3\2\2\2\u1235\u119d\3\2"+
                    "\2\2\u1235\u11a8\3\2\2\2\u1235\u11b7\3\2\2\2\u1235\u11d3\3\2\2\2\u1235"+
                    "\u11db\3\2\2\2\u1235\u11e7\3\2\2\2\u1235\u11f8\3\2\2\2\u1235\u120a\3\2"+
                    "\2\2\u1235\u121a\3\2\2\2\u1235\u1234\3\2\2\2\u1236\u0255\3\2\2\2\u1237"+
                    "\u1238\t?\2\2\u1238\u0257\3\2\2\2\u1239\u123a\t@\2\2\u123a\u0259\3\2\2"+
                    "\2\u123b\u123c\tA\2\2\u123c\u025b\3\2\2\2\u123d\u123e\7\u011c\2\2\u123e"+
                    "\u1240\7\u01fe\2\2\u123f\u1241\5\u0164\u00b3\2\u1240\u123f\3\2\2\2\u1240"+
                    "\u1241\3\2\2\2\u1241\u1246\3\2\2\2\u1242\u1244\5\u01a8\u00d5\2\u1243\u1245"+
                    "\5\u025e\u0130\2\u1244\u1243\3\2\2\2\u1244\u1245\3\2\2\2\u1245\u1247\3"+
                    "\2\2\2\u1246\u1242\3\2\2\2\u1246\u1247\3\2\2\2\u1247\u1248\3\2\2\2\u1248"+
                    "\u1249\7\u01ff\2\2\u1249\u025d\3\2\2\2\u124a\u1251\5\u0260\u0131\2\u124b"+
                    "\u124c\7#\2\2\u124c\u124d\5\u0262\u0132\2\u124d\u124e\7\22\2\2\u124e\u124f"+
                    "\5\u0262\u0132\2\u124f\u1252\3\2\2\2\u1250\u1252\5\u0262\u0132\2\u1251"+
                    "\u124b\3\2\2\2\u1251\u1250\3\2\2\2\u1252\u025f\3\2\2\2\u1253\u1254\tB"+
                    "\2\2\u1254\u0261\3\2\2\2\u1255\u1256\7\u01a0\2\2\u1256\u125d\7\u0133\2"+
                    "\2\u1257\u1258\7Y\2\2\u1258\u125d\7\u0151\2\2\u1259\u125a\5\u0220\u0111"+
                    "\2\u125a\u125b\tC\2\2\u125b\u125d\3\2\2\2\u125c\u1255\3\2\2\2\u125c\u1257"+
                    "\3\2\2\2\u125c\u1259\3\2\2\2\u125d\u0263\3\2\2\2\u125e\u1268\7\u01ac\2"+
                    "\2\u125f\u1269\7\u0201\2\2\u1260\u1265\5\u0266\u0134\2\u1261\u1262\7\u0204"+
                    "\2\2\u1262\u1264\5\u0266\u0134\2\u1263\u1261\3\2\2\2\u1264\u1267\3\2\2"+
                    "\2\u1265\u1263\3\2\2\2\u1265\u1266\3\2\2\2\u1266\u1269\3\2\2\2\u1267\u1265"+
                    "\3\2\2\2\u1268\u125f\3\2\2\2\u1268\u1260\3\2\2\2\u1269\u0265\3\2\2\2\u126a"+
                    "\u126c\7\u00ae\2\2\u126b\u126d\7\u011a\2\2\u126c\u126b\3\2\2\2\u126c\u126d"+
                    "\3\2\2\2\u126d\u1270\3\2\2\2\u126e\u1270";
    private static final String _serializedATNSegment2 =
            "\7\u011a\2\2\u126f\u126a\3\2\2\2\u126f\u126e\3\2\2\2\u126f\u1270\3\2\2"+
                    "\2\u1270\u1271\3\2\2\2\u1271\u1273\5\u0154\u00ab\2\u1272\u1274\5\u028c"+
                    "\u0147\2\u1273\u1272\3\2\2\2\u1273\u1274\3\2\2\2\u1274\u0267\3\2\2\2\u1275"+
                    "\u1276\7\u0117\2\2\u1276\u1277\7/\2\2\u1277\u1278\5\u0220\u0111\2\u1278"+
                    "\u0269\3\2\2\2\u1279\u127a\7\u01bf\2\2\u127a\u127b\7\u00a5\2\2\u127b\u127c"+
                    "\7\u01fe\2\2\u127c\u127d\5\u01a8\u00d5\2\u127d\u127e\7\u01ff\2\2\u127e"+
                    "\u1281\3\2\2\2\u127f\u1281\5\u025c\u012f\2\u1280\u1279\3\2\2\2\u1280\u127f"+
                    "\3\2\2\2\u1281\u026b\3\2\2\2\u1282\u1294\7T\2\2\u1283\u1285\7\u00eb\2"+
                    "\2\u1284\u1286\7\35\2\2\u1285\u1284\3\2\2\2\u1285\u1286\3\2\2\2\u1286"+
                    "\u1295\3\2\2\2\u1287\u1288\7\u01fe\2\2\u1288\u128d\5\u029c\u014f\2\u1289"+
                    "\u128a\7\u0204\2\2\u128a\u128c\5\u029c\u014f\2\u128b\u1289\3\2\2\2\u128c"+
                    "\u128f\3\2\2\2\u128d\u128b\3\2\2\2\u128d\u128e\3\2\2\2\u128e\u1290\3\2"+
                    "\2\2\u128f\u128d\3\2\2\2\u1290\u1291\7\u01ff\2\2\u1291\u1292\7\u01af\2"+
                    "\2\u1292\u1293\5\u01fc\u00ff\2\u1293\u1295\3\2\2\2\u1294\u1283\3\2\2\2"+
                    "\u1294\u1287\3\2\2\2\u1295\u026d\3\2\2\2\u1296\u1299\7\u0123\2\2\u1297"+
                    "\u1298\7/\2\2\u1298\u129a\7\u01ae\2\2\u1299\u1297\3\2\2\2\u1299\u129a"+
                    "\3\2\2\2\u129a\u129b\3\2\2\2\u129b\u129d\5\u0204\u0103\2\u129c\u129e\5"+
                    "\u028c\u0147\2\u129d\u129c\3\2\2\2\u129d\u129e\3\2\2\2\u129e\u12a6\3\2"+
                    "\2\2\u129f\u12a0\7\u0204\2\2\u12a0\u12a2\5\u0204\u0103\2\u12a1\u12a3\5"+
                    "\u028c\u0147\2\u12a2\u12a1\3\2\2\2\u12a2\u12a3\3\2\2\2\u12a3\u12a5\3\2"+
                    "\2\2\u12a4\u129f\3\2\2\2\u12a5\u12a8\3\2\2\2\u12a6\u12a4\3\2\2\2\u12a6"+
                    "\u12a7\3\2\2\2\u12a7\u026f\3\2\2\2\u12a8\u12a6\3\2\2\2\u12a9\u12aa\7\u01c4"+
                    "\2\2\u12aa\u12ac\7\u01fe\2\2\u12ab\u12ad\t;\2\2\u12ac\u12ab\3\2\2\2\u12ac"+
                    "\u12ad\3\2\2\2\u12ad\u12af\3\2\2\2\u12ae\u12b0\tD\2\2\u12af\u12ae\3\2"+
                    "\2\2\u12af\u12b0\3\2\2\2\u12b0\u12b1\3\2\2\2\u12b1\u12b6\5\u0278\u013d"+
                    "\2\u12b2\u12b3\7\u0204\2\2\u12b3\u12b5\5\u0278\u013d\2\u12b4\u12b2\3\2"+
                    "\2\2\u12b5\u12b8\3\2\2\2\u12b6\u12b4\3\2\2\2\u12b6\u12b7\3\2\2\2\u12b7"+
                    "\u12b9\3\2\2\2\u12b8\u12b6\3\2\2\2\u12b9\u12ba\7\u01ff\2\2\u12ba\u0271"+
                    "\3\2\2\2\u12bb\u12bc\7\u01ca\2\2\u12bc\u12c8\7\u01fe\2\2\u12bd\u12be\5"+
                    "\u0220\u0111\2\u12be\u12c5\5\u028c\u0147\2\u12bf\u12c0\7\u0204\2\2\u12c0"+
                    "\u12c1\5\u0220\u0111\2\u12c1\u12c2\5\u028c\u0147\2\u12c2\u12c4\3\2\2\2"+
                    "\u12c3\u12bf\3\2\2\2\u12c4\u12c7\3\2\2\2\u12c5\u12c3\3\2\2\2\u12c5\u12c6"+
                    "\3\2\2\2\u12c6\u12c9\3\2\2\2\u12c7\u12c5\3\2\2\2\u12c8\u12bd\3\2\2\2\u12c8"+
                    "\u12c9\3\2\2\2\u12c9\u12cb\3\2\2\2\u12ca\u12cc\5\u0276\u013c\2\u12cb\u12ca"+
                    "\3\2\2\2\u12cb\u12cc\3\2\2\2\u12cc\u12cd\3\2\2\2\u12cd\u12ce\7\u01ff\2"+
                    "\2\u12ce\u0273\3\2\2\2\u12cf\u12da\5\u029a\u014e\2\u12d0\u12d1\7\u009d"+
                    "\2\2\u12d1\u12db\7\u0118\2\2\u12d2\u12d5\5\u02e6\u0174\2\u12d3\u12d4\7"+
                    "\u0124\2\2\u12d4\u12d6\5\u0220\u0111\2\u12d5\u12d3\3\2\2\2\u12d5\u12d6"+
                    "\3\2\2\2\u12d6\u12d8\3\2\2\2\u12d7\u12d9\5\u0276\u013c\2\u12d8\u12d7\3"+
                    "\2\2\2\u12d8\u12d9\3\2\2\2\u12d9\u12db\3\2\2\2\u12da\u12d0\3\2\2\2\u12da"+
                    "\u12d2\3\2\2\2\u12db\u0275\3\2\2\2\u12dc\u12dd\7k\2\2\u12dd\u12de\5\u0220"+
                    "\u0111\2\u12de\u0277\3\2\2\2\u12df\u12e8\5\u0202\u0102\2\u12e0\u12e2\7"+
                    "\25\2\2\u12e1\u12e0\3\2\2\2\u12e1\u12e2\3\2\2\2\u12e2\u12e6\3\2\2\2\u12e3"+
                    "\u12e7\5\u02fe\u0180\2\u12e4\u12e5\7\u0087\2\2\u12e5\u12e7\5\u021e\u0110"+
                    "\2\u12e6\u12e3\3\2\2\2\u12e6\u12e4\3\2\2\2\u12e7\u12e9\3\2\2\2\u12e8\u12e1"+
                    "\3\2\2\2\u12e8\u12e9\3\2\2\2\u12e9\u0279\3\2\2\2\u12ea\u12ee\7\u01b5\2"+
                    "\2\u12eb\u12ec\7\u00fa\2\2\u12ec\u12ef\7\u01ae\2\2\u12ed\u12ef\5\u0204"+
                    "\u0103\2\u12ee\u12eb\3\2\2\2\u12ee\u12ed\3\2\2\2\u12ef\u027b\3\2\2\2\u12f0"+
                    "\u12f6\7\u017a\2\2\u12f1\u12f7\7\u01d2\2\2\u12f2\u12f4\7\u00fa\2\2\u12f3"+
                    "\u12f5\7\u01ae\2\2\u12f4\u12f3\3\2\2\2\u12f4\u12f5\3\2\2\2\u12f5\u12f7"+
                    "\3\2\2\2\u12f6\u12f1\3\2\2\2\u12f6\u12f2\3\2\2\2\u12f7\u027d\3\2\2\2\u12f8"+
                    "\u12f9\7\u0081\2\2\u12f9\u12fa\5\u0220\u0111\2\u12fa\u027f\3\2\2\2\u12fb"+
                    "\u12fc\7\u01b5\2\2\u12fc\u12fd\5\u0220\u0111\2\u12fd\u0281\3\2\2\2\u12fe"+
                    "\u12ff\7\u00fa\2\2\u12ff\u1307\7\u00b2\2\2\u1300\u1304\7\u00b2\2\2\u1301"+
                    "\u1302\7\u0171\2\2\u1302\u1303\7\u0215\2\2\u1303\u1305\5\u0220\u0111\2"+
                    "\u1304\u1301\3\2\2\2\u1304\u1305\3\2\2\2\u1305\u1307\3\2\2\2\u1306\u12fe"+
                    "\3\2\2\2\u1306\u1300\3\2\2\2\u1307\u0283\3\2\2\2\u1308\u1309\5\u0202\u0102"+
                    "\2\u1309\u0285\3\2\2\2\u130a\u130c\5\u00c4c\2\u130b\u130a\3\2\2\2\u130c"+
                    "\u130d\3\2\2\2\u130d\u130b\3\2\2\2\u130d\u130e\3\2\2\2\u130e\u1312\3\2"+
                    "\2\2\u130f\u1312\5\u00e4s\2\u1310\u1312\5\6\4\2\u1311\u130b\3\2\2\2\u1311"+
                    "\u130f\3\2\2\2\u1311\u1310\3\2\2\2\u1312\u0287\3\2\2\2\u1313\u1314\7\4"+
                    "\2\2\u1314\u1315\5\u0284\u0143\2\u1315\u1316\7\5\2\2\u1316\u131e\5\u0286"+
                    "\u0144\2\u1317\u1318\7\7\2\2\u1318\u1319\5\u0284\u0143\2\u1319\u131a\7"+
                    "\5\2\2\u131a\u131b\5\u0286\u0144\2\u131b\u131d\3\2\2\2\u131c\u1317\3\2"+
                    "\2\2\u131d\u1320\3\2\2\2\u131e\u131c\3\2\2\2\u131e\u131f\3\2\2\2\u131f"+
                    "\u1323\3\2\2\2\u1320\u131e\3\2\2\2\u1321\u1322\7\6\2\2\u1322\u1324\5\u0286"+
                    "\u0144\2\u1323\u1321\3\2\2\2\u1323\u1324\3\2\2\2\u1324\u1325\3\2\2\2\u1325"+
                    "\u1326\7\b\2\2\u1326\u0289\3\2\2\2\u1327\u1329\tE\2\2\u1328\u132a\7\u009d"+
                    "\2\2\u1329\u1328\3\2\2\2\u1329\u132a\3\2\2\2\u132a\u132b\3\2\2\2\u132b"+
                    "\u132c\5\u01fc\u00ff\2\u132c\u028b\3\2\2\2\u132d\u132f\7\25\2\2\u132e"+
                    "\u132d\3\2\2\2\u132e\u132f\3\2\2\2\u132f\u1332\3\2\2\2\u1330\u1333\5\u02fc"+
                    "\u017f\2\u1331\u1333\5\u0290\u0149\2\u1332\u1330\3\2\2\2\u1332\u1331\3"+
                    "\2\2\2\u1333\u028d\3\2\2\2\u1334\u1337\5\u02fc\u017f\2\u1335\u1337\5\u0290"+
                    "\u0149\2\u1336\u1334\3\2\2\2\u1336\u1335\3\2\2\2\u1337\u028f\3\2\2\2\u1338"+
                    "\u1339\5\u02fa\u017e\2\u1339\u0291\3\2\2\2\u133a\u133d\7\u01bc\2\2\u133b"+
                    "\u133e\5\u0294\u014b\2\u133c\u133e\5\u0200\u0101\2\u133d\u133b\3\2\2\2"+
                    "\u133d\u133c\3\2\2\2\u133e\u0293\3\2\2\2\u133f\u1340\7Y\2\2\u1340\u1341"+
                    "\7\u010d\2\2\u1341\u1342\5\u02cc\u0167\2\u1342\u0295\3\2\2\2\u1343\u1346"+
                    "\5\u02c8\u0165\2\u1344\u1346\5\u01f8\u00fd\2\u1345\u1343\3\2\2\2\u1345"+
                    "\u1344\3\2\2\2\u1346\u0297\3\2\2\2\u1347\u1348\7\u00c2\2\2\u1348\u134d"+
                    "\5\u0296\u014c\2\u1349\u134a\7\u0204\2\2\u134a\u134c\5\u0296\u014c\2\u134b"+
                    "\u1349\3\2\2\2\u134c\u134f\3\2\2\2\u134d\u134b\3\2\2\2\u134d\u134e\3\2"+
                    "\2\2\u134e\u135c\3\2\2\2\u134f\u134d\3\2\2\2\u1350\u1351\7.\2\2\u1351"+
                    "\u1352\7@\2\2\u1352\u1353\7\u00c2\2\2\u1353\u1358\5\u0296\u014c\2\u1354"+
                    "\u1355\7\u0204\2\2\u1355\u1357\5\u0296\u014c\2\u1356\u1354\3\2\2\2\u1357"+
                    "\u135a\3\2\2\2\u1358\u1356\3\2\2\2\u1358\u1359\3\2\2\2\u1359\u135c\3\2"+
                    "\2\2\u135a\u1358\3\2\2\2\u135b\u1347\3\2\2\2\u135b\u1350\3\2\2\2\u135c"+
                    "\u0299\3\2\2\2\u135d\u1360\5\u02fc\u017f\2\u135e\u1360\5\u02fa\u017e\2"+
                    "\u135f\u135d\3\2\2\2\u135f\u135e\3\2\2\2\u1360\u029b\3\2\2\2\u1361\u1362"+
                    "\5\u02fc\u017f\2\u1362\u029d\3\2\2\2\u1363\u1364\5\u02fc\u017f\2\u1364"+
                    "\u029f\3\2\2\2\u1365\u1366\5\u02fc\u017f\2\u1366\u02a1\3\2\2\2\u1367\u1368"+
                    "\5\u02fc\u017f\2\u1368\u02a3\3\2\2\2\u1369\u136a\5\u02fc\u017f\2\u136a"+
                    "\u02a5\3\2\2\2\u136b\u136c\5\u02fc\u017f\2\u136c\u02a7\3\2\2\2\u136d\u1372"+
                    "\5\u02fc\u017f\2\u136e\u136f\7\u01f7\2\2\u136f\u1371\5\u02fe\u0180\2\u1370"+
                    "\u136e\3\2\2\2\u1371\u1374\3\2\2\2\u1372\u1370\3\2\2\2\u1372\u1373\3\2"+
                    "\2\2\u1373\u1377\3\2\2\2\u1374\u1372\3\2\2\2\u1375\u1376\7\u0206\2\2\u1376"+
                    "\u1378\5\u02d2\u016a\2\u1377\u1375\3\2\2\2\u1377\u1378\3\2\2\2\u1378\u02a9"+
                    "\3\2\2\2\u1379\u137a\5\u02a6\u0154\2\u137a\u137b\7\u01f7\2\2\u137b\u137d"+
                    "\3\2\2\2\u137c\u1379\3\2\2\2\u137c\u137d\3\2\2\2\u137d\u137e\3\2\2\2\u137e"+
                    "\u137f\5\u02fc\u017f\2\u137f\u02ab\3\2\2\2\u1380\u1383\5\u02fc\u017f\2"+
                    "\u1381\u1382\7\u01f7\2\2\u1382\u1384\5\u02fe\u0180\2\u1383\u1381\3\2\2"+
                    "\2\u1383\u1384\3\2\2\2\u1384\u02ad\3\2\2\2\u1385\u1386\5\u02fc\u017f\2"+
                    "\u1386\u02af\3\2\2\2\u1387\u1388\5\u02fc\u017f\2\u1388\u02b1\3\2\2\2\u1389"+
                    "\u138a\5\u02fc\u017f\2\u138a\u02b3\3\2\2\2\u138b\u1390\5\u02fc\u017f\2"+
                    "\u138c\u138d\7\u01f7\2\2\u138d\u138f\5\u02fe\u0180\2\u138e\u138c\3\2\2"+
                    "\2\u138f\u1392\3\2\2\2\u1390\u138e\3\2\2\2\u1390\u1391\3\2\2\2\u1391\u02b5"+
                    "\3\2\2\2\u1392\u1390\3\2\2\2\u1393\u1394\5\u02fc\u017f\2\u1394\u02b7\3"+
                    "\2\2\2\u1395\u139a\5\u02fc\u017f\2\u1396\u1397\7\u01f7\2\2\u1397\u1399"+
                    "\5\u02fe\u0180\2\u1398\u1396\3\2\2\2\u1399\u139c\3\2\2\2\u139a\u1398\3"+
                    "\2\2\2\u139a\u139b\3\2\2\2\u139b\u139f\3\2\2\2\u139c\u139a\3\2\2\2\u139d"+
                    "\u139e\7\u0206\2\2\u139e\u13a0\5\u02d2\u016a\2\u139f\u139d\3\2\2\2\u139f"+
                    "\u13a0\3\2\2\2\u13a0\u02b9\3\2\2\2\u13a1\u13a2\5\u02fe\u0180\2\u13a2\u02bb"+
                    "\3\2\2\2\u13a3\u13a8\5\u02fe\u0180\2\u13a4\u13a5\7\u01f7\2\2\u13a5\u13a7"+
                    "\5\u02fe\u0180\2\u13a6\u13a4\3\2\2\2\u13a7\u13aa\3\2\2\2\u13a8\u13a6\3"+
                    "\2\2\2\u13a8\u13a9\3\2\2\2\u13a9\u02bd\3\2\2\2\u13aa\u13a8\3\2\2\2\u13ab"+
                    "\u13b0\5\u02fe\u0180\2\u13ac\u13ad\7\u01f7\2\2\u13ad\u13af\5\u02fe\u0180"+
                    "\2\u13ae\u13ac\3\2\2\2\u13af\u13b2\3\2\2\2\u13b0\u13ae\3\2\2\2\u13b0\u13b1"+
                    "\3\2\2\2\u13b1\u02bf\3\2\2\2\u13b2\u13b0\3\2\2\2\u13b3\u13b8\5\u02fc\u017f"+
                    "\2\u13b4\u13b5\7\u01f7\2\2\u13b5\u13b7\5\u02fe\u0180\2\u13b6\u13b4\3\2"+
                    "\2\2\u13b7\u13ba\3\2\2\2\u13b8\u13b6\3\2\2\2\u13b8\u13b9\3\2\2\2\u13b9"+
                    "\u02c1\3\2\2\2\u13ba\u13b8\3\2\2\2\u13bb\u13be\5\u02fc\u017f\2\u13bc\u13bd"+
                    "\7\u01f7\2\2\u13bd\u13bf\5\u02fe\u0180\2\u13be\u13bc\3\2\2\2\u13be\u13bf"+
                    "\3\2\2\2\u13bf\u02c3\3\2\2\2\u13c0\u13c3\5\u02fc\u017f\2\u13c1\u13c2\7"+
                    "\u01f7\2\2\u13c2\u13c4\5\u02fe\u0180\2\u13c3\u13c1\3\2\2\2\u13c3\u13c4"+
                    "\3\2\2\2\u13c4\u02c5\3\2\2\2\u13c5\u13c8\5\u02fc\u017f\2\u13c6\u13c7\7"+
                    "\u01f7\2\2\u13c7\u13c9\5\u02fe\u0180\2\u13c8\u13c6\3\2\2\2\u13c8\u13c9"+
                    "\3\2\2\2\u13c9\u02c7\3\2\2\2\u13ca\u13cb\7\u0218\2\2\u13cb\u13cd\5\u02d8"+
                    "\u016d\2\u13cc\u13ca\3\2\2\2\u13cc\u13cd\3\2\2\2\u13cd\u13ce\3\2\2\2\u13ce"+
                    "\u13d1\5\u02fe\u0180\2\u13cf\u13d0\7\u01f7\2\2\u13d0\u13d2\5\u02fe\u0180"+
                    "\2\u13d1\u13cf\3\2\2\2\u13d1\u13d2\3\2\2\2\u13d2\u13d5\3\2\2\2\u13d3\u13d5"+
                    "\5\u02ee\u0178\2\u13d4\u13cc\3\2\2\2\u13d4\u13d3\3\2\2\2\u13d5\u02c9\3"+
                    "\2\2\2\u13d6\u13d7\5\u02fc\u017f\2\u13d7\u02cb\3\2\2\2\u13d8\u13db\5\u02fc"+
                    "\u017f\2\u13d9\u13db\5\u02ee\u0178\2\u13da\u13d8\3\2\2\2\u13da\u13d9\3"+
                    "\2\2\2\u13db\u02cd\3\2\2\2\u13dc\u13df\5\u02fc\u017f\2\u13dd\u13df\5\u02ee"+
                    "\u0178\2\u13de\u13dc\3\2\2\2\u13de\u13dd\3\2\2\2\u13df\u02cf\3\2\2\2\u13e0"+
                    "\u13e3\5\u02fc\u017f\2\u13e1\u13e2\7\u01f7\2\2\u13e2\u13e4\5\u02fe\u0180"+
                    "\2\u13e3\u13e1\3\2\2\2\u13e3\u13e4\3\2\2\2\u13e4\u02d1\3\2\2\2\u13e5\u13ea"+
                    "\5\u02fc\u017f\2\u13e6\u13e7\7\u01f7\2\2\u13e7\u13e9\5\u02fc\u017f\2\u13e8"+
                    "\u13e6\3\2\2\2\u13e9\u13ec\3\2\2\2\u13ea\u13e8\3\2\2\2\u13ea\u13eb\3\2"+
                    "\2\2\u13eb\u02d3\3\2\2\2\u13ec\u13ea\3\2\2\2\u13ed\u13f2\5\u02fc\u017f"+
                    "\2\u13ee\u13ef\7\u01f7\2\2\u13ef\u13f1\5\u02fe\u0180\2\u13f0\u13ee\3\2"+
                    "\2\2\u13f1\u13f4\3\2\2\2\u13f2\u13f0\3\2\2\2\u13f2\u13f3\3\2\2\2\u13f3"+
                    "\u02d5\3\2\2\2\u13f4\u13f2\3\2\2\2\u13f5\u13f8\5\u02fc\u017f\2\u13f6\u13f7"+
                    "\7\u01f7\2\2\u13f7\u13f9\5\u02fe\u0180\2\u13f8\u13f6\3\2\2\2\u13f8\u13f9"+
                    "\3\2\2\2\u13f9\u13fd\3\2\2\2\u13fa\u13fb\7\u0206\2\2\u13fb\u13fe\5\u02d2"+
                    "\u016a\2\u13fc\u13fe\5\u028a\u0146\2\u13fd\u13fa\3\2\2\2\u13fd\u13fc\3"+
                    "\2\2\2\u13fd\u13fe\3\2\2\2\u13fe\u02d7\3\2\2\2\u13ff\u1404\5\u02fe\u0180"+
                    "\2\u1400\u1401\7\u01f7\2\2\u1401\u1403\5\u02fe\u0180\2\u1402\u1400\3\2"+
                    "\2\2\u1403\u1406\3\2\2\2\u1404\u1402\3\2\2\2\u1404\u1405\3\2\2\2\u1405"+
                    "\u02d9\3\2\2\2\u1406\u1404\3\2\2\2\u1407\u1408\7\u00c9\2\2\u1408\u1409"+
                    "\7\u01fe\2\2\u1409\u140a\7\u01dc\2\2\u140a\u140b\t)\2\2\u140b\u140c\5"+
                    "\u01a8\u00d5\2\u140c\u140e\7\u01ff\2\2\u140d\u140f\5\u025c\u012f\2\u140e"+
                    "\u140d\3\2\2\2\u140e\u140f\3\2\2\2\u140f\u02db\3\2\2\2\u1410\u1412\7\u01fe"+
                    "\2\2\u1411\u1413\5\u02e4\u0173\2\u1412\u1411\3\2\2\2\u1412\u1413\3\2\2"+
                    "\2\u1413\u1418\3\2\2\2\u1414\u1415\7\u0204\2\2\u1415\u1417\5\u02e4\u0173"+
                    "\2\u1416\u1414\3\2\2\2\u1417\u141a\3\2\2\2\u1418\u1416\3\2\2\2\u1418\u1419"+
                    "\3\2\2\2\u1419\u141b\3\2\2\2\u141a\u1418\3\2\2\2\u141b\u141d\7\u01ff\2"+
                    "\2\u141c\u141e\5\u02da\u016e\2\u141d\u141c\3\2\2\2\u141d\u141e\3\2\2\2"+
                    "\u141e\u02dd\3\2\2\2\u141f\u1424\7\u01fe\2\2\u1420\u1422\5\u02e4\u0173"+
                    "\2\u1421\u1423\5\u02e2\u0172\2\u1422\u1421\3\2\2\2\u1422\u1423\3\2\2\2"+
                    "\u1423\u1425\3\2\2\2\u1424\u1420\3\2\2\2\u1424\u1425\3\2\2\2\u1425\u142d"+
                    "\3\2\2\2\u1426\u1427\7\u0204\2\2\u1427\u1429\5\u02e4\u0173\2\u1428\u142a"+
                    "\5\u02e2\u0172\2\u1429\u1428\3\2\2\2\u1429\u142a\3\2\2\2\u142a\u142c\3"+
                    "\2\2\2\u142b\u1426\3\2\2\2\u142c\u142f\3\2\2\2\u142d\u142b\3\2\2\2\u142d"+
                    "\u142e\3\2\2\2\u142e\u1430\3\2\2\2\u142f\u142d\3\2\2\2\u1430\u1432\7\u01ff"+
                    "\2\2\u1431\u1433\5\u02da\u016e\2\u1432\u1431\3\2\2\2\u1432\u1433\3\2\2"+
                    "\2\u1433\u02df\3\2\2\2\u1434\u1435\7\u01fe\2\2\u1435\u1442\5\u02d4\u016b"+
                    "\2\u1436\u1439\7\u0204\2\2\u1437\u143a\5\u02f8\u017d\2\u1438\u143a\7\u0107"+
                    "\2\2\u1439\u1437\3\2\2\2\u1439\u1438\3\2\2\2\u143a\u1440\3\2\2\2\u143b"+
                    "\u143e\7\u0204\2\2\u143c\u143f\5\u02f8\u017d\2\u143d\u143f\7\u0107\2\2"+
                    "\u143e\u143c\3\2\2\2\u143e\u143d\3\2\2\2\u143f\u1441\3\2\2\2\u1440\u143b"+
                    "\3\2\2\2\u1440\u1441\3\2\2\2\u1441\u1443\3\2\2\2\u1442\u1436\3\2\2\2\u1442"+
                    "\u1443\3\2\2\2\u1443\u1444\3\2\2\2\u1444\u1458\7\u01ac\2\2\u1445\u1446"+
                    "\5\u02d6\u016c\2\u1446\u1447\7\u01f7\2\2\u1447\u1448\7\u0201\2\2\u1448"+
                    "\u1459\3\2\2\2\u1449\u1459\7\u0201\2\2\u144a\u144c\5\u0202\u0102\2\u144b"+
                    "\u144d\5\u028c\u0147\2\u144c\u144b\3\2\2\2\u144c\u144d\3\2\2\2\u144d\u1455"+
                    "\3\2\2\2\u144e\u144f\7\u0204\2\2\u144f\u1451\5\u0202\u0102\2\u1450\u1452"+
                    "\5\u028c\u0147\2\u1451\u1450\3\2\2\2\u1451\u1452\3\2\2\2\u1452\u1454\3"+
                    "\2\2\2\u1453\u144e\3\2\2\2\u1454\u1457\3\2\2\2\u1455\u1453\3\2\2\2\u1455"+
                    "\u1456\3\2\2\2\u1456\u1459\3\2\2\2\u1457\u1455\3\2\2\2\u1458\u1445\3\2"+
                    "\2\2\u1458\u1449\3\2\2\2\u1458\u144a\3\2\2\2\u1459\u145a\3\2\2\2\u145a"+
                    "\u145c\7\u01ff\2\2\u145b\u145d\5\u02da\u016e\2\u145c\u145b\3\2\2\2\u145c"+
                    "\u145d\3\2\2\2\u145d\u02e1\3\2\2\2\u145e\u145f\tF\2\2\u145f\u1460\7\u0108"+
                    "\2\2\u1460\u02e3\3\2\2\2\u1461\u1462\5\u02fc\u017f\2\u1462\u1463\7\30"+
                    "\2\2\u1463\u1465\3\2\2\2\u1464\u1461\3\2\2\2\u1464\u1465\3\2\2\2\u1465"+
                    "\u1466\3\2\2\2\u1466\u1467\5\u0204\u0103\2\u1467\u02e5\3\2\2\2\u1468\u1475"+
                    "\5\u02e8\u0175\2\u1469\u146b\7\u013e\2\2\u146a\u1469\3\2\2\2\u146a\u146b"+
                    "\3\2\2\2\u146b\u146c\3\2\2\2\u146c\u146f\5\u02bc\u015f\2\u146d\u146e\7"+
                    "\u0206\2\2\u146e\u1470\5\u02d2\u016a\2\u146f\u146d\3\2\2\2\u146f\u1470"+
                    "\3\2\2\2\u1470\u1472\3\2\2\2\u1471\u1473\tG\2\2\u1472\u1471\3\2\2\2\u1472"+
                    "\u1473\3\2\2\2\u1473\u1475\3\2\2\2\u1474\u1468\3\2\2\2\u1474\u146a\3\2"+
                    "\2\2\u1475\u02e7\3\2\2\2\u1476\u1478\5\u02ec\u0177\2\u1477\u1479\5\u02ea"+
                    "\u0176\2\u1478\u1477\3\2\2\2\u1478\u1479\3\2\2\2\u1479\u1480\3\2\2\2\u147a"+
                    "\u147c\7\u01be\2\2\u147b\u147d\7\u00d6\2\2\u147c\u147b\3\2\2\2\u147c\u147d"+
                    "\3\2\2\2\u147d\u147e\3\2\2\2\u147e\u147f\7\u018b\2\2\u147f\u1481\7\u01d4"+
                    "\2\2\u1480\u147a\3\2\2\2\u1480\u1481\3\2\2\2\u1481\u1493\3\2\2\2\u1482"+
                    "\u1483\7\u00c1\2\2\u1483\u1488\tH\2\2\u1484\u1485\7\u01fe\2\2\u1485\u1486"+
                    "\5\u0204\u0103\2\u1486\u1487\7\u01ff\2\2\u1487\u1489\3\2\2\2\u1488\u1484"+
                    "\3\2\2\2\u1488\u1489\3\2\2\2\u1489\u148a\3\2\2\2\u148a\u148b\7\u0194\2"+
                    "\2\u148b\u1490\tI\2\2\u148c\u148d\7\u01fe\2\2\u148d\u148e\5\u0204\u0103"+
                    "\2\u148e\u148f\7\u01ff\2\2\u148f\u1491\3\2\2\2\u1490\u148c\3\2\2\2\u1490"+
                    "\u1491\3\2\2\2\u1491\u1493\3\2\2\2\u1492\u1476\3\2\2\2\u1492\u1482\3\2"+
                    "\2\2\u1493\u02e9\3\2\2\2\u1494\u1495\7\u01fe\2\2\u1495\u1498\5\u02f8\u017d"+
                    "\2\u1496\u1497\7\u0204\2\2\u1497\u1499\5\u02f8\u017d\2\u1498\u1496\3\2"+
                    "\2\2\u1498\u1499\3\2\2\2\u1499\u149b\3\2\2\2\u149a\u149c\tJ\2\2\u149b"+
                    "\u149a\3\2\2\2\u149b\u149c\3\2\2\2\u149c\u149d\3\2\2\2\u149d\u149e\7\u01ff"+
                    "\2\2\u149e\u02eb\3\2\2\2\u149f\u14dc\7\'\2\2\u14a0\u14dc\7\u012f\2\2\u14a1"+
                    "\u14dc\7\u00f1\2\2\u14a2\u14dc\7&\2\2\u14a3\u14dc\7%\2\2\u14a4\u14dc\7"+
                    "\u00f2\2\2\u14a5\u14dc\7\u0130\2\2\u14a6\u14dc\7\u0131\2\2\u14a7\u14dc"+
                    "\7\u016e\2\2\u14a8\u14dc\7\u016f\2\2\u14a9\u14dc\7\u010b\2\2\u14aa\u14dc"+
                    "\7f\2\2\u14ab\u14dc\7\u00bf\2\2\u14ac\u14dc\7\u00be\2\2\u14ad\u14dc\7"+
                    "\u010a\2\2\u14ae\u14dc\7\u0173\2\2\u14af\u14dc\7\u0109\2\2\u14b0\u14dc"+
                    "\7g\2\2\u14b1\u14b3\7x\2\2\u14b2\u14b4\7\u0134\2\2\u14b3\u14b2\3\2\2\2"+
                    "\u14b3\u14b4\3\2\2\2\u14b4\u14dc\3\2\2\2\u14b5\u14dc\7\u009a\2\2\u14b6"+
                    "\u14dc\7\u013c\2\2\u14b7\u14dc\7\u00f4\2\2\u14b8\u14ba\7\u00dc\2\2\u14b9"+
                    "\u14bb\7\u013a\2\2\u14ba\u14b9\3\2\2\2\u14ba\u14bb\3\2\2\2\u14bb\u14dc"+
                    "\3\2\2\2\u14bc\u14dc\78\2\2\u14bd\u14dc\7:\2\2\u14be\u14dc\7\u01b1\2\2"+
                    "\u14bf\u14dc\7\u01b0\2\2\u14c0\u14dc\7\u0181\2\2\u14c1\u14dc\7\u013a\2"+
                    "\2\u14c2\u14dc\7+\2\2\u14c3\u14dc\7`\2\2\u14c4\u14dc\7\u0152\2\2\u14c5"+
                    "\u14dc\7\u01aa\2\2\u14c6\u14dc\7\u01d1\2\2\u14c7\u14dc\7\u00ed\2\2\u14c8"+
                    "\u14dc\7a\2\2\u14c9\u14dc\7\u00aa\2\2\u14ca\u14dc\7\u00e6\2\2\u14cb\u14dc"+
                    "\7\u015c\2\2\u14cc\u14dc\7\u0191\2\2\u14cd\u14dc\7\u0192\2\2\u14ce\u14dc"+
                    "\7\u0193\2\2\u14cf\u14dc\7\u0190\2\2\u14d0\u14dc\7\u018c\2\2\u14d1\u14dc"+
                    "\7\u018f\2\2\u14d2\u14dc\7\u018e\2\2\u14d3\u14dc\7\u018d\2\2\u14d4\u14dc"+
                    "\7\u01d3\2\2\u14d5\u14dc\7z\2\2\u14d6\u14dc\7$\2\2\u14d7\u14dc\7(\2\2"+
                    "\u14d8\u14dc\7=\2\2\u14d9\u14dc\7\u00f6\2\2\u14da\u14dc\7\u00e8\2\2\u14db"+
                    "\u149f\3\2\2\2\u14db\u14a0\3\2\2\2\u14db\u14a1\3\2\2\2\u14db\u14a2\3\2"+
                    "\2\2\u14db\u14a3\3\2\2\2\u14db\u14a4\3\2\2\2\u14db\u14a5\3\2\2\2\u14db"+
                    "\u14a6\3\2\2\2\u14db\u14a7\3\2\2\2\u14db\u14a8\3\2\2\2\u14db\u14a9\3\2"+
                    "\2\2\u14db\u14aa\3\2\2\2\u14db\u14ab\3\2\2\2\u14db\u14ac\3\2\2\2\u14db"+
                    "\u14ad\3\2\2\2\u14db\u14ae\3\2\2\2\u14db\u14af\3\2\2\2\u14db\u14b0\3\2"+
                    "\2\2\u14db\u14b1\3\2\2\2\u14db\u14b5\3\2\2\2\u14db\u14b6\3\2\2\2\u14db"+
                    "\u14b7\3\2\2\2\u14db\u14b8\3\2\2\2\u14db\u14bc\3\2\2\2\u14db\u14bd\3\2"+
                    "\2\2\u14db\u14be\3\2\2\2\u14db\u14bf\3\2\2\2\u14db\u14c0\3\2\2\2\u14db"+
                    "\u14c1\3\2\2\2\u14db\u14c2\3\2\2\2\u14db\u14c3\3\2\2\2\u14db\u14c4\3\2"+
                    "\2\2\u14db\u14c5\3\2\2\2\u14db\u14c6\3\2\2\2\u14db\u14c7\3\2\2\2\u14db"+
                    "\u14c8\3\2\2\2\u14db\u14c9\3\2\2\2\u14db\u14ca\3\2\2\2\u14db\u14cb\3\2"+
                    "\2\2\u14db\u14cc\3\2\2\2\u14db\u14cd\3\2\2\2\u14db\u14ce\3\2\2\2\u14db"+
                    "\u14cf\3\2\2\2\u14db\u14d0\3\2\2\2\u14db\u14d1\3\2\2\2\u14db\u14d2\3\2"+
                    "\2\2\u14db\u14d3\3\2\2\2\u14db\u14d4\3\2\2\2\u14db\u14d5\3\2\2\2\u14db"+
                    "\u14d6\3\2\2\2\u14db\u14d7\3\2\2\2\u14db\u14d8\3\2\2\2\u14db\u14d9\3\2"+
                    "\2\2\u14db\u14da\3\2\2\2\u14dc\u02ed\3\2\2\2\u14dd\u14e1\7\u0208\2\2\u14de"+
                    "\u14df\7\u0209\2\2\u14df\u14e1\7\u01f8\2\2\u14e0\u14dd\3\2\2\2\u14e0\u14de"+
                    "\3\2\2\2\u14e1\u14ea\3\2\2\2\u14e2\u14e4\7\u00b5\2\2\u14e3\u14e2\3\2\2"+
                    "\2\u14e3\u14e4\3\2\2\2\u14e4\u14e8\3\2\2\2\u14e5\u14e9\7\u0208\2\2\u14e6"+
                    "\u14e7\7\u0209\2\2\u14e7\u14e9\7\u01f8\2\2\u14e8\u14e5\3\2\2\2\u14e8\u14e6"+
                    "\3\2\2\2\u14e9\u14eb\3\2\2\2\u14ea\u14e3\3\2\2\2\u14ea\u14eb\3\2\2\2\u14eb"+
                    "\u14f0\3\2\2\2\u14ec\u14ed\7\u01f7\2\2\u14ed\u14ef\5\u02f2\u017a\2\u14ee"+
                    "\u14ec\3\2\2\2\u14ef\u14f2\3\2\2\2\u14f0\u14ee\3\2\2\2\u14f0\u14f1\3\2"+
                    "\2\2\u14f1\u02ef\3\2\2\2\u14f2\u14f0\3\2\2\2\u14f3\u14f8\5\u02f2\u017a"+
                    "\2\u14f4\u14f5\7\u01f7\2\2\u14f5\u14f7\5\u02f2\u017a\2\u14f6\u14f4\3\2"+
                    "\2\2\u14f7\u14fa\3\2\2\2\u14f8\u14f6\3\2\2\2\u14f8\u14f9\3\2\2\2\u14f9"+
                    "\u02f1\3\2\2\2\u14fa\u14f8\3\2\2\2\u14fb\u14fc\7\u0218\2\2\u14fc\u14fe"+
                    "\5\u02d8\u016d\2\u14fd\u14fb\3\2\2\2\u14fd\u14fe\3\2\2\2\u14fe\u14ff\3"+
                    "\2\2\2\u14ff\u1504\5\u02fe\u0180\2\u1500\u1501\7\u01f7\2\2\u1501\u1503"+
                    "\5\u02fe\u0180\2\u1502\u1500\3\2\2\2\u1503\u1506\3\2\2\2\u1504\u1502\3"+
                    "\2\2\2\u1504\u1505\3\2\2\2\u1505\u1508\3\2\2\2\u1506\u1504\3\2\2\2\u1507"+
                    "\u1509\5\u02dc\u016f\2\u1508\u1507\3\2\2\2\u1508\u1509\3\2\2\2\u1509\u02f3"+
                    "\3\2\2\2\u150a\u150b\7\u0218\2\2\u150b\u150d\5\u02d8\u016d\2\u150c\u150a"+
                    "\3\2\2\2\u150c\u150d\3\2\2\2\u150d\u150e\3\2\2\2\u150e\u1513\5\u02fe\u0180"+
                    "\2\u150f\u1510\7\u01f7\2\2\u1510\u1512\5\u02fe\u0180\2\u1511\u150f\3\2"+
                    "\2\2\u1512\u1515\3\2\2\2\u1513\u1511\3\2\2\2\u1513\u1514\3\2\2\2\u1514"+
                    "\u02f5\3\2\2\2\u1515\u1513\3\2\2\2\u1516\u1519\7\u018c\2\2\u1517\u151a"+
                    "\5\u02fa\u017e\2\u1518\u151a\5\u02ee\u0178\2\u1519\u1517\3\2\2\2\u1519"+
                    "\u1518\3\2\2\2\u151a\u151f\3\2\2\2\u151b\u151c\7\31\2\2\u151c\u151d\7"+
                    "\u018b\2\2\u151d\u151e\7\u01d4\2\2\u151e\u1520\5\u02fa\u017e\2\u151f\u151b"+
                    "\3\2\2\2\u151f\u1520\3\2\2\2\u1520\u1555\3\2\2\2\u1521\u1525\7\u00c1\2"+
                    "\2\u1522\u1526\5\u02fa\u017e\2\u1523\u1526\5\u02ee\u0178\2\u1524\u1526"+
                    "\5\u02f2\u017a\2\u1525\u1522\3\2\2\2\u1525\u1523\3\2\2\2\u1525\u1524\3"+
                    "\2\2\2\u1526\u1527\3\2\2\2\u1527\u1535\tK\2\2\u1528\u152b\7\u01fe\2\2"+
                    "\u1529\u152c\7\u01f8\2\2\u152a\u152c\5\u02ee\u0178\2\u152b\u1529\3\2\2"+
                    "\2\u152b\u152a\3\2\2\2\u152c\u1532\3\2\2\2\u152d\u1530\7\u0204\2\2\u152e"+
                    "\u1531\7\u01f8\2\2\u152f\u1531\5\u02ee\u0178\2\u1530\u152e\3\2\2\2\u1530"+
                    "\u152f\3\2\2\2\u1531\u1533\3\2\2\2\u1532\u152d\3\2\2\2\u1532\u1533\3\2"+
                    "\2\2\u1533\u1534\3\2\2\2\u1534\u1536\7\u01ff\2\2\u1535\u1528\3\2\2\2\u1535"+
                    "\u1536\3\2\2\2\u1536\u1546\3\2\2\2\u1537\u1544\7\u0194\2\2\u1538\u1545"+
                    "\7a\2\2\u1539\u1545\7\u00aa\2\2\u153a\u1545\7\u00e6\2\2\u153b\u1542\7"+
                    "\u015c\2\2\u153c\u153f\7\u01fe\2\2\u153d\u1540\7\u01f8\2\2\u153e\u1540"+
                    "\5\u02ee\u0178\2\u153f\u153d\3\2\2\2\u153f\u153e\3\2\2\2\u1540\u1541\3"+
                    "\2\2\2\u1541\u1543\7\u01ff\2\2\u1542\u153c\3\2\2\2\u1542\u1543\3\2\2\2"+
                    "\u1543\u1545\3\2\2\2\u1544\u1538\3\2\2\2\u1544\u1539\3\2\2\2\u1544\u153a"+
                    "\3\2\2\2\u1544\u153b\3\2\2\2\u1545\u1547\3\2\2\2\u1546\u1537\3\2\2\2\u1546"+
                    "\u1547\3\2\2\2\u1547\u1555\3\2\2\2\u1548\u1555\5\u02f8\u017d\2\u1549\u154a"+
                    "\7`\2\2\u154a\u1555\5\u02fa\u017e\2\u154b\u1555\5\u02fa\u017e\2\u154c"+
                    "\u1555\7\u0107\2\2\u154d\u1555\7\u019d\2\2\u154e\u1555\7\u0095\2\2\u154f"+
                    "\u1555\7c\2\2\u1550\u1555\7\u0166\2\2\u1551\u1555\7\u00e7\2\2\u1552\u1555"+
                    "\7\u00e1\2\2\u1553\u1555\7k\2\2\u1554\u1516\3\2\2\2\u1554\u1521\3\2\2"+
                    "\2\u1554\u1548\3\2\2\2\u1554\u1549\3\2\2\2\u1554\u154b\3\2\2\2\u1554\u154c"+
                    "\3\2\2\2\u1554\u154d\3\2\2\2\u1554\u154e\3\2\2\2\u1554\u154f\3\2\2\2\u1554"+
                    "\u1550\3\2\2\2\u1554\u1551\3\2\2\2\u1554\u1552\3\2\2\2\u1554\u1553\3\2"+
                    "\2\2\u1555\u02f7\3\2\2\2\u1556\u1557\tL\2\2\u1557\u02f9\3\2\2\2\u1558"+
                    "\u1559\tM\2\2\u1559\u02fb\3\2\2\2\u155a\u155b\7\u0218\2\2\u155b\u155d"+
                    "\5\u02d8\u016d\2\u155c\u155a\3\2\2\2\u155c\u155d\3\2\2\2\u155d\u155e\3"+
                    "\2\2\2\u155e\u155f\5\u02fe\u0180\2\u155f\u02fd\3\2\2\2\u1560\u1563\5\u030a"+
                    "\u0186\2\u1561\u1563\7\u01fb\2\2\u1562\u1560\3\2\2\2\u1562\u1561\3\2\2"+
                    "\2\u1563\u02ff\3\2\2\2\u1564\u156c\7\u020e\2\2\u1565\u1566\7\u020c\2\2"+
                    "\u1566\u156c\7\u0212\2\2\u1567\u1568\7\u0211\2\2\u1568\u156c\7\u0215\2"+
                    "\2\u1569\u156a\7\u020f\2\2\u156a\u156c\7\u0215\2\2\u156b\u1564\3\2\2\2"+
                    "\u156b\u1565\3\2\2\2\u156b\u1567\3\2\2\2\u156b\u1569\3\2\2\2\u156c\u0301"+
                    "\3\2\2\2\u156d\u1571\7\u020d\2\2\u156e\u156f\7\u0212\2\2\u156f\u1571\7"+
                    "\u0215\2\2\u1570\u156d\3\2\2\2\u1570\u156e\3\2\2\2\u1571\u0303\3\2\2\2"+
                    "\u1572\u1576\7\u020b\2\2\u1573\u1574\7\u020c\2\2\u1574\u1576\7\u0215\2"+
                    "\2\u1575\u1572\3\2\2\2\u1575\u1573\3\2\2\2\u1576\u0305\3\2\2\2\u1577\u157b"+
                    "\7\u0213\2\2\u1578\u1579\7\u0214\2\2\u1579\u157b\7\u0214\2\2\u157a\u1577"+
                    "\3\2\2\2\u157a\u1578\3\2\2\2\u157b\u0307\3\2\2\2\u157c\u157d\7\u01fe\2"+
                    "\2\u157d\u157e\7\u0202\2\2\u157e\u157f\7\u01ff\2\2\u157f\u0309\3\2\2\2"+
                    "\u1580\u1581\tN\2\2\u1581\u030b\3\2\2\2\u02d5\u030f\u0314\u031e\u0322"+
                    "\u0325\u0327\u032b\u0344\u034a\u0359\u035e\u0363\u036a\u036c\u0378\u037d"+
                    "\u0389\u038b\u0392\u0397\u0399\u039f\u03ad\u03b2\u03b5\u03bb\u03c4\u03d2"+
                    "\u03da\u03e4\u03e7\u03ec\u03f1\u03f8\u03fd\u0408\u040d\u0410\u0414\u0418"+
                    "\u041e\u0423\u042f\u043b\u0447\u044c\u0451\u0458\u045a\u0466\u046b\u046e"+
                    "\u0474\u047a\u047c\u048e\u0493\u0498\u049a\u04a1\u04a8\u04ab\u04ae\u04b1"+
                    "\u04bc\u04c8\u04cc\u04cf\u04d8\u04e0\u04e8\u04eb\u04f2\u04f6\u04fd\u0503"+
                    "\u052c\u0548\u054f\u0554\u055f\u0562\u056d\u0575\u0579\u0585\u0588\u058e"+
                    "\u0591\u0596\u059b\u059f\u05a9\u05b3\u05b9\u05c4\u05c9\u05cd\u05d5\u05dd"+
                    "\u05e2\u05e5\u05e7\u05ea\u05f3\u05f8\u05ff\u0602\u0605\u0609\u060c\u0614"+
                    "\u0619\u061e\u0625\u062f\u063f\u0645\u064f\u0659\u0662\u0668\u0672\u0677"+
                    "\u0680\u0686\u0689\u068c\u069d\u06a2\u06ad\u06b3\u06b6\u06bd\u06c0\u06c7"+
                    "\u06cc\u06d0\u06d5\u06da\u06e4\u06eb\u06f5\u06fa\u0701\u0708\u070c\u070f"+
                    "\u0712\u0723\u0728\u0731\u073f\u0746\u0756\u075f\u0761\u0776\u0786\u078f"+
                    "\u0794\u0798\u079b\u07a5\u07b1\u07b7\u07bf\u07c3\u07c6\u07d5\u07d9\u07de"+
                    "\u07e1\u07ee\u07f2\u07fe\u0803\u0807\u080b\u0811\u0814\u0817\u0825\u0835"+
                    "\u083b\u083f\u0845\u0851\u085a\u085c\u0862\u0866\u0869\u086f\u0874\u0876"+
                    "\u087c\u0887\u088b\u088e\u0892\u089a\u08a3\u08ad\u08af\u08d2\u08d7\u08de"+
                    "\u08e2\u08e6\u08ea\u08f6\u08fa\u0908\u090e\u0915\u091a\u0924\u092a\u092c"+
                    "\u0935\u093f\u0944\u0953\u0957\u095a\u095e\u0963\u0967\u0970\u0972\u0975"+
                    "\u097e\u0980\u0983\u098a\u098d\u098f\u099b\u09a3\u09aa\u09af\u09b7\u09be"+
                    "\u09c2\u09c5\u09d1\u09d7\u09df\u09e9\u09f4\u09fa\u09fc\u09fe\u0a05\u0a08"+
                    "\u0a0f\u0a1a\u0a20\u0a24\u0a2e\u0a31\u0a37\u0a42\u0a44\u0a46\u0a49\u0a4d"+
                    "\u0a50\u0a54\u0a58\u0a5d\u0a68\u0a6c\u0a74\u0a79\u0a7b\u0a84\u0a8e\u0a93"+
                    "\u0a99\u0a9d\u0aa0\u0aa8\u0aab\u0aaf\u0ab3\u0ab8\u0abb\u0abf\u0ac3\u0ac7"+
                    "\u0ad3\u0ae1\u0ae6\u0aea\u0af3\u0af6\u0afa\u0b02\u0b05\u0b08\u0b0c\u0b0f"+
                    "\u0b12\u0b15\u0b18\u0b1b\u0b1f\u0b29\u0b30\u0b37\u0b3c\u0b41\u0b48\u0b4e"+
                    "\u0b58\u0b5b\u0b60\u0b64\u0b67\u0b6a\u0b6e\u0b73\u0b77\u0b79\u0b86\u0b8d"+
                    "\u0b9b\u0b9e\u0ba8\u0bac\u0bb4\u0bc0\u0bca\u0bcf\u0bd9\u0be1\u0be4\u0bea"+
                    "\u0bee\u0bf3\u0bfd\u0c02\u0c0f\u0c1b\u0c20\u0c2a\u0c2f\u0c31\u0c36\u0c3a"+
                    "\u0c40\u0c44\u0c51\u0c55\u0c5f\u0c62\u0c64\u0c69\u0c72\u0c7f\u0c87\u0c90"+
                    "\u0c94\u0c99\u0ca4\u0ca6\u0cb6\u0cbb\u0cc1\u0cc7\u0cd9\u0ce0\u0ce3\u0ceb"+
                    "\u0cf4\u0cf6\u0cfa\u0cfd\u0d02\u0d04\u0d08\u0d14\u0d1d\u0d25\u0d2a\u0d2e"+
                    "\u0d33\u0d36\u0d3e\u0d46\u0d4c\u0d4f\u0d52\u0d5a\u0d64\u0d70\u0d77\u0d7b"+
                    "\u0d7f\u0d82\u0d85\u0d8a\u0d8f\u0d92\u0d95\u0d9b\u0d9e\u0da4\u0da7\u0daa"+
                    "\u0daf\u0db2\u0dba\u0dc0\u0dca\u0dcf\u0dd5\u0ddb\u0de5\u0de9\u0deb\u0dee"+
                    "\u0dfa\u0dfe\u0e01\u0e15\u0e1a\u0e1f\u0e26\u0e29\u0e32\u0e39\u0e3e\u0e42"+
                    "\u0e4a\u0e50\u0e58\u0e5b\u0e63\u0e6b\u0e6e\u0e71\u0e7a\u0e80\u0e86\u0e88"+
                    "\u0e95\u0e97\u0ea0\u0ea2\u0ea6\u0eac\u0eb0\u0ec9\u0ed4\u0ed9\u0f01\u0f05"+
                    "\u0f0b\u0f19\u0f23\u0f29\u0f2f\u0f3a\u0f3e\u0f45\u0f4a\u0f4e\u0f52\u0f57"+
                    "\u0f5d\u0f62\u0f66\u0f6a\u0f6e\u0f70\u0f7b\u0f80\u0f85\u0f8e\u0f90\u0f92"+
                    "\u0f95\u0fa6\u0fae\u0fba\u0fc4\u0fcc\u0fd5\u0fd8\u0fdf\u0fe7\u0fee\u0ff2"+
                    "\u0ff9\u0ffd\u1002\u1006\u100e\u1012\u1019\u1022\u1030\u103d\u1042\u1058"+
                    "\u105c\u105f\u1066\u1069\u106d\u1070\u1077\u107a\u1080\u1083\u1087\u108a"+
                    "\u1091\u1096\u10a4\u10aa\u10ad\u10b1\u10b9\u10c7\u10cc\u10d5\u10e1\u10e6"+
                    "\u10f0\u10f7\u10ff\u1107\u110b\u110e\u1113\u1118\u111d\u1123\u1126\u112a"+
                    "\u1137\u113b\u1144\u114a\u1158\u1163\u1167\u116a\u117a\u1180\u118a\u1192"+
                    "\u1195\u1198\u11a1\u11a6\u11af\u11b5\u11ba\u11bd\u11c2\u11c7\u11cb\u11d1"+
                    "\u11d7\u11e0\u11e5\u11ed\u11f1\u11f6\u11fc\u1203\u1208\u120f\u1213\u1218"+
                    "\u1220\u1223\u1226\u1229\u122d\u1232\u1235\u1240\u1244\u1246\u1251\u125c"+
                    "\u1265\u1268\u126c\u126f\u1273\u1280\u1285\u128d\u1294\u1299\u129d\u12a2"+
                    "\u12a6\u12ac\u12af\u12b6\u12c5\u12c8\u12cb\u12d5\u12d8\u12da\u12e1\u12e6"+
                    "\u12e8\u12ee\u12f4\u12f6\u1304\u1306\u130d\u1311\u131e\u1323\u1329\u132e"+
                    "\u1332\u1336\u133d\u1345\u134d\u1358\u135b\u135f\u1372\u1377\u137c\u1383"+
                    "\u1390\u139a\u139f\u13a8\u13b0\u13b8\u13be\u13c3\u13c8\u13cc\u13d1\u13d4"+
                    "\u13da\u13de\u13e3\u13ea\u13f2\u13f8\u13fd\u1404\u140e\u1412\u1418\u141d"+
                    "\u1422\u1424\u1429\u142d\u1432\u1439\u143e\u1440\u1442\u144c\u1451\u1455"+
                    "\u1458\u145c\u1464\u146a\u146f\u1472\u1474\u1478\u147c\u1480\u1488\u1490"+
                    "\u1492\u1498\u149b\u14b3\u14ba\u14db\u14e0\u14e3\u14e8\u14ea\u14f0\u14f8"+
                    "\u14fd\u1504\u1508\u150c\u1513\u1519\u151f\u1525\u152b\u1530\u1532\u1535"+
                    "\u153f\u1542\u1544\u1546\u1554\u155c\u1562\u156b\u1570\u1575\u157a";
    public static final String _serializedATN = Utils.join(
            new String[] {
                    _serializedATNSegment0,
                    _serializedATNSegment1,
                    _serializedATNSegment2
            },
            ""
    );
    public static final ATN _ATN =
            new ATNDeserializer().deserialize(_serializedATN.toCharArray());
    static {
        _decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
        for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
            _decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
        }
    }
}